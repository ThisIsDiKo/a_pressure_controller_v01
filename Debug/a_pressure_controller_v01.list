
a_pressure_controller_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  080069e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005454  20000220  08006c00  00020220  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20005674  08006c00  00025674  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027187  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000548e  00000000  00000000  000473d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009160  00000000  00000000  0004c85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000eb8  00000000  00000000  000559c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012a0  00000000  00000000  00056878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a7c1  00000000  00000000  00057b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000575e  00000000  00000000  000622d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00067a37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003190  00000000  00000000  00067ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000220 	.word	0x20000220
 800020c:	00000000 	.word	0x00000000
 8000210:	080065fc 	.word	0x080065fc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000224 	.word	0x20000224
 800022c:	080065fc 	.word	0x080065fc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_llsr>:
 8000240:	40d0      	lsrs	r0, r2
 8000242:	1c0b      	adds	r3, r1, #0
 8000244:	40d1      	lsrs	r1, r2
 8000246:	469c      	mov	ip, r3
 8000248:	3a20      	subs	r2, #32
 800024a:	40d3      	lsrs	r3, r2
 800024c:	4318      	orrs	r0, r3
 800024e:	4252      	negs	r2, r2
 8000250:	4663      	mov	r3, ip
 8000252:	4093      	lsls	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4770      	bx	lr

08000258 <__aeabi_frsub>:
 8000258:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800025c:	e002      	b.n	8000264 <__addsf3>
 800025e:	bf00      	nop

08000260 <__aeabi_fsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000264 <__addsf3>:
 8000264:	0042      	lsls	r2, r0, #1
 8000266:	bf1f      	itttt	ne
 8000268:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800026c:	ea92 0f03 	teqne	r2, r3
 8000270:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000274:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000278:	d06a      	beq.n	8000350 <__addsf3+0xec>
 800027a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000282:	bfc1      	itttt	gt
 8000284:	18d2      	addgt	r2, r2, r3
 8000286:	4041      	eorgt	r1, r0
 8000288:	4048      	eorgt	r0, r1
 800028a:	4041      	eorgt	r1, r0
 800028c:	bfb8      	it	lt
 800028e:	425b      	neglt	r3, r3
 8000290:	2b19      	cmp	r3, #25
 8000292:	bf88      	it	hi
 8000294:	4770      	bxhi	lr
 8000296:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800029a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002a2:	bf18      	it	ne
 80002a4:	4240      	negne	r0, r0
 80002a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002b2:	bf18      	it	ne
 80002b4:	4249      	negne	r1, r1
 80002b6:	ea92 0f03 	teq	r2, r3
 80002ba:	d03f      	beq.n	800033c <__addsf3+0xd8>
 80002bc:	f1a2 0201 	sub.w	r2, r2, #1
 80002c0:	fa41 fc03 	asr.w	ip, r1, r3
 80002c4:	eb10 000c 	adds.w	r0, r0, ip
 80002c8:	f1c3 0320 	rsb	r3, r3, #32
 80002cc:	fa01 f103 	lsl.w	r1, r1, r3
 80002d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	d502      	bpl.n	80002dc <__addsf3+0x78>
 80002d6:	4249      	negs	r1, r1
 80002d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002e0:	d313      	bcc.n	800030a <__addsf3+0xa6>
 80002e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e6:	d306      	bcc.n	80002f6 <__addsf3+0x92>
 80002e8:	0840      	lsrs	r0, r0, #1
 80002ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ee:	f102 0201 	add.w	r2, r2, #1
 80002f2:	2afe      	cmp	r2, #254	; 0xfe
 80002f4:	d251      	bcs.n	800039a <__addsf3+0x136>
 80002f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fe:	bf08      	it	eq
 8000300:	f020 0001 	biceq.w	r0, r0, #1
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	4770      	bx	lr
 800030a:	0049      	lsls	r1, r1, #1
 800030c:	eb40 0000 	adc.w	r0, r0, r0
 8000310:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000314:	f1a2 0201 	sub.w	r2, r2, #1
 8000318:	d1ed      	bne.n	80002f6 <__addsf3+0x92>
 800031a:	fab0 fc80 	clz	ip, r0
 800031e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000322:	ebb2 020c 	subs.w	r2, r2, ip
 8000326:	fa00 f00c 	lsl.w	r0, r0, ip
 800032a:	bfaa      	itet	ge
 800032c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000330:	4252      	neglt	r2, r2
 8000332:	4318      	orrge	r0, r3
 8000334:	bfbc      	itt	lt
 8000336:	40d0      	lsrlt	r0, r2
 8000338:	4318      	orrlt	r0, r3
 800033a:	4770      	bx	lr
 800033c:	f092 0f00 	teq	r2, #0
 8000340:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000344:	bf06      	itte	eq
 8000346:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800034a:	3201      	addeq	r2, #1
 800034c:	3b01      	subne	r3, #1
 800034e:	e7b5      	b.n	80002bc <__addsf3+0x58>
 8000350:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000354:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000358:	bf18      	it	ne
 800035a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035e:	d021      	beq.n	80003a4 <__addsf3+0x140>
 8000360:	ea92 0f03 	teq	r2, r3
 8000364:	d004      	beq.n	8000370 <__addsf3+0x10c>
 8000366:	f092 0f00 	teq	r2, #0
 800036a:	bf08      	it	eq
 800036c:	4608      	moveq	r0, r1
 800036e:	4770      	bx	lr
 8000370:	ea90 0f01 	teq	r0, r1
 8000374:	bf1c      	itt	ne
 8000376:	2000      	movne	r0, #0
 8000378:	4770      	bxne	lr
 800037a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037e:	d104      	bne.n	800038a <__addsf3+0x126>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	bf28      	it	cs
 8000384:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000388:	4770      	bx	lr
 800038a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038e:	bf3c      	itt	cc
 8000390:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bxcc	lr
 8000396:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800039a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a2:	4770      	bx	lr
 80003a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a8:	bf16      	itet	ne
 80003aa:	4608      	movne	r0, r1
 80003ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003b0:	4601      	movne	r1, r0
 80003b2:	0242      	lsls	r2, r0, #9
 80003b4:	bf06      	itte	eq
 80003b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003ba:	ea90 0f01 	teqeq	r0, r1
 80003be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003c2:	4770      	bx	lr

080003c4 <__aeabi_ui2f>:
 80003c4:	f04f 0300 	mov.w	r3, #0
 80003c8:	e004      	b.n	80003d4 <__aeabi_i2f+0x8>
 80003ca:	bf00      	nop

080003cc <__aeabi_i2f>:
 80003cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003d0:	bf48      	it	mi
 80003d2:	4240      	negmi	r0, r0
 80003d4:	ea5f 0c00 	movs.w	ip, r0
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003e0:	4601      	mov	r1, r0
 80003e2:	f04f 0000 	mov.w	r0, #0
 80003e6:	e01c      	b.n	8000422 <__aeabi_l2f+0x2a>

080003e8 <__aeabi_ul2f>:
 80003e8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ec:	bf08      	it	eq
 80003ee:	4770      	bxeq	lr
 80003f0:	f04f 0300 	mov.w	r3, #0
 80003f4:	e00a      	b.n	800040c <__aeabi_l2f+0x14>
 80003f6:	bf00      	nop

080003f8 <__aeabi_l2f>:
 80003f8:	ea50 0201 	orrs.w	r2, r0, r1
 80003fc:	bf08      	it	eq
 80003fe:	4770      	bxeq	lr
 8000400:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000404:	d502      	bpl.n	800040c <__aeabi_l2f+0x14>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	ea5f 0c01 	movs.w	ip, r1
 8000410:	bf02      	ittt	eq
 8000412:	4684      	moveq	ip, r0
 8000414:	4601      	moveq	r1, r0
 8000416:	2000      	moveq	r0, #0
 8000418:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800041c:	bf08      	it	eq
 800041e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000422:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000426:	fabc f28c 	clz	r2, ip
 800042a:	3a08      	subs	r2, #8
 800042c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000430:	db10      	blt.n	8000454 <__aeabi_l2f+0x5c>
 8000432:	fa01 fc02 	lsl.w	ip, r1, r2
 8000436:	4463      	add	r3, ip
 8000438:	fa00 fc02 	lsl.w	ip, r0, r2
 800043c:	f1c2 0220 	rsb	r2, r2, #32
 8000440:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	eb43 0002 	adc.w	r0, r3, r2
 800044c:	bf08      	it	eq
 800044e:	f020 0001 	biceq.w	r0, r0, #1
 8000452:	4770      	bx	lr
 8000454:	f102 0220 	add.w	r2, r2, #32
 8000458:	fa01 fc02 	lsl.w	ip, r1, r2
 800045c:	f1c2 0220 	rsb	r2, r2, #32
 8000460:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000464:	fa21 f202 	lsr.w	r2, r1, r2
 8000468:	eb43 0002 	adc.w	r0, r3, r2
 800046c:	bf08      	it	eq
 800046e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000472:	4770      	bx	lr

08000474 <__aeabi_fmul>:
 8000474:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000478:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800047c:	bf1e      	ittt	ne
 800047e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000482:	ea92 0f0c 	teqne	r2, ip
 8000486:	ea93 0f0c 	teqne	r3, ip
 800048a:	d06f      	beq.n	800056c <__aeabi_fmul+0xf8>
 800048c:	441a      	add	r2, r3
 800048e:	ea80 0c01 	eor.w	ip, r0, r1
 8000492:	0240      	lsls	r0, r0, #9
 8000494:	bf18      	it	ne
 8000496:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800049a:	d01e      	beq.n	80004da <__aeabi_fmul+0x66>
 800049c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a8:	fba0 3101 	umull	r3, r1, r0, r1
 80004ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b4:	bf3e      	ittt	cc
 80004b6:	0049      	lslcc	r1, r1, #1
 80004b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004bc:	005b      	lslcc	r3, r3, #1
 80004be:	ea40 0001 	orr.w	r0, r0, r1
 80004c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c6:	2afd      	cmp	r2, #253	; 0xfd
 80004c8:	d81d      	bhi.n	8000506 <__aeabi_fmul+0x92>
 80004ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004d2:	bf08      	it	eq
 80004d4:	f020 0001 	biceq.w	r0, r0, #1
 80004d8:	4770      	bx	lr
 80004da:	f090 0f00 	teq	r0, #0
 80004de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004e2:	bf08      	it	eq
 80004e4:	0249      	lsleq	r1, r1, #9
 80004e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ee:	3a7f      	subs	r2, #127	; 0x7f
 80004f0:	bfc2      	ittt	gt
 80004f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004fa:	4770      	bxgt	lr
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	3a01      	subs	r2, #1
 8000506:	dc5d      	bgt.n	80005c4 <__aeabi_fmul+0x150>
 8000508:	f112 0f19 	cmn.w	r2, #25
 800050c:	bfdc      	itt	le
 800050e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000512:	4770      	bxle	lr
 8000514:	f1c2 0200 	rsb	r2, r2, #0
 8000518:	0041      	lsls	r1, r0, #1
 800051a:	fa21 f102 	lsr.w	r1, r1, r2
 800051e:	f1c2 0220 	rsb	r2, r2, #32
 8000522:	fa00 fc02 	lsl.w	ip, r0, r2
 8000526:	ea5f 0031 	movs.w	r0, r1, rrx
 800052a:	f140 0000 	adc.w	r0, r0, #0
 800052e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000532:	bf08      	it	eq
 8000534:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000538:	4770      	bx	lr
 800053a:	f092 0f00 	teq	r2, #0
 800053e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000542:	bf02      	ittt	eq
 8000544:	0040      	lsleq	r0, r0, #1
 8000546:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800054a:	3a01      	subeq	r2, #1
 800054c:	d0f9      	beq.n	8000542 <__aeabi_fmul+0xce>
 800054e:	ea40 000c 	orr.w	r0, r0, ip
 8000552:	f093 0f00 	teq	r3, #0
 8000556:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800055a:	bf02      	ittt	eq
 800055c:	0049      	lsleq	r1, r1, #1
 800055e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000562:	3b01      	subeq	r3, #1
 8000564:	d0f9      	beq.n	800055a <__aeabi_fmul+0xe6>
 8000566:	ea41 010c 	orr.w	r1, r1, ip
 800056a:	e78f      	b.n	800048c <__aeabi_fmul+0x18>
 800056c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000570:	ea92 0f0c 	teq	r2, ip
 8000574:	bf18      	it	ne
 8000576:	ea93 0f0c 	teqne	r3, ip
 800057a:	d00a      	beq.n	8000592 <__aeabi_fmul+0x11e>
 800057c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000580:	bf18      	it	ne
 8000582:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000586:	d1d8      	bne.n	800053a <__aeabi_fmul+0xc6>
 8000588:	ea80 0001 	eor.w	r0, r0, r1
 800058c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000590:	4770      	bx	lr
 8000592:	f090 0f00 	teq	r0, #0
 8000596:	bf17      	itett	ne
 8000598:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800059c:	4608      	moveq	r0, r1
 800059e:	f091 0f00 	teqne	r1, #0
 80005a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a6:	d014      	beq.n	80005d2 <__aeabi_fmul+0x15e>
 80005a8:	ea92 0f0c 	teq	r2, ip
 80005ac:	d101      	bne.n	80005b2 <__aeabi_fmul+0x13e>
 80005ae:	0242      	lsls	r2, r0, #9
 80005b0:	d10f      	bne.n	80005d2 <__aeabi_fmul+0x15e>
 80005b2:	ea93 0f0c 	teq	r3, ip
 80005b6:	d103      	bne.n	80005c0 <__aeabi_fmul+0x14c>
 80005b8:	024b      	lsls	r3, r1, #9
 80005ba:	bf18      	it	ne
 80005bc:	4608      	movne	r0, r1
 80005be:	d108      	bne.n	80005d2 <__aeabi_fmul+0x15e>
 80005c0:	ea80 0001 	eor.w	r0, r0, r1
 80005c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d0:	4770      	bx	lr
 80005d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005da:	4770      	bx	lr

080005dc <__aeabi_fdiv>:
 80005dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e4:	bf1e      	ittt	ne
 80005e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005ea:	ea92 0f0c 	teqne	r2, ip
 80005ee:	ea93 0f0c 	teqne	r3, ip
 80005f2:	d069      	beq.n	80006c8 <__aeabi_fdiv+0xec>
 80005f4:	eba2 0203 	sub.w	r2, r2, r3
 80005f8:	ea80 0c01 	eor.w	ip, r0, r1
 80005fc:	0249      	lsls	r1, r1, #9
 80005fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000602:	d037      	beq.n	8000674 <__aeabi_fdiv+0x98>
 8000604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000608:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800060c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000614:	428b      	cmp	r3, r1
 8000616:	bf38      	it	cc
 8000618:	005b      	lslcc	r3, r3, #1
 800061a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000622:	428b      	cmp	r3, r1
 8000624:	bf24      	itt	cs
 8000626:	1a5b      	subcs	r3, r3, r1
 8000628:	ea40 000c 	orrcs.w	r0, r0, ip
 800062c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000630:	bf24      	itt	cs
 8000632:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000636:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800063a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063e:	bf24      	itt	cs
 8000640:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000644:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000648:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800064c:	bf24      	itt	cs
 800064e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000652:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	bf18      	it	ne
 800065a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065e:	d1e0      	bne.n	8000622 <__aeabi_fdiv+0x46>
 8000660:	2afd      	cmp	r2, #253	; 0xfd
 8000662:	f63f af50 	bhi.w	8000506 <__aeabi_fmul+0x92>
 8000666:	428b      	cmp	r3, r1
 8000668:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800066c:	bf08      	it	eq
 800066e:	f020 0001 	biceq.w	r0, r0, #1
 8000672:	4770      	bx	lr
 8000674:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000678:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800067c:	327f      	adds	r2, #127	; 0x7f
 800067e:	bfc2      	ittt	gt
 8000680:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000684:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000688:	4770      	bxgt	lr
 800068a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068e:	f04f 0300 	mov.w	r3, #0
 8000692:	3a01      	subs	r2, #1
 8000694:	e737      	b.n	8000506 <__aeabi_fmul+0x92>
 8000696:	f092 0f00 	teq	r2, #0
 800069a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069e:	bf02      	ittt	eq
 80006a0:	0040      	lsleq	r0, r0, #1
 80006a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a6:	3a01      	subeq	r2, #1
 80006a8:	d0f9      	beq.n	800069e <__aeabi_fdiv+0xc2>
 80006aa:	ea40 000c 	orr.w	r0, r0, ip
 80006ae:	f093 0f00 	teq	r3, #0
 80006b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	bf02      	ittt	eq
 80006b8:	0049      	lsleq	r1, r1, #1
 80006ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006be:	3b01      	subeq	r3, #1
 80006c0:	d0f9      	beq.n	80006b6 <__aeabi_fdiv+0xda>
 80006c2:	ea41 010c 	orr.w	r1, r1, ip
 80006c6:	e795      	b.n	80005f4 <__aeabi_fdiv+0x18>
 80006c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006cc:	ea92 0f0c 	teq	r2, ip
 80006d0:	d108      	bne.n	80006e4 <__aeabi_fdiv+0x108>
 80006d2:	0242      	lsls	r2, r0, #9
 80006d4:	f47f af7d 	bne.w	80005d2 <__aeabi_fmul+0x15e>
 80006d8:	ea93 0f0c 	teq	r3, ip
 80006dc:	f47f af70 	bne.w	80005c0 <__aeabi_fmul+0x14c>
 80006e0:	4608      	mov	r0, r1
 80006e2:	e776      	b.n	80005d2 <__aeabi_fmul+0x15e>
 80006e4:	ea93 0f0c 	teq	r3, ip
 80006e8:	d104      	bne.n	80006f4 <__aeabi_fdiv+0x118>
 80006ea:	024b      	lsls	r3, r1, #9
 80006ec:	f43f af4c 	beq.w	8000588 <__aeabi_fmul+0x114>
 80006f0:	4608      	mov	r0, r1
 80006f2:	e76e      	b.n	80005d2 <__aeabi_fmul+0x15e>
 80006f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f8:	bf18      	it	ne
 80006fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fe:	d1ca      	bne.n	8000696 <__aeabi_fdiv+0xba>
 8000700:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000704:	f47f af5c 	bne.w	80005c0 <__aeabi_fmul+0x14c>
 8000708:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800070c:	f47f af3c 	bne.w	8000588 <__aeabi_fmul+0x114>
 8000710:	e75f      	b.n	80005d2 <__aeabi_fmul+0x15e>
 8000712:	bf00      	nop

08000714 <__gesf2>:
 8000714:	f04f 3cff 	mov.w	ip, #4294967295
 8000718:	e006      	b.n	8000728 <__cmpsf2+0x4>
 800071a:	bf00      	nop

0800071c <__lesf2>:
 800071c:	f04f 0c01 	mov.w	ip, #1
 8000720:	e002      	b.n	8000728 <__cmpsf2+0x4>
 8000722:	bf00      	nop

08000724 <__cmpsf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	f84d cd04 	str.w	ip, [sp, #-4]!
 800072c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000730:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000738:	bf18      	it	ne
 800073a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800073e:	d011      	beq.n	8000764 <__cmpsf2+0x40>
 8000740:	b001      	add	sp, #4
 8000742:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000746:	bf18      	it	ne
 8000748:	ea90 0f01 	teqne	r0, r1
 800074c:	bf58      	it	pl
 800074e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000752:	bf88      	it	hi
 8000754:	17c8      	asrhi	r0, r1, #31
 8000756:	bf38      	it	cc
 8000758:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800075c:	bf18      	it	ne
 800075e:	f040 0001 	orrne.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	d102      	bne.n	8000770 <__cmpsf2+0x4c>
 800076a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800076e:	d105      	bne.n	800077c <__cmpsf2+0x58>
 8000770:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000774:	d1e4      	bne.n	8000740 <__cmpsf2+0x1c>
 8000776:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800077a:	d0e1      	beq.n	8000740 <__cmpsf2+0x1c>
 800077c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop

08000784 <__aeabi_cfrcmple>:
 8000784:	4684      	mov	ip, r0
 8000786:	4608      	mov	r0, r1
 8000788:	4661      	mov	r1, ip
 800078a:	e7ff      	b.n	800078c <__aeabi_cfcmpeq>

0800078c <__aeabi_cfcmpeq>:
 800078c:	b50f      	push	{r0, r1, r2, r3, lr}
 800078e:	f7ff ffc9 	bl	8000724 <__cmpsf2>
 8000792:	2800      	cmp	r0, #0
 8000794:	bf48      	it	mi
 8000796:	f110 0f00 	cmnmi.w	r0, #0
 800079a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800079c <__aeabi_fcmpeq>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff fff4 	bl	800078c <__aeabi_cfcmpeq>
 80007a4:	bf0c      	ite	eq
 80007a6:	2001      	moveq	r0, #1
 80007a8:	2000      	movne	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmplt>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffea 	bl	800078c <__aeabi_cfcmpeq>
 80007b8:	bf34      	ite	cc
 80007ba:	2001      	movcc	r0, #1
 80007bc:	2000      	movcs	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmple>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffe0 	bl	800078c <__aeabi_cfcmpeq>
 80007cc:	bf94      	ite	ls
 80007ce:	2001      	movls	r0, #1
 80007d0:	2000      	movhi	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <__aeabi_fcmpge>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff ffd2 	bl	8000784 <__aeabi_cfrcmple>
 80007e0:	bf94      	ite	ls
 80007e2:	2001      	movls	r0, #1
 80007e4:	2000      	movhi	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_fcmpgt>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffc8 	bl	8000784 <__aeabi_cfrcmple>
 80007f4:	bf34      	ite	cc
 80007f6:	2001      	movcc	r0, #1
 80007f8:	2000      	movcs	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_f2iz>:
 8000800:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000804:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000808:	d30f      	bcc.n	800082a <__aeabi_f2iz+0x2a>
 800080a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800080e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000812:	d90d      	bls.n	8000830 <__aeabi_f2iz+0x30>
 8000814:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000820:	fa23 f002 	lsr.w	r0, r3, r2
 8000824:	bf18      	it	ne
 8000826:	4240      	negne	r0, r0
 8000828:	4770      	bx	lr
 800082a:	f04f 0000 	mov.w	r0, #0
 800082e:	4770      	bx	lr
 8000830:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000834:	d101      	bne.n	800083a <__aeabi_f2iz+0x3a>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	d105      	bne.n	8000846 <__aeabi_f2iz+0x46>
 800083a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800083e:	bf08      	it	eq
 8000840:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000844:	4770      	bx	lr
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	4770      	bx	lr

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b97a 	b.w	8000b58 <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	468c      	mov	ip, r1
 8000882:	460e      	mov	r6, r1
 8000884:	4604      	mov	r4, r0
 8000886:	9d08      	ldr	r5, [sp, #32]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d150      	bne.n	800092e <__udivmoddi4+0xb2>
 800088c:	428a      	cmp	r2, r1
 800088e:	4617      	mov	r7, r2
 8000890:	d96c      	bls.n	800096c <__udivmoddi4+0xf0>
 8000892:	fab2 fe82 	clz	lr, r2
 8000896:	f1be 0f00 	cmp.w	lr, #0
 800089a:	d00b      	beq.n	80008b4 <__udivmoddi4+0x38>
 800089c:	f1ce 0c20 	rsb	ip, lr, #32
 80008a0:	fa01 f60e 	lsl.w	r6, r1, lr
 80008a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008a8:	fa02 f70e 	lsl.w	r7, r2, lr
 80008ac:	ea4c 0c06 	orr.w	ip, ip, r6
 80008b0:	fa00 f40e 	lsl.w	r4, r0, lr
 80008b4:	0c3a      	lsrs	r2, r7, #16
 80008b6:	fbbc f9f2 	udiv	r9, ip, r2
 80008ba:	b2bb      	uxth	r3, r7
 80008bc:	fb02 cc19 	mls	ip, r2, r9, ip
 80008c0:	fb09 fa03 	mul.w	sl, r9, r3
 80008c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80008c8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80008cc:	45b2      	cmp	sl, r6
 80008ce:	d90a      	bls.n	80008e6 <__udivmoddi4+0x6a>
 80008d0:	19f6      	adds	r6, r6, r7
 80008d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80008d6:	f080 8125 	bcs.w	8000b24 <__udivmoddi4+0x2a8>
 80008da:	45b2      	cmp	sl, r6
 80008dc:	f240 8122 	bls.w	8000b24 <__udivmoddi4+0x2a8>
 80008e0:	f1a9 0902 	sub.w	r9, r9, #2
 80008e4:	443e      	add	r6, r7
 80008e6:	eba6 060a 	sub.w	r6, r6, sl
 80008ea:	fbb6 f0f2 	udiv	r0, r6, r2
 80008ee:	fb02 6610 	mls	r6, r2, r0, r6
 80008f2:	fb00 f303 	mul.w	r3, r0, r3
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	d909      	bls.n	8000914 <__udivmoddi4+0x98>
 8000900:	19e4      	adds	r4, r4, r7
 8000902:	f100 32ff 	add.w	r2, r0, #4294967295
 8000906:	f080 810b 	bcs.w	8000b20 <__udivmoddi4+0x2a4>
 800090a:	42a3      	cmp	r3, r4
 800090c:	f240 8108 	bls.w	8000b20 <__udivmoddi4+0x2a4>
 8000910:	3802      	subs	r0, #2
 8000912:	443c      	add	r4, r7
 8000914:	2100      	movs	r1, #0
 8000916:	1ae4      	subs	r4, r4, r3
 8000918:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800091c:	2d00      	cmp	r5, #0
 800091e:	d062      	beq.n	80009e6 <__udivmoddi4+0x16a>
 8000920:	2300      	movs	r3, #0
 8000922:	fa24 f40e 	lsr.w	r4, r4, lr
 8000926:	602c      	str	r4, [r5, #0]
 8000928:	606b      	str	r3, [r5, #4]
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0xc6>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d055      	beq.n	80009e2 <__udivmoddi4+0x166>
 8000936:	2100      	movs	r1, #0
 8000938:	e885 0041 	stmia.w	r5, {r0, r6}
 800093c:	4608      	mov	r0, r1
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f183 	clz	r1, r3
 8000946:	2900      	cmp	r1, #0
 8000948:	f040 808f 	bne.w	8000a6a <__udivmoddi4+0x1ee>
 800094c:	42b3      	cmp	r3, r6
 800094e:	d302      	bcc.n	8000956 <__udivmoddi4+0xda>
 8000950:	4282      	cmp	r2, r0
 8000952:	f200 80fc 	bhi.w	8000b4e <__udivmoddi4+0x2d2>
 8000956:	1a84      	subs	r4, r0, r2
 8000958:	eb66 0603 	sbc.w	r6, r6, r3
 800095c:	2001      	movs	r0, #1
 800095e:	46b4      	mov	ip, r6
 8000960:	2d00      	cmp	r5, #0
 8000962:	d040      	beq.n	80009e6 <__udivmoddi4+0x16a>
 8000964:	e885 1010 	stmia.w	r5, {r4, ip}
 8000968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096c:	b912      	cbnz	r2, 8000974 <__udivmoddi4+0xf8>
 800096e:	2701      	movs	r7, #1
 8000970:	fbb7 f7f2 	udiv	r7, r7, r2
 8000974:	fab7 fe87 	clz	lr, r7
 8000978:	f1be 0f00 	cmp.w	lr, #0
 800097c:	d135      	bne.n	80009ea <__udivmoddi4+0x16e>
 800097e:	2101      	movs	r1, #1
 8000980:	1bf6      	subs	r6, r6, r7
 8000982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000986:	fa1f f887 	uxth.w	r8, r7
 800098a:	fbb6 f2fc 	udiv	r2, r6, ip
 800098e:	fb0c 6612 	mls	r6, ip, r2, r6
 8000992:	fb08 f002 	mul.w	r0, r8, r2
 8000996:	0c23      	lsrs	r3, r4, #16
 8000998:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800099c:	42b0      	cmp	r0, r6
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x134>
 80009a0:	19f6      	adds	r6, r6, r7
 80009a2:	f102 33ff 	add.w	r3, r2, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x132>
 80009a8:	42b0      	cmp	r0, r6
 80009aa:	f200 80d2 	bhi.w	8000b52 <__udivmoddi4+0x2d6>
 80009ae:	461a      	mov	r2, r3
 80009b0:	1a36      	subs	r6, r6, r0
 80009b2:	fbb6 f0fc 	udiv	r0, r6, ip
 80009b6:	fb0c 6610 	mls	r6, ip, r0, r6
 80009ba:	fb08 f800 	mul.w	r8, r8, r0
 80009be:	b2a3      	uxth	r3, r4
 80009c0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x15c>
 80009c8:	19e4      	adds	r4, r4, r7
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x15a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80b9 	bhi.w	8000b48 <__udivmoddi4+0x2cc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80009e0:	e79c      	b.n	800091c <__udivmoddi4+0xa0>
 80009e2:	4629      	mov	r1, r5
 80009e4:	4628      	mov	r0, r5
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80009ee:	f1ce 0320 	rsb	r3, lr, #32
 80009f2:	fa26 f203 	lsr.w	r2, r6, r3
 80009f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80009fa:	fbb2 f1fc 	udiv	r1, r2, ip
 80009fe:	fa1f f887 	uxth.w	r8, r7
 8000a02:	fb0c 2211 	mls	r2, ip, r1, r2
 8000a06:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a0a:	fa20 f303 	lsr.w	r3, r0, r3
 8000a0e:	fb01 f908 	mul.w	r9, r1, r8
 8000a12:	4333      	orrs	r3, r6
 8000a14:	0c1e      	lsrs	r6, r3, #16
 8000a16:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a1a:	45b1      	cmp	r9, r6
 8000a1c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x1ba>
 8000a22:	19f6      	adds	r6, r6, r7
 8000a24:	f101 32ff 	add.w	r2, r1, #4294967295
 8000a28:	f080 808c 	bcs.w	8000b44 <__udivmoddi4+0x2c8>
 8000a2c:	45b1      	cmp	r9, r6
 8000a2e:	f240 8089 	bls.w	8000b44 <__udivmoddi4+0x2c8>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443e      	add	r6, r7
 8000a36:	eba6 0609 	sub.w	r6, r6, r9
 8000a3a:	fbb6 f0fc 	udiv	r0, r6, ip
 8000a3e:	fb0c 6210 	mls	r2, ip, r0, r6
 8000a42:	fb00 f908 	mul.w	r9, r0, r8
 8000a46:	b29e      	uxth	r6, r3
 8000a48:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a4c:	45b1      	cmp	r9, r6
 8000a4e:	d907      	bls.n	8000a60 <__udivmoddi4+0x1e4>
 8000a50:	19f6      	adds	r6, r6, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	d271      	bcs.n	8000b3c <__udivmoddi4+0x2c0>
 8000a58:	45b1      	cmp	r9, r6
 8000a5a:	d96f      	bls.n	8000b3c <__udivmoddi4+0x2c0>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443e      	add	r6, r7
 8000a60:	eba6 0609 	sub.w	r6, r6, r9
 8000a64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a68:	e78f      	b.n	800098a <__udivmoddi4+0x10e>
 8000a6a:	f1c1 0720 	rsb	r7, r1, #32
 8000a6e:	fa22 f807 	lsr.w	r8, r2, r7
 8000a72:	408b      	lsls	r3, r1
 8000a74:	ea48 0303 	orr.w	r3, r8, r3
 8000a78:	fa26 f407 	lsr.w	r4, r6, r7
 8000a7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000a80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a84:	fa1f fc83 	uxth.w	ip, r3
 8000a88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a8c:	408e      	lsls	r6, r1
 8000a8e:	fa20 f807 	lsr.w	r8, r0, r7
 8000a92:	fb09 fa0c 	mul.w	sl, r9, ip
 8000a96:	ea48 0806 	orr.w	r8, r8, r6
 8000a9a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000a9e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000aa2:	45a2      	cmp	sl, r4
 8000aa4:	fa02 f201 	lsl.w	r2, r2, r1
 8000aa8:	fa00 f601 	lsl.w	r6, r0, r1
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x244>
 8000aae:	18e4      	adds	r4, r4, r3
 8000ab0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab4:	d244      	bcs.n	8000b40 <__udivmoddi4+0x2c4>
 8000ab6:	45a2      	cmp	sl, r4
 8000ab8:	d942      	bls.n	8000b40 <__udivmoddi4+0x2c4>
 8000aba:	f1a9 0902 	sub.w	r9, r9, #2
 8000abe:	441c      	add	r4, r3
 8000ac0:	eba4 040a 	sub.w	r4, r4, sl
 8000ac4:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ac8:	fb0e 4410 	mls	r4, lr, r0, r4
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	fa1f f888 	uxth.w	r8, r8
 8000ad4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000ad8:	45a4      	cmp	ip, r4
 8000ada:	d907      	bls.n	8000aec <__udivmoddi4+0x270>
 8000adc:	18e4      	adds	r4, r4, r3
 8000ade:	f100 3eff 	add.w	lr, r0, #4294967295
 8000ae2:	d229      	bcs.n	8000b38 <__udivmoddi4+0x2bc>
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d927      	bls.n	8000b38 <__udivmoddi4+0x2bc>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	441c      	add	r4, r3
 8000aec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af0:	fba0 8902 	umull	r8, r9, r0, r2
 8000af4:	eba4 0c0c 	sub.w	ip, r4, ip
 8000af8:	45cc      	cmp	ip, r9
 8000afa:	46c2      	mov	sl, r8
 8000afc:	46ce      	mov	lr, r9
 8000afe:	d315      	bcc.n	8000b2c <__udivmoddi4+0x2b0>
 8000b00:	d012      	beq.n	8000b28 <__udivmoddi4+0x2ac>
 8000b02:	b155      	cbz	r5, 8000b1a <__udivmoddi4+0x29e>
 8000b04:	ebb6 030a 	subs.w	r3, r6, sl
 8000b08:	eb6c 060e 	sbc.w	r6, ip, lr
 8000b0c:	fa06 f707 	lsl.w	r7, r6, r7
 8000b10:	40cb      	lsrs	r3, r1
 8000b12:	431f      	orrs	r7, r3
 8000b14:	40ce      	lsrs	r6, r1
 8000b16:	602f      	str	r7, [r5, #0]
 8000b18:	606e      	str	r6, [r5, #4]
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b20:	4610      	mov	r0, r2
 8000b22:	e6f7      	b.n	8000914 <__udivmoddi4+0x98>
 8000b24:	4689      	mov	r9, r1
 8000b26:	e6de      	b.n	80008e6 <__udivmoddi4+0x6a>
 8000b28:	4546      	cmp	r6, r8
 8000b2a:	d2ea      	bcs.n	8000b02 <__udivmoddi4+0x286>
 8000b2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000b30:	eb69 0e03 	sbc.w	lr, r9, r3
 8000b34:	3801      	subs	r0, #1
 8000b36:	e7e4      	b.n	8000b02 <__udivmoddi4+0x286>
 8000b38:	4670      	mov	r0, lr
 8000b3a:	e7d7      	b.n	8000aec <__udivmoddi4+0x270>
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	e78f      	b.n	8000a60 <__udivmoddi4+0x1e4>
 8000b40:	4681      	mov	r9, r0
 8000b42:	e7bd      	b.n	8000ac0 <__udivmoddi4+0x244>
 8000b44:	4611      	mov	r1, r2
 8000b46:	e776      	b.n	8000a36 <__udivmoddi4+0x1ba>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	443c      	add	r4, r7
 8000b4c:	e744      	b.n	80009d8 <__udivmoddi4+0x15c>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0xe4>
 8000b52:	3a02      	subs	r2, #2
 8000b54:	443e      	add	r6, r7
 8000b56:	e72b      	b.n	80009b0 <__udivmoddi4+0x134>

08000b58 <__aeabi_idiv0>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_InitTick+0x3c>)
{
 8000b60:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b62:	7818      	ldrb	r0, [r3, #0]
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_InitTick+0x40>)
 8000b6e:	6810      	ldr	r0, [r2, #0]
 8000b70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b74:	f000 faee 	bl	8001154 <HAL_SYSTICK_Config>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	b958      	cbnz	r0, 8000b94 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	2d0f      	cmp	r5, #15
 8000b7e:	d809      	bhi.n	8000b94 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	4602      	mov	r2, r0
 8000b82:	4629      	mov	r1, r5
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 faa4 	bl	80010d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_InitTick+0x44>)
 8000b8e:	4620      	mov	r0, r4
 8000b90:	601d      	str	r5, [r3, #0]
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	2000004c 	.word	0x2000004c
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x20>)
{
 8000ba6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb2:	f000 fa7d 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f7ff ffd0 	bl	8000b5c <HAL_InitTick>
  HAL_MspInit();
 8000bbc:	f004 faaa 	bl	8005114 <HAL_MspInit>
}
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	bd08      	pop	{r3, pc}
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <HAL_IncTick+0x10>)
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_IncTick+0x14>)
 8000bcc:	6811      	ldr	r1, [r2, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200054f0 	.word	0x200054f0
 8000bdc:	20000000 	.word	0x20000000

08000be0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <HAL_GetTick+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200054f0 	.word	0x200054f0

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff6 	bl	8000be0 <HAL_GetTick>
 8000bf4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	4b04      	ldrne	r3, [pc, #16]	; (8000c0c <HAL_Delay+0x20>)
 8000bfc:	781b      	ldrbne	r3, [r3, #0]
 8000bfe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	1b40      	subs	r0, r0, r5
 8000c06:	4284      	cmp	r4, r0
 8000c08:	d8fa      	bhi.n	8000c00 <HAL_Delay+0x14>
  {
  }
}
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
 8000c0c:	20000000 	.word	0x20000000

08000c10 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_GetUID+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_GetUID+0x18>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetUID+0x1c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6083      	str	r3, [r0, #8]
 8000c22:	4770      	bx	lr
 8000c24:	1ffff7e8 	.word	0x1ffff7e8
 8000c28:	1ffff7ec 	.word	0x1ffff7ec
 8000c2c:	1ffff7f0 	.word	0x1ffff7f0

08000c30 <HAL_ADC_ConvCpltCallback>:
 8000c30:	4770      	bx	lr

08000c32 <HAL_ADC_LevelOutOfWindowCallback>:
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c34:	6803      	ldr	r3, [r0, #0]
{
 8000c36:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c38:	685a      	ldr	r2, [r3, #4]
{
 8000c3a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c3c:	0690      	lsls	r0, r2, #26
 8000c3e:	d527      	bpl.n	8000c90 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	0791      	lsls	r1, r2, #30
 8000c44:	d524      	bpl.n	8000c90 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c48:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c4a:	bf5e      	ittt	pl
 8000c4c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c4e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000c52:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c5a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c5e:	d110      	bne.n	8000c82 <HAL_ADC_IRQHandler+0x4e>
 8000c60:	68e2      	ldr	r2, [r4, #12]
 8000c62:	b972      	cbnz	r2, 8000c82 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	f022 0220 	bic.w	r2, r2, #32
 8000c6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c72:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c76:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c78:	bf5e      	ittt	pl
 8000c7a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c7c:	f043 0301 	orrpl.w	r3, r3, #1
 8000c80:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff ffd4 	bl	8000c30 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c88:	f06f 0212 	mvn.w	r2, #18
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	0610      	lsls	r0, r2, #24
 8000c96:	d530      	bpl.n	8000cfa <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	0751      	lsls	r1, r2, #29
 8000c9c:	d52d      	bpl.n	8000cfa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ca0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ca2:	bf5e      	ittt	pl
 8000ca4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000ca6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000caa:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000cb2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000cb6:	d00a      	beq.n	8000cce <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cb8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cba:	0550      	lsls	r0, r2, #21
 8000cbc:	d416      	bmi.n	8000cec <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cc4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cc8:	d110      	bne.n	8000cec <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cca:	68e2      	ldr	r2, [r4, #12]
 8000ccc:	b972      	cbnz	r2, 8000cec <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cdc:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ce0:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ce2:	bf5e      	ittt	pl
 8000ce4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000ce6:	f043 0301 	orrpl.w	r3, r3, #1
 8000cea:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cec:	4620      	mov	r0, r4
 8000cee:	f003 fe47 	bl	8004980 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cf2:	f06f 020c 	mvn.w	r2, #12
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	0652      	lsls	r2, r2, #25
 8000d00:	d50d      	bpl.n	8000d1e <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	07db      	lsls	r3, r3, #31
 8000d06:	d50a      	bpl.n	8000d1e <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d0a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d10:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d12:	f7ff ff8e 	bl	8000c32 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d16:	f06f 0201 	mvn.w	r2, #1
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	bd10      	pop	{r4, pc}

08000d20 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000d20:	2300      	movs	r3, #0
{ 
 8000d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000d24:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d074      	beq.n	8000e18 <HAL_ADC_ConfigChannel+0xf8>
 8000d2e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d30:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000d32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d36:	2d06      	cmp	r5, #6
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000d3e:	680c      	ldr	r4, [r1, #0]
 8000d40:	d825      	bhi.n	8000d8e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d42:	442b      	add	r3, r5
 8000d44:	251f      	movs	r5, #31
 8000d46:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000d48:	3b05      	subs	r3, #5
 8000d4a:	409d      	lsls	r5, r3
 8000d4c:	ea26 0505 	bic.w	r5, r6, r5
 8000d50:	fa04 f303 	lsl.w	r3, r4, r3
 8000d54:	432b      	orrs	r3, r5
 8000d56:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d58:	2c09      	cmp	r4, #9
 8000d5a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000d5e:	688d      	ldr	r5, [r1, #8]
 8000d60:	d92f      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d62:	2607      	movs	r6, #7
 8000d64:	4423      	add	r3, r4
 8000d66:	68d1      	ldr	r1, [r2, #12]
 8000d68:	3b1e      	subs	r3, #30
 8000d6a:	409e      	lsls	r6, r3
 8000d6c:	ea21 0106 	bic.w	r1, r1, r6
 8000d70:	fa05 f303 	lsl.w	r3, r5, r3
 8000d74:	430b      	orrs	r3, r1
 8000d76:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d78:	f1a4 0310 	sub.w	r3, r4, #16
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d92b      	bls.n	8000dd8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d8e:	2d0c      	cmp	r5, #12
 8000d90:	d80b      	bhi.n	8000daa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d92:	442b      	add	r3, r5
 8000d94:	251f      	movs	r5, #31
 8000d96:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d98:	3b23      	subs	r3, #35	; 0x23
 8000d9a:	409d      	lsls	r5, r3
 8000d9c:	ea26 0505 	bic.w	r5, r6, r5
 8000da0:	fa04 f303 	lsl.w	r3, r4, r3
 8000da4:	432b      	orrs	r3, r5
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	e7d6      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000daa:	442b      	add	r3, r5
 8000dac:	251f      	movs	r5, #31
 8000dae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000db0:	3b41      	subs	r3, #65	; 0x41
 8000db2:	409d      	lsls	r5, r3
 8000db4:	ea26 0505 	bic.w	r5, r6, r5
 8000db8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dbc:	432b      	orrs	r3, r5
 8000dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dc0:	e7ca      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dc2:	2607      	movs	r6, #7
 8000dc4:	6911      	ldr	r1, [r2, #16]
 8000dc6:	4423      	add	r3, r4
 8000dc8:	409e      	lsls	r6, r3
 8000dca:	ea21 0106 	bic.w	r1, r1, r6
 8000dce:	fa05 f303 	lsl.w	r3, r5, r3
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	6113      	str	r3, [r2, #16]
 8000dd6:	e7cf      	b.n	8000d78 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_ADC_ConfigChannel+0xfc>)
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d116      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dde:	6893      	ldr	r3, [r2, #8]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	d4cd      	bmi.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000de6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dec:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dee:	d1c7      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_ADC_ConfigChannel+0x100>)
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <HAL_ADC_ConfigChannel+0x104>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	4353      	muls	r3, r2
            wait_loop_index--;
 8000dfe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0bc      	beq.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000e06:	9b01      	ldr	r3, [sp, #4]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	e7f8      	b.n	8000dfe <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e7b4      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e7b5      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x68>
 8000e1c:	40012400 	.word	0x40012400
 8000e20:	2000004c 	.word	0x2000004c
 8000e24:	000f4240 	.word	0x000f4240

08000e28 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000e28:	2300      	movs	r3, #0
{
 8000e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e2c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2e:	6803      	ldr	r3, [r0, #0]
{
 8000e30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	07d2      	lsls	r2, r2, #31
 8000e36:	d502      	bpl.n	8000e3e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e38:	2000      	movs	r0, #0
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	f042 0201 	orr.w	r2, r2, #1
 8000e44:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <ADC_Enable+0x68>)
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <ADC_Enable+0x6c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000e50:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	b9c3      	cbnz	r3, 8000e88 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000e56:	f7ff fec3 	bl	8000be0 <HAL_GetTick>
 8000e5a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	689d      	ldr	r5, [r3, #8]
 8000e60:	f015 0501 	ands.w	r5, r5, #1
 8000e64:	d1e8      	bne.n	8000e38 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e66:	f7ff febb 	bl	8000be0 <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f5      	bls.n	8000e5c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000e72:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000e7e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e86:	e7d8      	b.n	8000e3a <ADC_Enable+0x12>
      wait_loop_index--;
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	e7e0      	b.n	8000e50 <ADC_Enable+0x28>
 8000e8e:	bf00      	nop
 8000e90:	2000004c 	.word	0x2000004c
 8000e94:	000f4240 	.word	0x000f4240

08000e98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e98:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e9a:	6803      	ldr	r3, [r0, #0]
{
 8000e9c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	07d2      	lsls	r2, r2, #31
 8000ea2:	d401      	bmi.n	8000ea8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fe96 	bl	8000be0 <HAL_GetTick>
 8000eb4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	07db      	lsls	r3, r3, #31
 8000ebc:	d5f2      	bpl.n	8000ea4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ebe:	f7ff fe8f 	bl	8000be0 <HAL_GetTick>
 8000ec2:	1b40      	subs	r0, r0, r5
 8000ec4:	2802      	cmp	r0, #2
 8000ec6:	d9f6      	bls.n	8000eb6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eda:	bd38      	pop	{r3, r4, r5, pc}

08000edc <HAL_ADC_Init>:
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000ede:	4604      	mov	r4, r0
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d071      	beq.n	8000fc8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ee6:	b923      	cbnz	r3, 8000ef2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000eea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000eee:	f004 f939 	bl	8005164 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff ffd0 	bl	8000e98 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000efa:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f00:	d164      	bne.n	8000fcc <HAL_ADC_Init+0xf0>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d162      	bne.n	8000fcc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f06:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f0c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	f023 0302 	bic.w	r3, r3, #2
 8000f12:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f16:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f18:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f1c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f22:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f26:	d038      	beq.n	8000f9a <HAL_ADC_Init+0xbe>
 8000f28:	2901      	cmp	r1, #1
 8000f2a:	bf14      	ite	ne
 8000f2c:	4606      	movne	r6, r0
 8000f2e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f32:	6965      	ldr	r5, [r4, #20]
 8000f34:	2d01      	cmp	r5, #1
 8000f36:	d107      	bne.n	8000f48 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d130      	bne.n	8000f9e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f3c:	69a3      	ldr	r3, [r4, #24]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000f44:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000f48:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f4a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000f4e:	685d      	ldr	r5, [r3, #4]
 8000f50:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000f54:	ea45 0506 	orr.w	r5, r5, r6
 8000f58:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f5a:	689e      	ldr	r6, [r3, #8]
 8000f5c:	4d1d      	ldr	r5, [pc, #116]	; (8000fd4 <HAL_ADC_Init+0xf8>)
 8000f5e:	ea05 0506 	and.w	r5, r5, r6
 8000f62:	ea45 0502 	orr.w	r5, r5, r2
 8000f66:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	d001      	beq.n	8000f6e <HAL_ADC_Init+0x92>
 8000f6a:	2901      	cmp	r1, #1
 8000f6c:	d120      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f6e:	6921      	ldr	r1, [r4, #16]
 8000f70:	3901      	subs	r1, #1
 8000f72:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000f74:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000f76:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000f7a:	4329      	orrs	r1, r5
 8000f7c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f7e:	6899      	ldr	r1, [r3, #8]
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_ADC_Init+0xfc>)
 8000f82:	400b      	ands	r3, r1
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d115      	bne.n	8000fb4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f9a:	460e      	mov	r6, r1
 8000f9c:	e7c9      	b.n	8000f32 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fae:	e7cb      	b.n	8000f48 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	e7df      	b.n	8000f74 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb6:	f023 0312 	bic.w	r3, r3, #18
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fd2:	e7f9      	b.n	8000fc8 <HAL_ADC_Init+0xec>
 8000fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fd8:	ff1f0efe 	.word	0xff1f0efe

08000fdc <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fdc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000fe0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000fe2:	2b01      	cmp	r3, #1
{
 8000fe4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000fe6:	d04e      	beq.n	8001086 <HAL_ADCEx_InjectedStart_IT+0xaa>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000fee:	f7ff ff1b 	bl	8000e28 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d143      	bne.n	800107e <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001006:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	4293      	cmp	r3, r2
 800100c:	d105      	bne.n	800101a <HAL_ADCEx_InjectedStart_IT+0x3e>
 800100e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001012:	6852      	ldr	r2, [r2, #4]
 8001014:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001018:	d129      	bne.n	800106e <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800101a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800101c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001020:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001022:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001024:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001028:	bf08      	it	eq
 800102a:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800102c:	2200      	movs	r2, #0
 800102e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001032:	f06f 0204 	mvn.w	r2, #4
 8001036:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103e:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	0552      	lsls	r2, r2, #21
 8001044:	d420      	bmi.n	8001088 <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800104c:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001050:	d111      	bne.n	8001076 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADCEx_InjectedStart_IT+0xb0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d105      	bne.n	8001064 <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001058:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800105c:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800105e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001062:	d108      	bne.n	8001076 <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001074:	e7d4      	b.n	8001020 <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107c:	e7f5      	b.n	800106a <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800107e:	2300      	movs	r3, #0
 8001080:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001084:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001086:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	40012800 	.word	0x40012800

08001090 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001090:	2903      	cmp	r1, #3
 8001092:	6803      	ldr	r3, [r0, #0]
 8001094:	d007      	beq.n	80010a6 <HAL_ADCEx_InjectedGetValue+0x16>
 8001096:	2904      	cmp	r1, #4
 8001098:	d003      	beq.n	80010a2 <HAL_ADCEx_InjectedGetValue+0x12>
 800109a:	2902      	cmp	r1, #2
 800109c:	d105      	bne.n	80010aa <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 800109e:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80010a0:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80010a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 80010a4:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80010a6:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 80010a8:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80010aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	0c1b      	lsrs	r3, r3, #16
 80010c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010cc:	60d3      	str	r3, [r2, #12]
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b530      	push	{r4, r5, lr}
 80010d8:	68dc      	ldr	r4, [r3, #12]
 80010da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	bf28      	it	cs
 80010e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f0:	bf98      	it	ls
 80010f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	fa05 f303 	lsl.w	r3, r5, r3
 80010f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fc:	bf88      	it	hi
 80010fe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4019      	ands	r1, r3
 8001102:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	fa05 f404 	lsl.w	r4, r5, r4
 8001108:	3c01      	subs	r4, #1
 800110a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800110c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110e:	ea42 0201 	orr.w	r2, r2, r1
 8001112:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	bfaf      	iteee	ge
 8001118:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	4b06      	ldrlt	r3, [pc, #24]	; (8001138 <HAL_NVIC_SetPriority+0x64>)
 800111e:	f000 000f 	andlt.w	r0, r0, #15
 8001122:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	bfa5      	ittet	ge
 8001126:	b2d2      	uxtbge	r2, r2
 8001128:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001132:	bd30      	pop	{r4, r5, pc}
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	e000ed14 	.word	0xe000ed14

0800113c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800113c:	2301      	movs	r3, #1
 800113e:	0942      	lsrs	r2, r0, #5
 8001140:	f000 001f 	and.w	r0, r0, #31
 8001144:	fa03 f000 	lsl.w	r0, r3, r0
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <HAL_NVIC_EnableIRQ+0x14>)
 800114a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	3801      	subs	r0, #1
 8001156:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800115a:	d20a      	bcs.n	8001172 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001180:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001182:	2800      	cmp	r0, #0
 8001184:	d032      	beq.n	80011ec <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001186:	6801      	ldr	r1, [r0, #0]
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_DMA_Init+0x70>)
 800118a:	2414      	movs	r4, #20
 800118c:	4299      	cmp	r1, r3
 800118e:	d825      	bhi.n	80011dc <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001192:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001196:	440a      	add	r2, r1
 8001198:	fbb2 f2f4 	udiv	r2, r2, r4
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a0:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 80011a2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80011a4:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80011a6:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80011a8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011aa:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011ac:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b0:	4323      	orrs	r3, r4
 80011b2:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ba:	6944      	ldr	r4, [r0, #20]
 80011bc:	4323      	orrs	r3, r4
 80011be:	6984      	ldr	r4, [r0, #24]
 80011c0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c2:	69c4      	ldr	r4, [r0, #28]
 80011c4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80011c6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011c8:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ca:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011cc:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80011ce:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d2:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011d4:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80011d8:	4618      	mov	r0, r3
 80011da:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_DMA_Init+0x78>)
 80011de:	440b      	add	r3, r1
 80011e0:	fbb3 f3f4 	udiv	r3, r3, r4
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_DMA_Init+0x7c>)
 80011ea:	e7d9      	b.n	80011a0 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
}
 80011ee:	bd10      	pop	{r4, pc}
 80011f0:	40020407 	.word	0x40020407
 80011f4:	bffdfff8 	.word	0xbffdfff8
 80011f8:	bffdfbf8 	.word	0xbffdfbf8
 80011fc:	40020400 	.word	0x40020400

08001200 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001202:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001206:	2c01      	cmp	r4, #1
 8001208:	d035      	beq.n	8001276 <HAL_DMA_Start_IT+0x76>
 800120a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800120c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001210:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001214:	42a5      	cmp	r5, r4
 8001216:	f04f 0600 	mov.w	r6, #0
 800121a:	f04f 0402 	mov.w	r4, #2
 800121e:	d128      	bne.n	8001272 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001220:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001224:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001228:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800122c:	f026 0601 	bic.w	r6, r6, #1
 8001230:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001232:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001234:	40bd      	lsls	r5, r7
 8001236:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001238:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800123a:	6843      	ldr	r3, [r0, #4]
 800123c:	6805      	ldr	r5, [r0, #0]
 800123e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001240:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001242:	bf0b      	itete	eq
 8001244:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001246:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001248:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800124a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800124c:	b14b      	cbz	r3, 8001262 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001254:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001256:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001258:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f043 030a 	orr.w	r3, r3, #10
 8001270:	e7f0      	b.n	8001254 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001272:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001276:	2002      	movs	r0, #2
}
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800127c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800127c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001280:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001282:	2b02      	cmp	r3, #2
 8001284:	d003      	beq.n	800128e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	2304      	movs	r3, #4
 8001288:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800128a:	2001      	movs	r0, #1
 800128c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	6803      	ldr	r3, [r0, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f022 020e 	bic.w	r2, r2, #14
 8001296:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_DMA_Abort_IT+0xcc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d924      	bls.n	80012f0 <HAL_DMA_Abort_IT+0x74>
 80012a6:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x66>
 80012ae:	3214      	adds	r2, #20
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x6a>
 80012b4:	3214      	adds	r2, #20
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d017      	beq.n	80012ea <HAL_DMA_Abort_IT+0x6e>
 80012ba:	3214      	adds	r2, #20
 80012bc:	4293      	cmp	r3, r2
 80012be:	bf0c      	ite	eq
 80012c0:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80012c4:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_DMA_Abort_IT+0xd0>)
 80012ca:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80012ce:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80012d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80012d6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012da:	b39b      	cbz	r3, 8001344 <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 80012dc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	4620      	mov	r0, r4
 80012e0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012e2:	2301      	movs	r3, #1
 80012e4:	e7f0      	b.n	80012c8 <HAL_DMA_Abort_IT+0x4c>
 80012e6:	2310      	movs	r3, #16
 80012e8:	e7ee      	b.n	80012c8 <HAL_DMA_Abort_IT+0x4c>
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	e7eb      	b.n	80012c8 <HAL_DMA_Abort_IT+0x4c>
 80012f0:	4917      	ldr	r1, [pc, #92]	; (8001350 <HAL_DMA_Abort_IT+0xd4>)
 80012f2:	428b      	cmp	r3, r1
 80012f4:	d016      	beq.n	8001324 <HAL_DMA_Abort_IT+0xa8>
 80012f6:	3114      	adds	r1, #20
 80012f8:	428b      	cmp	r3, r1
 80012fa:	d015      	beq.n	8001328 <HAL_DMA_Abort_IT+0xac>
 80012fc:	3114      	adds	r1, #20
 80012fe:	428b      	cmp	r3, r1
 8001300:	d014      	beq.n	800132c <HAL_DMA_Abort_IT+0xb0>
 8001302:	3114      	adds	r1, #20
 8001304:	428b      	cmp	r3, r1
 8001306:	d014      	beq.n	8001332 <HAL_DMA_Abort_IT+0xb6>
 8001308:	3114      	adds	r1, #20
 800130a:	428b      	cmp	r3, r1
 800130c:	d014      	beq.n	8001338 <HAL_DMA_Abort_IT+0xbc>
 800130e:	3114      	adds	r1, #20
 8001310:	428b      	cmp	r3, r1
 8001312:	d014      	beq.n	800133e <HAL_DMA_Abort_IT+0xc2>
 8001314:	4293      	cmp	r3, r2
 8001316:	bf14      	ite	ne
 8001318:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800131c:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_DMA_Abort_IT+0xd8>)
 8001322:	e7d2      	b.n	80012ca <HAL_DMA_Abort_IT+0x4e>
 8001324:	2301      	movs	r3, #1
 8001326:	e7fb      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
 8001328:	2310      	movs	r3, #16
 800132a:	e7f9      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
 800132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001330:	e7f6      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	e7f3      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	e7f0      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
 800133e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001342:	e7ed      	b.n	8001320 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	4618      	mov	r0, r3
}
 8001346:	bd10      	pop	{r4, pc}
 8001348:	40020080 	.word	0x40020080
 800134c:	40020400 	.word	0x40020400
 8001350:	40020008 	.word	0x40020008
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_DMA_IRQHandler>:
{
 8001358:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800135a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800135c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800135e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001360:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001362:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001364:	4095      	lsls	r5, r2
 8001366:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001368:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800136a:	d055      	beq.n	8001418 <HAL_DMA_IRQHandler+0xc0>
 800136c:	074d      	lsls	r5, r1, #29
 800136e:	d553      	bpl.n	8001418 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001374:	bf5e      	ittt	pl
 8001376:	681a      	ldrpl	r2, [r3, #0]
 8001378:	f022 0204 	bicpl.w	r2, r2, #4
 800137c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800137e:	4a60      	ldr	r2, [pc, #384]	; (8001500 <HAL_DMA_IRQHandler+0x1a8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d91f      	bls.n	80013c4 <HAL_DMA_IRQHandler+0x6c>
 8001384:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001388:	4293      	cmp	r3, r2
 800138a:	d014      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x5e>
 800138c:	3214      	adds	r2, #20
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_DMA_IRQHandler+0x62>
 8001392:	3214      	adds	r2, #20
 8001394:	4293      	cmp	r3, r2
 8001396:	d012      	beq.n	80013be <HAL_DMA_IRQHandler+0x66>
 8001398:	3214      	adds	r2, #20
 800139a:	4293      	cmp	r3, r2
 800139c:	bf0c      	ite	eq
 800139e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80013a2:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80013a6:	4a57      	ldr	r2, [pc, #348]	; (8001504 <HAL_DMA_IRQHandler+0x1ac>)
 80013a8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80013aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a5 	beq.w	80014fc <HAL_DMA_IRQHandler+0x1a4>
}
 80013b2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80013b4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013b6:	2304      	movs	r3, #4
 80013b8:	e7f5      	b.n	80013a6 <HAL_DMA_IRQHandler+0x4e>
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	e7f3      	b.n	80013a6 <HAL_DMA_IRQHandler+0x4e>
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	e7f0      	b.n	80013a6 <HAL_DMA_IRQHandler+0x4e>
 80013c4:	4950      	ldr	r1, [pc, #320]	; (8001508 <HAL_DMA_IRQHandler+0x1b0>)
 80013c6:	428b      	cmp	r3, r1
 80013c8:	d016      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xa0>
 80013ca:	3114      	adds	r1, #20
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d015      	beq.n	80013fc <HAL_DMA_IRQHandler+0xa4>
 80013d0:	3114      	adds	r1, #20
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d014      	beq.n	8001400 <HAL_DMA_IRQHandler+0xa8>
 80013d6:	3114      	adds	r1, #20
 80013d8:	428b      	cmp	r3, r1
 80013da:	d014      	beq.n	8001406 <HAL_DMA_IRQHandler+0xae>
 80013dc:	3114      	adds	r1, #20
 80013de:	428b      	cmp	r3, r1
 80013e0:	d014      	beq.n	800140c <HAL_DMA_IRQHandler+0xb4>
 80013e2:	3114      	adds	r1, #20
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d014      	beq.n	8001412 <HAL_DMA_IRQHandler+0xba>
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf14      	ite	ne
 80013ec:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80013f0:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_DMA_IRQHandler+0x1b4>)
 80013f6:	e7d7      	b.n	80013a8 <HAL_DMA_IRQHandler+0x50>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e7fb      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	e7f9      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	e7f6      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
 8001406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140a:	e7f3      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
 800140c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001410:	e7f0      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	e7ed      	b.n	80013f4 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001418:	2502      	movs	r5, #2
 800141a:	4095      	lsls	r5, r2
 800141c:	4225      	tst	r5, r4
 800141e:	d057      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x178>
 8001420:	078d      	lsls	r5, r1, #30
 8001422:	d555      	bpl.n	80014d0 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	0694      	lsls	r4, r2, #26
 8001428:	d406      	bmi.n	8001438 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f022 020a 	bic.w	r2, r2, #10
 8001430:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001432:	2201      	movs	r2, #1
 8001434:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001438:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_DMA_IRQHandler+0x1a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d91e      	bls.n	800147c <HAL_DMA_IRQHandler+0x124>
 800143e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_DMA_IRQHandler+0x116>
 8001446:	3214      	adds	r2, #20
 8001448:	4293      	cmp	r3, r2
 800144a:	d012      	beq.n	8001472 <HAL_DMA_IRQHandler+0x11a>
 800144c:	3214      	adds	r2, #20
 800144e:	4293      	cmp	r3, r2
 8001450:	d011      	beq.n	8001476 <HAL_DMA_IRQHandler+0x11e>
 8001452:	3214      	adds	r2, #20
 8001454:	4293      	cmp	r3, r2
 8001456:	bf0c      	ite	eq
 8001458:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800145c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001460:	4a28      	ldr	r2, [pc, #160]	; (8001504 <HAL_DMA_IRQHandler+0x1ac>)
 8001462:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001464:	2300      	movs	r3, #0
 8001466:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800146a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800146c:	e79e      	b.n	80013ac <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800146e:	2302      	movs	r3, #2
 8001470:	e7f6      	b.n	8001460 <HAL_DMA_IRQHandler+0x108>
 8001472:	2320      	movs	r3, #32
 8001474:	e7f4      	b.n	8001460 <HAL_DMA_IRQHandler+0x108>
 8001476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147a:	e7f1      	b.n	8001460 <HAL_DMA_IRQHandler+0x108>
 800147c:	4922      	ldr	r1, [pc, #136]	; (8001508 <HAL_DMA_IRQHandler+0x1b0>)
 800147e:	428b      	cmp	r3, r1
 8001480:	d016      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x158>
 8001482:	3114      	adds	r1, #20
 8001484:	428b      	cmp	r3, r1
 8001486:	d015      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x15c>
 8001488:	3114      	adds	r1, #20
 800148a:	428b      	cmp	r3, r1
 800148c:	d014      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x160>
 800148e:	3114      	adds	r1, #20
 8001490:	428b      	cmp	r3, r1
 8001492:	d014      	beq.n	80014be <HAL_DMA_IRQHandler+0x166>
 8001494:	3114      	adds	r1, #20
 8001496:	428b      	cmp	r3, r1
 8001498:	d014      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x16c>
 800149a:	3114      	adds	r1, #20
 800149c:	428b      	cmp	r3, r1
 800149e:	d014      	beq.n	80014ca <HAL_DMA_IRQHandler+0x172>
 80014a0:	4293      	cmp	r3, r2
 80014a2:	bf14      	ite	ne
 80014a4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80014a8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_DMA_IRQHandler+0x1b4>)
 80014ae:	e7d8      	b.n	8001462 <HAL_DMA_IRQHandler+0x10a>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e7fb      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
 80014b4:	2320      	movs	r3, #32
 80014b6:	e7f9      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	e7f6      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	e7f3      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
 80014c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c8:	e7f0      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
 80014ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014ce:	e7ed      	b.n	80014ac <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014d0:	2508      	movs	r5, #8
 80014d2:	4095      	lsls	r5, r2
 80014d4:	4225      	tst	r5, r4
 80014d6:	d011      	beq.n	80014fc <HAL_DMA_IRQHandler+0x1a4>
 80014d8:	0709      	lsls	r1, r1, #28
 80014da:	d50f      	bpl.n	80014fc <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	f021 010e 	bic.w	r1, r1, #14
 80014e2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014e4:	2301      	movs	r3, #1
 80014e6:	fa03 f202 	lsl.w	r2, r3, r2
 80014ea:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ec:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80014ee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80014f2:	2300      	movs	r3, #0
 80014f4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80014f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014fa:	e757      	b.n	80013ac <HAL_DMA_IRQHandler+0x54>
}
 80014fc:	bc70      	pop	{r4, r5, r6}
 80014fe:	4770      	bx	lr
 8001500:	40020080 	.word	0x40020080
 8001504:	40020400 	.word	0x40020400
 8001508:	40020008 	.word	0x40020008
 800150c:	40020000 	.word	0x40020000

08001510 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <FLASH_SetErrorCode+0x48>)
 8001512:	68d3      	ldr	r3, [r2, #12]
 8001514:	f013 0310 	ands.w	r3, r3, #16
 8001518:	d005      	beq.n	8001526 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800151a:	4910      	ldr	r1, [pc, #64]	; (800155c <FLASH_SetErrorCode+0x4c>)
 800151c:	69cb      	ldr	r3, [r1, #28]
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001524:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001526:	68d2      	ldr	r2, [r2, #12]
 8001528:	0750      	lsls	r0, r2, #29
 800152a:	d506      	bpl.n	800153a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800152c:	490b      	ldr	r1, [pc, #44]	; (800155c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800152e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001532:	69ca      	ldr	r2, [r1, #28]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <FLASH_SetErrorCode+0x48>)
 800153c:	69d1      	ldr	r1, [r2, #28]
 800153e:	07c9      	lsls	r1, r1, #31
 8001540:	d508      	bpl.n	8001554 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <FLASH_SetErrorCode+0x4c>)
 8001544:	69c1      	ldr	r1, [r0, #28]
 8001546:	f041 0104 	orr.w	r1, r1, #4
 800154a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800154c:	69d1      	ldr	r1, [r2, #28]
 800154e:	f021 0101 	bic.w	r1, r1, #1
 8001552:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001554:	60d3      	str	r3, [r2, #12]
 8001556:	4770      	bx	lr
 8001558:	40022000 	.word	0x40022000
 800155c:	200054f8 	.word	0x200054f8

08001560 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_FLASH_Unlock+0x1c>)
 8001562:	6918      	ldr	r0, [r3, #16]
 8001564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001568:	d007      	beq.n	800157a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <HAL_FLASH_Unlock+0x20>)
 800156c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800156e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001572:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001574:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800157a:	4770      	bx	lr
 800157c:	40022000 	.word	0x40022000
 8001580:	45670123 	.word	0x45670123

08001584 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_FLASH_Lock+0x10>)
}
 8001586:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001588:	6913      	ldr	r3, [r2, #16]
 800158a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158e:	6113      	str	r3, [r2, #16]
}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <FLASH_WaitForLastOperation>:
{
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fb20 	bl	8000be0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015a0:	4c11      	ldr	r4, [pc, #68]	; (80015e8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80015a2:	4607      	mov	r7, r0
 80015a4:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	07d8      	lsls	r0, r3, #31
 80015aa:	d412      	bmi.n	80015d2 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ac:	68e3      	ldr	r3, [r4, #12]
 80015ae:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015b0:	bf44      	itt	mi
 80015b2:	2320      	movmi	r3, #32
 80015b4:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015b6:	68eb      	ldr	r3, [r5, #12]
 80015b8:	06da      	lsls	r2, r3, #27
 80015ba:	d406      	bmi.n	80015ca <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80015bc:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015be:	07db      	lsls	r3, r3, #31
 80015c0:	d403      	bmi.n	80015ca <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015c2:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80015c4:	f010 0004 	ands.w	r0, r0, #4
 80015c8:	d002      	beq.n	80015d0 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80015ca:	f7ff ffa1 	bl	8001510 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
}
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80015d2:	1c73      	adds	r3, r6, #1
 80015d4:	d0e7      	beq.n	80015a6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015d6:	b90e      	cbnz	r6, 80015dc <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80015d8:	2003      	movs	r0, #3
 80015da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015dc:	f7ff fb00 	bl	8000be0 <HAL_GetTick>
 80015e0:	1bc0      	subs	r0, r0, r7
 80015e2:	4286      	cmp	r6, r0
 80015e4:	d2df      	bcs.n	80015a6 <FLASH_WaitForLastOperation+0xe>
 80015e6:	e7f7      	b.n	80015d8 <FLASH_WaitForLastOperation+0x40>
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_FLASH_Program>:
{
 80015ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80015f0:	4c1f      	ldr	r4, [pc, #124]	; (8001670 <HAL_FLASH_Program+0x84>)
{
 80015f2:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80015f4:	7e23      	ldrb	r3, [r4, #24]
{
 80015f6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80015f8:	2b01      	cmp	r3, #1
{
 80015fa:	460f      	mov	r7, r1
 80015fc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80015fe:	d033      	beq.n	8001668 <HAL_FLASH_Program+0x7c>
 8001600:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001602:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001606:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001608:	f7ff ffc6 	bl	8001598 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800160c:	bb40      	cbnz	r0, 8001660 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800160e:	2d01      	cmp	r5, #1
 8001610:	d003      	beq.n	800161a <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8001612:	2d02      	cmp	r5, #2
 8001614:	bf0c      	ite	eq
 8001616:	2502      	moveq	r5, #2
 8001618:	2504      	movne	r5, #4
 800161a:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800161c:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800161e:	f8df b054 	ldr.w	fp, [pc, #84]	; 8001674 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001622:	0132      	lsls	r2, r6, #4
 8001624:	4640      	mov	r0, r8
 8001626:	4649      	mov	r1, r9
 8001628:	f7fe fe0a 	bl	8000240 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800162c:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001630:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001634:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 800163e:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001642:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001646:	f7ff ffa7 	bl	8001598 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800164a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8001656:	b918      	cbnz	r0, 8001660 <HAL_FLASH_Program+0x74>
 8001658:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 800165a:	b2f3      	uxtb	r3, r6
 800165c:	429d      	cmp	r5, r3
 800165e:	d8e0      	bhi.n	8001622 <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8001660:	2300      	movs	r3, #0
 8001662:	7623      	strb	r3, [r4, #24]
  return status;
 8001664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001668:	2002      	movs	r0, #2
}
 800166a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166e:	bf00      	nop
 8001670:	200054f8 	.word	0x200054f8
 8001674:	40022000 	.word	0x40022000

08001678 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001678:	2200      	movs	r2, #0
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <FLASH_MassErase.isra.0+0x1c>)
 800167c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <FLASH_MassErase.isra.0+0x20>)
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	f042 0204 	orr.w	r2, r2, #4
 8001686:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200054f8 	.word	0x200054f8
 8001698:	40022000 	.word	0x40022000

0800169c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800169c:	2200      	movs	r2, #0
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <FLASH_PageErase+0x1c>)
 80016a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <FLASH_PageErase+0x20>)
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	f042 0202 	orr.w	r2, r2, #2
 80016aa:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80016ac:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4770      	bx	lr
 80016b8:	200054f8 	.word	0x200054f8
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_FLASHEx_Erase>:
{
 80016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80016c4:	4d23      	ldr	r5, [pc, #140]	; (8001754 <HAL_FLASHEx_Erase+0x94>)
{
 80016c6:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80016c8:	7e2b      	ldrb	r3, [r5, #24]
{
 80016ca:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d03d      	beq.n	800174c <HAL_FLASHEx_Erase+0x8c>
 80016d0:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016d2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80016d4:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016d6:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80016d8:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016dc:	d113      	bne.n	8001706 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80016de:	f7ff ff5b 	bl	8001598 <FLASH_WaitForLastOperation>
 80016e2:	b120      	cbz	r0, 80016ee <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80016e6:	2300      	movs	r3, #0
 80016e8:	762b      	strb	r3, [r5, #24]
  return status;
 80016ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80016ee:	f7ff ffc3 	bl	8001678 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016f6:	f7ff ff4f 	bl	8001598 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_FLASHEx_Erase+0x98>)
 80016fc:	6913      	ldr	r3, [r2, #16]
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6113      	str	r3, [r2, #16]
 8001704:	e7ef      	b.n	80016e6 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001706:	f7ff ff47 	bl	8001598 <FLASH_WaitForLastOperation>
 800170a:	2800      	cmp	r0, #0
 800170c:	d1ea      	bne.n	80016e4 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001716:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8001718:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800171a:	4c0f      	ldr	r4, [pc, #60]	; (8001758 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001724:	429e      	cmp	r6, r3
 8001726:	d2de      	bcs.n	80016e6 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8001728:	4630      	mov	r0, r6
 800172a:	f7ff ffb7 	bl	800169c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800172e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001732:	f7ff ff31 	bl	8001598 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001736:	6923      	ldr	r3, [r4, #16]
 8001738:	f023 0302 	bic.w	r3, r3, #2
 800173c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800173e:	b110      	cbz	r0, 8001746 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001740:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001744:	e7cf      	b.n	80016e6 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8001746:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800174a:	e7e7      	b.n	800171c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 800174c:	2002      	movs	r0, #2
}
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001752:	bf00      	nop
 8001754:	200054f8 	.word	0x200054f8
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001760:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001762:	4616      	mov	r6, r2
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001766:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800190c <HAL_GPIO_Init+0x1b0>
 800176a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001910 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800176e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001774:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001778:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800177c:	45a0      	cmp	r8, r4
 800177e:	d17f      	bne.n	8001880 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001780:	684d      	ldr	r5, [r1, #4]
 8001782:	2d12      	cmp	r5, #18
 8001784:	f000 80af 	beq.w	80018e6 <HAL_GPIO_Init+0x18a>
 8001788:	f200 8088 	bhi.w	800189c <HAL_GPIO_Init+0x140>
 800178c:	2d02      	cmp	r5, #2
 800178e:	f000 80a7 	beq.w	80018e0 <HAL_GPIO_Init+0x184>
 8001792:	d87c      	bhi.n	800188e <HAL_GPIO_Init+0x132>
 8001794:	2d00      	cmp	r5, #0
 8001796:	f000 808e 	beq.w	80018b6 <HAL_GPIO_Init+0x15a>
 800179a:	2d01      	cmp	r5, #1
 800179c:	f000 809e 	beq.w	80018dc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	2cff      	cmp	r4, #255	; 0xff
 80017a6:	bf93      	iteet	ls
 80017a8:	4682      	movls	sl, r0
 80017aa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80017ae:	3d08      	subhi	r5, #8
 80017b0:	f8d0 b000 	ldrls.w	fp, [r0]
 80017b4:	bf92      	itee	ls
 80017b6:	00b5      	lslls	r5, r6, #2
 80017b8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80017bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017be:	fa09 f805 	lsl.w	r8, r9, r5
 80017c2:	ea2b 0808 	bic.w	r8, fp, r8
 80017c6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ca:	bf88      	it	hi
 80017cc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	ea48 0505 	orr.w	r5, r8, r5
 80017d4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80017dc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80017e0:	d04e      	beq.n	8001880 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4d47      	ldr	r5, [pc, #284]	; (8001900 <HAL_GPIO_Init+0x1a4>)
 80017e4:	4f46      	ldr	r7, [pc, #280]	; (8001900 <HAL_GPIO_Init+0x1a4>)
 80017e6:	69ad      	ldr	r5, [r5, #24]
 80017e8:	f026 0803 	bic.w	r8, r6, #3
 80017ec:	f045 0501 	orr.w	r5, r5, #1
 80017f0:	61bd      	str	r5, [r7, #24]
 80017f2:	69bd      	ldr	r5, [r7, #24]
 80017f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80017f8:	f005 0501 	and.w	r5, r5, #1
 80017fc:	9501      	str	r5, [sp, #4]
 80017fe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001802:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001808:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800180c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001810:	fa09 f90b 	lsl.w	r9, r9, fp
 8001814:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001818:	4d3a      	ldr	r5, [pc, #232]	; (8001904 <HAL_GPIO_Init+0x1a8>)
 800181a:	42a8      	cmp	r0, r5
 800181c:	d068      	beq.n	80018f0 <HAL_GPIO_Init+0x194>
 800181e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001822:	42a8      	cmp	r0, r5
 8001824:	d066      	beq.n	80018f4 <HAL_GPIO_Init+0x198>
 8001826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800182a:	42a8      	cmp	r0, r5
 800182c:	d064      	beq.n	80018f8 <HAL_GPIO_Init+0x19c>
 800182e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001832:	42a8      	cmp	r0, r5
 8001834:	bf0c      	ite	eq
 8001836:	2503      	moveq	r5, #3
 8001838:	2504      	movne	r5, #4
 800183a:	fa05 f50b 	lsl.w	r5, r5, fp
 800183e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001842:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001846:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800184c:	bf14      	ite	ne
 800184e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001850:	43a5      	biceq	r5, r4
 8001852:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001856:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800185a:	bf14      	ite	ne
 800185c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185e:	43a5      	biceq	r5, r4
 8001860:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001862:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001868:	bf14      	ite	ne
 800186a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186c:	43a5      	biceq	r5, r4
 800186e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001872:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001876:	bf14      	ite	ne
 8001878:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	ea25 0404 	biceq.w	r4, r5, r4
 800187e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001880:	3601      	adds	r6, #1
 8001882:	2e10      	cmp	r6, #16
 8001884:	f47f af73 	bne.w	800176e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001888:	b003      	add	sp, #12
 800188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800188e:	2d03      	cmp	r5, #3
 8001890:	d022      	beq.n	80018d8 <HAL_GPIO_Init+0x17c>
 8001892:	2d11      	cmp	r5, #17
 8001894:	d184      	bne.n	80017a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001896:	68ca      	ldr	r2, [r1, #12]
 8001898:	3204      	adds	r2, #4
          break;
 800189a:	e781      	b.n	80017a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800189c:	4f1a      	ldr	r7, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x1ac>)
 800189e:	42bd      	cmp	r5, r7
 80018a0:	d009      	beq.n	80018b6 <HAL_GPIO_Init+0x15a>
 80018a2:	d812      	bhi.n	80018ca <HAL_GPIO_Init+0x16e>
 80018a4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001914 <HAL_GPIO_Init+0x1b8>
 80018a8:	454d      	cmp	r5, r9
 80018aa:	d004      	beq.n	80018b6 <HAL_GPIO_Init+0x15a>
 80018ac:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80018b0:	454d      	cmp	r5, r9
 80018b2:	f47f af75 	bne.w	80017a0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	688a      	ldr	r2, [r1, #8]
 80018b8:	b1c2      	cbz	r2, 80018ec <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ba:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80018bc:	bf0c      	ite	eq
 80018be:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80018c2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c6:	2208      	movs	r2, #8
 80018c8:	e76a      	b.n	80017a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80018ca:	4575      	cmp	r5, lr
 80018cc:	d0f3      	beq.n	80018b6 <HAL_GPIO_Init+0x15a>
 80018ce:	4565      	cmp	r5, ip
 80018d0:	d0f1      	beq.n	80018b6 <HAL_GPIO_Init+0x15a>
 80018d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001918 <HAL_GPIO_Init+0x1bc>
 80018d6:	e7eb      	b.n	80018b0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d8:	2200      	movs	r2, #0
 80018da:	e761      	b.n	80017a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	68ca      	ldr	r2, [r1, #12]
          break;
 80018de:	e75f      	b.n	80017a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e0:	68ca      	ldr	r2, [r1, #12]
 80018e2:	3208      	adds	r2, #8
          break;
 80018e4:	e75c      	b.n	80017a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e6:	68ca      	ldr	r2, [r1, #12]
 80018e8:	320c      	adds	r2, #12
          break;
 80018ea:	e759      	b.n	80017a0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ec:	2204      	movs	r2, #4
 80018ee:	e757      	b.n	80017a0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f0:	2500      	movs	r5, #0
 80018f2:	e7a2      	b.n	800183a <HAL_GPIO_Init+0xde>
 80018f4:	2501      	movs	r5, #1
 80018f6:	e7a0      	b.n	800183a <HAL_GPIO_Init+0xde>
 80018f8:	2502      	movs	r5, #2
 80018fa:	e79e      	b.n	800183a <HAL_GPIO_Init+0xde>
 80018fc:	40010400 	.word	0x40010400
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800
 8001908:	10210000 	.word	0x10210000
 800190c:	10310000 	.word	0x10310000
 8001910:	10320000 	.word	0x10320000
 8001914:	10110000 	.word	0x10110000
 8001918:	10220000 	.word	0x10220000

0800191c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800191c:	6883      	ldr	r3, [r0, #8]
 800191e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001920:	bf14      	ite	ne
 8001922:	2001      	movne	r0, #1
 8001924:	2000      	moveq	r0, #0
 8001926:	4770      	bx	lr

08001928 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	b10a      	cbz	r2, 800192e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	6101      	str	r1, [r0, #16]
 800192c:	4770      	bx	lr
 800192e:	0409      	lsls	r1, r1, #16
 8001930:	e7fb      	b.n	800192a <HAL_GPIO_WritePin+0x2>

08001932 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001932:	68c3      	ldr	r3, [r0, #12]
 8001934:	4059      	eors	r1, r3
 8001936:	60c1      	str	r1, [r0, #12]
 8001938:	4770      	bx	lr

0800193a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_EXTI_IRQHandler>:
{
 800193c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001940:	6959      	ldr	r1, [r3, #20]
 8001942:	4201      	tst	r1, r0
 8001944:	d002      	beq.n	800194c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001946:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001948:	f7ff fff7 	bl	800193a <HAL_GPIO_EXTI_Callback>
 800194c:	bd08      	pop	{r3, pc}
 800194e:	bf00      	nop
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001954:	6803      	ldr	r3, [r0, #0]
{
 8001956:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	07db      	lsls	r3, r3, #31
{
 800195c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	d414      	bmi.n	800198a <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	079f      	lsls	r7, r3, #30
 8001964:	d462      	bmi.n	8001a2c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	0719      	lsls	r1, r3, #28
 800196a:	f100 8099 	bmi.w	8001aa0 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	682b      	ldr	r3, [r5, #0]
 8001970:	075a      	lsls	r2, r3, #29
 8001972:	f100 80c3 	bmi.w	8001afc <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001976:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001978:	2a00      	cmp	r2, #0
 800197a:	f040 8131 	bne.w	8001be0 <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	6a2a      	ldr	r2, [r5, #32]
 8001980:	2a00      	cmp	r2, #0
 8001982:	f040 8184 	bne.w	8001c8e <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001986:	2000      	movs	r0, #0
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800198a:	4c90      	ldr	r4, [pc, #576]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d007      	beq.n	80019a6 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x66>
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	03de      	lsls	r6, r3, #15
 80019a4:	d509      	bpl.n	80019ba <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	039c      	lsls	r4, r3, #14
 80019aa:	d5d9      	bpl.n	8001960 <HAL_RCC_OscConfig+0xc>
 80019ac:	68ab      	ldr	r3, [r5, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1d6      	bne.n	8001960 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
}
 80019b4:	b002      	add	sp, #8
 80019b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	68ab      	ldr	r3, [r5, #8]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d110      	bne.n	80019e4 <HAL_RCC_OscConfig+0x90>
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019ca:	f7ff f909 	bl	8000be0 <HAL_GetTick>
 80019ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	0398      	lsls	r0, r3, #14
 80019d4:	d4c4      	bmi.n	8001960 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff f903 	bl	8000be0 <HAL_GetTick>
 80019da:	1b80      	subs	r0, r0, r6
 80019dc:	2864      	cmp	r0, #100	; 0x64
 80019de:	d9f7      	bls.n	80019d0 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80019e0:	2003      	movs	r0, #3
 80019e2:	e7e7      	b.n	80019b4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	b99b      	cbnz	r3, 8001a0e <HAL_RCC_OscConfig+0xba>
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019f6:	f7ff f8f3 	bl	8000be0 <HAL_GetTick>
 80019fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	0399      	lsls	r1, r3, #14
 8001a00:	d5ae      	bpl.n	8001960 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a02:	f7ff f8ed 	bl	8000be0 <HAL_GetTick>
 8001a06:	1b80      	subs	r0, r0, r6
 8001a08:	2864      	cmp	r0, #100	; 0x64
 8001a0a:	d9f7      	bls.n	80019fc <HAL_RCC_OscConfig+0xa8>
 8001a0c:	e7e8      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	d103      	bne.n	8001a1e <HAL_RCC_OscConfig+0xca>
 8001a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1a:	6023      	str	r3, [r4, #0]
 8001a1c:	e7d1      	b.n	80019c2 <HAL_RCC_OscConfig+0x6e>
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	e7cd      	b.n	80019c8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a2c:	4c67      	ldr	r4, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	f013 0f0c 	tst.w	r3, #12
 8001a34:	d007      	beq.n	8001a46 <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d110      	bne.n	8001a62 <HAL_RCC_OscConfig+0x10e>
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	03da      	lsls	r2, r3, #15
 8001a44:	d40d      	bmi.n	8001a62 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	079b      	lsls	r3, r3, #30
 8001a4a:	d502      	bpl.n	8001a52 <HAL_RCC_OscConfig+0xfe>
 8001a4c:	696b      	ldr	r3, [r5, #20]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d1af      	bne.n	80019b2 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	69aa      	ldr	r2, [r5, #24]
 8001a56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a5e:	6023      	str	r3, [r4, #0]
 8001a60:	e781      	b.n	8001966 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a62:	696a      	ldr	r2, [r5, #20]
 8001a64:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	b16a      	cbz	r2, 8001a84 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f8b8 	bl	8000be0 <HAL_GetTick>
 8001a70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	079f      	lsls	r7, r3, #30
 8001a76:	d4ec      	bmi.n	8001a52 <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff f8b2 	bl	8000be0 <HAL_GetTick>
 8001a7c:	1b80      	subs	r0, r0, r6
 8001a7e:	2802      	cmp	r0, #2
 8001a80:	d9f7      	bls.n	8001a72 <HAL_RCC_OscConfig+0x11e>
 8001a82:	e7ad      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001a84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8ab 	bl	8000be0 <HAL_GetTick>
 8001a8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	0798      	lsls	r0, r3, #30
 8001a90:	f57f af69 	bpl.w	8001966 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a94:	f7ff f8a4 	bl	8000be0 <HAL_GetTick>
 8001a98:	1b80      	subs	r0, r0, r6
 8001a9a:	2802      	cmp	r0, #2
 8001a9c:	d9f6      	bls.n	8001a8c <HAL_RCC_OscConfig+0x138>
 8001a9e:	e79f      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa0:	69ea      	ldr	r2, [r5, #28]
 8001aa2:	4c4a      	ldr	r4, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	b1da      	cbz	r2, 8001ae0 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001aac:	f7ff f898 	bl	8000be0 <HAL_GetTick>
 8001ab0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab4:	079b      	lsls	r3, r3, #30
 8001ab6:	d50d      	bpl.n	8001ad4 <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ab8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001abc:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <HAL_RCC_OscConfig+0x284>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ac4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ac6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x172>
 8001ad2:	e74c      	b.n	800196e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f884 	bl	8000be0 <HAL_GetTick>
 8001ad8:	1b80      	subs	r0, r0, r6
 8001ada:	2802      	cmp	r0, #2
 8001adc:	d9e9      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x15e>
 8001ade:	e77f      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001ae0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f87d 	bl	8000be0 <HAL_GetTick>
 8001ae6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aea:	079f      	lsls	r7, r3, #30
 8001aec:	f57f af3f 	bpl.w	800196e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff f876 	bl	8000be0 <HAL_GetTick>
 8001af4:	1b80      	subs	r0, r0, r6
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f6      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x194>
 8001afa:	e771      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afc:	4c33      	ldr	r4, [pc, #204]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001afe:	69e3      	ldr	r3, [r4, #28]
 8001b00:	00de      	lsls	r6, r3, #3
 8001b02:	d424      	bmi.n	8001b4e <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 8001b04:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	69e3      	ldr	r3, [r4, #28]
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61e3      	str	r3, [r4, #28]
 8001b0e:	69e3      	ldr	r3, [r4, #28]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4e30      	ldr	r6, [pc, #192]	; (8001bdc <HAL_RCC_OscConfig+0x288>)
 8001b1a:	6833      	ldr	r3, [r6, #0]
 8001b1c:	05d8      	lsls	r0, r3, #23
 8001b1e:	d518      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	692b      	ldr	r3, [r5, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d126      	bne.n	8001b74 <HAL_RCC_OscConfig+0x220>
 8001b26:	6a23      	ldr	r3, [r4, #32]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f857 	bl	8000be0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b36:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	6a23      	ldr	r3, [r4, #32]
 8001b3a:	079a      	lsls	r2, r3, #30
 8001b3c:	d53f      	bpl.n	8001bbe <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001b3e:	2f00      	cmp	r7, #0
 8001b40:	f43f af19 	beq.w	8001976 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	69e3      	ldr	r3, [r4, #28]
 8001b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	61e3      	str	r3, [r4, #28]
 8001b4c:	e713      	b.n	8001976 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2700      	movs	r7, #0
 8001b50:	e7e2      	b.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	6833      	ldr	r3, [r6, #0]
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f841 	bl	8000be0 <HAL_GetTick>
 8001b5e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	6833      	ldr	r3, [r6, #0]
 8001b62:	05d9      	lsls	r1, r3, #23
 8001b64:	d4dc      	bmi.n	8001b20 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff f83b 	bl	8000be0 <HAL_GetTick>
 8001b6a:	eba0 0008 	sub.w	r0, r0, r8
 8001b6e:	2864      	cmp	r0, #100	; 0x64
 8001b70:	d9f6      	bls.n	8001b60 <HAL_RCC_OscConfig+0x20c>
 8001b72:	e735      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	b9ab      	cbnz	r3, 8001ba2 <HAL_RCC_OscConfig+0x24e>
 8001b76:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6223      	str	r3, [r4, #32]
 8001b82:	6a23      	ldr	r3, [r4, #32]
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f829 	bl	8000be0 <HAL_GetTick>
 8001b8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	079b      	lsls	r3, r3, #30
 8001b94:	d5d3      	bpl.n	8001b3e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff f823 	bl	8000be0 <HAL_GetTick>
 8001b9a:	1b80      	subs	r0, r0, r6
 8001b9c:	4540      	cmp	r0, r8
 8001b9e:	d9f7      	bls.n	8001b90 <HAL_RCC_OscConfig+0x23c>
 8001ba0:	e71e      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	6a23      	ldr	r3, [r4, #32]
 8001ba6:	d103      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x25c>
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6223      	str	r3, [r4, #32]
 8001bae:	e7ba      	b.n	8001b26 <HAL_RCC_OscConfig+0x1d2>
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6223      	str	r3, [r4, #32]
 8001bb6:	6a23      	ldr	r3, [r4, #32]
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	e7b6      	b.n	8001b2c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f80f 	bl	8000be0 <HAL_GetTick>
 8001bc2:	eba0 0008 	sub.w	r0, r0, r8
 8001bc6:	42b0      	cmp	r0, r6
 8001bc8:	d9b6      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1e4>
 8001bca:	e709      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42420000 	.word	0x42420000
 8001bd4:	42420480 	.word	0x42420480
 8001bd8:	2000004c 	.word	0x2000004c
 8001bdc:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001be0:	4c4f      	ldr	r4, [pc, #316]	; (8001d20 <HAL_RCC_OscConfig+0x3cc>)
 8001be2:	6863      	ldr	r3, [r4, #4]
 8001be4:	03d8      	lsls	r0, r3, #15
 8001be6:	d508      	bpl.n	8001bfa <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001be8:	6863      	ldr	r3, [r4, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d103      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001bf4:	03d9      	lsls	r1, r3, #15
 8001bf6:	f53f aedc 	bmi.w	80019b2 <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001bfa:	2a02      	cmp	r2, #2
 8001bfc:	d133      	bne.n	8001c66 <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	00da      	lsls	r2, r3, #3
 8001c02:	d506      	bpl.n	8001c12 <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001c06:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f47f aed0 	bne.w	80019b2 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	4e43      	ldr	r6, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x3d0>)
 8001c16:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffe2 	bl	8000be0 <HAL_GetTick>
 8001c1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	d41a      	bmi.n	8001c5a <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c40:	f7fe ffce 	bl	8000be0 <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	011f      	lsls	r7, r3, #4
 8001c4a:	f53f ae98 	bmi.w	800197e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c4e:	f7fe ffc7 	bl	8000be0 <HAL_GetTick>
 8001c52:	1b80      	subs	r0, r0, r6
 8001c54:	2864      	cmp	r0, #100	; 0x64
 8001c56:	d9f6      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
 8001c58:	e6c2      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c5a:	f7fe ffc1 	bl	8000be0 <HAL_GetTick>
 8001c5e:	1bc0      	subs	r0, r0, r7
 8001c60:	2864      	cmp	r0, #100	; 0x64
 8001c62:	d9dc      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ca>
 8001c64:	e6bc      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 8001c66:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_RCC_OscConfig+0x3d0>)
 8001c72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c74:	f7fe ffb4 	bl	8000be0 <HAL_GetTick>
 8001c78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	0118      	lsls	r0, r3, #4
 8001c7e:	f57f ae7e 	bpl.w	800197e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c82:	f7fe ffad 	bl	8000be0 <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	2864      	cmp	r0, #100	; 0x64
 8001c8a:	d9f6      	bls.n	8001c7a <HAL_RCC_OscConfig+0x326>
 8001c8c:	e6a8      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8e:	4c24      	ldr	r4, [pc, #144]	; (8001d20 <HAL_RCC_OscConfig+0x3cc>)
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	f43f ae8b 	beq.w	80019b2 <HAL_RCC_OscConfig+0x5e>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4e22      	ldr	r6, [pc, #136]	; (8001d28 <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca4:	d12f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff9b 	bl	8000be0 <HAL_GetTick>
 8001caa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	0199      	lsls	r1, r3, #6
 8001cb0:	d423      	bmi.n	8001cfa <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cbc:	6869      	ldr	r1, [r5, #4]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc4:	68e9      	ldr	r1, [r5, #12]
 8001cc6:	f022 020f 	bic.w	r2, r2, #15
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001cd0:	6862      	ldr	r2, [r4, #4]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	2301      	movs	r3, #1
 8001cde:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ce0:	f7fe ff7e 	bl	8000be0 <HAL_GetTick>
 8001ce4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	019a      	lsls	r2, r3, #6
 8001cea:	f53f ae4c 	bmi.w	8001986 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe ff77 	bl	8000be0 <HAL_GetTick>
 8001cf2:	1b40      	subs	r0, r0, r5
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d9f6      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x392>
 8001cf8:	e672      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe ff71 	bl	8000be0 <HAL_GetTick>
 8001cfe:	1bc0      	subs	r0, r0, r7
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9d3      	bls.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001d04:	e66c      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff6b 	bl	8000be0 <HAL_GetTick>
 8001d0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	019b      	lsls	r3, r3, #6
 8001d10:	f57f ae39 	bpl.w	8001986 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe ff64 	bl	8000be0 <HAL_GetTick>
 8001d18:	1b40      	subs	r0, r0, r5
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9f6      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b8>
 8001d1e:	e65f      	b.n	80019e0 <HAL_RCC_OscConfig+0x8c>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	42420068 	.word	0x42420068
 8001d28:	42420060 	.word	0x42420060

08001d2c <HAL_RCC_GetSysClockFreq>:
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001d30:	466a      	mov	r2, sp
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d34:	f103 0508 	add.w	r5, r3, #8
 8001d38:	4614      	mov	r4, r2
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	c403      	stmia	r4!, {r0, r1}
 8001d42:	42ab      	cmp	r3, r5
 8001d44:	4622      	mov	r2, r4
 8001d46:	d1f7      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0xc>
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	889b      	ldrh	r3, [r3, #4]
 8001d4c:	6020      	str	r0, [r4, #0]
 8001d4e:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d52:	ac04      	add	r4, sp, #16
 8001d54:	f103 0510 	add.w	r5, r3, #16
 8001d58:	4622      	mov	r2, r4
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	c203      	stmia	r2!, {r0, r1}
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	4614      	mov	r4, r2
 8001d66:	d1f7      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8001d68:	491e      	ldr	r1, [pc, #120]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6c:	f003 020c 	and.w	r2, r3, #12
 8001d70:	2a08      	cmp	r2, #8
 8001d72:	d131      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d74:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d78:	a808      	add	r0, sp, #32
 8001d7a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7e:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d82:	d526      	bpl.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001d84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	4403      	add	r3, r0
 8001d8c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001d90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001d92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001d9a:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001d9c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001d9e:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001da2:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001da4:	fba4 4506 	umull	r4, r5, r4, r6
 8001da8:	fba4 0103 	umull	r0, r1, r4, r3
 8001dac:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001db0:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001db4:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001db6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dba:	f7fe fd47 	bl	800084c <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001dbe:	2e0d      	cmp	r6, #13
 8001dc0:	d100      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001dc2:	0840      	lsrs	r0, r0, #1
}
 8001dc4:	b009      	add	sp, #36	; 0x24
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001dc8:	fb03 f006 	mul.w	r0, r3, r6
 8001dcc:	fbb0 f0f2 	udiv	r0, r0, r2
 8001dd0:	e7f5      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd4:	4370      	muls	r0, r6
 8001dd6:	e7f5      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 8001dda:	e7f3      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x98>
 8001ddc:	08006614 	.word	0x08006614
 8001de0:	08006622 	.word	0x08006622
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	003d0900 	.word	0x003d0900

08001df0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001df0:	4a54      	ldr	r2, [pc, #336]	; (8001f44 <HAL_RCC_ClockConfig+0x154>)
{
 8001df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001df6:	6813      	ldr	r3, [r2, #0]
{
 8001df8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	428b      	cmp	r3, r1
{
 8001e00:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e02:	d32a      	bcc.n	8001e5a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	6829      	ldr	r1, [r5, #0]
 8001e06:	078c      	lsls	r4, r1, #30
 8001e08:	d434      	bmi.n	8001e74 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	07ca      	lsls	r2, r1, #31
 8001e0c:	d447      	bmi.n	8001e9e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e0e:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x154>)
 8001e10:	6813      	ldr	r3, [r2, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	429e      	cmp	r6, r3
 8001e18:	f0c0 8082 	bcc.w	8001f20 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	682a      	ldr	r2, [r5, #0]
 8001e1e:	4c4a      	ldr	r4, [pc, #296]	; (8001f48 <HAL_RCC_ClockConfig+0x158>)
 8001e20:	f012 0f04 	tst.w	r2, #4
 8001e24:	f040 8087 	bne.w	8001f36 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	0713      	lsls	r3, r2, #28
 8001e2a:	d506      	bpl.n	8001e3a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	692a      	ldr	r2, [r5, #16]
 8001e30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e38:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3a:	f7ff ff77 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_RCC_ClockConfig+0x15c>)
 8001e42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	40d8      	lsrs	r0, r3
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x160>)
 8001e4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f7fe fe84 	bl	8000b5c <HAL_InitTick>
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
}
 8001e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f023 0307 	bic.w	r3, r3, #7
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	4299      	cmp	r1, r3
 8001e6c:	d0ca      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
 8001e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e76:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e7a:	bf1e      	ittt	ne
 8001e7c:	685a      	ldrne	r2, [r3, #4]
 8001e7e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e82:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e86:	bf42      	ittt	mi
 8001e88:	685a      	ldrmi	r2, [r3, #4]
 8001e8a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e8e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	68a8      	ldr	r0, [r5, #8]
 8001e94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e7b5      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	686a      	ldr	r2, [r5, #4]
 8001ea0:	4c29      	ldr	r4, [pc, #164]	; (8001f48 <HAL_RCC_ClockConfig+0x158>)
 8001ea2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	d11c      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	d0df      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe90 	bl	8000be0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ec2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d114      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d09d      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7fe fe85 	bl	8000be0 <HAL_GetTick>
 8001ed6:	1bc0      	subs	r0, r0, r7
 8001ed8:	4540      	cmp	r0, r8
 8001eda:	d9f5      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001edc:	2003      	movs	r0, #3
 8001ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	2a02      	cmp	r2, #2
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001eea:	e7df      	b.n	8001eac <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	f013 0f02 	tst.w	r3, #2
 8001ef0:	e7dc      	b.n	8001eac <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d086      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fe6e 	bl	8000be0 <HAL_GetTick>
 8001f04:	1bc0      	subs	r0, r0, r7
 8001f06:	4540      	cmp	r0, r8
 8001f08:	d9f5      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x106>
 8001f0a:	e7e7      	b.n	8001edc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe fe68 	bl	8000be0 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	4540      	cmp	r0, r8
 8001f14:	d8e2      	bhi.n	8001edc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	f013 0f0c 	tst.w	r3, #12
 8001f1c:	d1f6      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x11c>
 8001f1e:	e776      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	4333      	orrs	r3, r6
 8001f28:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	429e      	cmp	r6, r3
 8001f32:	d19c      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x7e>
 8001f34:	e772      	b.n	8001e1c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f36:	6863      	ldr	r3, [r4, #4]
 8001f38:	68e9      	ldr	r1, [r5, #12]
 8001f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6063      	str	r3, [r4, #4]
 8001f42:	e771      	b.n	8001e28 <HAL_RCC_ClockConfig+0x38>
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080067fe 	.word	0x080067fe
 8001f50:	2000004c 	.word	0x2000004c

08001f54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f62:	6810      	ldr	r0, [r2, #0]
}    
 8001f64:	40d8      	lsrs	r0, r3
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	0800680e 	.word	0x0800680e
 8001f70:	2000004c 	.word	0x2000004c

08001f74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f82:	6810      	ldr	r0, [r2, #0]
} 
 8001f84:	40d8      	lsrs	r0, r3
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	0800680e 	.word	0x0800680e
 8001f90:	2000004c 	.word	0x2000004c

08001f94 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f94:	6803      	ldr	r3, [r0, #0]
{
 8001f96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f9a:	f013 0f01 	tst.w	r3, #1
{
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	4c57      	ldr	r4, [pc, #348]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fa2:	d01f      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa4:	69e3      	ldr	r3, [r4, #28]
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	d447      	bmi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001faa:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	69e3      	ldr	r3, [r4, #28]
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	61e3      	str	r3, [r4, #28]
 8001fb4:	69e3      	ldr	r3, [r4, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4e51      	ldr	r6, [pc, #324]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	d53b      	bpl.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc6:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fcc:	d14b      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fce:	6a23      	ldr	r3, [r4, #32]
 8001fd0:	686a      	ldr	r2, [r5, #4]
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fda:	b11f      	cbz	r7, 8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	69e3      	ldr	r3, [r4, #28]
 8001fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe4:	682a      	ldr	r2, [r5, #0]
 8001fe6:	0793      	lsls	r3, r2, #30
 8001fe8:	d505      	bpl.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	68a9      	ldr	r1, [r5, #8]
 8001fee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001ff6:	0757      	lsls	r7, r2, #29
 8001ff8:	d505      	bpl.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ffc:	68e9      	ldr	r1, [r5, #12]
 8001ffe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002002:	430b      	orrs	r3, r1
 8002004:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002006:	0716      	lsls	r6, r2, #28
 8002008:	d505      	bpl.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800200a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800200c:	692a      	ldr	r2, [r5, #16]
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	4313      	orrs	r3, r2
 8002014:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002018:	0398      	lsls	r0, r3, #14
 800201a:	d466      	bmi.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x156>
 800201c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800201e:	0359      	lsls	r1, r3, #13
 8002020:	d463      	bmi.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002022:	6828      	ldr	r0, [r5, #0]
 8002024:	f010 0010 	ands.w	r0, r0, #16
 8002028:	d01a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	69ea      	ldr	r2, [r5, #28]
 800202e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002032:	4313      	orrs	r3, r2
 8002034:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002036:	2000      	movs	r0, #0
 8002038:	e012      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2700      	movs	r7, #0
 800203c:	e7bf      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	6833      	ldr	r3, [r6, #0]
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002046:	f7fe fdcb 	bl	8000be0 <HAL_GetTick>
 800204a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	05d8      	lsls	r0, r3, #23
 8002050:	d4b9      	bmi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fdc5 	bl	8000be0 <HAL_GetTick>
 8002056:	eba0 0008 	sub.w	r0, r0, r8
 800205a:	2864      	cmp	r0, #100	; 0x64
 800205c:	d9f6      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 800205e:	2003      	movs	r0, #3
}
 8002060:	b002      	add	sp, #8
 8002062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002066:	686a      	ldr	r2, [r5, #4]
 8002068:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800206c:	4293      	cmp	r3, r2
 800206e:	d0ae      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002070:	2001      	movs	r0, #1
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002074:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002076:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002078:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002080:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002082:	07d9      	lsls	r1, r3, #31
 8002084:	d5a3      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002086:	f7fe fdab 	bl	8000be0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800208e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	6a23      	ldr	r3, [r4, #32]
 8002092:	079a      	lsls	r2, r3, #30
 8002094:	d49b      	bmi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fda3 	bl	8000be0 <HAL_GetTick>
 800209a:	1b80      	subs	r0, r0, r6
 800209c:	4540      	cmp	r0, r8
 800209e:	d9f7      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80020a0:	e7dd      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	69a9      	ldr	r1, [r5, #24]
 80020a6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80020aa:	d004      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80020ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80020b2:	428a      	cmp	r2, r1
 80020b4:	d122      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80020b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020bc:	430b      	orrs	r3, r1
 80020be:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80020c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020c2:	696a      	ldr	r2, [r5, #20]
 80020c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020c8:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 80020ca:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80020cc:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80020d2:	f7fe fd85 	bl	8000be0 <HAL_GetTick>
 80020d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	009a      	lsls	r2, r3, #2
 80020dc:	d4a1      	bmi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020de:	f7fe fd7f 	bl	8000be0 <HAL_GetTick>
 80020e2:	1b80      	subs	r0, r0, r6
 80020e4:	2864      	cmp	r0, #100	; 0x64
 80020e6:	d9f7      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80020e8:	e7b9      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	d5d8      	bpl.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80020f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020f2:	696a      	ldr	r2, [r5, #20]
 80020f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d092      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
 80020fe:	e7af      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420440 	.word	0x42420440
 800210c:	42420070 	.word	0x42420070

08002110 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002110:	6803      	ldr	r3, [r0, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002118:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002122:	2320      	movs	r3, #32
 8002124:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002128:	4770      	bx	lr
	...

0800212c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800212c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002130:	6805      	ldr	r5, [r0, #0]
 8002132:	68c2      	ldr	r2, [r0, #12]
 8002134:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002136:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800213c:	4313      	orrs	r3, r2
 800213e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002140:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002142:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002144:	430b      	orrs	r3, r1
 8002146:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002148:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800214c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002150:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002152:	4313      	orrs	r3, r2
 8002154:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002156:	696b      	ldr	r3, [r5, #20]
 8002158:	6982      	ldr	r2, [r0, #24]
 800215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215e:	4313      	orrs	r3, r2
 8002160:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002162:	4b40      	ldr	r3, [pc, #256]	; (8002264 <UART_SetConfig+0x138>)
{
 8002164:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002166:	429d      	cmp	r5, r3
 8002168:	f04f 0419 	mov.w	r4, #25
 800216c:	d146      	bne.n	80021fc <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800216e:	f7ff ff01 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8002172:	fb04 f300 	mul.w	r3, r4, r0
 8002176:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800217a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800217e:	00b6      	lsls	r6, r6, #2
 8002180:	fbb3 f3f6 	udiv	r3, r3, r6
 8002184:	fbb3 f3f8 	udiv	r3, r3, r8
 8002188:	011e      	lsls	r6, r3, #4
 800218a:	f7ff fef3 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 800218e:	4360      	muls	r0, r4
 8002190:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fbb0 f7f3 	udiv	r7, r0, r3
 800219a:	f7ff feeb 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 800219e:	4360      	muls	r0, r4
 80021a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80021ae:	fb08 7313 	mls	r3, r8, r3, r7
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	3332      	adds	r3, #50	; 0x32
 80021b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80021ba:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021be:	f7ff fed9 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 80021c2:	4360      	muls	r0, r4
 80021c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	fbb0 faf2 	udiv	sl, r0, r2
 80021ce:	f7ff fed1 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021d2:	4360      	muls	r0, r4
 80021d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fbb0 f3f3 	udiv	r3, r0, r3
 80021de:	fbb3 f3f8 	udiv	r3, r3, r8
 80021e2:	fb08 a313 	mls	r3, r8, r3, sl
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	3332      	adds	r3, #50	; 0x32
 80021ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	433b      	orrs	r3, r7
 80021f4:	4433      	add	r3, r6
 80021f6:	60ab      	str	r3, [r5, #8]
 80021f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021fc:	f7ff feaa 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002200:	fb04 f300 	mul.w	r3, r4, r0
 8002204:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002208:	f04f 0864 	mov.w	r8, #100	; 0x64
 800220c:	00b6      	lsls	r6, r6, #2
 800220e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002212:	fbb3 f3f8 	udiv	r3, r3, r8
 8002216:	011e      	lsls	r6, r3, #4
 8002218:	f7ff fe9c 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 800221c:	4360      	muls	r0, r4
 800221e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fbb0 f7f3 	udiv	r7, r0, r3
 8002228:	f7ff fe94 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 800222c:	4360      	muls	r0, r4
 800222e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fbb0 f3f3 	udiv	r3, r0, r3
 8002238:	fbb3 f3f8 	udiv	r3, r3, r8
 800223c:	fb08 7313 	mls	r3, r8, r3, r7
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	fbb3 f3f8 	udiv	r3, r3, r8
 8002248:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800224c:	f7ff fe82 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002250:	4360      	muls	r0, r4
 8002252:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	fbb0 faf2 	udiv	sl, r0, r2
 800225c:	f7ff fe7a 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002260:	e7b7      	b.n	80021d2 <UART_SetConfig+0xa6>
 8002262:	bf00      	nop
 8002264:	40013800 	.word	0x40013800

08002268 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	4604      	mov	r4, r0
 800226c:	460e      	mov	r6, r1
 800226e:	4617      	mov	r7, r2
 8002270:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002272:	6821      	ldr	r1, [r4, #0]
 8002274:	680b      	ldr	r3, [r1, #0]
 8002276:	ea36 0303 	bics.w	r3, r6, r3
 800227a:	d101      	bne.n	8002280 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800227c:	2000      	movs	r0, #0
}
 800227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002280:	1c6b      	adds	r3, r5, #1
 8002282:	d0f7      	beq.n	8002274 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002284:	b995      	cbnz	r5, 80022ac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002286:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002288:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002290:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800229a:	2320      	movs	r3, #32
 800229c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022a0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80022a4:	2300      	movs	r3, #0
 80022a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022ac:	f7fe fc98 	bl	8000be0 <HAL_GetTick>
 80022b0:	1bc0      	subs	r0, r0, r7
 80022b2:	4285      	cmp	r5, r0
 80022b4:	d2dd      	bcs.n	8002272 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80022b6:	e7e6      	b.n	8002286 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080022b8 <HAL_UART_Init>:
{
 80022b8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80022ba:	4604      	mov	r4, r0
 80022bc:	b340      	cbz	r0, 8002310 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022c6:	b91b      	cbnz	r3, 80022d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022cc:	f002 ff80 	bl	80051d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80022d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022d8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80022da:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80022dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022e2:	f7ff ff23 	bl	800212c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002300:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002302:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002304:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002306:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800230a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800230e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
}
 8002312:	bd10      	pop	{r4, pc}

08002314 <HAL_UART_Transmit>:
{
 8002314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002318:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800231a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800231e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002320:	2b20      	cmp	r3, #32
{
 8002322:	460d      	mov	r5, r1
 8002324:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002326:	d14e      	bne.n	80023c6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002328:	2900      	cmp	r1, #0
 800232a:	d049      	beq.n	80023c0 <HAL_UART_Transmit+0xac>
 800232c:	2a00      	cmp	r2, #0
 800232e:	d047      	beq.n	80023c0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002330:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002334:	2b01      	cmp	r3, #1
 8002336:	d046      	beq.n	80023c6 <HAL_UART_Transmit+0xb2>
 8002338:	2301      	movs	r3, #1
 800233a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	2300      	movs	r3, #0
 8002340:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002342:	2321      	movs	r3, #33	; 0x21
 8002344:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002348:	f7fe fc4a 	bl	8000be0 <HAL_GetTick>
 800234c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800234e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002352:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002356:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002358:	b29b      	uxth	r3, r3
 800235a:	b96b      	cbnz	r3, 8002378 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	4632      	mov	r2, r6
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ff80 	bl	8002268 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002368:	b9a8      	cbnz	r0, 8002396 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800236a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800236c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002378:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800237c:	3b01      	subs	r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002382:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002384:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	4620      	mov	r0, r4
 800238c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238e:	d10e      	bne.n	80023ae <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002390:	f7ff ff6a 	bl	8002268 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002394:	b110      	cbz	r0, 800239c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800239c:	882b      	ldrh	r3, [r5, #0]
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80023a6:	6923      	ldr	r3, [r4, #16]
 80023a8:	b943      	cbnz	r3, 80023bc <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80023aa:	3502      	adds	r5, #2
 80023ac:	e7d3      	b.n	8002356 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	f7ff ff5b 	bl	8002268 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1ef      	bne.n	8002396 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	782a      	ldrb	r2, [r5, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	3501      	adds	r5, #1
 80023be:	e7ca      	b.n	8002356 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80023c6:	2002      	movs	r0, #2
}
 80023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023cc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80023cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d120      	bne.n	8002416 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80023d4:	b1e9      	cbz	r1, 8002412 <HAL_UART_Receive_IT+0x46>
 80023d6:	b1e2      	cbz	r2, 8002412 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80023d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d01a      	beq.n	8002416 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80023e0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80023e2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023e6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ea:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023ee:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80023f0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023f2:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80023f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023f8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80023fc:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023fe:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002400:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002402:	f041 0101 	orr.w	r1, r1, #1
 8002406:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002408:	68d1      	ldr	r1, [r2, #12]
 800240a:	f041 0120 	orr.w	r1, r1, #32
 800240e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002410:	4770      	bx	lr
      return HAL_ERROR;
 8002412:	2001      	movs	r0, #1
 8002414:	4770      	bx	lr
    return HAL_BUSY;
 8002416:	2002      	movs	r0, #2
}
 8002418:	4770      	bx	lr
	...

0800241c <HAL_UART_Transmit_DMA>:
{
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002422:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002426:	2a20      	cmp	r2, #32
 8002428:	d12a      	bne.n	8002480 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 800242a:	b339      	cbz	r1, 800247c <HAL_UART_Transmit_DMA+0x60>
 800242c:	b333      	cbz	r3, 800247c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800242e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002432:	2a01      	cmp	r2, #1
 8002434:	d024      	beq.n	8002480 <HAL_UART_Transmit_DMA+0x64>
 8002436:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800243a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243e:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002440:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002442:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002446:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800244c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800244e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002450:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002452:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002454:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002456:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_UART_Transmit_DMA+0x70>)
 800245a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	3204      	adds	r2, #4
 8002460:	f7fe fece 	bl	8001200 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002468:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800246a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800246c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800246e:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002470:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002478:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800247a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800247c:	2001      	movs	r0, #1
 800247e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002480:	2002      	movs	r0, #2
}
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	08002493 	.word	0x08002493
 8002488:	080024c1 	.word	0x080024c1
 800248c:	08002549 	.word	0x08002549

08002490 <HAL_UART_TxCpltCallback>:
 8002490:	4770      	bx	lr

08002492 <UART_DMATransmitCplt>:
{
 8002492:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002494:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002496:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f013 0320 	ands.w	r3, r3, #32
 800249e:	d10a      	bne.n	80024b6 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80024a0:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024aa:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff ffea 	bl	8002490 <HAL_UART_TxCpltCallback>
 80024bc:	bd08      	pop	{r3, pc}

080024be <HAL_UART_TxHalfCpltCallback>:
 80024be:	4770      	bx	lr

080024c0 <UART_DMATxHalfCplt>:
{
 80024c0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80024c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80024c4:	f7ff fffb 	bl	80024be <HAL_UART_TxHalfCpltCallback>
 80024c8:	bd08      	pop	{r3, pc}

080024ca <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80024ce:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024d0:	2b22      	cmp	r3, #34	; 0x22
 80024d2:	d136      	bne.n	8002542 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024d4:	6883      	ldr	r3, [r0, #8]
 80024d6:	6901      	ldr	r1, [r0, #16]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	6802      	ldr	r2, [r0, #0]
 80024de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024e0:	d123      	bne.n	800252a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024e2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024e4:	b9e9      	cbnz	r1, 8002522 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ea:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80024ee:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80024f0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80024f2:	3c01      	subs	r4, #1
 80024f4:	b2a4      	uxth	r4, r4
 80024f6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80024f8:	b98c      	cbnz	r4, 800251e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024fa:	6803      	ldr	r3, [r0, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	f022 0220 	bic.w	r2, r2, #32
 8002502:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800250a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002514:	2320      	movs	r3, #32
 8002516:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800251a:	f002 f9f9 	bl	8004910 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800251e:	2000      	movs	r0, #0
}
 8002520:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f823 2b01 	strh.w	r2, [r3], #1
 8002528:	e7e1      	b.n	80024ee <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800252a:	b921      	cbnz	r1, 8002536 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800252c:	1c59      	adds	r1, r3, #1
 800252e:	6852      	ldr	r2, [r2, #4]
 8002530:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e7dc      	b.n	80024f0 <UART_Receive_IT+0x26>
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	6281      	str	r1, [r0, #40]	; 0x28
 800253c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002540:	e7f7      	b.n	8002532 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002542:	2002      	movs	r0, #2
 8002544:	bd10      	pop	{r4, pc}

08002546 <HAL_UART_ErrorCallback>:
 8002546:	4770      	bx	lr

08002548 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002548:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800254a:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800254c:	680b      	ldr	r3, [r1, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002550:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002554:	2821      	cmp	r0, #33	; 0x21
 8002556:	d10a      	bne.n	800256e <UART_DMAError+0x26>
 8002558:	0612      	lsls	r2, r2, #24
 800255a:	d508      	bpl.n	800256e <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 800255c:	2200      	movs	r2, #0
 800255e:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002566:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002568:	2220      	movs	r2, #32
 800256a:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800256e:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002570:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002574:	2a22      	cmp	r2, #34	; 0x22
 8002576:	d106      	bne.n	8002586 <UART_DMAError+0x3e>
 8002578:	065b      	lsls	r3, r3, #25
 800257a:	d504      	bpl.n	8002586 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 800257c:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800257e:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002580:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002582:	f7ff fdc5 	bl	8002110 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002586:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002588:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002590:	f7ff ffd9 	bl	8002546 <HAL_UART_ErrorCallback>
 8002594:	bd08      	pop	{r3, pc}
	...

08002598 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002598:	6803      	ldr	r3, [r0, #0]
{
 800259a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800259c:	681a      	ldr	r2, [r3, #0]
{
 800259e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80025a0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80025a6:	d107      	bne.n	80025b8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025a8:	0696      	lsls	r6, r2, #26
 80025aa:	d55a      	bpl.n	8002662 <HAL_UART_IRQHandler+0xca>
 80025ac:	068d      	lsls	r5, r1, #26
 80025ae:	d558      	bpl.n	8002662 <HAL_UART_IRQHandler+0xca>
}
 80025b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80025b4:	f7ff bf89 	b.w	80024ca <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025b8:	f015 0501 	ands.w	r5, r5, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_UART_IRQHandler+0x2c>
 80025be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80025c2:	d04e      	beq.n	8002662 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025c4:	07d3      	lsls	r3, r2, #31
 80025c6:	d505      	bpl.n	80025d4 <HAL_UART_IRQHandler+0x3c>
 80025c8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ca:	bf42      	ittt	mi
 80025cc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80025ce:	f043 0301 	orrmi.w	r3, r3, #1
 80025d2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d4:	0750      	lsls	r0, r2, #29
 80025d6:	d504      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x4a>
 80025d8:	b11d      	cbz	r5, 80025e2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e2:	0793      	lsls	r3, r2, #30
 80025e4:	d504      	bpl.n	80025f0 <HAL_UART_IRQHandler+0x58>
 80025e6:	b11d      	cbz	r5, 80025f0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025f0:	0716      	lsls	r6, r2, #28
 80025f2:	d504      	bpl.n	80025fe <HAL_UART_IRQHandler+0x66>
 80025f4:	b11d      	cbz	r5, 80025fe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d066      	beq.n	80026d2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002604:	0695      	lsls	r5, r2, #26
 8002606:	d504      	bpl.n	8002612 <HAL_UART_IRQHandler+0x7a>
 8002608:	0688      	lsls	r0, r1, #26
 800260a:	d502      	bpl.n	8002612 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff ff5c 	bl	80024ca <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002614:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002618:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800261a:	0711      	lsls	r1, r2, #28
 800261c:	d402      	bmi.n	8002624 <HAL_UART_IRQHandler+0x8c>
 800261e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002622:	d01a      	beq.n	800265a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002624:	f7ff fd74 	bl	8002110 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	0652      	lsls	r2, r2, #25
 800262e:	d510      	bpl.n	8002652 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002630:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002632:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800263a:	b150      	cbz	r0, 8002652 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_UART_IRQHandler+0x13c>)
 800263e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002640:	f7fe fe1c 	bl	800127c <HAL_DMA_Abort_IT>
 8002644:	2800      	cmp	r0, #0
 8002646:	d044      	beq.n	80026d2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002648:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800264a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800264e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002650:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff77 	bl	8002546 <HAL_UART_ErrorCallback>
 8002658:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800265a:	f7ff ff74 	bl	8002546 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002660:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002662:	0616      	lsls	r6, r2, #24
 8002664:	d527      	bpl.n	80026b6 <HAL_UART_IRQHandler+0x11e>
 8002666:	060d      	lsls	r5, r1, #24
 8002668:	d525      	bpl.n	80026b6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800266a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800266e:	2a21      	cmp	r2, #33	; 0x21
 8002670:	d12f      	bne.n	80026d2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002672:	68a2      	ldr	r2, [r4, #8]
 8002674:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002678:	6a22      	ldr	r2, [r4, #32]
 800267a:	d117      	bne.n	80026ac <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267c:	8811      	ldrh	r1, [r2, #0]
 800267e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002682:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002684:	6921      	ldr	r1, [r4, #16]
 8002686:	b979      	cbnz	r1, 80026a8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002688:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800268a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800268c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800268e:	3a01      	subs	r2, #1
 8002690:	b292      	uxth	r2, r2
 8002692:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002694:	b9ea      	cbnz	r2, 80026d2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80026a8:	3201      	adds	r2, #1
 80026aa:	e7ee      	b.n	800268a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026ac:	1c51      	adds	r1, r2, #1
 80026ae:	6221      	str	r1, [r4, #32]
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	e7ea      	b.n	800268c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026b6:	0650      	lsls	r0, r2, #25
 80026b8:	d50b      	bpl.n	80026d2 <HAL_UART_IRQHandler+0x13a>
 80026ba:	064a      	lsls	r2, r1, #25
 80026bc:	d509      	bpl.n	80026d2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026be:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80026c0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026c8:	2320      	movs	r3, #32
 80026ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026ce:	f7ff fedf 	bl	8002490 <HAL_UART_TxCpltCallback>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	080026d9 	.word	0x080026d9

080026d8 <UART_DMAAbortOnError>:
{
 80026d8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80026da:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80026de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026e2:	f7ff ff30 	bl	8002546 <HAL_UART_ErrorCallback>
 80026e6:	bd08      	pop	{r3, pc}

080026e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80026ea:	f000 fee7 	bl	80034bc <vTaskStartScheduler>
  
  return osOK;
}
 80026ee:	2000      	movs	r0, #0
 80026f0:	bd08      	pop	{r3, pc}

080026f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026f2:	b570      	push	{r4, r5, r6, lr}
 80026f4:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026f6:	6946      	ldr	r6, [r0, #20]
{
 80026f8:	460b      	mov	r3, r1
 80026fa:	b086      	sub	sp, #24
 80026fc:	6840      	ldr	r0, [r0, #4]
 80026fe:	6829      	ldr	r1, [r5, #0]
 8002700:	692a      	ldr	r2, [r5, #16]
 8002702:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002706:	b176      	cbz	r6, 8002726 <osThreadCreate+0x34>
 8002708:	69ad      	ldr	r5, [r5, #24]
 800270a:	b165      	cbz	r5, 8002726 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800270c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800270e:	bf0c      	ite	eq
 8002710:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002712:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002714:	9502      	str	r5, [sp, #8]
 8002716:	e88d 0050 	stmia.w	sp, {r4, r6}
 800271a:	f000 fe80 	bl	800341e <xTaskCreateStatic>
 800271e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002720:	9805      	ldr	r0, [sp, #20]
}
 8002722:	b006      	add	sp, #24
 8002724:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002726:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002728:	bf0c      	ite	eq
 800272a:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800272c:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272e:	ad05      	add	r5, sp, #20
 8002730:	b292      	uxth	r2, r2
 8002732:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002736:	f000 fe94 	bl	8003462 <xTaskCreate>
 800273a:	2801      	cmp	r0, #1
 800273c:	d0f0      	beq.n	8002720 <osThreadCreate+0x2e>
      return NULL;
 800273e:	2000      	movs	r0, #0
 8002740:	e7ef      	b.n	8002722 <osThreadCreate+0x30>

08002742 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002742:	f100 0308 	add.w	r3, r0, #8
 8002746:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002748:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002750:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002752:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002754:	6003      	str	r3, [r0, #0]
 8002756:	4770      	bx	lr

08002758 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	6103      	str	r3, [r0, #16]
 800275c:	4770      	bx	lr

0800275e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800275e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002760:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002762:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002764:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800276a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800276c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800276e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002770:	3301      	adds	r3, #1
 8002772:	6003      	str	r3, [r0, #0]
 8002774:	4770      	bx	lr

08002776 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002776:	680a      	ldr	r2, [r1, #0]
{
 8002778:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800277a:	1c53      	adds	r3, r2, #1
 800277c:	d10a      	bne.n	8002794 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800277e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002784:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002786:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002788:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800278a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800278c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800278e:	3301      	adds	r3, #1
 8002790:	6003      	str	r3, [r0, #0]
 8002792:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002794:	f100 0308 	add.w	r3, r0, #8
 8002798:	685c      	ldr	r4, [r3, #4]
 800279a:	6825      	ldr	r5, [r4, #0]
 800279c:	42aa      	cmp	r2, r5
 800279e:	d3ef      	bcc.n	8002780 <vListInsert+0xa>
 80027a0:	4623      	mov	r3, r4
 80027a2:	e7f9      	b.n	8002798 <vListInsert+0x22>

080027a4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027a4:	6841      	ldr	r1, [r0, #4]
 80027a6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80027a8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027ac:	6882      	ldr	r2, [r0, #8]
 80027ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027b4:	bf08      	it	eq
 80027b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027b8:	2200      	movs	r2, #0
 80027ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	3801      	subs	r0, #1
 80027c0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80027c2:	4770      	bx	lr

080027c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <prvTaskExitError+0x2c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	d008      	beq.n	80027de <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	e7fe      	b.n	80027dc <prvTaskExitError+0x18>
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	e7fe      	b.n	80027ee <prvTaskExitError+0x2a>
 80027f0:	20000008 	.word	0x20000008

080027f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <prvPortStartFirstTask+0x1c>)
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	6800      	ldr	r0, [r0, #0]
 80027fa:	f380 8808 	msr	MSP, r0
 80027fe:	b662      	cpsie	i
 8002800:	b661      	cpsie	f
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	df00      	svc	0
 800280c:	bf00      	nop
 800280e:	0000      	.short	0x0000
 8002810:	e000ed08 	.word	0xe000ed08

08002814 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002818:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800281e:	f021 0101 	bic.w	r1, r1, #1
 8002822:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002826:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800282a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800282e:	3840      	subs	r0, #64	; 0x40
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	080027c5 	.word	0x080027c5
	...

08002840 <SVC_Handler>:
	__asm volatile (
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <pxCurrentTCBConst2>)
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6808      	ldr	r0, [r1, #0]
 8002846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800284a:	f380 8809 	msr	PSP, r0
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f380 8811 	msr	BASEPRI, r0
 800285a:	f04e 0e0d 	orr.w	lr, lr, #13
 800285e:	4770      	bx	lr

08002860 <pxCurrentTCBConst2>:
 8002860:	2000507c 	.word	0x2000507c

08002864 <vPortEnterCritical>:
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <vPortEnterCritical+0x3c>)
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800287a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800287c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800287e:	d10d      	bne.n	800289c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <vPortEnterCritical+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002888:	d008      	beq.n	800289c <vPortEnterCritical+0x38>
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	e7fe      	b.n	800289a <vPortEnterCritical+0x36>
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <vPortExitCritical+0x24>)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	b943      	cbnz	r3, 80028c0 <vPortExitCritical+0x18>
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	e7fe      	b.n	80028be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028c0:	3b01      	subs	r3, #1
 80028c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028c4:	b90b      	cbnz	r3, 80028ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	4770      	bx	lr
 80028cc:	20000008 	.word	0x20000008

080028d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028d0:	f3ef 8009 	mrs	r0, PSP
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <pxCurrentTCBConst>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028e0:	6010      	str	r0, [r2, #0]
 80028e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80028e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028ea:	f380 8811 	msr	BASEPRI, r0
 80028ee:	f000 ff8f 	bl	8003810 <vTaskSwitchContext>
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f380 8811 	msr	BASEPRI, r0
 80028fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	6808      	ldr	r0, [r1, #0]
 8002902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002906:	f380 8809 	msr	PSP, r0
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	4770      	bx	lr

08002910 <pxCurrentTCBConst>:
 8002910:	2000507c 	.word	0x2000507c

08002914 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002914:	b508      	push	{r3, lr}
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002926:	f000 fe0d 	bl	8003544 <xTaskIncrementTick>
 800292a:	b118      	cbz	r0, 8002934 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800292c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <xPortSysTickHandler+0x28>)
 8002932:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002934:	2300      	movs	r3, #0
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	bd08      	pop	{r3, pc}
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <vPortSetupTimerInterrupt+0x1c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	fbb3 f3f2 	udiv	r3, r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <vPortSetupTimerInterrupt+0x20>)
 800294e:	3b01      	subs	r3, #1
 8002950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002952:	2207      	movs	r2, #7
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <vPortSetupTimerInterrupt+0x24>)
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2000004c 	.word	0x2000004c
 8002960:	e000e014 	.word	0xe000e014
 8002964:	e000e010 	.word	0xe000e010

08002968 <xPortStartScheduler>:
{
 8002968:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800296c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002974:	22ff      	movs	r2, #255	; 0xff
 8002976:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002978:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002982:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002986:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800298a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800298c:	2207      	movs	r2, #7
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <xPortStartScheduler+0x88>)
 8002990:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002992:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002996:	1e54      	subs	r4, r2, #1
 8002998:	0600      	lsls	r0, r0, #24
 800299a:	d41c      	bmi.n	80029d6 <xPortStartScheduler+0x6e>
 800299c:	b101      	cbz	r1, 80029a0 <xPortStartScheduler+0x38>
 800299e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80029a8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <xPortStartScheduler+0x80>)
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <xPortStartScheduler+0x8c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80029ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80029c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80029c4:	f7ff ffbc 	bl	8002940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80029c8:	2200      	movs	r2, #0
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <xPortStartScheduler+0x90>)
 80029cc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80029ce:	f7ff ff11 	bl	80027f4 <prvPortStartFirstTask>
	prvTaskExitError();
 80029d2:	f7ff fef7 	bl	80027c4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80029da:	2101      	movs	r1, #1
 80029dc:	0052      	lsls	r2, r2, #1
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f88d 2003 	strb.w	r2, [sp, #3]
 80029e4:	4622      	mov	r2, r4
 80029e6:	e7d4      	b.n	8002992 <xPortStartScheduler+0x2a>
 80029e8:	e000e400 	.word	0xe000e400
 80029ec:	2000023c 	.word	0x2000023c
 80029f0:	20000240 	.word	0x20000240
 80029f4:	e000ed20 	.word	0xe000ed20
 80029f8:	20000008 	.word	0x20000008

080029fc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80029fc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d90e      	bls.n	8002a22 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a04:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <vPortValidateInterruptPriority+0x4c>)
 8002a06:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a08:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <vPortValidateInterruptPriority+0x50>)
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	e7fe      	b.n	8002a20 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <vPortValidateInterruptPriority+0x54>)
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <vPortValidateInterruptPriority+0x58>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d908      	bls.n	8002a44 <vPortValidateInterruptPriority+0x48>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	e7fe      	b.n	8002a42 <vPortValidateInterruptPriority+0x46>
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e3f0 	.word	0xe000e3f0
 8002a4c:	2000023c 	.word	0x2000023c
 8002a50:	e000ed0c 	.word	0xe000ed0c
 8002a54:	20000240 	.word	0x20000240

08002a58 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a58:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <prvInsertBlockIntoFreeList+0x40>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4282      	cmp	r2, r0
 8002a60:	d318      	bcc.n	8002a94 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a62:	685c      	ldr	r4, [r3, #4]
 8002a64:	1919      	adds	r1, r3, r4
 8002a66:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a68:	bf01      	itttt	eq
 8002a6a:	6841      	ldreq	r1, [r0, #4]
 8002a6c:	4618      	moveq	r0, r3
 8002a6e:	1909      	addeq	r1, r1, r4
 8002a70:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a72:	6844      	ldr	r4, [r0, #4]
 8002a74:	1901      	adds	r1, r0, r4
 8002a76:	428a      	cmp	r2, r1
 8002a78:	d107      	bne.n	8002a8a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <prvInsertBlockIntoFreeList+0x44>)
 8002a7c:	6809      	ldr	r1, [r1, #0]
 8002a7e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a80:	bf1f      	itttt	ne
 8002a82:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a84:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a86:	1909      	addne	r1, r1, r4
 8002a88:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a8a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a8c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a8e:	bf18      	it	ne
 8002a90:	6018      	strne	r0, [r3, #0]
 8002a92:	bd10      	pop	{r4, pc}
 8002a94:	4613      	mov	r3, r2
 8002a96:	e7e1      	b.n	8002a5c <prvInsertBlockIntoFreeList+0x4>
 8002a98:	20005074 	.word	0x20005074
 8002a9c:	20000244 	.word	0x20000244

08002aa0 <pvPortMalloc>:
{
 8002aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002aa6:	f000 fd3f 	bl	8003528 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002aaa:	493d      	ldr	r1, [pc, #244]	; (8002ba0 <pvPortMalloc+0x100>)
 8002aac:	4d3d      	ldr	r5, [pc, #244]	; (8002ba4 <pvPortMalloc+0x104>)
 8002aae:	680b      	ldr	r3, [r1, #0]
 8002ab0:	b9fb      	cbnz	r3, 8002af2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002ab4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ab6:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ab8:	bf0f      	iteee	eq
 8002aba:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002abe:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ac0:	4b3a      	ldrne	r3, [pc, #232]	; (8002bac <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ac2:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ac6:	bf18      	it	ne
 8002ac8:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002aca:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002acc:	4e38      	ldr	r6, [pc, #224]	; (8002bb0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8002ace:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ad0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002ad4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ad6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002ad8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ada:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002adc:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ade:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ae0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ae4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <pvPortMalloc+0x118>)
 8002aea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002af0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002af2:	682f      	ldr	r7, [r5, #0]
 8002af4:	4227      	tst	r7, r4
 8002af6:	d116      	bne.n	8002b26 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8002af8:	2c00      	cmp	r4, #0
 8002afa:	d040      	beq.n	8002b7e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8002afc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b00:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b02:	bf1c      	itt	ne
 8002b04:	f023 0307 	bicne.w	r3, r3, #7
 8002b08:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b0a:	b163      	cbz	r3, 8002b26 <pvPortMalloc+0x86>
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <pvPortMalloc+0x118>)
 8002b0e:	6816      	ldr	r6, [r2, #0]
 8002b10:	4690      	mov	r8, r2
 8002b12:	42b3      	cmp	r3, r6
 8002b14:	d807      	bhi.n	8002b26 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8002b16:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <pvPortMalloc+0x110>)
 8002b18:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b1a:	6868      	ldr	r0, [r5, #4]
 8002b1c:	4283      	cmp	r3, r0
 8002b1e:	d804      	bhi.n	8002b2a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8002b20:	6809      	ldr	r1, [r1, #0]
 8002b22:	428d      	cmp	r5, r1
 8002b24:	d107      	bne.n	8002b36 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8002b26:	2400      	movs	r4, #0
 8002b28:	e029      	b.n	8002b7e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b2a:	682c      	ldr	r4, [r5, #0]
 8002b2c:	2c00      	cmp	r4, #0
 8002b2e:	d0f7      	beq.n	8002b20 <pvPortMalloc+0x80>
 8002b30:	462a      	mov	r2, r5
 8002b32:	4625      	mov	r5, r4
 8002b34:	e7f1      	b.n	8002b1a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b36:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b38:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b3a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b3c:	1ac2      	subs	r2, r0, r3
 8002b3e:	2a10      	cmp	r2, #16
 8002b40:	d90f      	bls.n	8002b62 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b42:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b44:	0741      	lsls	r1, r0, #29
 8002b46:	d008      	beq.n	8002b5a <pvPortMalloc+0xba>
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	e7fe      	b.n	8002b58 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b5a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b5c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b5e:	f7ff ff7b 	bl	8002a58 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b62:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b66:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b68:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8002b6a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b6c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b6e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b72:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b74:	bf38      	it	cc
 8002b76:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b78:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b7a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b7c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002b7e:	f000 fd73 	bl	8003668 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b82:	0763      	lsls	r3, r4, #29
 8002b84:	d008      	beq.n	8002b98 <pvPortMalloc+0xf8>
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	e7fe      	b.n	8002b96 <pvPortMalloc+0xf6>
}
 8002b98:	4620      	mov	r0, r4
 8002b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000244 	.word	0x20000244
 8002ba4:	20005068 	.word	0x20005068
 8002ba8:	20000248 	.word	0x20000248
 8002bac:	20005068 	.word	0x20005068
 8002bb0:	20005074 	.word	0x20005074
 8002bb4:	20005070 	.word	0x20005070
 8002bb8:	2000506c 	.word	0x2000506c

08002bbc <vPortFree>:
{
 8002bbc:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	b370      	cbz	r0, 8002c20 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <vPortFree+0x68>)
 8002bc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4213      	tst	r3, r2
 8002bcc:	d108      	bne.n	8002be0 <vPortFree+0x24>
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	e7fe      	b.n	8002bde <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002be0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002be4:	b141      	cbz	r1, 8002bf8 <vPortFree+0x3c>
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	e7fe      	b.n	8002bf6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bf8:	ea23 0302 	bic.w	r3, r3, r2
 8002bfc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002c00:	f000 fc92 	bl	8003528 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <vPortFree+0x6c>)
 8002c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002c0a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c0c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c10:	440b      	add	r3, r1
 8002c12:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c14:	f7ff ff20 	bl	8002a58 <prvInsertBlockIntoFreeList>
}
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002c1c:	f000 bd24 	b.w	8003668 <xTaskResumeAll>
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	bf00      	nop
 8002c24:	20005068 	.word	0x20005068
 8002c28:	2000506c 	.word	0x2000506c

08002c2c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c30:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002c32:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c34:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c36:	b942      	cbnz	r2, 8002c4a <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c38:	6805      	ldr	r5, [r0, #0]
 8002c3a:	b99d      	cbnz	r5, 8002c64 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c3c:	6840      	ldr	r0, [r0, #4]
 8002c3e:	f000 ff25 	bl	8003a8c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002c42:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002c44:	3601      	adds	r6, #1
 8002c46:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002c4a:	b96d      	cbnz	r5, 8002c68 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c4c:	6880      	ldr	r0, [r0, #8]
 8002c4e:	f002 fbb3 	bl	80053b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c52:	68a3      	ldr	r3, [r4, #8]
 8002c54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c56:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c58:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c5a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d301      	bcc.n	8002c64 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002c64:	2000      	movs	r0, #0
 8002c66:	e7ed      	b.n	8002c44 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c68:	68c0      	ldr	r0, [r0, #12]
 8002c6a:	f002 fba5 	bl	80053b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c70:	68e2      	ldr	r2, [r4, #12]
 8002c72:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c74:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c76:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c78:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c7a:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c7c:	bf3e      	ittt	cc
 8002c7e:	6862      	ldrcc	r2, [r4, #4]
 8002c80:	189b      	addcc	r3, r3, r2
 8002c82:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002c84:	2d02      	cmp	r5, #2
 8002c86:	d1ed      	bne.n	8002c64 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c88:	b10e      	cbz	r6, 8002c8e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002c8a:	3e01      	subs	r6, #1
 8002c8c:	e7ea      	b.n	8002c64 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002c8e:	4630      	mov	r0, r6
 8002c90:	e7d8      	b.n	8002c44 <prvCopyDataToQueue+0x18>

08002c92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c92:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002c96:	b410      	push	{r4}
 8002c98:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c9a:	b162      	cbz	r2, 8002cb6 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c9c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c9e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ca0:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ca2:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ca4:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ca6:	bf28      	it	cs
 8002ca8:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8002caa:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002cac:	bf28      	it	cs
 8002cae:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	f002 bb81 	b.w	80053b8 <memcpy>
}
 8002cb6:	bc10      	pop	{r4}
 8002cb8:	4770      	bx	lr

08002cba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cba:	b570      	push	{r4, r5, r6, lr}
 8002cbc:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cbe:	f7ff fdd1 	bl	8002864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cc2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002cca:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ccc:	2d00      	cmp	r5, #0
 8002cce:	dc14      	bgt.n	8002cfa <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cd0:	23ff      	movs	r3, #255	; 0xff
 8002cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cd6:	f7ff fde7 	bl	80028a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cda:	f7ff fdc3 	bl	8002864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cde:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002ce6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	dc12      	bgt.n	8002d12 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	23ff      	movs	r3, #255	; 0xff
 8002cee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002cf6:	f7ff bdd7 	b.w	80028a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0e7      	beq.n	8002cd0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d00:	4630      	mov	r0, r6
 8002d02:	f000 fdd9 	bl	80038b8 <xTaskRemoveFromEventList>
 8002d06:	b108      	cbz	r0, 8002d0c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002d08:	f000 fe62 	bl	80039d0 <vTaskMissedYield>
 8002d0c:	3d01      	subs	r5, #1
 8002d0e:	b26d      	sxtb	r5, r5
 8002d10:	e7dc      	b.n	8002ccc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0e9      	beq.n	8002cec <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f000 fdcd 	bl	80038b8 <xTaskRemoveFromEventList>
 8002d1e:	b108      	cbz	r0, 8002d24 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002d20:	f000 fe56 	bl	80039d0 <vTaskMissedYield>
 8002d24:	3d01      	subs	r5, #1
 8002d26:	b26d      	sxtb	r5, r5
 8002d28:	e7de      	b.n	8002ce8 <prvUnlockQueue+0x2e>
	...

08002d2c <xQueueGenericReset>:
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002d30:	4604      	mov	r4, r0
 8002d32:	b940      	cbnz	r0, 8002d46 <xQueueGenericReset+0x1a>
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002d46:	f7ff fd8d 	bl	8002864 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d4a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002d4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	4343      	muls	r3, r0
 8002d52:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d54:	1a1b      	subs	r3, r3, r0
 8002d56:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d58:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d5a:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d5c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002d5e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d60:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d62:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002d6c:	b995      	cbnz	r5, 8002d94 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d6e:	6923      	ldr	r3, [r4, #16]
 8002d70:	b163      	cbz	r3, 8002d8c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d72:	f104 0010 	add.w	r0, r4, #16
 8002d76:	f000 fd9f 	bl	80038b8 <xTaskRemoveFromEventList>
 8002d7a:	b138      	cbz	r0, 8002d8c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <xQueueGenericReset+0x7c>)
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002d8c:	f7ff fd8c 	bl	80028a8 <vPortExitCritical>
}
 8002d90:	2001      	movs	r0, #1
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d94:	f104 0010 	add.w	r0, r4, #16
 8002d98:	f7ff fcd3 	bl	8002742 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002da0:	f7ff fccf 	bl	8002742 <vListInitialise>
 8002da4:	e7f2      	b.n	8002d8c <xQueueGenericReset+0x60>
 8002da6:	bf00      	nop
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <xQueueGenericCreate>:
	{
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002db0:	4606      	mov	r6, r0
 8002db2:	b940      	cbnz	r0, 8002dc6 <xQueueGenericCreate+0x1a>
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002dc8:	3048      	adds	r0, #72	; 0x48
 8002dca:	f7ff fe69 	bl	8002aa0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002dce:	4604      	mov	r4, r0
 8002dd0:	b150      	cbz	r0, 8002de8 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dd8:	b945      	cbnz	r5, 8002dec <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dda:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002ddc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dde:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002de0:	2101      	movs	r1, #1
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ffa2 	bl	8002d2c <xQueueGenericReset>
	}
 8002de8:	4620      	mov	r0, r4
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002dec:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002df0:	6003      	str	r3, [r0, #0]
 8002df2:	e7f3      	b.n	8002ddc <xQueueGenericCreate+0x30>

08002df4 <xQueueGenericSend>:
{
 8002df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	4689      	mov	r9, r1
 8002dfa:	9201      	str	r2, [sp, #4]
 8002dfc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002dfe:	4604      	mov	r4, r0
 8002e00:	b940      	cbnz	r0, 8002e14 <xQueueGenericSend+0x20>
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	e7fe      	b.n	8002e12 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e14:	2900      	cmp	r1, #0
 8002e16:	f040 8088 	bne.w	8002f2a <xQueueGenericSend+0x136>
 8002e1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8084 	beq.w	8002f2a <xQueueGenericSend+0x136>
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	e7fe      	b.n	8002e32 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e34:	9e01      	ldr	r6, [sp, #4]
 8002e36:	2e00      	cmp	r6, #0
 8002e38:	f000 8082 	beq.w	8002f40 <xQueueGenericSend+0x14c>
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4e:	9d01      	ldr	r5, [sp, #4]
 8002e50:	b91d      	cbnz	r5, 8002e5a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002e52:	f7ff fd29 	bl	80028a8 <vPortExitCritical>
			return errQUEUE_FULL;
 8002e56:	2000      	movs	r0, #0
 8002e58:	e058      	b.n	8002f0c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002e5a:	b916      	cbnz	r6, 8002e62 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002e5c:	a802      	add	r0, sp, #8
 8002e5e:	f000 fd6d 	bl	800393c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002e62:	f7ff fd21 	bl	80028a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002e66:	f000 fb5f 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6a:	f7ff fcfb 	bl	8002864 <vPortEnterCritical>
 8002e6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	bf08      	it	eq
 8002e76:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002e7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002e7e:	2bff      	cmp	r3, #255	; 0xff
 8002e80:	bf08      	it	eq
 8002e82:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002e86:	f7ff fd0f 	bl	80028a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e8a:	a901      	add	r1, sp, #4
 8002e8c:	a802      	add	r0, sp, #8
 8002e8e:	f000 fd65 	bl	800395c <xTaskCheckForTimeOut>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d143      	bne.n	8002f1e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e96:	f7ff fce5 	bl	8002864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002e9c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002e9e:	f7ff fd03 	bl	80028a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ea2:	42ae      	cmp	r6, r5
 8002ea4:	d135      	bne.n	8002f12 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ea6:	9901      	ldr	r1, [sp, #4]
 8002ea8:	f104 0010 	add.w	r0, r4, #16
 8002eac:	f000 fcea 	bl	8003884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff ff02 	bl	8002cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb6:	f000 fbd7 	bl	8003668 <xTaskResumeAll>
 8002eba:	b938      	cbnz	r0, 8002ecc <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ec0:	f8ca 3000 	str.w	r3, [sl]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002ece:	f7ff fcc9 	bl	8002864 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d301      	bcc.n	8002ede <xQueueGenericSend+0xea>
 8002eda:	2f02      	cmp	r7, #2
 8002edc:	d1b7      	bne.n	8002e4e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ede:	463a      	mov	r2, r7
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff fea2 	bl	8002c2c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eea:	b11b      	cbz	r3, 8002ef4 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ef0:	f000 fce2 	bl	80038b8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002ef4:	b138      	cbz	r0, 8002f06 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <xQueueGenericSend+0x168>)
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002f06:	f7ff fccf 	bl	80028a8 <vPortExitCritical>
				return pdPASS;
 8002f0a:	2001      	movs	r0, #1
}
 8002f0c:	b004      	add	sp, #16
 8002f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff fed1 	bl	8002cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f18:	f000 fba6 	bl	8003668 <xTaskResumeAll>
 8002f1c:	e7d6      	b.n	8002ecc <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fecb 	bl	8002cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f24:	f000 fba0 	bl	8003668 <xTaskResumeAll>
 8002f28:	e795      	b.n	8002e56 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f2a:	2f02      	cmp	r7, #2
 8002f2c:	d102      	bne.n	8002f34 <xQueueGenericSend+0x140>
 8002f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f34:	f000 fd52 	bl	80039dc <xTaskGetSchedulerState>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	f43f af7b 	beq.w	8002e34 <xQueueGenericSend+0x40>
 8002f3e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002f40:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002f44:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002f5c <xQueueGenericSend+0x168>
 8002f48:	e7c1      	b.n	8002ece <xQueueGenericSend+0xda>
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGenericSend+0x166>
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <xQueueGenericSendFromISR>:
{
 8002f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f64:	4688      	mov	r8, r1
 8002f66:	4691      	mov	r9, r2
 8002f68:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	b940      	cbnz	r0, 8002f80 <xQueueGenericSendFromISR+0x20>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	e7fe      	b.n	8002f7e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f80:	bb09      	cbnz	r1, 8002fc6 <xQueueGenericSendFromISR+0x66>
 8002f82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f84:	b1fb      	cbz	r3, 8002fc6 <xQueueGenericSendFromISR+0x66>
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	e7fe      	b.n	8002f96 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f9c:	f000 fc8c 	bl	80038b8 <xTaskRemoveFromEventList>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d034      	beq.n	800300e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002fa4:	f1b9 0f00 	cmp.w	r9, #0
 8002fa8:	d031      	beq.n	800300e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002faa:	2001      	movs	r0, #1
 8002fac:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002fb0:	f386 8811 	msr	BASEPRI, r6
}
 8002fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fb8:	3501      	adds	r5, #1
 8002fba:	b26d      	sxtb	r5, r5
 8002fbc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002fc0:	e025      	b.n	800300e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	e7f4      	b.n	8002fb0 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc6:	2f02      	cmp	r7, #2
 8002fc8:	d102      	bne.n	8002fd0 <xQueueGenericSendFromISR+0x70>
 8002fca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d120      	bne.n	8003012 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fd0:	f7ff fd14 	bl	80029fc <vPortValidateInterruptPriority>
	__asm volatile
 8002fd4:	f3ef 8611 	mrs	r6, BASEPRI
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d301      	bcc.n	8002ff4 <xQueueGenericSendFromISR+0x94>
 8002ff0:	2f02      	cmp	r7, #2
 8002ff2:	d1e6      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff8:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ffa:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fe14 	bl	8002c2c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003004:	1c6b      	adds	r3, r5, #1
 8003006:	d1d7      	bne.n	8002fb8 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1c4      	bne.n	8002f98 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800300e:	2001      	movs	r0, #1
 8003010:	e7ce      	b.n	8002fb0 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	e7fe      	b.n	8003022 <xQueueGenericSendFromISR+0xc2>

08003024 <xQueueGenericReceive>:
{
 8003024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	4688      	mov	r8, r1
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800302e:	4604      	mov	r4, r0
 8003030:	b940      	cbnz	r0, 8003044 <xQueueGenericReceive+0x20>
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	e7fe      	b.n	8003042 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003044:	2900      	cmp	r1, #0
 8003046:	f040 80a5 	bne.w	8003194 <xQueueGenericReceive+0x170>
 800304a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a1 	beq.w	8003194 <xQueueGenericReceive+0x170>
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	e7fe      	b.n	8003062 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003064:	9e01      	ldr	r6, [sp, #4]
 8003066:	2e00      	cmp	r6, #0
 8003068:	f000 809a 	beq.w	80031a0 <xQueueGenericReceive+0x17c>
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	e7fe      	b.n	800307c <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800307e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003080:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06d      	beq.n	8003162 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003086:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800308a:	e05f      	b.n	800314c <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 800308c:	9d01      	ldr	r5, [sp, #4]
 800308e:	b91d      	cbnz	r5, 8003098 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8003090:	f7ff fc0a 	bl	80028a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003094:	4628      	mov	r0, r5
 8003096:	e067      	b.n	8003168 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8003098:	b916      	cbnz	r6, 80030a0 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 800309a:	a802      	add	r0, sp, #8
 800309c:	f000 fc4e 	bl	800393c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80030a0:	f7ff fc02 	bl	80028a8 <vPortExitCritical>
		vTaskSuspendAll();
 80030a4:	f000 fa40 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a8:	f7ff fbdc 	bl	8002864 <vPortEnterCritical>
 80030ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80030b0:	2bff      	cmp	r3, #255	; 0xff
 80030b2:	bf08      	it	eq
 80030b4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80030b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80030bc:	2bff      	cmp	r3, #255	; 0xff
 80030be:	bf08      	it	eq
 80030c0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80030c4:	f7ff fbf0 	bl	80028a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c8:	a901      	add	r1, sp, #4
 80030ca:	a802      	add	r0, sp, #8
 80030cc:	f000 fc46 	bl	800395c <xTaskCheckForTimeOut>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d152      	bne.n	800317a <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80030d4:	f7ff fbc6 	bl	8002864 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80030da:	f7ff fbe5 	bl	80028a8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030de:	2d00      	cmp	r5, #0
 80030e0:	d145      	bne.n	800316e <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	b933      	cbnz	r3, 80030f4 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80030e6:	f7ff fbbd 	bl	8002864 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80030ea:	6860      	ldr	r0, [r4, #4]
 80030ec:	f000 fc86 	bl	80039fc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80030f0:	f7ff fbda 	bl	80028a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030f4:	9901      	ldr	r1, [sp, #4]
 80030f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030fa:	f000 fbc3 	bl	8003884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fddb 	bl	8002cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003104:	f000 fab0 	bl	8003668 <xTaskResumeAll>
 8003108:	b938      	cbnz	r0, 800311a <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800310a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800310e:	f8ca 3000 	str.w	r3, [sl]
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800311c:	f7ff fba2 	bl	8002864 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003120:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003122:	2d00      	cmp	r5, #0
 8003124:	d0b2      	beq.n	800308c <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003126:	4641      	mov	r1, r8
 8003128:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800312a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800312c:	f7ff fdb1 	bl	8002c92 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8003130:	f1b9 0f00 	cmp.w	r9, #0
 8003134:	d1a3      	bne.n	800307e <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003136:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003138:	3d01      	subs	r5, #1
 800313a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313c:	b913      	cbnz	r3, 8003144 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800313e:	f000 fcf5 	bl	8003b2c <pvTaskIncrementMutexHeldCount>
 8003142:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003144:	6923      	ldr	r3, [r4, #16]
 8003146:	b163      	cbz	r3, 8003162 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003148:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800314c:	f000 fbb4 	bl	80038b8 <xTaskRemoveFromEventList>
 8003150:	b138      	cbz	r0, 8003162 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8003152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <xQueueGenericReceive+0x184>)
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003162:	f7ff fba1 	bl	80028a8 <vPortExitCritical>
				return pdPASS;
 8003166:	2001      	movs	r0, #1
}
 8003168:	b004      	add	sp, #16
 800316a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800316e:	4620      	mov	r0, r4
 8003170:	f7ff fda3 	bl	8002cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003174:	f000 fa78 	bl	8003668 <xTaskResumeAll>
 8003178:	e7cf      	b.n	800311a <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 800317a:	4620      	mov	r0, r4
 800317c:	f7ff fd9d 	bl	8002cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003180:	f000 fa72 	bl	8003668 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003184:	f7ff fb6e 	bl	8002864 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003188:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800318a:	f7ff fb8d 	bl	80028a8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800318e:	2d00      	cmp	r5, #0
 8003190:	d1c3      	bne.n	800311a <xQueueGenericReceive+0xf6>
 8003192:	e77f      	b.n	8003094 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003194:	f000 fc22 	bl	80039dc <xTaskGetSchedulerState>
 8003198:	2800      	cmp	r0, #0
 800319a:	f43f af63 	beq.w	8003064 <xQueueGenericReceive+0x40>
 800319e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80031a0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80031a2:	f8df a004 	ldr.w	sl, [pc, #4]	; 80031a8 <xQueueGenericReceive+0x184>
 80031a6:	e7b9      	b.n	800311c <xQueueGenericReceive+0xf8>
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031b2:	f7ff fb57 	bl	8002864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80031b8:	4c2d      	ldr	r4, [pc, #180]	; (8003270 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4f2d      	ldr	r7, [pc, #180]	; (8003274 <prvAddNewTaskToReadyList+0xc8>)
 80031be:	3201      	adds	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	d145      	bne.n	8003254 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031c8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d11c      	bne.n	800320a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d0:	1978      	adds	r0, r7, r5
 80031d2:	3514      	adds	r5, #20
 80031d4:	f7ff fab5 	bl	8002742 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031d8:	2d8c      	cmp	r5, #140	; 0x8c
 80031da:	d1f9      	bne.n	80031d0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031dc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80032a0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80031e0:	4d25      	ldr	r5, [pc, #148]	; (8003278 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7ff faad 	bl	8002742 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7ff faaa 	bl	8002742 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031ee:	4823      	ldr	r0, [pc, #140]	; (800327c <prvAddNewTaskToReadyList+0xd0>)
 80031f0:	f7ff faa7 	bl	8002742 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031f4:	4822      	ldr	r0, [pc, #136]	; (8003280 <prvAddNewTaskToReadyList+0xd4>)
 80031f6:	f7ff faa4 	bl	8002742 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031fa:	4822      	ldr	r0, [pc, #136]	; (8003284 <prvAddNewTaskToReadyList+0xd8>)
 80031fc:	f7ff faa1 	bl	8002742 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <prvAddNewTaskToReadyList+0xdc>)
 8003202:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <prvAddNewTaskToReadyList+0xe0>)
 8003208:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800320c:	4921      	ldr	r1, [pc, #132]	; (8003294 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800320e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003210:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003212:	3301      	adds	r3, #1
 8003214:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003216:	2301      	movs	r3, #1
 8003218:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800321a:	4093      	lsls	r3, r2
 800321c:	4303      	orrs	r3, r0
 800321e:	2014      	movs	r0, #20
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	fb00 7002 	mla	r0, r0, r2, r7
 8003226:	1d31      	adds	r1, r6, #4
 8003228:	f7ff fa99 	bl	800275e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800322c:	f7ff fb3c 	bl	80028a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <prvAddNewTaskToReadyList+0xec>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b163      	cbz	r3, 8003250 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <prvAddNewTaskToReadyList+0xf0>)
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <prvAddNewTaskToReadyList+0xec>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1d6      	bne.n	800320a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003262:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003264:	bf98      	it	ls
 8003266:	6026      	strls	r6, [r4, #0]
 8003268:	e7cf      	b.n	800320a <prvAddNewTaskToReadyList+0x5e>
 800326a:	bf00      	nop
 800326c:	20005114 	.word	0x20005114
 8003270:	2000507c 	.word	0x2000507c
 8003274:	20005088 	.word	0x20005088
 8003278:	20005140 	.word	0x20005140
 800327c:	2000515c 	.word	0x2000515c
 8003280:	20005188 	.word	0x20005188
 8003284:	20005174 	.word	0x20005174
 8003288:	20005080 	.word	0x20005080
 800328c:	20005084 	.word	0x20005084
 8003290:	20005124 	.word	0x20005124
 8003294:	20005128 	.word	0x20005128
 8003298:	20005170 	.word	0x20005170
 800329c:	e000ed04 	.word	0xe000ed04
 80032a0:	2000512c 	.word	0x2000512c

080032a4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <prvResetNextTaskUnblockTime+0x1c>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <prvResetNextTaskUnblockTime+0x20>)
 80032ac:	b919      	cbnz	r1, 80032b6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032ae:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032ba:	68d2      	ldr	r2, [r2, #12]
 80032bc:	6852      	ldr	r2, [r2, #4]
 80032be:	e7f8      	b.n	80032b2 <prvResetNextTaskUnblockTime+0xe>
 80032c0:	20005080 	.word	0x20005080
 80032c4:	20005154 	.word	0x20005154

080032c8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80032c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032cc:	4681      	mov	r9, r0
 80032ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80032d4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80032d6:	3a01      	subs	r2, #1
 80032d8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80032dc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80032e0:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032e2:	f026 0607 	bic.w	r6, r6, #7
 80032e6:	1e4b      	subs	r3, r1, #1
 80032e8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80032ec:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ee:	7858      	ldrb	r0, [r3, #1]
 80032f0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80032f4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80032f8:	b108      	cbz	r0, 80032fe <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032fa:	428b      	cmp	r3, r1
 80032fc:	d1f7      	bne.n	80032ee <prvInitialiseNewTask.isra.2+0x26>
 80032fe:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003300:	2700      	movs	r7, #0
 8003302:	2d06      	cmp	r5, #6
 8003304:	bf28      	it	cs
 8003306:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003308:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800330a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800330c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800330e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003312:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003314:	f7ff fa20 	bl	8002758 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003318:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800331c:	f104 0018 	add.w	r0, r4, #24
 8003320:	f7ff fa1a 	bl	8002758 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003324:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003326:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800332a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800332c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003330:	4652      	mov	r2, sl
 8003332:	4649      	mov	r1, r9
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff fa6d 	bl	8002814 <pxPortInitialiseStack>
 800333a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800333c:	f1b8 0f00 	cmp.w	r8, #0
 8003340:	d001      	beq.n	8003346 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003342:	f8c8 4000 	str.w	r4, [r8]
 8003346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800334a <prvDeleteTCB>:
	{
 800334a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800334c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003350:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003352:	b93b      	cbnz	r3, 8003364 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003354:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003356:	f7ff fc31 	bl	8002bbc <vPortFree>
				vPortFree( pxTCB );
 800335a:	4620      	mov	r0, r4
	}
 800335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003360:	f7ff bc2c 	b.w	8002bbc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003364:	2b01      	cmp	r3, #1
 8003366:	d0f9      	beq.n	800335c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8003368:	2b02      	cmp	r3, #2
 800336a:	d008      	beq.n	800337e <prvDeleteTCB+0x34>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	e7fe      	b.n	800337c <prvDeleteTCB+0x32>
 800337e:	bd10      	pop	{r4, pc}

08003380 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003384:	4e1b      	ldr	r6, [pc, #108]	; (80033f4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003386:	681d      	ldr	r5, [r3, #0]
{
 8003388:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338a:	6830      	ldr	r0, [r6, #0]
{
 800338c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338e:	3004      	adds	r0, #4
 8003390:	f7ff fa08 	bl	80027a4 <uxListRemove>
 8003394:	4633      	mov	r3, r6
 8003396:	b940      	cbnz	r0, 80033aa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003398:	2001      	movs	r0, #1
 800339a:	6831      	ldr	r1, [r6, #0]
 800339c:	4e16      	ldr	r6, [pc, #88]	; (80033f8 <prvAddCurrentTaskToDelayedList+0x78>)
 800339e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80033a0:	6832      	ldr	r2, [r6, #0]
 80033a2:	4088      	lsls	r0, r1
 80033a4:	ea22 0200 	bic.w	r2, r2, r0
 80033a8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033aa:	1c62      	adds	r2, r4, #1
 80033ac:	d107      	bne.n	80033be <prvAddCurrentTaskToDelayedList+0x3e>
 80033ae:	b137      	cbz	r7, 80033be <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	4812      	ldr	r0, [pc, #72]	; (80033fc <prvAddCurrentTaskToDelayedList+0x7c>)
 80033b4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ba:	f7ff b9d0 	b.w	800275e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033be:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033c0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80033c2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033c4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80033c6:	d907      	bls.n	80033d8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <prvAddCurrentTaskToDelayedList+0x80>)
 80033ca:	6810      	ldr	r0, [r2, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
}
 80033ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d2:	3104      	adds	r1, #4
 80033d4:	f7ff b9cf 	b.w	8002776 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <prvAddCurrentTaskToDelayedList+0x84>)
 80033da:	6810      	ldr	r0, [r2, #0]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	3104      	adds	r1, #4
 80033e0:	f7ff f9c9 	bl	8002776 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <prvAddCurrentTaskToDelayedList+0x88>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033ea:	bf38      	it	cc
 80033ec:	601c      	strcc	r4, [r3, #0]
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f0:	2000519c 	.word	0x2000519c
 80033f4:	2000507c 	.word	0x2000507c
 80033f8:	20005128 	.word	0x20005128
 80033fc:	20005174 	.word	0x20005174
 8003400:	20005084 	.word	0x20005084
 8003404:	20005080 	.word	0x20005080
 8003408:	20005154 	.word	0x20005154

0800340c <prvTaskIsTaskSuspended.part.0>:
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	e7fe      	b.n	800341c <prvTaskIsTaskSuspended.part.0+0x10>

0800341e <xTaskCreateStatic>:
	{
 800341e:	b530      	push	{r4, r5, lr}
 8003420:	b087      	sub	sp, #28
 8003422:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003424:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003426:	b90d      	cbnz	r5, 800342c <xTaskCreateStatic+0xe>
 8003428:	f7ff fff0 	bl	800340c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 800342c:	b944      	cbnz	r4, 8003440 <xTaskCreateStatic+0x22>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	e7fe      	b.n	800343e <xTaskCreateStatic+0x20>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003440:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003442:	2502      	movs	r5, #2
 8003444:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003448:	ad05      	add	r5, sp, #20
 800344a:	9501      	str	r5, [sp, #4]
 800344c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800344e:	9402      	str	r4, [sp, #8]
 8003450:	9500      	str	r5, [sp, #0]
 8003452:	f7ff ff39 	bl	80032c8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003456:	4620      	mov	r0, r4
 8003458:	f7ff fea8 	bl	80031ac <prvAddNewTaskToReadyList>
	}
 800345c:	9805      	ldr	r0, [sp, #20]
 800345e:	b007      	add	sp, #28
 8003460:	bd30      	pop	{r4, r5, pc}

08003462 <xTaskCreate>:
	{
 8003462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003466:	4607      	mov	r7, r0
 8003468:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346a:	0090      	lsls	r0, r2, #2
	{
 800346c:	4688      	mov	r8, r1
 800346e:	4616      	mov	r6, r2
 8003470:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003472:	f7ff fb15 	bl	8002aa0 <pvPortMalloc>
			if( pxStack != NULL )
 8003476:	4605      	mov	r5, r0
 8003478:	b1e8      	cbz	r0, 80034b6 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800347a:	2054      	movs	r0, #84	; 0x54
 800347c:	f7ff fb10 	bl	8002aa0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003480:	4604      	mov	r4, r0
 8003482:	b1a8      	cbz	r0, 80034b0 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003484:	2300      	movs	r3, #0
 8003486:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800348a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800348c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003492:	9002      	str	r0, [sp, #8]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4632      	mov	r2, r6
 8003498:	464b      	mov	r3, r9
 800349a:	4641      	mov	r1, r8
 800349c:	4638      	mov	r0, r7
 800349e:	f7ff ff13 	bl	80032c8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff fe82 	bl	80031ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034a8:	2001      	movs	r0, #1
	}
 80034aa:	b005      	add	sp, #20
 80034ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80034b0:	4628      	mov	r0, r5
 80034b2:	f7ff fb83 	bl	8002bbc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034b6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80034ba:	e7f6      	b.n	80034aa <xTaskCreate+0x48>

080034bc <vTaskStartScheduler>:
{
 80034bc:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034be:	2400      	movs	r4, #0
{
 80034c0:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	aa07      	add	r2, sp, #28
 80034c4:	a906      	add	r1, sp, #24
 80034c6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034c8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034ca:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034cc:	f001 f8da 	bl	8004684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	9b05      	ldr	r3, [sp, #20]
 80034d2:	9400      	str	r4, [sp, #0]
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	9b06      	ldr	r3, [sp, #24]
 80034d8:	9a07      	ldr	r2, [sp, #28]
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	490d      	ldr	r1, [pc, #52]	; (8003514 <vTaskStartScheduler+0x58>)
 80034de:	4623      	mov	r3, r4
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <vTaskStartScheduler+0x5c>)
 80034e2:	f7ff ff9c 	bl	800341e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80034e6:	b190      	cbz	r0, 800350e <vTaskStartScheduler+0x52>
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <vTaskStartScheduler+0x60>)
 80034fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003500:	2201      	movs	r2, #1
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <vTaskStartScheduler+0x64>)
 8003504:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <vTaskStartScheduler+0x68>)
 8003508:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800350a:	f7ff fa2d 	bl	8002968 <xPortStartScheduler>
}
 800350e:	b008      	add	sp, #32
 8003510:	bd10      	pop	{r4, pc}
 8003512:	bf00      	nop
 8003514:	08006694 	.word	0x08006694
 8003518:	080037a1 	.word	0x080037a1
 800351c:	20005154 	.word	0x20005154
 8003520:	20005170 	.word	0x20005170
 8003524:	2000519c 	.word	0x2000519c

08003528 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003528:	4a02      	ldr	r2, [pc, #8]	; (8003534 <vTaskSuspendAll+0xc>)
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20005120 	.word	0x20005120

08003538 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003538:	4b01      	ldr	r3, [pc, #4]	; (8003540 <xTaskGetTickCount+0x8>)
 800353a:	6818      	ldr	r0, [r3, #0]
}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	2000519c 	.word	0x2000519c

08003544 <xTaskIncrementTick>:
{
 8003544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003548:	4b3c      	ldr	r3, [pc, #240]	; (800363c <xTaskIncrementTick+0xf8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d153      	bne.n	80035f8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <xTaskIncrementTick+0xfc>)
 8003552:	681c      	ldr	r4, [r3, #0]
 8003554:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003556:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003558:	b9bc      	cbnz	r4, 800358a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800355a:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <xTaskIncrementTick+0x100>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	b142      	cbz	r2, 8003574 <xTaskIncrementTick+0x30>
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	e7fe      	b.n	8003572 <xTaskIncrementTick+0x2e>
 8003574:	4a34      	ldr	r2, [pc, #208]	; (8003648 <xTaskIncrementTick+0x104>)
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	6810      	ldr	r0, [r2, #0]
 800357a:	6018      	str	r0, [r3, #0]
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <xTaskIncrementTick+0x108>)
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	f7ff fe8d 	bl	80032a4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800358a:	4d31      	ldr	r5, [pc, #196]	; (8003650 <xTaskIncrementTick+0x10c>)
 800358c:	f04f 0b00 	mov.w	fp, #0
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	4f30      	ldr	r7, [pc, #192]	; (8003654 <xTaskIncrementTick+0x110>)
 8003594:	429c      	cmp	r4, r3
 8003596:	d33e      	bcc.n	8003616 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003598:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003644 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800359c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003664 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035a0:	f8d8 2000 	ldr.w	r2, [r8]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	bb72      	cbnz	r2, 8003606 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	602a      	str	r2, [r5, #0]
					break;
 80035ae:	e032      	b.n	8003616 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b0:	f106 0a04 	add.w	sl, r6, #4
 80035b4:	4650      	mov	r0, sl
 80035b6:	f7ff f8f5 	bl	80027a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80035bc:	b119      	cbz	r1, 80035c6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035be:	f106 0018 	add.w	r0, r6, #24
 80035c2:	f7ff f8ef 	bl	80027a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035c6:	2201      	movs	r2, #1
 80035c8:	f04f 0e14 	mov.w	lr, #20
 80035cc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80035ce:	f8d9 3000 	ldr.w	r3, [r9]
 80035d2:	fa02 f100 	lsl.w	r1, r2, r0
 80035d6:	4319      	orrs	r1, r3
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <xTaskIncrementTick+0x114>)
 80035da:	f8c9 1000 	str.w	r1, [r9]
 80035de:	fb0e 3000 	mla	r0, lr, r0, r3
 80035e2:	4651      	mov	r1, sl
 80035e4:	f7ff f8bb 	bl	800275e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e8:	6838      	ldr	r0, [r7, #0]
 80035ea:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80035ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80035ee:	4291      	cmp	r1, r2
 80035f0:	bf28      	it	cs
 80035f2:	f04f 0b01 	movcs.w	fp, #1
 80035f6:	e7d3      	b.n	80035a0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80035fa:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e011      	b.n	800362a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003606:	f8d8 2000 	ldr.w	r2, [r8]
 800360a:	68d2      	ldr	r2, [r2, #12]
 800360c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800360e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003610:	428c      	cmp	r4, r1
 8003612:	d2cd      	bcs.n	80035b0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003614:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <xTaskIncrementTick+0x114>)
 800361a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800361c:	2214      	movs	r2, #20
 800361e:	434a      	muls	r2, r1
 8003620:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003622:	2a02      	cmp	r2, #2
 8003624:	bf28      	it	cs
 8003626:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <xTaskIncrementTick+0x11c>)
 800362c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800362e:	2a00      	cmp	r2, #0
 8003630:	bf18      	it	ne
 8003632:	f04f 0b01 	movne.w	fp, #1
}
 8003636:	4658      	mov	r0, fp
 8003638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363c:	20005120 	.word	0x20005120
 8003640:	2000519c 	.word	0x2000519c
 8003644:	20005080 	.word	0x20005080
 8003648:	20005084 	.word	0x20005084
 800364c:	20005158 	.word	0x20005158
 8003650:	20005154 	.word	0x20005154
 8003654:	2000507c 	.word	0x2000507c
 8003658:	20005088 	.word	0x20005088
 800365c:	2000511c 	.word	0x2000511c
 8003660:	200051a0 	.word	0x200051a0
 8003664:	20005128 	.word	0x20005128

08003668 <xTaskResumeAll>:
{
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800366c:	4c31      	ldr	r4, [pc, #196]	; (8003734 <xTaskResumeAll+0xcc>)
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	b943      	cbnz	r3, 8003684 <xTaskResumeAll+0x1c>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	e7fe      	b.n	8003682 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003684:	f7ff f8ee 	bl	8002864 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368e:	6824      	ldr	r4, [r4, #0]
 8003690:	b12c      	cbz	r4, 800369e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003692:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003694:	f7ff f908 	bl	80028a8 <vPortExitCritical>
}
 8003698:	4620      	mov	r0, r4
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <xTaskResumeAll+0xd0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f5      	beq.n	8003692 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003750 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80036aa:	4f24      	ldr	r7, [pc, #144]	; (800373c <xTaskResumeAll+0xd4>)
 80036ac:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003754 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b0:	f8d9 3000 	ldr.w	r3, [r9]
 80036b4:	b9e3      	cbnz	r3, 80036f0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80036b6:	b10c      	cbz	r4, 80036bc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80036b8:	f7ff fdf4 	bl	80032a4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036bc:	4d20      	ldr	r5, [pc, #128]	; (8003740 <xTaskResumeAll+0xd8>)
 80036be:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036c0:	b144      	cbz	r4, 80036d4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80036c2:	2701      	movs	r7, #1
 80036c4:	4e1f      	ldr	r6, [pc, #124]	; (8003744 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80036c6:	f7ff ff3d 	bl	8003544 <xTaskIncrementTick>
 80036ca:	b100      	cbz	r0, 80036ce <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80036cc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036ce:	3c01      	subs	r4, #1
 80036d0:	d1f9      	bne.n	80036c6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80036d2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <xTaskResumeAll+0xdc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0da      	beq.n	8003692 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <xTaskResumeAll+0xe0>)
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80036ec:	2401      	movs	r4, #1
 80036ee:	e7d1      	b.n	8003694 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80036f4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fa:	f104 0018 	add.w	r0, r4, #24
 80036fe:	f7ff f851 	bl	80027a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff f84e 	bl	80027a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003708:	2014      	movs	r0, #20
 800370a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	fa05 f302 	lsl.w	r3, r5, r2
 8003712:	430b      	orrs	r3, r1
 8003714:	fb00 8002 	mla	r0, r0, r2, r8
 8003718:	4631      	mov	r1, r6
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	f7ff f81f 	bl	800275e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <xTaskResumeAll+0xe4>)
 8003722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800372a:	bf24      	itt	cs
 800372c:	4b05      	ldrcs	r3, [pc, #20]	; (8003744 <xTaskResumeAll+0xdc>)
 800372e:	601d      	strcs	r5, [r3, #0]
 8003730:	e7be      	b.n	80036b0 <xTaskResumeAll+0x48>
 8003732:	bf00      	nop
 8003734:	20005120 	.word	0x20005120
 8003738:	20005114 	.word	0x20005114
 800373c:	20005128 	.word	0x20005128
 8003740:	2000511c 	.word	0x2000511c
 8003744:	200051a0 	.word	0x200051a0
 8003748:	e000ed04 	.word	0xe000ed04
 800374c:	2000507c 	.word	0x2000507c
 8003750:	2000515c 	.word	0x2000515c
 8003754:	20005088 	.word	0x20005088

08003758 <vTaskDelay>:
	{
 8003758:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800375a:	b940      	cbnz	r0, 800376e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <vTaskDelay+0x40>)
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <vTaskDelay+0x44>)
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	b141      	cbz	r1, 8003786 <vTaskDelay+0x2e>
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	e7fe      	b.n	8003784 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003786:	f7ff fecf 	bl	8003528 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800378a:	f7ff fdf9 	bl	8003380 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800378e:	f7ff ff6b 	bl	8003668 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003792:	2800      	cmp	r0, #0
 8003794:	d0e2      	beq.n	800375c <vTaskDelay+0x4>
 8003796:	bd08      	pop	{r3, pc}
 8003798:	e000ed04 	.word	0xe000ed04
 800379c:	20005120 	.word	0x20005120

080037a0 <prvIdleTask>:
{
 80037a0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80037a2:	4d16      	ldr	r5, [pc, #88]	; (80037fc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a4:	4c16      	ldr	r4, [pc, #88]	; (8003800 <prvIdleTask+0x60>)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	b963      	cbnz	r3, 80037c4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <prvIdleTask+0x64>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d9f8      	bls.n	80037a4 <prvIdleTask+0x4>
				taskYIELD();
 80037b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <prvIdleTask+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	e7ef      	b.n	80037a4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80037c4:	f7ff feb0 	bl	8003528 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80037c8:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 80037ca:	f7ff ff4d 	bl	8003668 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0e9      	beq.n	80037a6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80037d2:	f7ff f847 	bl	8002864 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037d6:	68eb      	ldr	r3, [r5, #12]
 80037d8:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037da:	1d30      	adds	r0, r6, #4
 80037dc:	f7fe ffe2 	bl	80027a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <prvIdleTask+0x6c>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80037ee:	f7ff f85b 	bl	80028a8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80037f2:	4630      	mov	r0, r6
 80037f4:	f7ff fda9 	bl	800334a <prvDeleteTCB>
 80037f8:	e7d5      	b.n	80037a6 <prvIdleTask+0x6>
 80037fa:	bf00      	nop
 80037fc:	20005188 	.word	0x20005188
 8003800:	20005118 	.word	0x20005118
 8003804:	20005088 	.word	0x20005088
 8003808:	e000ed04 	.word	0xe000ed04
 800380c:	20005114 	.word	0x20005114

08003810 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <vTaskSwitchContext+0x60>)
{
 8003812:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <vTaskSwitchContext+0x64>)
 8003818:	b112      	cbz	r2, 8003820 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800381a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003820:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <vTaskSwitchContext+0x68>)
 8003824:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	2214      	movs	r2, #20
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f1c3 031f 	rsb	r3, r3, #31
 8003832:	435a      	muls	r2, r3
 8003834:	4911      	ldr	r1, [pc, #68]	; (800387c <vTaskSwitchContext+0x6c>)
 8003836:	588c      	ldr	r4, [r1, r2]
 8003838:	1888      	adds	r0, r1, r2
 800383a:	b944      	cbnz	r4, 800384e <vTaskSwitchContext+0x3e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	e7fe      	b.n	800384c <vTaskSwitchContext+0x3c>
 800384e:	6844      	ldr	r4, [r0, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	6864      	ldr	r4, [r4, #4]
 8003854:	440a      	add	r2, r1
 8003856:	4294      	cmp	r4, r2
 8003858:	bf08      	it	eq
 800385a:	6862      	ldreq	r2, [r4, #4]
 800385c:	6044      	str	r4, [r0, #4]
 800385e:	bf08      	it	eq
 8003860:	6042      	streq	r2, [r0, #4]
 8003862:	2214      	movs	r2, #20
 8003864:	fb02 1303 	mla	r3, r2, r3, r1
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vTaskSwitchContext+0x70>)
 800386e:	e7d5      	b.n	800381c <vTaskSwitchContext+0xc>
 8003870:	20005120 	.word	0x20005120
 8003874:	200051a0 	.word	0x200051a0
 8003878:	20005128 	.word	0x20005128
 800387c:	20005088 	.word	0x20005088
 8003880:	2000507c 	.word	0x2000507c

08003884 <vTaskPlaceOnEventList>:
{
 8003884:	b510      	push	{r4, lr}
 8003886:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003888:	b940      	cbnz	r0, 800389c <vTaskPlaceOnEventList+0x18>
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	e7fe      	b.n	800389a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <vTaskPlaceOnEventList+0x30>)
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	3118      	adds	r1, #24
 80038a2:	f7fe ff68 	bl	8002776 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a6:	4620      	mov	r0, r4
}
 80038a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038ac:	2101      	movs	r1, #1
 80038ae:	f7ff bd67 	b.w	8003380 <prvAddCurrentTaskToDelayedList>
 80038b2:	bf00      	nop
 80038b4:	2000507c 	.word	0x2000507c

080038b8 <xTaskRemoveFromEventList>:
{
 80038b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80038ba:	68c3      	ldr	r3, [r0, #12]
 80038bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80038be:	b944      	cbnz	r4, 80038d2 <xTaskRemoveFromEventList+0x1a>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	e7fe      	b.n	80038d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038d2:	f104 0518 	add.w	r5, r4, #24
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7fe ff64 	bl	80027a4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <xTaskRemoveFromEventList+0x6c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	b9e3      	cbnz	r3, 800391c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038e2:	1d25      	adds	r5, r4, #4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7fe ff5d 	bl	80027a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038ea:	2301      	movs	r3, #1
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <xTaskRemoveFromEventList+0x70>)
 80038ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	4093      	lsls	r3, r2
 80038f4:	4303      	orrs	r3, r0
 80038f6:	2014      	movs	r0, #20
 80038f8:	600b      	str	r3, [r1, #0]
 80038fa:	4629      	mov	r1, r5
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <xTaskRemoveFromEventList+0x74>)
 80038fe:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003902:	f7fe ff2c 	bl	800275e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <xTaskRemoveFromEventList+0x78>)
 8003908:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003910:	bf85      	ittet	hi
 8003912:	2001      	movhi	r0, #1
 8003914:	4b07      	ldrhi	r3, [pc, #28]	; (8003934 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8003916:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003918:	6018      	strhi	r0, [r3, #0]
}
 800391a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800391c:	4629      	mov	r1, r5
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <xTaskRemoveFromEventList+0x80>)
 8003920:	e7ef      	b.n	8003902 <xTaskRemoveFromEventList+0x4a>
 8003922:	bf00      	nop
 8003924:	20005120 	.word	0x20005120
 8003928:	20005128 	.word	0x20005128
 800392c:	20005088 	.word	0x20005088
 8003930:	2000507c 	.word	0x2000507c
 8003934:	200051a0 	.word	0x200051a0
 8003938:	2000515c 	.word	0x2000515c

0800393c <vTaskSetTimeOutState>:
{
 800393c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800393e:	b908      	cbnz	r0, 8003944 <vTaskSetTimeOutState+0x8>
 8003940:	f7ff fd64 	bl	800340c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <vTaskSetTimeOutState+0x18>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800394a:	4b03      	ldr	r3, [pc, #12]	; (8003958 <vTaskSetTimeOutState+0x1c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6043      	str	r3, [r0, #4]
 8003950:	bd08      	pop	{r3, pc}
 8003952:	bf00      	nop
 8003954:	20005158 	.word	0x20005158
 8003958:	2000519c 	.word	0x2000519c

0800395c <xTaskCheckForTimeOut>:
{
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003960:	4604      	mov	r4, r0
 8003962:	b940      	cbnz	r0, 8003976 <xTaskCheckForTimeOut+0x1a>
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	e7fe      	b.n	8003974 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003976:	b941      	cbnz	r1, 800398a <xTaskCheckForTimeOut+0x2e>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	e7fe      	b.n	8003988 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800398a:	f7fe ff6b 	bl	8002864 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <xTaskCheckForTimeOut+0x6c>)
 8003990:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	d010      	beq.n	80039ba <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <xTaskCheckForTimeOut+0x70>)
 800399a:	6820      	ldr	r0, [r4, #0]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	4290      	cmp	r0, r2
 80039a0:	6862      	ldr	r2, [r4, #4]
 80039a2:	d001      	beq.n	80039a8 <xTaskCheckForTimeOut+0x4c>
 80039a4:	4291      	cmp	r1, r2
 80039a6:	d20d      	bcs.n	80039c4 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039a8:	1a88      	subs	r0, r1, r2
 80039aa:	4283      	cmp	r3, r0
 80039ac:	d90a      	bls.n	80039c4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80039ae:	1a5b      	subs	r3, r3, r1
 80039b0:	4413      	add	r3, r2
 80039b2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff ffc1 	bl	800393c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80039ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80039bc:	f7fe ff74 	bl	80028a8 <vPortExitCritical>
}
 80039c0:	4620      	mov	r0, r4
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80039c4:	2401      	movs	r4, #1
 80039c6:	e7f9      	b.n	80039bc <xTaskCheckForTimeOut+0x60>
 80039c8:	2000519c 	.word	0x2000519c
 80039cc:	20005158 	.word	0x20005158

080039d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80039d0:	2201      	movs	r2, #1
 80039d2:	4b01      	ldr	r3, [pc, #4]	; (80039d8 <vTaskMissedYield+0x8>)
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	4770      	bx	lr
 80039d8:	200051a0 	.word	0x200051a0

080039dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <xTaskGetSchedulerState+0x18>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b133      	cbz	r3, 80039f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <xTaskGetSchedulerState+0x1c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80039e8:	bf0c      	ite	eq
 80039ea:	2002      	moveq	r0, #2
 80039ec:	2000      	movne	r0, #0
 80039ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039f0:	2001      	movs	r0, #1
	}
 80039f2:	4770      	bx	lr
 80039f4:	20005170 	.word	0x20005170
 80039f8:	20005120 	.word	0x20005120

080039fc <vTaskPriorityInherit>:
	{
 80039fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003a00:	4604      	mov	r4, r0
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d039      	beq.n	8003a7a <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a06:	4d1e      	ldr	r5, [pc, #120]	; (8003a80 <vTaskPriorityInherit+0x84>)
 8003a08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a0a:	682a      	ldr	r2, [r5, #0]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d233      	bcs.n	8003a7a <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a12:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a14:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a16:	4e1b      	ldr	r6, [pc, #108]	; (8003a84 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a18:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1a:	bfa8      	it	ge
 8003a1c:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a1e:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	bfa2      	ittt	ge
 8003a24:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003a26:	f1c2 0207 	rsbge	r2, r2, #7
 8003a2a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a2c:	6942      	ldr	r2, [r0, #20]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d120      	bne.n	8003a74 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a32:	f100 0804 	add.w	r8, r0, #4
 8003a36:	4640      	mov	r0, r8
 8003a38:	f7fe feb4 	bl	80027a4 <uxListRemove>
 8003a3c:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <vTaskPriorityInherit+0x8c>)
 8003a3e:	b948      	cbnz	r0, 8003a54 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003a42:	4347      	muls	r7, r0
 8003a44:	59f3      	ldr	r3, [r6, r7]
 8003a46:	b92b      	cbnz	r3, 8003a54 <vTaskPriorityInherit+0x58>
 8003a48:	2101      	movs	r1, #1
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	4081      	lsls	r1, r0
 8003a4e:	ea23 0301 	bic.w	r3, r3, r1
 8003a52:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a54:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003a56:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4083      	lsls	r3, r0
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a64:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003a66:	4641      	mov	r1, r8
 8003a68:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003a70:	f7fe be75 	b.w	800275e <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000507c 	.word	0x2000507c
 8003a84:	20005088 	.word	0x20005088
 8003a88:	20005128 	.word	0x20005128

08003a8c <xTaskPriorityDisinherit>:
	{
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003a8e:	4604      	mov	r4, r0
 8003a90:	b908      	cbnz	r0, 8003a96 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003a92:	2000      	movs	r0, #0
 8003a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <xTaskPriorityDisinherit+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	d008      	beq.n	8003ab0 <xTaskPriorityDisinherit+0x24>
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	e7fe      	b.n	8003aae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ab0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003ab2:	b943      	cbnz	r3, 8003ac6 <xTaskPriorityDisinherit+0x3a>
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ac6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003aca:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003acc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003ace:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ad0:	d0df      	beq.n	8003a92 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1dd      	bne.n	8003a92 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad6:	1d05      	adds	r5, r0, #4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7fe fe63 	bl	80027a4 <uxListRemove>
 8003ade:	4e11      	ldr	r6, [pc, #68]	; (8003b24 <xTaskPriorityDisinherit+0x98>)
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <xTaskPriorityDisinherit+0x9c>)
 8003ae2:	b950      	cbnz	r0, 8003afa <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ae4:	2114      	movs	r1, #20
 8003ae6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ae8:	4379      	muls	r1, r7
 8003aea:	5873      	ldr	r3, [r6, r1]
 8003aec:	b92b      	cbnz	r3, 8003afa <xTaskPriorityDisinherit+0x6e>
 8003aee:	2001      	movs	r0, #1
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	40b8      	lsls	r0, r7
 8003af4:	ea23 0300 	bic.w	r3, r3, r0
 8003af8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003afa:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afc:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b00:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b02:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b04:	2401      	movs	r4, #1
 8003b06:	6811      	ldr	r1, [r2, #0]
 8003b08:	fa04 f003 	lsl.w	r0, r4, r3
 8003b0c:	4308      	orrs	r0, r1
 8003b0e:	6010      	str	r0, [r2, #0]
 8003b10:	2014      	movs	r0, #20
 8003b12:	4629      	mov	r1, r5
 8003b14:	fb00 6003 	mla	r0, r0, r3, r6
 8003b18:	f7fe fe21 	bl	800275e <vListInsertEnd>
					xReturn = pdTRUE;
 8003b1c:	4620      	mov	r0, r4
	}
 8003b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b20:	2000507c 	.word	0x2000507c
 8003b24:	20005088 	.word	0x20005088
 8003b28:	20005128 	.word	0x20005128

08003b2c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <pvTaskIncrementMutexHeldCount+0x14>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	b11a      	cbz	r2, 8003b3a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003b36:	3201      	adds	r2, #1
 8003b38:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003b3a:	6818      	ldr	r0, [r3, #0]
	}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	2000507c 	.word	0x2000507c

08003b44 <fir_filter>:

extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint8_t p_recCommandBuffer;

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b46:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 8003b48:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003b4a:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8003b4c:	4d0f      	ldr	r5, [pc, #60]	; (8003b8c <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003b4e:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8003b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003b60:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8003b64:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 8003b68:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 8003b6a:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 8003b6c:	d1fa      	bne.n	8003b64 <fir_filter+0x20>
	}

	signal[0] = sample;
 8003b6e:	2300      	movs	r3, #0
	filteredSample = 0;
 8003b70:	4618      	mov	r0, r3
	signal[0] = sample;
 8003b72:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003b74:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8003b78:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 8003b7c:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 8003b7e:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003b80:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 8003b84:	d1f6      	bne.n	8003b74 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 8003b86:	0c00      	lsrs	r0, r0, #16
 8003b88:	b00b      	add	sp, #44	; 0x2c
 8003b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8c:	08006634 	.word	0x08006634

08003b90 <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 8003b94:	2214      	movs	r2, #20
 8003b96:	2100      	movs	r1, #0
 8003b98:	4668      	mov	r0, sp
 8003b9a:	f001 fc18 	bl	80053ce <memset>
	uint16_t sens2_array[10] = {2};
 8003b9e:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 8003ba0:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 8003ba8:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 8003bac:	f001 fc0f 	bl	80053ce <memset>
 8003bb0:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 8003bb2:	2214      	movs	r2, #20
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 8003bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 8003bbc:	f001 fc07 	bl	80053ce <memset>
 8003bc0:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 8003bc2:	2214      	movs	r2, #20
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (controllerState.lastTimeCommand > 50){
 8003bc8:	4e69      	ldr	r6, [pc, #420]	; (8003d70 <xStoreADCDataTask+0x1e0>)
	uint16_t sens3_array[10] = {3};
 8003bca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8003bce:	f001 fbfe 	bl	80053ce <memset>
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	4634      	mov	r4, r6
			}
			else{
				controllerState.lastTimeCommand++;
				if (controllerState.lastTimeCommand > 600){

					CMD_RF_ON;
 8003bd6:	4f67      	ldr	r7, [pc, #412]	; (8003d74 <xStoreADCDataTask+0x1e4>)
	uint16_t sens4_array[10] = {4};
 8003bd8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (controllerState.lastTimeCommand > 50){
 8003bdc:	8bf3      	ldrh	r3, [r6, #30]
 8003bde:	2b32      	cmp	r3, #50	; 0x32
 8003be0:	f240 808d 	bls.w	8003cfe <xStoreADCDataTask+0x16e>
			if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8003be4:	7875      	ldrb	r5, [r6, #1]
 8003be6:	bb6d      	cbnz	r5, 8003c44 <xStoreADCDataTask+0xb4>
				C1_UP_OFF;
 8003be8:	462a      	mov	r2, r5
 8003bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bee:	4862      	ldr	r0, [pc, #392]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003bf0:	f7fd fe9a 	bl	8001928 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfa:	485f      	ldr	r0, [pc, #380]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003bfc:	f7fd fe94 	bl	8001928 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8003c00:	462a      	mov	r2, r5
 8003c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c06:	485c      	ldr	r0, [pc, #368]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003c08:	f7fd fe8e 	bl	8001928 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c12:	4859      	ldr	r0, [pc, #356]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003c14:	f7fd fe88 	bl	8001928 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8003c18:	462a      	mov	r2, r5
 8003c1a:	2140      	movs	r1, #64	; 0x40
 8003c1c:	4857      	ldr	r0, [pc, #348]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003c1e:	f7fd fe83 	bl	8001928 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8003c22:	462a      	mov	r2, r5
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	4855      	ldr	r0, [pc, #340]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003c28:	f7fd fe7e 	bl	8001928 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8003c2c:	462a      	mov	r2, r5
 8003c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c32:	4852      	ldr	r0, [pc, #328]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003c34:	f7fd fe78 	bl	8001928 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8003c38:	462a      	mov	r2, r5
 8003c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c3e:	484f      	ldr	r0, [pc, #316]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003c40:	f7fd fe72 	bl	8001928 <HAL_GPIO_WritePin>
			if (controllerState.soundIndicationState != SEARCH_INDICATION){
 8003c44:	78e5      	ldrb	r5, [r4, #3]
 8003c46:	2d01      	cmp	r5, #1
 8003c48:	d032      	beq.n	8003cb0 <xStoreADCDataTask+0x120>
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

					vTaskDelay(50 / portTICK_RATE_MS);
					CMD_RF_OFF;

					controllerState.soundIndicationState = NORMAL_INDICATION;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	70e3      	strb	r3, [r4, #3]
					controllerState.lastTimeCommand = 0;
 8003c4e:	83e3      	strh	r3, [r4, #30]
		}
		else{
			controllerState.lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <xStoreADCDataTask+0x1f0>)
 8003c52:	4d4c      	ldr	r5, [pc, #304]	; (8003d84 <xStoreADCDataTask+0x1f4>)
 8003c54:	881a      	ldrh	r2, [r3, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
		sensorValue[SENS_3] = ADCRawData[SENS_3];
		sensorValue[SENS_4] = ADCRawData[SENS_4];

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003c56:	484c      	ldr	r0, [pc, #304]	; (8003d88 <xStoreADCDataTask+0x1f8>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003c58:	802a      	strh	r2, [r5, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8003c5a:	885a      	ldrh	r2, [r3, #2]
 8003c5c:	806a      	strh	r2, [r5, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003c5e:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003c60:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003c62:	80aa      	strh	r2, [r5, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003c64:	80eb      	strh	r3, [r5, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003c66:	f7fd f9b9 	bl	8000fdc <HAL_ADCEx_InjectedStart_IT>
		//HAL_ADCEx_InjectedStart_IT(&hadc2);


		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003c6a:	8829      	ldrh	r1, [r5, #0]
 8003c6c:	4668      	mov	r0, sp
 8003c6e:	f7ff ff69 	bl	8003b44 <fir_filter>
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003c72:	8869      	ldrh	r1, [r5, #2]
		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003c74:	81e0      	strh	r0, [r4, #14]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003c76:	a805      	add	r0, sp, #20
 8003c78:	f7ff ff64 	bl	8003b44 <fir_filter>
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003c7c:	88a9      	ldrh	r1, [r5, #4]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003c7e:	8220      	strh	r0, [r4, #16]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003c80:	a80a      	add	r0, sp, #40	; 0x28
 8003c82:	f7ff ff5f 	bl	8003b44 <fir_filter>
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003c86:	88e9      	ldrh	r1, [r5, #6]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003c88:	8260      	strh	r0, [r4, #18]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003c8a:	a80f      	add	r0, sp, #60	; 0x3c
 8003c8c:	f7ff ff5a 	bl	8003b44 <fir_filter>


		if (controllerState.pressureCompensation == COMPENSATION_ON){
 8003c90:	7863      	ldrb	r3, [r4, #1]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003c92:	82a0      	strh	r0, [r4, #20]
		if (controllerState.pressureCompensation == COMPENSATION_ON){
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d135      	bne.n	8003d04 <xStoreADCDataTask+0x174>
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003c98:	2300      	movs	r3, #0
			xSemaphoreGive(xPressureCompensationSemaphore);
 8003c9a:	483c      	ldr	r0, [pc, #240]	; (8003d8c <xStoreADCDataTask+0x1fc>)
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6800      	ldr	r0, [r0, #0]
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003ca2:	70a3      	strb	r3, [r4, #2]
			xSemaphoreGive(xPressureCompensationSemaphore);
 8003ca4:	f7ff f8a6 	bl	8002df4 <xQueueGenericSend>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 8003ca8:	2032      	movs	r0, #50	; 0x32
 8003caa:	f7ff fd55 	bl	8003758 <vTaskDelay>
		if (controllerState.lastTimeCommand > 50){
 8003cae:	e795      	b.n	8003bdc <xStoreADCDataTask+0x4c>
				controllerState.lastTimeCommand++;
 8003cb0:	8be3      	ldrh	r3, [r4, #30]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b29b      	uxth	r3, r3
				if (controllerState.lastTimeCommand > 600){
 8003cb6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				controllerState.lastTimeCommand++;
 8003cba:	83e3      	strh	r3, [r4, #30]
				if (controllerState.lastTimeCommand > 600){
 8003cbc:	d9c8      	bls.n	8003c50 <xStoreADCDataTask+0xc0>
					CMD_RF_ON;
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7fd fe2f 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8003cca:	2032      	movs	r0, #50	; 0x32
 8003ccc:	f7ff fd44 	bl	8003758 <vTaskDelay>
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <xStoreADCDataTask+0x200>)
 8003cd2:	4930      	ldr	r1, [pc, #192]	; (8003d94 <xStoreADCDataTask+0x204>)
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	4830      	ldr	r0, [pc, #192]	; (8003d98 <xStoreADCDataTask+0x208>)
 8003cd8:	f001 fb82 	bl	80053e0 <siprintf>
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <xStoreADCDataTask+0x20c>)
 8003cde:	b2c2      	uxtb	r2, r0
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8003ce0:	492d      	ldr	r1, [pc, #180]	; (8003d98 <xStoreADCDataTask+0x208>)
 8003ce2:	482f      	ldr	r0, [pc, #188]	; (8003da0 <xStoreADCDataTask+0x210>)
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8003ce4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8003ce6:	f7fe fb99 	bl	800241c <HAL_UART_Transmit_DMA>
					vTaskDelay(50 / portTICK_RATE_MS);
 8003cea:	2032      	movs	r0, #50	; 0x32
 8003cec:	f7ff fd34 	bl	8003758 <vTaskDelay>
					CMD_RF_OFF;
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f7fd fe16 	bl	8001928 <HAL_GPIO_WritePin>
 8003cfc:	e7a5      	b.n	8003c4a <xStoreADCDataTask+0xba>
			controllerState.lastTimeCommand++;
 8003cfe:	3301      	adds	r3, #1
 8003d00:	83f3      	strh	r3, [r6, #30]
 8003d02:	e7a5      	b.n	8003c50 <xStoreADCDataTask+0xc0>
			if (controllerState.prevPressureCompensation == COMPENSATION_ON){
 8003d04:	78a3      	ldrb	r3, [r4, #2]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d1ce      	bne.n	8003ca8 <xStoreADCDataTask+0x118>
				controllerState.numberOfTries = 0;
 8003d0a:	2500      	movs	r5, #0
				C1_UP_OFF;
 8003d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d10:	462a      	mov	r2, r5
 8003d12:	4819      	ldr	r0, [pc, #100]	; (8003d78 <xStoreADCDataTask+0x1e8>)
				controllerState.numberOfTries = 0;
 8003d14:	7765      	strb	r5, [r4, #29]
				C1_UP_OFF;
 8003d16:	f7fd fe07 	bl	8001928 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d20:	4815      	ldr	r0, [pc, #84]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003d22:	f7fd fe01 	bl	8001928 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8003d26:	462a      	mov	r2, r5
 8003d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d2c:	4812      	ldr	r0, [pc, #72]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003d2e:	f7fd fdfb 	bl	8001928 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8003d32:	462a      	mov	r2, r5
 8003d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d38:	480f      	ldr	r0, [pc, #60]	; (8003d78 <xStoreADCDataTask+0x1e8>)
 8003d3a:	f7fd fdf5 	bl	8001928 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8003d3e:	462a      	mov	r2, r5
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	480e      	ldr	r0, [pc, #56]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003d44:	f7fd fdf0 	bl	8001928 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8003d48:	462a      	mov	r2, r5
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	480b      	ldr	r0, [pc, #44]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003d4e:	f7fd fdeb 	bl	8001928 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8003d52:	462a      	mov	r2, r5
 8003d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003d5a:	f7fd fde5 	bl	8001928 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8003d5e:	462a      	mov	r2, r5
 8003d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d64:	4805      	ldr	r0, [pc, #20]	; (8003d7c <xStoreADCDataTask+0x1ec>)
 8003d66:	f7fd fddf 	bl	8001928 <HAL_GPIO_WritePin>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003d6a:	70a5      	strb	r5, [r4, #2]
 8003d6c:	e79c      	b.n	8003ca8 <xStoreADCDataTask+0x118>
 8003d6e:	bf00      	nop
 8003d70:	200054bc 	.word	0x200054bc
 8003d74:	40010800 	.word	0x40010800
 8003d78:	40010c00 	.word	0x40010c00
 8003d7c:	40011000 	.word	0x40011000
 8003d80:	2000559c 	.word	0x2000559c
 8003d84:	2000565e 	.word	0x2000565e
 8003d88:	200055ec 	.word	0x200055ec
 8003d8c:	200055a4 	.word	0x200055a4
 8003d90:	20005490 	.word	0x20005490
 8003d94:	08006699 	.word	0x08006699
 8003d98:	2000540c 	.word	0x2000540c
 8003d9c:	2000548c 	.word	0x2000548c
 8003da0:	2000561c 	.word	0x2000561c

08003da4 <xAnalyzeTask>:

extern char message[128];
extern uint8_t messageLength;


void xAnalyzeTask(void *arguments){
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;

	uint8_t i = 0;
	int16_t deltaPressure = 0;

	int32_t impTime[4] = {0, 1, 2, 3};
 8003da8:	4bba      	ldr	r3, [pc, #744]	; (8004094 <xAnalyzeTask+0x2f0>)
void xAnalyzeTask(void *arguments){
 8003daa:	b08d      	sub	sp, #52	; 0x34
	int32_t impTime[4] = {0, 1, 2, 3};
 8003dac:	ac08      	add	r4, sp, #32
 8003dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t startPressure[4];
	uint32_t dCounter = 0;
	uint8_t stopImp = 0;
	uint32_t impCounter = 0;
	uint8_t numOfAxles = 0;
	uint8_t numOfWays[2] = {0, 0};
 8003db4:	2300      	movs	r3, #0
	int8_t pressIsLower[4] = {0};

	int8_t goodPressCounter = 0;


	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003db6:	4cb8      	ldr	r4, [pc, #736]	; (8004098 <xAnalyzeTask+0x2f4>)
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6820      	ldr	r0, [r4, #0]
	uint8_t numOfWays[2] = {0, 0};
 8003dc0:	f88d 3010 	strb.w	r3, [sp, #16]
 8003dc4:	f88d 3011 	strb.w	r3, [sp, #17]
	int8_t pressIsLower[4] = {0};
 8003dc8:	9305      	str	r3, [sp, #20]
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003dca:	f7ff f92b 	bl	8003024 <xQueueGenericReceive>
 8003dce:	9402      	str	r4, [sp, #8]
	for(;;){
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9802      	ldr	r0, [sp, #8]
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	f7ff f922 	bl	8003024 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8003de0:	2801      	cmp	r0, #1
 8003de2:	d1f5      	bne.n	8003dd0 <xAnalyzeTask+0x2c>
/*
 * ---------------------------------------------------------------------------
 * +++++++++++++++++++++++++++++++++ RECEIVER ++++++++++++++++++++++++++++++++
 * ---------------------------------------------------------------------------
 */
			if (controllerState.airSystemType == RECEIVER){
 8003de4:	4cad      	ldr	r4, [pc, #692]	; (800409c <xAnalyzeTask+0x2f8>)
 8003de6:	7923      	ldrb	r3, [r4, #4]
 8003de8:	4625      	mov	r5, r4
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 8215 	bne.w	800421a <xAnalyzeTask+0x476>
				//-------- check for number of tries -----------------
				controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8003df0:	2200      	movs	r2, #0
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8003df2:	7f63      	ldrb	r3, [r4, #29]
				controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8003df4:	7022      	strb	r2, [r4, #0]
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8003df6:	2b06      	cmp	r3, #6
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
					#endif

				}
				else{
					controllerState.numberOfTries += 1;
 8003df8:	bf9c      	itt	ls
 8003dfa:	3301      	addls	r3, #1
 8003dfc:	7763      	strbls	r3, [r4, #29]
				}

				//axles calculations
				switch (controllerState.waysType){
 8003dfe:	7ea3      	ldrb	r3, [r4, #26]
					controllerState.numberOfTries = 0;
 8003e00:	bf88      	it	hi
 8003e02:	7762      	strbhi	r2, [r4, #29]
				switch (controllerState.waysType){
 8003e04:	f103 33ff 	add.w	r3, r3, #4294967295
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8003e08:	bf88      	it	hi
 8003e0a:	7062      	strbhi	r2, [r4, #1]
 8003e0c:	2200      	movs	r2, #0
				switch (controllerState.waysType){
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	f200 8219 	bhi.w	8004246 <xAnalyzeTask+0x4a2>
 8003e14:	e8df f003 	tbb	[pc, r3]
 8003e18:	3a330903 	.word	0x3a330903
 8003e1c:	4641      	.short	0x4641
					case 1:{ // Single Way not used
						numOfAxles = 1;
						numOfWays[0] = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f88d 3010 	strb.w	r3, [sp, #16]
						break;
					}
					case VIEW_2_1:{ //THREE WAYS
						numOfAxles = 2;
						numOfWays[0] = 2;
						numOfWays[1] = 1;
 8003e24:	f88d 2011 	strb.w	r2, [sp, #17]
 8003e28:	e005      	b.n	8003e36 <xAnalyzeTask+0x92>
						numOfWays[0] = 2;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	f88d 3010 	strb.w	r3, [sp, #16]
						numOfAxles = 1;
 8003e30:	2301      	movs	r3, #1
						numOfWays[1] = 0;
 8003e32:	f88d 2011 	strb.w	r2, [sp, #17]
					}

				}

				//-------- looking at pressure delta -----------------
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003e36:	2100      	movs	r1, #0
						else
							pressIsLower[i] = 0; //if need to lower
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
					}
					else{
						pressIsLower[i] = -1; //if not need to change
 8003e38:	f04f 09ff 	mov.w	r9, #255	; 0xff
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	f04f 0a01 	mov.w	sl, #1
							pressIsLower[i] = 0; //if need to lower
 8003e42:	468b      	mov	fp, r1
						numOfAxles = 2;
 8003e44:	9300      	str	r3, [sp, #0]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003e46:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8003e4a:	f89d 3011 	ldrb.w	r3, [sp, #17]
					if (deltaPressure > controllerState.analyzeAccuracy){
 8003e4e:	f894 801b 	ldrb.w	r8, [r4, #27]
 8003e52:	f894 c000 	ldrb.w	ip, [r4]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003e56:	441f      	add	r7, r3
 8003e58:	b2cb      	uxtb	r3, r1
 8003e5a:	42bb      	cmp	r3, r7
 8003e5c:	db26      	blt.n	8003eac <xAnalyzeTask+0x108>
 8003e5e:	b10e      	cbz	r6, 8003e64 <xAnalyzeTask+0xc0>
 8003e60:	f884 c000 	strb.w	ip, [r4]
					}
				}

				//-------- if everything is OK stop compensation -----------------
				if (controllerState.analyzeState == COMPENSATION_STATE_FREE){
 8003e64:	7823      	ldrb	r3, [r4, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 8167 	bne.w	800413a <xAnalyzeTask+0x396>
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8003e6c:	7063      	strb	r3, [r4, #1]
					impTime[0] = 0;
 8003e6e:	9308      	str	r3, [sp, #32]
					impTime[1] = 0;
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
					impTime[2] = 0;
 8003e72:	930a      	str	r3, [sp, #40]	; 0x28
					impTime[3] = 0;
 8003e74:	930b      	str	r3, [sp, #44]	; 0x2c
					controllerState.numberOfTries = 0;
 8003e76:	7763      	strb	r3, [r4, #29]

					mWrite_flash();
 8003e78:	f000 fbaa 	bl	80045d0 <mWrite_flash>
					continue;
 8003e7c:	e7a8      	b.n	8003dd0 <xAnalyzeTask+0x2c>
						numOfWays[0] = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f88d 3010 	strb.w	r3, [sp, #16]
						numOfWays[1] = 1;
 8003e84:	f88d 3011 	strb.w	r3, [sp, #17]
						numOfAxles = 2;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e7d4      	b.n	8003e36 <xAnalyzeTask+0x92>
						numOfWays[0] = 1;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f88d 3010 	strb.w	r3, [sp, #16]
						numOfWays[1] = 2;
 8003e92:	2302      	movs	r3, #2
						numOfWays[1] = 2;
 8003e94:	f88d 3011 	strb.w	r3, [sp, #17]
 8003e98:	e7cd      	b.n	8003e36 <xAnalyzeTask+0x92>
						numOfWays[0] = 2;
 8003e9a:	2302      	movs	r3, #2
						numOfWays[1] = 1;
 8003e9c:	2201      	movs	r2, #1
						numOfWays[0] = 2;
 8003e9e:	f88d 3010 	strb.w	r3, [sp, #16]
 8003ea2:	e7bf      	b.n	8003e24 <xAnalyzeTask+0x80>
						numOfWays[0] = 2;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f88d 3010 	strb.w	r3, [sp, #16]
 8003eaa:	e7f3      	b.n	8003e94 <xAnalyzeTask+0xf0>
					startPressure[i] = controllerState.filteredData[i];
 8003eac:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8003eb0:	89d0      	ldrh	r0, [r2, #14]
 8003eb2:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8003eb6:	005a      	lsls	r2, r3, #1
 8003eb8:	4496      	add	lr, r2
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003eba:	442a      	add	r2, r5
					startPressure[i] = controllerState.filteredData[i];
 8003ebc:	f82e 0c18 	strh.w	r0, [lr, #-24]
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003ec0:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 8003ec4:	ebae 0200 	sub.w	r2, lr, r0
					deltaPressure = abs(deltaPressure);
 8003ec8:	b212      	sxth	r2, r2
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	bfb8      	it	lt
 8003ece:	4252      	neglt	r2, r2
					if (deltaPressure > controllerState.analyzeAccuracy){
 8003ed0:	b212      	sxth	r2, r2
 8003ed2:	4542      	cmp	r2, r8
 8003ed4:	aa0c      	add	r2, sp, #48	; 0x30
 8003ed6:	4413      	add	r3, r2
 8003ed8:	dd09      	ble.n	8003eee <xAnalyzeTask+0x14a>
 8003eda:	2601      	movs	r6, #1
						if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 8003edc:	4570      	cmp	r0, lr
							pressIsLower[i] = 1; //if need to lift
 8003ede:	bf2c      	ite	cs
 8003ee0:	465a      	movcs	r2, fp
 8003ee2:	4652      	movcc	r2, sl
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
 8003ee4:	46b4      	mov	ip, r6
							pressIsLower[i] = 1; //if need to lift
 8003ee6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003eea:	3101      	adds	r1, #1
 8003eec:	e7b4      	b.n	8003e58 <xAnalyzeTask+0xb4>
						pressIsLower[i] = -1; //if not need to change
 8003eee:	f803 9c1c 	strb.w	r9, [r3, #-28]
 8003ef2:	e7fa      	b.n	8003eea <xAnalyzeTask+0x146>


				for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
						i = axleCounter*numOfWays[0] + wayCounter;
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	441c      	add	r4, r3
 8003ef8:	b2e4      	uxtb	r4, r4
 8003efa:	1d23      	adds	r3, r4, #4
 8003efc:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 8003f00:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8003f04:	88d2      	ldrh	r2, [r2, #6]
 8003f06:	88c8      	ldrh	r0, [r1, #6]
 8003f08:	1a80      	subs	r0, r0, r2
						if (pressIsLower[i] == 1){
 8003f0a:	aa0c      	add	r2, sp, #48	; 0x30
 8003f0c:	4422      	add	r2, r4
 8003f0e:	f912 2c1c 	ldrsb.w	r2, [r2, #-28]
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003f12:	b200      	sxth	r0, r0
						if (pressIsLower[i] == 1){
 8003f14:	2a01      	cmp	r2, #1
 8003f16:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8003f1a:	d15c      	bne.n	8003fd6 <xAnalyzeTask+0x232>

							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 8003f1c:	193b      	adds	r3, r7, r4
 8003f1e:	9303      	str	r3, [sp, #12]
 8003f20:	f7fc fa54 	bl	80003cc <__aeabi_i2f>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	f7fc faa4 	bl	8000474 <__aeabi_fmul>
 8003f2c:	f7fc fc68 	bl	8000800 <__aeabi_f2iz>
 8003f30:	ab0c      	add	r3, sp, #48	; 0x30
							#if DEBUG_SERIAL
								messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
							#endif

							if (impTime[i] < 0) impTime[i] = 1000; //was 0
 8003f32:	2800      	cmp	r0, #0
 8003f34:	441c      	add	r4, r3
 8003f36:	da04      	bge.n	8003f42 <xAnalyzeTask+0x19e>
							else if (impTime[i] == 0) impTime[i] = 1000;
 8003f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
							else if (impTime[i] == 0) impTime[i] = 500;
							else if (impTime[i] > 10000) impTime[i] = 10000;
							else if (impTime[i] > 30000) impTime[i] = 500;
						}
						else{
							impTime[i] = 0;
 8003f3c:	f844 3c10 	str.w	r3, [r4, #-16]
 8003f40:	e006      	b.n	8003f50 <xAnalyzeTask+0x1ac>
							else if (impTime[i] == 0) impTime[i] = 1000;
 8003f42:	d0f9      	beq.n	8003f38 <xAnalyzeTask+0x194>
							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 8003f44:	4548      	cmp	r0, r9
 8003f46:	bfd4      	ite	le
 8003f48:	f844 0c10 	strle.w	r0, [r4, #-16]
 8003f4c:	f844 9c10 	strgt.w	r9, [r4, #-16]
 8003f50:	f108 0801 	add.w	r8, r8, #1
 8003f54:	fa5f f488 	uxtb.w	r4, r8
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8003f58:	4554      	cmp	r4, sl
 8003f5a:	d3cb      	bcc.n	8003ef4 <xAnalyzeTask+0x150>
						}
					}

					if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8003f5c:	4c4f      	ldr	r4, [pc, #316]	; (800409c <xAnalyzeTask+0x2f8>)
 8003f5e:	7866      	ldrb	r6, [r4, #1]
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d059      	beq.n	8004018 <xAnalyzeTask+0x274>
 8003f64:	2700      	movs	r7, #0
						if (impTime[i] > 0){
							if (pressIsLower[i] == 1){
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
							}
							else if (pressIsLower[i] == 0){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8003f66:	4c4e      	ldr	r4, [pc, #312]	; (80040a0 <xAnalyzeTask+0x2fc>)
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8003f68:	4e4e      	ldr	r6, [pc, #312]	; (80040a4 <xAnalyzeTask+0x300>)
 8003f6a:	b2fb      	uxtb	r3, r7
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8003f6c:	4553      	cmp	r3, sl
 8003f6e:	f0c0 80a1 	bcc.w	80040b4 <xAnalyzeTask+0x310>
					#if DEBUG_SERIAL
						messageLength = sprintf(message, "[INFO] ac %d, nw0 %d, nw1 %d\n", axleCounter, numOfWays[0], numOfWays[1]);
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
					#endif

					impCounter = xTaskGetTickCount();
 8003f72:	f7ff fae1 	bl	8003538 <xTaskGetTickCount>
 8003f76:	4680      	mov	r8, r0
					while(1){
						vTaskDelay(20);
 8003f78:	2014      	movs	r0, #20
 8003f7a:	f7ff fbed 	bl	8003758 <vTaskDelay>
						dCounter = xTaskGetTickCount() - impCounter;
 8003f7e:	f7ff fadb 	bl	8003538 <xTaskGetTickCount>

						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <xAnalyzeTask+0x2f8>)
						dCounter = xTaskGetTickCount() - impCounter;
 8003f84:	eba0 0908 	sub.w	r9, r0, r8
						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	b143      	cbz	r3, 8003f9e <xAnalyzeTask+0x1fa>
 8003f8c:	2700      	movs	r7, #0
 8003f8e:	463e      	mov	r6, r7

						stopImp = 0;
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
							i = axleCounter*numOfWays[0] + wayCounter;
							if(dCounter > impTime[i]){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <xAnalyzeTask+0x2fc>)
 8003f92:	b2fc      	uxtb	r4, r7
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8003f94:	4554      	cmp	r4, sl
 8003f96:	f0c0 80af 	bcc.w	80040f8 <xAnalyzeTask+0x354>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
								stopImp++;
							}
						}
						if (stopImp >= numOfWays[axleCounter]){
 8003f9a:	4556      	cmp	r6, sl
 8003f9c:	d3ec      	bcc.n	8003f78 <xAnalyzeTask+0x1d4>
							break;
						}
					}
					vTaskDelay(3000);
 8003f9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003fa2:	f7ff fbd9 	bl	8003758 <vTaskDelay>
 8003fa6:	f10b 0b01 	add.w	fp, fp, #1
				for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
 8003faa:	9a00      	ldr	r2, [sp, #0]
 8003fac:	fa5f f38b 	uxtb.w	r3, fp
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d94c      	bls.n	800404e <xAnalyzeTask+0x2aa>
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8003fb4:	ab04      	add	r3, sp, #16
 8003fb6:	f813 a00b 	ldrb.w	sl, [r3, fp]
						i = axleCounter*numOfWays[0] + wayCounter;
 8003fba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003fbe:	f04f 0800 	mov.w	r8, #0
 8003fc2:	fb03 f30b 	mul.w	r3, r3, fp
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	9301      	str	r3, [sp, #4]
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8003fca:	4f37      	ldr	r7, [pc, #220]	; (80040a8 <xAnalyzeTask+0x304>)
							else if (impTime[i] > 10000) impTime[i] = 10000;
 8003fcc:	f242 7910 	movw	r9, #10000	; 0x2710
							else if (impTime[i] == 0) impTime[i] = 500;
 8003fd0:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8003fd4:	e7be      	b.n	8003f54 <xAnalyzeTask+0x1b0>
						else if (pressIsLower[i] == 0){
 8003fd6:	b9da      	cbnz	r2, 8004010 <xAnalyzeTask+0x26c>
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8003fd8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003fdc:	9303      	str	r3, [sp, #12]
 8003fde:	f7fc f9f5 	bl	80003cc <__aeabi_i2f>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	f7fc fa45 	bl	8000474 <__aeabi_fmul>
 8003fea:	f7fc fc09 	bl	8000800 <__aeabi_f2iz>
							if (impTime[i] < 0) impTime[i] = 500; //was 0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	da04      	bge.n	8003ffc <xAnalyzeTask+0x258>
							else if (impTime[i] == 0) impTime[i] = 500;
 8003ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ff4:	441c      	add	r4, r3
 8003ff6:	f844 6c10 	str.w	r6, [r4, #-16]
 8003ffa:	e7a9      	b.n	8003f50 <xAnalyzeTask+0x1ac>
 8003ffc:	d0f9      	beq.n	8003ff2 <xAnalyzeTask+0x24e>
							else if (impTime[i] > 10000) impTime[i] = 10000;
 8003ffe:	ab0c      	add	r3, sp, #48	; 0x30
 8004000:	441c      	add	r4, r3
 8004002:	4548      	cmp	r0, r9
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8004004:	bfd4      	ite	le
 8004006:	f844 0c10 	strle.w	r0, [r4, #-16]
							else if (impTime[i] > 10000) impTime[i] = 10000;
 800400a:	f844 9c10 	strgt.w	r9, [r4, #-16]
 800400e:	e79f      	b.n	8003f50 <xAnalyzeTask+0x1ac>
							impTime[i] = 0;
 8004010:	ab0c      	add	r3, sp, #48	; 0x30
 8004012:	441c      	add	r4, r3
 8004014:	2300      	movs	r3, #0
 8004016:	e791      	b.n	8003f3c <xAnalyzeTask+0x198>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004018:	4f21      	ldr	r7, [pc, #132]	; (80040a0 <xAnalyzeTask+0x2fc>)
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <xAnalyzeTask+0x308>)
 800401c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8004020:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 8004024:	2200      	movs	r2, #0
 8004026:	f7fd fc7f 	bl	8001928 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <xAnalyzeTask+0x300>)
 800402c:	2200      	movs	r2, #0
 800402e:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <xAnalyzeTask+0x30c>)
 8004034:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004038:	3601      	adds	r6, #1
 800403a:	f7fd fc75 	bl	8001928 <HAL_GPIO_WritePin>
						for (i = 0; i < 4; i++){
 800403e:	2e04      	cmp	r6, #4
 8004040:	d1eb      	bne.n	800401a <xAnalyzeTask+0x276>
						impTime[0] = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	9308      	str	r3, [sp, #32]
						impTime[1] = 0;
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
						impTime[2] = 0;
 8004048:	930a      	str	r3, [sp, #40]	; 0x28
						impTime[3] = 0;
 800404a:	930b      	str	r3, [sp, #44]	; 0x2c
						controllerState.numberOfTries = 0;
 800404c:	7763      	strb	r3, [r4, #29]
				} //stepCounter

				if (controllerState.pressureCompensation == COMPENSATION_OFF){
 800404e:	4c13      	ldr	r4, [pc, #76]	; (800409c <xAnalyzeTask+0x2f8>)
 8004050:	2300      	movs	r3, #0
 8004052:	7862      	ldrb	r2, [r4, #1]
 8004054:	2a00      	cmp	r2, #0
 8004056:	d173      	bne.n	8004140 <xAnalyzeTask+0x39c>
 8004058:	4615      	mov	r5, r2
					for (i = 0; i < 4; i++){
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800405a:	4e11      	ldr	r6, [pc, #68]	; (80040a0 <xAnalyzeTask+0x2fc>)
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <xAnalyzeTask+0x308>)
 800405e:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8004062:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 8004066:	2200      	movs	r2, #0
 8004068:	f7fd fc5e 	bl	8001928 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <xAnalyzeTask+0x300>)
 800406e:	2200      	movs	r2, #0
 8004070:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 8004074:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <xAnalyzeTask+0x30c>)
 8004076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800407a:	3501      	adds	r5, #1
 800407c:	f7fd fc54 	bl	8001928 <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004080:	2d04      	cmp	r5, #4
 8004082:	d1eb      	bne.n	800405c <xAnalyzeTask+0x2b8>
					}
					impTime[0] = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	9308      	str	r3, [sp, #32]
					impTime[1] = 0;
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
					impTime[2] = 0;
 800408a:	930a      	str	r3, [sp, #40]	; 0x28
					impTime[3] = 0;
 800408c:	930b      	str	r3, [sp, #44]	; 0x2c
					controllerState.numberOfTries = 0;
 800408e:	7763      	strb	r3, [r4, #29]
					continue;
 8004090:	e69e      	b.n	8003dd0 <xAnalyzeTask+0x2c>
 8004092:	bf00      	nop
 8004094:	0800665c 	.word	0x0800665c
 8004098:	200055a4 	.word	0x200055a4
 800409c:	200054bc 	.word	0x200054bc
 80040a0:	2000001c 	.word	0x2000001c
 80040a4:	2000002c 	.word	0x2000002c
 80040a8:	20005490 	.word	0x20005490
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	2000003c 	.word	0x2000003c
						i = axleCounter*numOfWays[0] + wayCounter;
 80040b4:	9a01      	ldr	r2, [sp, #4]
 80040b6:	4413      	add	r3, r2
						if (impTime[i] > 0){
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	aa0c      	add	r2, sp, #48	; 0x30
 80040bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80040c0:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	dd0c      	ble.n	80040e2 <xAnalyzeTask+0x33e>
							if (pressIsLower[i] == 1){
 80040c8:	aa0c      	add	r2, sp, #48	; 0x30
 80040ca:	441a      	add	r2, r3
 80040cc:	f912 2c1c 	ldrsb.w	r2, [r2, #-28]
 80040d0:	2a01      	cmp	r2, #1
 80040d2:	d108      	bne.n	80040e6 <xAnalyzeTask+0x342>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 80040d4:	48a1      	ldr	r0, [pc, #644]	; (800435c <xAnalyzeTask+0x5b8>)
 80040d6:	f836 1023 	ldrh.w	r1, [r6, r3, lsl #2]
 80040da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80040de:	f7fd fc23 	bl	8001928 <HAL_GPIO_WritePin>
 80040e2:	3701      	adds	r7, #1
 80040e4:	e741      	b.n	8003f6a <xAnalyzeTask+0x1c6>
							else if (pressIsLower[i] == 0){
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	d1fb      	bne.n	80040e2 <xAnalyzeTask+0x33e>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80040ea:	499d      	ldr	r1, [pc, #628]	; (8004360 <xAnalyzeTask+0x5bc>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 80040f2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80040f6:	e7f2      	b.n	80040de <xAnalyzeTask+0x33a>
							i = axleCounter*numOfWays[0] + wayCounter;
 80040f8:	9a01      	ldr	r2, [sp, #4]
 80040fa:	4414      	add	r4, r2
							if(dCounter > impTime[i]){
 80040fc:	b2e4      	uxtb	r4, r4
 80040fe:	aa0c      	add	r2, sp, #48	; 0x30
 8004100:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004104:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8004108:	4591      	cmp	r9, r2
 800410a:	d914      	bls.n	8004136 <xAnalyzeTask+0x392>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800410c:	4994      	ldr	r1, [pc, #592]	; (8004360 <xAnalyzeTask+0x5bc>)
 800410e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004112:	2200      	movs	r2, #0
 8004114:	f831 1024 	ldrh.w	r1, [r1, r4, lsl #2]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	f7fd fc05 	bl	8001928 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800411e:	4b91      	ldr	r3, [pc, #580]	; (8004364 <xAnalyzeTask+0x5c0>)
 8004120:	488e      	ldr	r0, [pc, #568]	; (800435c <xAnalyzeTask+0x5b8>)
 8004122:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004126:	2200      	movs	r2, #0
 8004128:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800412c:	f7fd fbfc 	bl	8001928 <HAL_GPIO_WritePin>
								stopImp++;
 8004130:	3601      	adds	r6, #1
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	b2f6      	uxtb	r6, r6
 8004136:	3701      	adds	r7, #1
 8004138:	e72b      	b.n	8003f92 <xAnalyzeTask+0x1ee>
 800413a:	f04f 0b00 	mov.w	fp, #0
 800413e:	e739      	b.n	8003fb4 <xAnalyzeTask+0x210>
				}
				/*
				 * HERE STARTS COMMON CODE
				 */
				controllerState.errorMeaningByte = 0;
 8004140:	4618      	mov	r0, r3
 8004142:	461f      	mov	r7, r3
				for (i = 0 ; i < 4; i++){
					if (impTime[i] > 500){
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
						deltaPressure = abs(deltaPressure);
						if (deltaPressure < 10){
							pressIsLower[i] = -1;
 8004144:	f04f 08ff 	mov.w	r8, #255	; 0xff
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
							#endif

								//TODO: error valve
								controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
								controllerState.errorByte |= (1 << i);
 8004148:	f04f 0901 	mov.w	r9, #1
 800414c:	7966      	ldrb	r6, [r4, #5]
 800414e:	7e21      	ldrb	r1, [r4, #24]
				controllerState.errorMeaningByte = 0;
 8004150:	7663      	strb	r3, [r4, #25]
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004152:	f10d 0e18 	add.w	lr, sp, #24
							pressIsLower[i] = -1;
 8004156:	f10d 0c14 	add.w	ip, sp, #20
					if (impTime[i] > 500){
 800415a:	aa08      	add	r2, sp, #32
 800415c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004160:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004164:	dd17      	ble.n	8004196 <xAnalyzeTask+0x3f2>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004166:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 800416a:	89d2      	ldrh	r2, [r2, #14]
 800416c:	f83e a013 	ldrh.w	sl, [lr, r3, lsl #1]
 8004170:	eba2 020a 	sub.w	r2, r2, sl
						deltaPressure = abs(deltaPressure);
 8004174:	b212      	sxth	r2, r2
 8004176:	2a00      	cmp	r2, #0
 8004178:	bfb8      	it	lt
 800417a:	4252      	neglt	r2, r2
						if (deltaPressure < 10){
 800417c:	b212      	sxth	r2, r2
 800417e:	2a09      	cmp	r2, #9
 8004180:	dc09      	bgt.n	8004196 <xAnalyzeTask+0x3f2>
								controllerState.errorByte |= (1 << i);
 8004182:	2001      	movs	r0, #1
 8004184:	4607      	mov	r7, r0
 8004186:	fa09 f203 	lsl.w	r2, r9, r3
 800418a:	4311      	orrs	r1, r2
							pressIsLower[i] = -1;
 800418c:	f803 800c 	strb.w	r8, [r3, ip]
								controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
 8004190:	f046 0604 	orr.w	r6, r6, #4
								controllerState.errorByte |= (1 << i);
 8004194:	b2c9      	uxtb	r1, r1
 8004196:	3301      	adds	r3, #1
				for (i = 0 ; i < 4; i++){
 8004198:	2b04      	cmp	r3, #4
 800419a:	d1de      	bne.n	800415a <xAnalyzeTask+0x3b6>
 800419c:	b107      	cbz	r7, 80041a0 <xAnalyzeTask+0x3fc>
 800419e:	7166      	strb	r6, [r4, #5]
 80041a0:	b100      	cbz	r0, 80041a4 <xAnalyzeTask+0x400>
 80041a2:	7621      	strb	r1, [r4, #24]
								controllerState.errorByte |= (1 << i);
 80041a4:	f04f 0a00 	mov.w	sl, #0
						if (pressIsLower[i] == 1){
							if (impCoeff[i] >= 0.0)
								controllerData.impUpCoeff[i] = impCoeff[i];
						}
						else if (pressIsLower[i] == 0){
							if (impCoeff[i] <= 0.0)
 80041a8:	2600      	movs	r6, #0
 80041aa:	4c6f      	ldr	r4, [pc, #444]	; (8004368 <xAnalyzeTask+0x5c4>)
					if (pressIsLower[i] >=0){
 80041ac:	f10d 0814 	add.w	r8, sp, #20
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80041b0:	f10d 0918 	add.w	r9, sp, #24
					if (pressIsLower[i] >=0){
 80041b4:	f91a b008 	ldrsb.w	fp, [sl, r8]
 80041b8:	f1bb 0f00 	cmp.w	fp, #0
 80041bc:	db1b      	blt.n	80041f6 <xAnalyzeTask+0x452>
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80041be:	ab08      	add	r3, sp, #32
 80041c0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80041c4:	f7fc f902 	bl	80003cc <__aeabi_i2f>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80041c8:	eb05 034a 	add.w	r3, r5, sl, lsl #1
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80041cc:	4607      	mov	r7, r0
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80041ce:	89d8      	ldrh	r0, [r3, #14]
 80041d0:	f839 301a 	ldrh.w	r3, [r9, sl, lsl #1]
 80041d4:	1ac0      	subs	r0, r0, r3
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80041d6:	b200      	sxth	r0, r0
 80041d8:	f7fc f8f8 	bl	80003cc <__aeabi_i2f>
 80041dc:	4601      	mov	r1, r0
 80041de:	4638      	mov	r0, r7
 80041e0:	f7fc f9fc 	bl	80005dc <__aeabi_fdiv>
						if (pressIsLower[i] == 1){
 80041e4:	f1bb 0f01 	cmp.w	fp, #1
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80041e8:	4607      	mov	r7, r0
						if (pressIsLower[i] == 1){
 80041ea:	d10c      	bne.n	8004206 <xAnalyzeTask+0x462>
							if (impCoeff[i] >= 0.0)
 80041ec:	4631      	mov	r1, r6
 80041ee:	f7fc faf3 	bl	80007d8 <__aeabi_fcmpge>
 80041f2:	b100      	cbz	r0, 80041f6 <xAnalyzeTask+0x452>
								controllerData.impUpCoeff[i] = impCoeff[i];
 80041f4:	6027      	str	r7, [r4, #0]
 80041f6:	f10a 0a01 	add.w	sl, sl, #1
				for (i = 0 ; i < 4; i++){
 80041fa:	f1ba 0f04 	cmp.w	sl, #4
 80041fe:	f104 0404 	add.w	r4, r4, #4
 8004202:	d1d7      	bne.n	80041b4 <xAnalyzeTask+0x410>
 8004204:	e5e4      	b.n	8003dd0 <xAnalyzeTask+0x2c>
						else if (pressIsLower[i] == 0){
 8004206:	f1bb 0f00 	cmp.w	fp, #0
 800420a:	d1f4      	bne.n	80041f6 <xAnalyzeTask+0x452>
							if (impCoeff[i] <= 0.0)
 800420c:	4631      	mov	r1, r6
 800420e:	f7fc fad9 	bl	80007c4 <__aeabi_fcmple>
 8004212:	2800      	cmp	r0, #0
 8004214:	d0ef      	beq.n	80041f6 <xAnalyzeTask+0x452>
								controllerData.impDownCoeff[i] = impCoeff[i];
 8004216:	6127      	str	r7, [r4, #16]
 8004218:	e7ed      	b.n	80041f6 <xAnalyzeTask+0x452>
* ---------------------------------------------------------------------------
* +++++++++++++++++++++++++++++++++ COMPRESSOR ++++++++++++++++++++++++++++++++
* ---------------------------------------------------------------------------
*/
			else{
				switch (controllerState.waysType){
 800421a:	7ea3      	ldrb	r3, [r4, #26]
 800421c:	2200      	movs	r2, #0
 800421e:	3b01      	subs	r3, #1
 8004220:	2b05      	cmp	r3, #5
 8004222:	d810      	bhi.n	8004246 <xAnalyzeTask+0x4a2>
 8004224:	e8df f003 	tbb	[pc, r3]
 8004228:	13030311 	.word	0x13030311
 800422c:	0d13      	.short	0x0d13
					case 1:{ // Single Way
						numOfAxles = 1;
						break;
					}
					case 2:{ // TWO WAYS ONE AXLE
						numOfAxles = 2;
 800422e:	2602      	movs	r6, #2
					}

				}

				controllerState.analyzeState = COMPENSATION_STATE_FREE;
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8004230:	7f63      	ldrb	r3, [r4, #29]
				controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004232:	7022      	strb	r2, [r4, #0]
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8004234:	2b06      	cmp	r3, #6
 8004236:	d90c      	bls.n	8004252 <xAnalyzeTask+0x4ae>
					controllerState.numberOfTries = 0;
 8004238:	776a      	strb	r2, [r5, #29]
					controllerState.pressureCompensation = COMPENSATION_OFF;
 800423a:	706a      	strb	r2, [r5, #1]
				}
				vTaskDelay(2000);
			}
		}
	}
}
 800423c:	b00d      	add	sp, #52	; 0x34
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						numOfAxles = 4;
 8004242:	2604      	movs	r6, #4
						break;
 8004244:	e7f4      	b.n	8004230 <xAnalyzeTask+0x48c>
						controllerState.pressureCompensation = COMPENSATION_OFF;
 8004246:	7062      	strb	r2, [r4, #1]
						continue;
 8004248:	e5c2      	b.n	8003dd0 <xAnalyzeTask+0x2c>
						numOfAxles = 1;
 800424a:	2601      	movs	r6, #1
 800424c:	e7f0      	b.n	8004230 <xAnalyzeTask+0x48c>
						numOfAxles = 3;
 800424e:	2603      	movs	r6, #3
 8004250:	e7ee      	b.n	8004230 <xAnalyzeTask+0x48c>
					controllerState.numberOfTries += 1;
 8004252:	3301      	adds	r3, #1
 8004254:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8004370 <xAnalyzeTask+0x5cc>
 8004258:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8004364 <xAnalyzeTask+0x5c0>
 800425c:	7763      	strb	r3, [r4, #29]
				goodPressCounter = numOfAxles;
 800425e:	b277      	sxtb	r7, r6
						numOfAxles = 3;
 8004260:	f04f 0b00 	mov.w	fp, #0
 8004264:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8004374 <xAnalyzeTask+0x5d0>
						startPressure[i] = controllerState.filteredData[i];
 8004268:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
 800426c:	ab06      	add	r3, sp, #24
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 800426e:	f83a 1c08 	ldrh.w	r1, [sl, #-8]
						startPressure[i] = controllerState.filteredData[i];
 8004272:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8004276:	1a8b      	subs	r3, r1, r2
						deltaPressure = abs(deltaPressure);
 8004278:	b21b      	sxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfb8      	it	lt
 800427e:	425b      	neglt	r3, r3
						if (deltaPressure > controllerState.analyzeAccuracy){
 8004280:	7ee8      	ldrb	r0, [r5, #27]
 8004282:	b21b      	sxth	r3, r3
 8004284:	4283      	cmp	r3, r0
 8004286:	ab05      	add	r3, sp, #20
 8004288:	dd52      	ble.n	8004330 <xAnalyzeTask+0x58c>
							if (controllerState.nessPressure[i] > controllerState.filteredData[i]){
 800428a:	428a      	cmp	r2, r1
 800428c:	d244      	bcs.n	8004318 <xAnalyzeTask+0x574>
								pressIsLower[i] = 1;
 800428e:	2201      	movs	r2, #1
 8004290:	f803 200b 	strb.w	r2, [r3, fp]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <xAnalyzeTask+0x5bc>)
 8004296:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
 800429a:	f833 102b 	ldrh.w	r1, [r3, fp, lsl #2]
 800429e:	f7fd fb43 	bl	8001928 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80042a2:	2200      	movs	r2, #0
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 80042a4:	4b2d      	ldr	r3, [pc, #180]	; (800435c <xAnalyzeTask+0x5b8>)
 80042a6:	f838 102b 	ldrh.w	r1, [r8, fp, lsl #2]
 80042aa:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80042ae:	f7fd fb3b 	bl	8001928 <HAL_GPIO_WritePin>
							controllerState.analyzeState = COMPENSATION_STATE_WORKING;
 80042b2:	2301      	movs	r3, #1
 80042b4:	702b      	strb	r3, [r5, #0]
 80042b6:	f10b 0b01 	add.w	fp, fp, #1
					for (i = 0; i < numOfAxles; i++){
 80042ba:	fa5f f38b 	uxtb.w	r3, fp
 80042be:	429e      	cmp	r6, r3
 80042c0:	d8d2      	bhi.n	8004268 <xAnalyzeTask+0x4c4>
					if(goodPressCounter == 0) break;
 80042c2:	b17f      	cbz	r7, 80042e4 <xAnalyzeTask+0x540>
					vTaskDelay(2000);
 80042c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80042c8:	f7ff fa46 	bl	8003758 <vTaskDelay>
					controllerState.compressorWorkTime += 1000;
 80042cc:	6a2b      	ldr	r3, [r5, #32]
					if (controllerState.compressorWorkTime > 600000){
 80042ce:	4a27      	ldr	r2, [pc, #156]	; (800436c <xAnalyzeTask+0x5c8>)
					controllerState.compressorWorkTime += 1000;
 80042d0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
					if (controllerState.compressorWorkTime > 600000){
 80042d4:	4293      	cmp	r3, r2
					controllerState.compressorWorkTime += 1000;
 80042d6:	622b      	str	r3, [r5, #32]
					if (controllerState.compressorWorkTime > 600000){
 80042d8:	d9c2      	bls.n	8004260 <xAnalyzeTask+0x4bc>
						controllerState.analyzeState = COMPENSATION_STATE_FREE;
 80042da:	2300      	movs	r3, #0
 80042dc:	7023      	strb	r3, [r4, #0]
						controllerState.pressureCompensation = COMPENSATION_OFF;
 80042de:	7063      	strb	r3, [r4, #1]
						controllerState.numberOfTries = 0;
 80042e0:	7763      	strb	r3, [r4, #29]
						controllerState.compressorWorkTime = 0;
 80042e2:	6223      	str	r3, [r4, #32]
						numOfAxles = 3;
 80042e4:	2400      	movs	r4, #0
					HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80042e6:	4d1d      	ldr	r5, [pc, #116]	; (800435c <xAnalyzeTask+0x5b8>)
					HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <xAnalyzeTask+0x5bc>)
 80042ea:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 80042ee:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f7fd fb18 	bl	8001928 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80042f8:	f838 1024 	ldrh.w	r1, [r8, r4, lsl #2]
 80042fc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004300:	2200      	movs	r2, #0
 8004302:	3401      	adds	r4, #1
 8004304:	f7fd fb10 	bl	8001928 <HAL_GPIO_WritePin>
				for (i = 0; i < numOfAxles; i++){
 8004308:	b2e3      	uxtb	r3, r4
 800430a:	429e      	cmp	r6, r3
 800430c:	d8ec      	bhi.n	80042e8 <xAnalyzeTask+0x544>
				vTaskDelay(2000);
 800430e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004312:	f7ff fa21 	bl	8003758 <vTaskDelay>
 8004316:	e55b      	b.n	8003dd0 <xAnalyzeTask+0x2c>
								pressIsLower[i] = 0;
 8004318:	2200      	movs	r2, #0
 800431a:	f803 200b 	strb.w	r2, [r3, fp]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <xAnalyzeTask+0x5bc>)
 8004320:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
 8004324:	f833 102b 	ldrh.w	r1, [r3, fp, lsl #2]
 8004328:	f7fd fafe 	bl	8001928 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	e7b9      	b.n	80042a4 <xAnalyzeTask+0x500>
							pressIsLower[i] = -1;
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	f803 200b 	strb.w	r2, [r3, fp]
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <xAnalyzeTask+0x5bc>)
 8004338:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
 800433c:	f833 102b 	ldrh.w	r1, [r3, fp, lsl #2]
 8004340:	2200      	movs	r2, #0
 8004342:	f7fd faf1 	bl	8001928 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <xAnalyzeTask+0x5b8>)
							goodPressCounter -= 1;
 8004348:	3f01      	subs	r7, #1
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800434a:	2200      	movs	r2, #0
 800434c:	f838 102b 	ldrh.w	r1, [r8, fp, lsl #2]
 8004350:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
							goodPressCounter -= 1;
 8004354:	b27f      	sxtb	r7, r7
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004356:	f7fd fae7 	bl	8001928 <HAL_GPIO_WritePin>
 800435a:	e7ac      	b.n	80042b6 <xAnalyzeTask+0x512>
 800435c:	2000003c 	.word	0x2000003c
 8004360:	2000000c 	.word	0x2000000c
 8004364:	2000002c 	.word	0x2000002c
 8004368:	20005494 	.word	0x20005494
 800436c:	000927c0 	.word	0x000927c0
 8004370:	2000001c 	.word	0x2000001c
 8004374:	200054c8 	.word	0x200054c8

08004378 <xBlynkTask>:

extern char message[128];
extern uint8_t recCommandByte;


void xBlynkTask(void* arguments){
 8004378:	b508      	push	{r3, lr}
	for(;;){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800437a:	4e0c      	ldr	r6, [pc, #48]	; (80043ac <xBlynkTask+0x34>)
		switch(controllerState.soundIndicationState){
 800437c:	4d0c      	ldr	r5, [pc, #48]	; (80043b0 <xBlynkTask+0x38>)
		case SEARCH_INDICATION:
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
			break;
		case NORMAL_INDICATION:
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800437e:	4c0d      	ldr	r4, [pc, #52]	; (80043b4 <xBlynkTask+0x3c>)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004380:	2120      	movs	r1, #32
 8004382:	4630      	mov	r0, r6
 8004384:	f7fd fad5 	bl	8001932 <HAL_GPIO_TogglePin>
		switch(controllerState.soundIndicationState){
 8004388:	78ea      	ldrb	r2, [r5, #3]
 800438a:	b152      	cbz	r2, 80043a2 <xBlynkTask+0x2a>
 800438c:	2a01      	cmp	r2, #1
 800438e:	d103      	bne.n	8004398 <xBlynkTask+0x20>
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8004390:	4611      	mov	r1, r2
 8004392:	4620      	mov	r0, r4
 8004394:	f7fd facd 	bl	8001932 <HAL_GPIO_TogglePin>
			//TODO: toggle Led Blynk
			break;
		default:
			break;
		}
		vTaskDelay(500 / portTICK_RATE_MS);
 8004398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800439c:	f7ff f9dc 	bl	8003758 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80043a0:	e7ee      	b.n	8004380 <xBlynkTask+0x8>
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80043a2:	2101      	movs	r1, #1
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fd fabf 	bl	8001928 <HAL_GPIO_WritePin>
			break;
 80043aa:	e7f5      	b.n	8004398 <xBlynkTask+0x20>
 80043ac:	40010800 	.word	0x40010800
 80043b0:	200054bc 	.word	0x200054bc
 80043b4:	40011000 	.word	0x40011000

080043b8 <controller_init>:

	vTaskDelete(NULL);
}

void controller_init(){
	uint32_t unique_ID[3] = {0};
 80043b8:	2300      	movs	r3, #0
void controller_init(){
 80043ba:	b530      	push	{r4, r5, lr}

	init_structures();

	mRead_flash();
	if(controllerData.rfChannel > 120){
 80043bc:	4c39      	ldr	r4, [pc, #228]	; (80044a4 <controller_init+0xec>)
void controller_init(){
 80043be:	b087      	sub	sp, #28
	uint32_t unique_ID[3] = {0};
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	9305      	str	r3, [sp, #20]
	init_structures();
 80043c6:	f000 f8e5 	bl	8004594 <init_structures>
	mRead_flash();
 80043ca:	f000 f93b 	bl	8004644 <mRead_flash>
	if(controllerData.rfChannel > 120){
 80043ce:	7823      	ldrb	r3, [r4, #0]
		controllerData.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 80043d0:	a803      	add	r0, sp, #12
	if(controllerData.rfChannel > 120){
 80043d2:	2b78      	cmp	r3, #120	; 0x78
		controllerData.rfChannel = 1;
 80043d4:	bf84      	itt	hi
 80043d6:	2301      	movhi	r3, #1
 80043d8:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 80043da:	f7fc fc19 	bl	8000c10 <HAL_GetUID>
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 80043de:	9a04      	ldr	r2, [sp, #16]
 80043e0:	9b03      	ldr	r3, [sp, #12]

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 80043e2:	4831      	ldr	r0, [pc, #196]	; (80044a8 <controller_init+0xf0>)
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 80043e4:	4413      	add	r3, r2
 80043e6:	9a05      	ldr	r2, [sp, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a30      	ldr	r2, [pc, #192]	; (80044ac <controller_init+0xf4>)
 80043ec:	82d3      	strh	r3, [r2, #22]
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 80043ee:	2201      	movs	r2, #1
 80043f0:	4611      	mov	r1, r2
 80043f2:	f7fd fa99 	bl	8001928 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80043f6:	2064      	movs	r0, #100	; 0x64
 80043f8:	f7fc fbf8 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80043fc:	2200      	movs	r2, #0
 80043fe:	2101      	movs	r1, #1
 8004400:	4829      	ldr	r0, [pc, #164]	; (80044a8 <controller_init+0xf0>)
 8004402:	f7fd fa91 	bl	8001928 <HAL_GPIO_WritePin>


	init_rf433(controllerData.rfChannel); //TODO: change to more common
 8004406:	7820      	ldrb	r0, [r4, #0]
 8004408:	f000 f872 	bl	80044f0 <init_rf433>



	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 800440c:	2203      	movs	r2, #3
 800440e:	2100      	movs	r1, #0
 8004410:	2001      	movs	r0, #1
 8004412:	f7fe fccb 	bl	8002dac <xQueueGenericCreate>
 8004416:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <controller_init+0xf8>)
 8004418:	6010      	str	r0, [r2, #0]
 800441a:	b120      	cbz	r0, 8004426 <controller_init+0x6e>
 800441c:	2300      	movs	r3, #0
 800441e:	461a      	mov	r2, r3
 8004420:	4619      	mov	r1, r3
 8004422:	f7fe fce7 	bl	8002df4 <xQueueGenericSend>
		uint32_t fre=xPortGetFreeHeapSize();
		sprintf(message, "Free heap: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xBlynkTask,
 8004426:	2400      	movs	r4, #0
 8004428:	2501      	movs	r5, #1
 800442a:	4623      	mov	r3, r4
 800442c:	9401      	str	r4, [sp, #4]
 800442e:	9500      	str	r5, [sp, #0]
 8004430:	22c8      	movs	r2, #200	; 0xc8
 8004432:	4920      	ldr	r1, [pc, #128]	; (80044b4 <controller_init+0xfc>)
 8004434:	4820      	ldr	r0, [pc, #128]	; (80044b8 <controller_init+0x100>)
 8004436:	f7ff f814 	bl	8003462 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xScanInputTask,
 800443a:	4623      	mov	r3, r4
 800443c:	9401      	str	r4, [sp, #4]
 800443e:	9500      	str	r5, [sp, #0]
 8004440:	22c8      	movs	r2, #200	; 0xc8
 8004442:	491e      	ldr	r1, [pc, #120]	; (80044bc <controller_init+0x104>)
 8004444:	481e      	ldr	r0, [pc, #120]	; (80044c0 <controller_init+0x108>)
 8004446:	f7ff f80c 	bl	8003462 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Scan: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xStoreADCDataTask,
 800444a:	4623      	mov	r3, r4
 800444c:	9401      	str	r4, [sp, #4]
 800444e:	9500      	str	r5, [sp, #0]
 8004450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004454:	491b      	ldr	r1, [pc, #108]	; (80044c4 <controller_init+0x10c>)
 8004456:	481c      	ldr	r0, [pc, #112]	; (80044c8 <controller_init+0x110>)
 8004458:	f7ff f803 	bl	8003462 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xProcessCommandTask,
 800445c:	2303      	movs	r3, #3
 800445e:	9401      	str	r4, [sp, #4]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004466:	4623      	mov	r3, r4
 8004468:	4918      	ldr	r1, [pc, #96]	; (80044cc <controller_init+0x114>)
 800446a:	4819      	ldr	r0, [pc, #100]	; (80044d0 <controller_init+0x118>)
 800446c:	f7fe fff9 	bl	8003462 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xAnalyzeTask,
 8004470:	4623      	mov	r3, r4
 8004472:	9401      	str	r4, [sp, #4]
 8004474:	9500      	str	r5, [sp, #0]
 8004476:	f44f 7248 	mov.w	r2, #800	; 0x320
 800447a:	4916      	ldr	r1, [pc, #88]	; (80044d4 <controller_init+0x11c>)
 800447c:	4816      	ldr	r0, [pc, #88]	; (80044d8 <controller_init+0x120>)
 800447e:	f7fe fff0 	bl	8003462 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8004482:	4622      	mov	r2, r4
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	2002      	movs	r0, #2
 8004488:	f7fe fc90 	bl	8002dac <xQueueGenericCreate>
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <controller_init+0x124>)
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after queue: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 800448e:	462a      	mov	r2, r5
	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8004490:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8004492:	4913      	ldr	r1, [pc, #76]	; (80044e0 <controller_init+0x128>)
 8004494:	4813      	ldr	r0, [pc, #76]	; (80044e4 <controller_init+0x12c>)
 8004496:	f7fd ff99 	bl	80023cc <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 800449a:	4813      	ldr	r0, [pc, #76]	; (80044e8 <controller_init+0x130>)
 800449c:	f7fc fd9e 	bl	8000fdc <HAL_ADCEx_InjectedStart_IT>
}
 80044a0:	b007      	add	sp, #28
 80044a2:	bd30      	pop	{r4, r5, pc}
 80044a4:	20005490 	.word	0x20005490
 80044a8:	40011000 	.word	0x40011000
 80044ac:	200054bc 	.word	0x200054bc
 80044b0:	200055a4 	.word	0x200055a4
 80044b4:	080066a3 	.word	0x080066a3
 80044b8:	08004379 	.word	0x08004379
 80044bc:	080066a9 	.word	0x080066a9
 80044c0:	08004eb1 	.word	0x08004eb1
 80044c4:	080066ae 	.word	0x080066ae
 80044c8:	08003b91 	.word	0x08003b91
 80044cc:	080066b7 	.word	0x080066b7
 80044d0:	080049c5 	.word	0x080049c5
 80044d4:	080066bf 	.word	0x080066bf
 80044d8:	08003da5 	.word	0x08003da5
 80044dc:	20005668 	.word	0x20005668
 80044e0:	2000566c 	.word	0x2000566c
 80044e4:	2000561c 	.word	0x2000561c
 80044e8:	200055ec 	.word	0x200055ec

080044ec <print_debug>:
extern UART_HandleTypeDef huart1;

char debugMessage[16] = {};
uint8_t debugMessageLength = 0;

void print_debug(char* msg){
 80044ec:	4770      	bx	lr
	...

080044f0 <init_rf433>:
		debugMessageLength = sprintf(debugMessage, "%s", msg);
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
	#endif
}

void init_rf433(uint8_t channel){
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	4607      	mov	r7, r0
	CMD_RF_ON;
 80044f4:	4d20      	ldr	r5, [pc, #128]	; (8004578 <init_rf433+0x88>)
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 80044f6:	4c21      	ldr	r4, [pc, #132]	; (800457c <init_rf433+0x8c>)
	CMD_RF_ON;
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044fe:	4628      	mov	r0, r5
 8004500:	f7fd fa12 	bl	8001928 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004504:	2032      	movs	r0, #50	; 0x32
 8004506:	f7fc fb71 	bl	8000bec <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 800450a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800450e:	2207      	movs	r2, #7
 8004510:	491b      	ldr	r1, [pc, #108]	; (8004580 <init_rf433+0x90>)
 8004512:	4620      	mov	r0, r4
 8004514:	f7fd fefe 	bl	8002314 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004518:	20c8      	movs	r0, #200	; 0xc8
 800451a:	f7fc fb67 	bl	8000bec <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
	HAL_Delay(200);
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 800451e:	4e19      	ldr	r6, [pc, #100]	; (8004584 <init_rf433+0x94>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
 8004520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004524:	2207      	movs	r2, #7
 8004526:	4918      	ldr	r1, [pc, #96]	; (8004588 <init_rf433+0x98>)
 8004528:	4620      	mov	r0, r4
 800452a:	f7fd fef3 	bl	8002314 <HAL_UART_Transmit>
	HAL_Delay(200);
 800452e:	20c8      	movs	r0, #200	; 0xc8
 8004530:	f7fc fb5c 	bl	8000bec <HAL_Delay>
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 8004534:	463a      	mov	r2, r7
 8004536:	4915      	ldr	r1, [pc, #84]	; (800458c <init_rf433+0x9c>)
 8004538:	4630      	mov	r0, r6
 800453a:	f000 ff51 	bl	80053e0 <siprintf>
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <init_rf433+0xa0>)
 8004540:	b2c2      	uxtb	r2, r0
 8004542:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004544:	4631      	mov	r1, r6
 8004546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800454a:	4620      	mov	r0, r4
 800454c:	f7fd fee2 	bl	8002314 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004550:	20c8      	movs	r0, #200	; 0xc8
 8004552:	f7fc fb4b 	bl	8000bec <HAL_Delay>

	CMD_RF_OFF;
 8004556:	4628      	mov	r0, r5
 8004558:	2201      	movs	r2, #1
 800455a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800455e:	f7fd f9e3 	bl	8001928 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004562:	2032      	movs	r0, #50	; 0x32
 8004564:	f7fc fb42 	bl	8000bec <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 8004568:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 800456c:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 19200;
 800456e:	6063      	str	r3, [r4, #4]
		//Error_Handler();
	}
}
 8004570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8004574:	f7fd bea0 	b.w	80022b8 <HAL_UART_Init>
 8004578:	40010800 	.word	0x40010800
 800457c:	2000561c 	.word	0x2000561c
 8004580:	080066c5 	.word	0x080066c5
 8004584:	200051a4 	.word	0x200051a4
 8004588:	080066cd 	.word	0x080066cd
 800458c:	08006699 	.word	0x08006699
 8004590:	200051b4 	.word	0x200051b4

08004594 <init_structures>:
void init_structures(){

	controllerState.analyzeState = COMPENSATION_STATE_FREE;
	controllerState.pressureCompensation = COMPENSATION_OFF;
	controllerState.soundIndicationState = NORMAL_INDICATION;
	controllerState.airSystemType = RECEIVER;
 8004594:	2101      	movs	r1, #1
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <init_structures+0x38>)
 8004598:	2200      	movs	r2, #0
	controllerState.airSystemType = RECEIVER;
 800459a:	7119      	strb	r1, [r3, #4]
	controllerState.filteredData[3] = 0;

	controllerState.serverUID = 0;
	controllerState.errorByte = 0;
	controllerState.errorMeaningByte = 0;
	controllerState.waysType = 6;
 800459c:	2106      	movs	r1, #6
 800459e:	7699      	strb	r1, [r3, #26]
	controllerState.analyzeAccuracy = 40;
 80045a0:	2128      	movs	r1, #40	; 0x28
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 80045a2:	701a      	strb	r2, [r3, #0]
	controllerState.pressureCompensation = COMPENSATION_OFF;
 80045a4:	705a      	strb	r2, [r3, #1]
	controllerState.soundIndicationState = NORMAL_INDICATION;
 80045a6:	70da      	strb	r2, [r3, #3]
	controllerState.errorStatus = STATUS_NORMAL;
 80045a8:	715a      	strb	r2, [r3, #5]
	controllerState.nessPressure[0] = 0;
 80045aa:	80da      	strh	r2, [r3, #6]
	controllerState.nessPressure[1] = 0;
 80045ac:	811a      	strh	r2, [r3, #8]
	controllerState.nessPressure[2] = 0;
 80045ae:	815a      	strh	r2, [r3, #10]
	controllerState.nessPressure[3] = 0;
 80045b0:	819a      	strh	r2, [r3, #12]
	controllerState.filteredData[0] = 0;
 80045b2:	81da      	strh	r2, [r3, #14]
	controllerState.filteredData[1] = 0;
 80045b4:	821a      	strh	r2, [r3, #16]
	controllerState.filteredData[2] = 0;
 80045b6:	825a      	strh	r2, [r3, #18]
	controllerState.filteredData[3] = 0;
 80045b8:	829a      	strh	r2, [r3, #20]
	controllerState.serverUID = 0;
 80045ba:	82da      	strh	r2, [r3, #22]
	controllerState.errorByte = 0;
 80045bc:	761a      	strb	r2, [r3, #24]
	controllerState.errorMeaningByte = 0;
 80045be:	765a      	strb	r2, [r3, #25]
	controllerState.analyzeAccuracy = 40;
 80045c0:	76d9      	strb	r1, [r3, #27]
	controllerState.status = 0;
 80045c2:	771a      	strb	r2, [r3, #28]
	controllerState.numberOfTries = 0;
 80045c4:	775a      	strb	r2, [r3, #29]
	controllerState.lastTimeCommand = 0;
 80045c6:	83da      	strh	r2, [r3, #30]
	controllerState.compressorWorkTime = 0;
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	4770      	bx	lr
 80045cc:	200054bc 	.word	0x200054bc

080045d0 <mWrite_flash>:
#include "flashFunctions.h"
#include "controllerUtils.h"

#define CONTROLLER_LENGTH_WORDS		(sizeof(controllerData)	/ 4)

void mWrite_flash(void){
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 80045d4:	f7fc ffc4 	bl	8001560 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80045d8:	2300      	movs	r3, #0
 80045da:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <mWrite_flash+0x5c>)
	EraseInitStruct.NbPages = 1;

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80045de:	a901      	add	r1, sp, #4
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 80045e0:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 80045e2:	2301      	movs	r3, #1
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80045e4:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = 1;
 80045e6:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80045e8:	f7fd f86a 	bl	80016c0 <HAL_FLASHEx_Erase>
 80045ec:	b110      	cbz	r0, 80045f4 <mWrite_flash+0x24>
		print_debug("Erase Flash Error\n");
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <mWrite_flash+0x60>)
 80045f0:	f7ff ff7c 	bl	80044ec <print_debug>
void mWrite_flash(void){
 80045f4:	4c0d      	ldr	r4, [pc, #52]	; (800462c <mWrite_flash+0x5c>)
	}

	uint32_t *source_addr = (void *)&controllerData;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 80045f6:	4e0f      	ldr	r6, [pc, #60]	; (8004634 <mWrite_flash+0x64>)
			print_debug("Write Flash Error\n");
 80045f8:	4f0f      	ldr	r7, [pc, #60]	; (8004638 <mWrite_flash+0x68>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80045fa:	4d10      	ldr	r5, [pc, #64]	; (800463c <mWrite_flash+0x6c>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 80045fc:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8004600:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 8004604:	599a      	ldr	r2, [r3, r6]
 8004606:	4621      	mov	r1, r4
 8004608:	2300      	movs	r3, #0
 800460a:	2002      	movs	r0, #2
 800460c:	f7fc ffee 	bl	80015ec <HAL_FLASH_Program>
 8004610:	b110      	cbz	r0, 8004618 <mWrite_flash+0x48>
			print_debug("Write Flash Error\n");
 8004612:	4638      	mov	r0, r7
 8004614:	f7ff ff6a 	bl	80044ec <print_debug>
		}
		source_addr++;
		dest_addr++;
 8004618:	3404      	adds	r4, #4
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 800461a:	42ac      	cmp	r4, r5
 800461c:	d1ee      	bne.n	80045fc <mWrite_flash+0x2c>
	}

	HAL_FLASH_Lock();
 800461e:	f7fc ffb1 	bl	8001584 <HAL_FLASH_Lock>
	print_debug("Flash ok\n");
 8004622:	4807      	ldr	r0, [pc, #28]	; (8004640 <mWrite_flash+0x70>)
 8004624:	f7ff ff62 	bl	80044ec <print_debug>
}
 8004628:	b007      	add	sp, #28
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462c:	0801f800 	.word	0x0801f800
 8004630:	080066f3 	.word	0x080066f3
 8004634:	20005490 	.word	0x20005490
 8004638:	08006706 	.word	0x08006706
 800463c:	0801f82c 	.word	0x0801f82c
 8004640:	08006719 	.word	0x08006719

08004644 <mRead_flash>:

void mRead_flash(void){
	print_debug("reading flash\n");
 8004644:	480a      	ldr	r0, [pc, #40]	; (8004670 <mRead_flash+0x2c>)
void mRead_flash(void){
 8004646:	b510      	push	{r4, lr}
	print_debug("reading flash\n");
 8004648:	f7ff ff50 	bl	80044ec <print_debug>

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <mRead_flash+0x30>)
    uint32_t *dest_addr = (void*)&controllerData;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 800464e:	480a      	ldr	r0, [pc, #40]	; (8004678 <mRead_flash+0x34>)
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004650:	490a      	ldr	r1, [pc, #40]	; (800467c <mRead_flash+0x38>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004652:	681c      	ldr	r4, [r3, #0]
 8004654:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
        source_addr++;
 8004658:	3304      	adds	r3, #4
        *dest_addr = *(__IO uint32_t*)source_addr;
 800465a:	f5a2 32fc 	sub.w	r2, r2, #129024	; 0x1f800
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 800465e:	428b      	cmp	r3, r1
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004660:	5014      	str	r4, [r2, r0]
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004662:	d1f6      	bne.n	8004652 <mRead_flash+0xe>
        dest_addr++;
    }

    print_debug("Flash read\n");
 8004664:	4806      	ldr	r0, [pc, #24]	; (8004680 <mRead_flash+0x3c>)
}
 8004666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    print_debug("Flash read\n");
 800466a:	f7ff bf3f 	b.w	80044ec <print_debug>
 800466e:	bf00      	nop
 8004670:	080066d8 	.word	0x080066d8
 8004674:	0801f800 	.word	0x0801f800
 8004678:	20005490 	.word	0x20005490
 800467c:	0801f82c 	.word	0x0801f82c
 8004680:	080066e7 	.word	0x080066e7

08004684 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <vApplicationGetIdleTaskMemory+0x10>)
 8004686:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <vApplicationGetIdleTaskMemory+0x14>)
 800468a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200053b8 	.word	0x200053b8
 8004698:	200051b8 	.word	0x200051b8

0800469c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800469c:	4770      	bx	lr
	...

080046a0 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a0:	2238      	movs	r2, #56	; 0x38
{
 80046a2:	b530      	push	{r4, r5, lr}
 80046a4:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a6:	eb0d 0002 	add.w	r0, sp, r2
 80046aa:	2100      	movs	r1, #0
 80046ac:	f000 fe8f 	bl	80053ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b0:	2214      	movs	r2, #20
 80046b2:	2100      	movs	r1, #0
 80046b4:	a801      	add	r0, sp, #4
 80046b6:	f000 fe8a 	bl	80053ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046ba:	2220      	movs	r2, #32
 80046bc:	2100      	movs	r1, #0
 80046be:	a806      	add	r0, sp, #24
 80046c0:	f000 fe85 	bl	80053ce <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046ca:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ce:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80046d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046d4:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80046d6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046d8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046da:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046dc:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046de:	f7fd f939 	bl	8001954 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046e2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046e8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046ec:	4621      	mov	r1, r4
 80046ee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046f0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046f2:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046f4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046f6:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046f8:	f7fd fb7a 	bl	8001df0 <HAL_RCC_ClockConfig>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80046fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004700:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004702:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004704:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004706:	f7fd fc45 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_PLLI2S_ENABLE();
 800470a:	4b02      	ldr	r3, [pc, #8]	; (8004714 <SystemClock_Config+0x74>)
 800470c:	601d      	str	r5, [r3, #0]
}
 800470e:	b01d      	add	sp, #116	; 0x74
 8004710:	bd30      	pop	{r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	42420070 	.word	0x42420070

08004718 <main>:
{
 8004718:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800471a:	4d72      	ldr	r5, [pc, #456]	; (80048e4 <main+0x1cc>)
{
 800471c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800471e:	f7fc fa41 	bl	8000ba4 <HAL_Init>
  SystemClock_Config();
 8004722:	f7ff ffbd 	bl	80046a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004726:	2210      	movs	r2, #16
 8004728:	2100      	movs	r1, #0
 800472a:	a805      	add	r0, sp, #20
 800472c:	f000 fe4f 	bl	80053ce <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004730:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004732:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	61ab      	str	r3, [r5, #24]
 800473a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800473c:	f240 31c1 	movw	r1, #961	; 0x3c1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004748:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800474a:	4867      	ldr	r0, [pc, #412]	; (80048e8 <main+0x1d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800474c:	f043 0310 	orr.w	r3, r3, #16
 8004750:	61ab      	str	r3, [r5, #24]
 8004752:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800475e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004760:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	61ab      	str	r3, [r5, #24]
 8004768:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476a:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004776:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004778:	f44f 6700 	mov.w	r7, #2048	; 0x800
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800477c:	f043 0308 	orr.w	r3, r3, #8
 8004780:	61ab      	str	r3, [r5, #24]
 8004782:	69ab      	ldr	r3, [r5, #24]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800478c:	f7fd f8cc 	bl	8001928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004790:	2200      	movs	r2, #0
 8004792:	2120      	movs	r1, #32
 8004794:	4855      	ldr	r0, [pc, #340]	; (80048ec <main+0x1d4>)
 8004796:	f7fd f8c7 	bl	8001928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800479a:	2200      	movs	r2, #0
 800479c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80047a0:	4853      	ldr	r0, [pc, #332]	; (80048f0 <main+0x1d8>)
 80047a2:	f7fd f8c1 	bl	8001928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80047a6:	2201      	movs	r2, #1
 80047a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047ac:	484f      	ldr	r0, [pc, #316]	; (80048ec <main+0x1d4>)
 80047ae:	f7fd f8bb 	bl	8001928 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80047b2:	f240 33c1 	movw	r3, #961	; 0x3c1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b6:	a905      	add	r1, sp, #20
 80047b8:	484b      	ldr	r0, [pc, #300]	; (80048e8 <main+0x1d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80047ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047bc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80047be:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c2:	f7fc ffcb 	bl	800175c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047c6:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c8:	a905      	add	r1, sp, #20
 80047ca:	4848      	ldr	r0, [pc, #288]	; (80048ec <main+0x1d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ce:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d2:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d6:	f7fc ffc1 	bl	800175c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047de:	a905      	add	r1, sp, #20
 80047e0:	4843      	ldr	r0, [pc, #268]	; (80048f0 <main+0x1d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e8:	f7fc ffb8 	bl	800175c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <main+0x1dc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ee:	a905      	add	r1, sp, #20
 80047f0:	483f      	ldr	r0, [pc, #252]	; (80048f0 <main+0x1d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047f2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80047f4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047f6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047fa:	f7fc ffaf 	bl	800175c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80047fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004802:	a905      	add	r1, sp, #20
 8004804:	483a      	ldr	r0, [pc, #232]	; (80048f0 <main+0x1d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004806:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004808:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800480a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480e:	f7fc ffa5 	bl	800175c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	a905      	add	r1, sp, #20
 8004814:	4835      	ldr	r0, [pc, #212]	; (80048ec <main+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004816:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004818:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800481a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481e:	f7fc ff9d 	bl	800175c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004826:	a905      	add	r1, sp, #20
 8004828:	4830      	ldr	r0, [pc, #192]	; (80048ec <main+0x1d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800482a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004830:	f7fc ff94 	bl	800175c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004834:	4622      	mov	r2, r4
 8004836:	4621      	mov	r1, r4
 8004838:	2028      	movs	r0, #40	; 0x28
 800483a:	f7fc fc4b 	bl	80010d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800483e:	2028      	movs	r0, #40	; 0x28
 8004840:	f7fc fc7c 	bl	800113c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004844:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004846:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004848:	4333      	orrs	r3, r6
 800484a:	616b      	str	r3, [r5, #20]
 800484c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800484e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004850:	4033      	ands	r3, r6
 8004852:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004854:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004856:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004858:	f7fc fc3c 	bl	80010d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800485c:	200e      	movs	r0, #14
 800485e:	f7fc fc6d 	bl	800113c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8004862:	4d25      	ldr	r5, [pc, #148]	; (80048f8 <main+0x1e0>)
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <main+0x1e4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004866:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8004868:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800486a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800486e:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004870:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8004874:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004876:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004878:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800487a:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800487c:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800487e:	9405      	str	r4, [sp, #20]
 8004880:	9406      	str	r4, [sp, #24]
 8004882:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004884:	f7fc fb2a 	bl	8000edc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004888:	a905      	add	r1, sp, #20
 800488a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800488c:	9606      	str	r6, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 800488e:	9405      	str	r4, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004890:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004892:	f7fc fa45 	bl	8000d20 <HAL_ADC_ConfigChannel>
  huart1.Init.BaudRate = 9600;
 8004896:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 800489a:	4819      	ldr	r0, [pc, #100]	; (8004900 <main+0x1e8>)
  huart1.Init.BaudRate = 9600;
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <main+0x1ec>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800489e:	4e1a      	ldr	r6, [pc, #104]	; (8004908 <main+0x1f0>)
  huart1.Init.BaudRate = 9600;
 80048a0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048a4:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048a6:	6084      	str	r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048a8:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048aa:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ac:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ae:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048b0:	61c4      	str	r4, [r0, #28]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80048b2:	ad05      	add	r5, sp, #20
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048b4:	f7fd fd00 	bl	80022b8 <HAL_UART_Init>
  HAL_Delay(2000);
 80048b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80048bc:	f7fc f996 	bl	8000bec <HAL_Delay>
  controller_init();
 80048c0:	f7ff fd7a 	bl	80043b8 <controller_init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80048c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80048d0:	4621      	mov	r1, r4
 80048d2:	a805      	add	r0, sp, #20
 80048d4:	f7fd ff0d 	bl	80026f2 <osThreadCreate>
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <main+0x1f4>)
 80048da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80048dc:	f7fd ff04 	bl	80026e8 <osKernelStart>
 80048e0:	e7fe      	b.n	80048e0 <main+0x1c8>
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40011000 	.word	0x40011000
 80048ec:	40010800 	.word	0x40010800
 80048f0:	40010c00 	.word	0x40010c00
 80048f4:	10110000 	.word	0x10110000
 80048f8:	200055ec 	.word	0x200055ec
 80048fc:	40012400 	.word	0x40012400
 8004900:	2000561c 	.word	0x2000561c
 8004904:	40013800 	.word	0x40013800
 8004908:	0800666c 	.word	0x0800666c
 800490c:	20005598 	.word	0x20005598

08004910 <HAL_UART_RxCpltCallback>:
	if(huart->Instance == USART1){
 8004910:	6802      	ldr	r2, [r0, #0]
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_UART_RxCpltCallback+0x54>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004914:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 8004916:	429a      	cmp	r2, r3
 8004918:	d122      	bne.n	8004960 <HAL_UART_RxCpltCallback+0x50>
		if (recCommandByte != '\r'){
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_UART_RxCpltCallback+0x58>)
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	2a0d      	cmp	r2, #13
 8004920:	d019      	beq.n	8004956 <HAL_UART_RxCpltCallback+0x46>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 8004922:	4c12      	ldr	r4, [pc, #72]	; (800496c <HAL_UART_RxCpltCallback+0x5c>)
 8004924:	4912      	ldr	r1, [pc, #72]	; (8004970 <HAL_UART_RxCpltCallback+0x60>)
 8004926:	7823      	ldrb	r3, [r4, #0]
 8004928:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 800492a:	3301      	adds	r3, #1
 800492c:	b2db      	uxtb	r3, r3
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	bf08      	it	eq
 8004932:	2300      	moveq	r3, #0
			if(recCommandByte == '\n'){
 8004934:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 8004936:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 8004938:	d10d      	bne.n	8004956 <HAL_UART_RxCpltCallback+0x46>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 800493a:	7822      	ldrb	r2, [r4, #0]
 800493c:	490c      	ldr	r1, [pc, #48]	; (8004970 <HAL_UART_RxCpltCallback+0x60>)
 800493e:	480d      	ldr	r0, [pc, #52]	; (8004974 <HAL_UART_RxCpltCallback+0x64>)
 8004940:	f000 fd3a 	bl	80053b8 <memcpy>
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <HAL_UART_RxCpltCallback+0x68>)
 8004946:	2300      	movs	r3, #0
 8004948:	aa01      	add	r2, sp, #4
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_UART_RxCpltCallback+0x64>)
 800494c:	6800      	ldr	r0, [r0, #0]
 800494e:	f7fe fb07 	bl	8002f60 <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	7023      	strb	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8004956:	2201      	movs	r2, #1
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <HAL_UART_RxCpltCallback+0x58>)
 800495a:	4808      	ldr	r0, [pc, #32]	; (800497c <HAL_UART_RxCpltCallback+0x6c>)
 800495c:	f7fd fd36 	bl	80023cc <HAL_UART_Receive_IT>
}
 8004960:	b002      	add	sp, #8
 8004962:	bd10      	pop	{r4, pc}
 8004964:	40013800 	.word	0x40013800
 8004968:	2000566c 	.word	0x2000566c
 800496c:	2000548d 	.word	0x2000548d
 8004970:	20005518 	.word	0x20005518
 8004974:	20005558 	.word	0x20005558
 8004978:	20005668 	.word	0x20005668
 800497c:	2000561c 	.word	0x2000561c

08004980 <HAL_ADCEx_InjectedConvCpltCallback>:
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8004980:	b538      	push	{r3, r4, r5, lr}
	if (hadc1->Instance == ADC1){
 8004982:	6802      	ldr	r2, [r0, #0]
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8004986:	4605      	mov	r5, r0
	if (hadc1->Instance == ADC1){
 8004988:	429a      	cmp	r2, r3
 800498a:	d113      	bne.n	80049b4 <HAL_ADCEx_InjectedConvCpltCallback+0x34>
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 800498c:	2101      	movs	r1, #1
 800498e:	f7fc fb7f 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
 8004992:	4c0a      	ldr	r4, [pc, #40]	; (80049bc <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8004994:	2102      	movs	r1, #2
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 8004996:	8020      	strh	r0, [r4, #0]
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8004998:	4628      	mov	r0, r5
 800499a:	f7fc fb79 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 800499e:	2103      	movs	r1, #3
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80049a0:	8060      	strh	r0, [r4, #2]
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fc fb74 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 80049a8:	2104      	movs	r1, #4
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80049aa:	80a0      	strh	r0, [r4, #4]
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 80049ac:	4628      	mov	r0, r5
 80049ae:	f7fc fb6f 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
 80049b2:	80e0      	strh	r0, [r4, #6]
 80049b4:	bd38      	pop	{r3, r4, r5, pc}
 80049b6:	bf00      	nop
 80049b8:	40012400 	.word	0x40012400
 80049bc:	2000559c 	.word	0x2000559c

080049c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049c0:	4770      	bx	lr
	...

080049c4 <xProcessCommandTask>:
extern xQueueHandle xRecCommandQueue;

extern char message[128];
extern uint8_t messageLength;

void xProcessCommandTask(void* arguments){
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	for(;;){
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
		if (xStatus == pdPASS){

			controllerState.lastTimeCommand = 0;
 80049c8:	4fa2      	ldr	r7, [pc, #648]	; (8004c54 <xProcessCommandTask+0x290>)
	uint16_t id = 0;
 80049ca:	2500      	movs	r5, #0
 80049cc:	463c      	mov	r4, r7
void xProcessCommandTask(void* arguments){
 80049ce:	b09a      	sub	sp, #104	; 0x68
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 80049d0:	2240      	movs	r2, #64	; 0x40
 80049d2:	2100      	movs	r1, #0
 80049d4:	a80a      	add	r0, sp, #40	; 0x28
								mWrite_flash();
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 80049d6:	4ea0      	ldr	r6, [pc, #640]	; (8004c58 <xProcessCommandTask+0x294>)
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 80049d8:	f000 fcf9 	bl	80053ce <memset>
	uint16_t id = 0;
 80049dc:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	char co = 0;
 80049e0:	f88d 501f 	strb.w	r5, [sp, #31]
	char outputState = 0;
 80049e4:	f88d 5020 	strb.w	r5, [sp, #32]
	uint16_t channel = 0;
 80049e8:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	char systemType = 0;
 80049ec:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 80049f0:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8004c90 <xProcessCommandTask+0x2cc>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	a90a      	add	r1, sp, #40	; 0x28
 80049fc:	f8d8 0000 	ldr.w	r0, [r8]
 8004a00:	f7fe fb10 	bl	8003024 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8004a04:	2801      	cmp	r0, #1
 8004a06:	d1f5      	bne.n	80049f4 <xProcessCommandTask+0x30>
			controllerState.lastTimeCommand = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	83fb      	strh	r3, [r7, #30]
			switch(command[0]){
 8004a0c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004a10:	3b6d      	subs	r3, #109	; 0x6d
 8004a12:	2b0b      	cmp	r3, #11
 8004a14:	d8ec      	bhi.n	80049f0 <xProcessCommandTask+0x2c>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <xProcessCommandTask+0x58>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004ab9 	.word	0x08004ab9
 8004a20:	080049f1 	.word	0x080049f1
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	080049f1 	.word	0x080049f1
 8004a2c:	080049f1 	.word	0x080049f1
 8004a30:	080049f1 	.word	0x080049f1
 8004a34:	08004c2f 	.word	0x08004c2f
 8004a38:	080049f1 	.word	0x080049f1
 8004a3c:	080049f1 	.word	0x080049f1
 8004a40:	080049f1 	.word	0x080049f1
 8004a44:	080049f1 	.word	0x080049f1
 8004a48:	08004db1 	.word	0x08004db1
				sscanf((char*)command, "o,%hu,\n", &id);
 8004a4c:	aa09      	add	r2, sp, #36	; 0x24
 8004a4e:	4983      	ldr	r1, [pc, #524]	; (8004c5c <xProcessCommandTask+0x298>)
 8004a50:	a80a      	add	r0, sp, #40	; 0x28
 8004a52:	f000 fce9 	bl	8005428 <siscanf>
				if (id == controllerState.serverUID){
 8004a56:	8ae2      	ldrh	r2, [r4, #22]
 8004a58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1c7      	bne.n	80049f0 <xProcessCommandTask+0x2c>
					controllerState.status = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	7723      	strb	r3, [r4, #28]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 8004a64:	7863      	ldrb	r3, [r4, #1]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 8004a66:	7962      	ldrb	r2, [r4, #5]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 8004a68:	2b01      	cmp	r3, #1
						controllerState.status = 0x01;
 8004a6a:	bf08      	it	eq
 8004a6c:	7723      	strbeq	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 8004a6e:	0791      	lsls	r1, r2, #30
						controllerState.status |= 0x02;
 8004a70:	bf48      	it	mi
 8004a72:	7f23      	ldrbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", controllerData.clientID,
 8004a74:	487a      	ldr	r0, [pc, #488]	; (8004c60 <xProcessCommandTask+0x29c>)
						controllerState.status |= 0x02;
 8004a76:	bf44      	itt	mi
 8004a78:	f043 0302 	orrmi.w	r3, r3, #2
 8004a7c:	7723      	strbmi	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 8004a7e:	0753      	lsls	r3, r2, #29
						controllerState.status |= 0x03;
 8004a80:	bf48      	it	mi
 8004a82:	7f23      	ldrbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", controllerData.clientID,
 8004a84:	4a77      	ldr	r2, [pc, #476]	; (8004c64 <xProcessCommandTask+0x2a0>)
						controllerState.status |= 0x03;
 8004a86:	bf44      	itt	mi
 8004a88:	f043 0303 	orrmi.w	r3, r3, #3
 8004a8c:	7723      	strbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", controllerData.clientID,
 8004a8e:	7f21      	ldrb	r1, [r4, #28]
 8004a90:	89e3      	ldrh	r3, [r4, #14]
 8004a92:	8852      	ldrh	r2, [r2, #2]
 8004a94:	9103      	str	r1, [sp, #12]
 8004a96:	8aa1      	ldrh	r1, [r4, #20]
 8004a98:	9102      	str	r1, [sp, #8]
 8004a9a:	8a61      	ldrh	r1, [r4, #18]
 8004a9c:	9101      	str	r1, [sp, #4]
 8004a9e:	8a21      	ldrh	r1, [r4, #16]
 8004aa0:	9100      	str	r1, [sp, #0]
 8004aa2:	4971      	ldr	r1, [pc, #452]	; (8004c68 <xProcessCommandTask+0x2a4>)
 8004aa4:	f000 fc9c 	bl	80053e0 <siprintf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 8004aa8:	4b70      	ldr	r3, [pc, #448]	; (8004c6c <xProcessCommandTask+0x2a8>)
 8004aaa:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004aac:	496c      	ldr	r1, [pc, #432]	; (8004c60 <xProcessCommandTask+0x29c>)
 8004aae:	4870      	ldr	r0, [pc, #448]	; (8004c70 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 8004ab0:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004ab2:	f7fd fcb3 	bl	800241c <HAL_UART_Transmit_DMA>
 8004ab6:	e79b      	b.n	80049f0 <xProcessCommandTask+0x2c>
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8004ab8:	ab08      	add	r3, sp, #32
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	aa09      	add	r2, sp, #36	; 0x24
 8004abe:	f10d 031f 	add.w	r3, sp, #31
 8004ac2:	496c      	ldr	r1, [pc, #432]	; (8004c74 <xProcessCommandTask+0x2b0>)
 8004ac4:	a80a      	add	r0, sp, #40	; 0x28
 8004ac6:	f000 fcaf 	bl	8005428 <siscanf>
					outputState = command[10];
 8004aca:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
					if (id == controllerState.serverUID){
 8004ace:	8ae2      	ldrh	r2, [r4, #22]
					outputState = command[10];
 8004ad0:	f88d 3020 	strb.w	r3, [sp, #32]
					if (id == controllerState.serverUID){
 8004ad4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d189      	bne.n	80049f0 <xProcessCommandTask+0x2c>
						controllerState.status = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	7723      	strb	r3, [r4, #28]
						if (controllerState.pressureCompensation == COMPENSATION_ON){
 8004ae0:	7863      	ldrb	r3, [r4, #1]
 8004ae2:	4a60      	ldr	r2, [pc, #384]	; (8004c64 <xProcessCommandTask+0x2a0>)
 8004ae4:	2b01      	cmp	r3, #1
							controllerState.status = 0x01;
 8004ae6:	bf08      	it	eq
 8004ae8:	7723      	strbeq	r3, [r4, #28]
						if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 8004aea:	7963      	ldrb	r3, [r4, #5]
 8004aec:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004c6c <xProcessCommandTask+0x2a8>
 8004af0:	f013 0a02 	ands.w	sl, r3, #2
 8004af4:	d00e      	beq.n	8004b14 <xProcessCommandTask+0x150>
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 8004af6:	8852      	ldrh	r2, [r2, #2]
 8004af8:	495f      	ldr	r1, [pc, #380]	; (8004c78 <xProcessCommandTask+0x2b4>)
 8004afa:	4859      	ldr	r0, [pc, #356]	; (8004c60 <xProcessCommandTask+0x29c>)
 8004afc:	f000 fc70 	bl	80053e0 <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b00:	4957      	ldr	r1, [pc, #348]	; (8004c60 <xProcessCommandTask+0x29c>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 8004b02:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b04:	485a      	ldr	r0, [pc, #360]	; (8004c70 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 8004b06:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b0a:	f7fd fc87 	bl	800241c <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	7163      	strb	r3, [r4, #5]
							break;
 8004b12:	e76d      	b.n	80049f0 <xProcessCommandTask+0x2c>
						if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 8004b14:	f013 0804 	ands.w	r8, r3, #4
 8004b18:	d00e      	beq.n	8004b38 <xProcessCommandTask+0x174>
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8004b1a:	8852      	ldrh	r2, [r2, #2]
 8004b1c:	4957      	ldr	r1, [pc, #348]	; (8004c7c <xProcessCommandTask+0x2b8>)
 8004b1e:	4850      	ldr	r0, [pc, #320]	; (8004c60 <xProcessCommandTask+0x29c>)
 8004b20:	f000 fc5e 	bl	80053e0 <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b24:	494e      	ldr	r1, [pc, #312]	; (8004c60 <xProcessCommandTask+0x29c>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8004b26:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b28:	4851      	ldr	r0, [pc, #324]	; (8004c70 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8004b2a:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b2e:	f7fd fc75 	bl	800241c <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 8004b32:	f884 a005 	strb.w	sl, [r4, #5]
							break;
 8004b36:	e75b      	b.n	80049f0 <xProcessCommandTask+0x2c>
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8004b38:	7e61      	ldrb	r1, [r4, #25]
 8004b3a:	89e3      	ldrh	r3, [r4, #14]
 8004b3c:	8852      	ldrh	r2, [r2, #2]
 8004b3e:	9105      	str	r1, [sp, #20]
 8004b40:	7e21      	ldrb	r1, [r4, #24]
 8004b42:	4847      	ldr	r0, [pc, #284]	; (8004c60 <xProcessCommandTask+0x29c>)
 8004b44:	9104      	str	r1, [sp, #16]
 8004b46:	7f21      	ldrb	r1, [r4, #28]
 8004b48:	9103      	str	r1, [sp, #12]
 8004b4a:	8aa1      	ldrh	r1, [r4, #20]
 8004b4c:	9102      	str	r1, [sp, #8]
 8004b4e:	8a61      	ldrh	r1, [r4, #18]
 8004b50:	9101      	str	r1, [sp, #4]
 8004b52:	8a21      	ldrh	r1, [r4, #16]
 8004b54:	9100      	str	r1, [sp, #0]
 8004b56:	494a      	ldr	r1, [pc, #296]	; (8004c80 <xProcessCommandTask+0x2bc>)
 8004b58:	f000 fc42 	bl	80053e0 <siprintf>
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b5c:	4940      	ldr	r1, [pc, #256]	; (8004c60 <xProcessCommandTask+0x29c>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8004b5e:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b60:	4843      	ldr	r0, [pc, #268]	; (8004c70 <xProcessCommandTask+0x2ac>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8004b62:	f889 2000 	strb.w	r2, [r9]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004b66:	f7fd fc59 	bl	800241c <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState && controllerState.errorStatus != STATUS_ERROR_OVERCURRENT){
 8004b6a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004b6e:	4295      	cmp	r5, r2
 8004b70:	f43f af3e 	beq.w	80049f0 <xProcessCommandTask+0x2c>
 8004b74:	7963      	ldrb	r3, [r4, #5]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f43f af3a 	beq.w	80049f0 <xProcessCommandTask+0x2c>
							if (outputState & 0b00000001) 	C1_UP_ON;
 8004b7c:	f012 0201 	ands.w	r2, r2, #1
 8004b80:	bf18      	it	ne
 8004b82:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 8004b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b88:	483e      	ldr	r0, [pc, #248]	; (8004c84 <xProcessCommandTask+0x2c0>)
							controllerState.pressureCompensation = COMPENSATION_OFF;
 8004b8a:	f884 8001 	strb.w	r8, [r4, #1]
							else 				   			C1_UP_OFF;
 8004b8e:	f7fc fecb 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8004b92:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C1_DOWN_OFF;
 8004b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8004b9a:	f012 0202 	ands.w	r2, r2, #2
 8004b9e:	bf18      	it	ne
 8004ba0:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 8004ba2:	4838      	ldr	r0, [pc, #224]	; (8004c84 <xProcessCommandTask+0x2c0>)
 8004ba4:	f7fc fec0 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 8004ba8:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C2_UP_OFF;
 8004bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
							if (outputState & 0b00000100) 	C2_UP_ON;
 8004bb0:	f012 0204 	ands.w	r2, r2, #4
 8004bb4:	bf18      	it	ne
 8004bb6:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 8004bb8:	4832      	ldr	r0, [pc, #200]	; (8004c84 <xProcessCommandTask+0x2c0>)
 8004bba:	f7fc feb5 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 8004bbe:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C2_DOWN_OFF;
 8004bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 8004bc6:	f012 0208 	ands.w	r2, r2, #8
 8004bca:	bf18      	it	ne
 8004bcc:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 8004bce:	482d      	ldr	r0, [pc, #180]	; (8004c84 <xProcessCommandTask+0x2c0>)
 8004bd0:	f7fc feaa 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 8004bd4:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C3_UP_OFF;
 8004bd8:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00010000) 	C3_UP_ON;
 8004bda:	f012 0210 	ands.w	r2, r2, #16
 8004bde:	bf18      	it	ne
 8004be0:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 8004be2:	4829      	ldr	r0, [pc, #164]	; (8004c88 <xProcessCommandTask+0x2c4>)
 8004be4:	f7fc fea0 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8004be8:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C3_DOWN_OFF;
 8004bec:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8004bee:	f012 0220 	ands.w	r2, r2, #32
 8004bf2:	bf18      	it	ne
 8004bf4:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 8004bf6:	4824      	ldr	r0, [pc, #144]	; (8004c88 <xProcessCommandTask+0x2c4>)
 8004bf8:	f7fc fe96 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 8004bfc:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C4_UP_OFF;
 8004c00:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b01000000) 	C4_UP_ON;
 8004c04:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004c08:	bf18      	it	ne
 8004c0a:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 8004c0c:	481e      	ldr	r0, [pc, #120]	; (8004c88 <xProcessCommandTask+0x2c4>)
 8004c0e:	f7fc fe8b 	bl	8001928 <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8004c12:	f99d 3020 	ldrsb.w	r3, [sp, #32]
							else 				   			C4_DOWN_OFF;
 8004c16:	f44f 7100 	mov.w	r1, #512	; 0x200
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfb4      	ite	lt
 8004c1e:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8004c20:	2200      	movge	r2, #0
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <xProcessCommandTask+0x2c4>)
 8004c24:	f7fc fe80 	bl	8001928 <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 8004c28:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8004c2c:	e6e0      	b.n	80049f0 <xProcessCommandTask+0x2c>
					if (command[1] == 'x'){
 8004c2e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8004c32:	2b78      	cmp	r3, #120	; 0x78
 8004c34:	d12e      	bne.n	8004c94 <xProcessCommandTask+0x2d0>
						sscanf((char*)command, "sx,%hu,\n", &id);
 8004c36:	aa09      	add	r2, sp, #36	; 0x24
 8004c38:	4914      	ldr	r1, [pc, #80]	; (8004c8c <xProcessCommandTask+0x2c8>)
 8004c3a:	a80a      	add	r0, sp, #40	; 0x28
 8004c3c:	f000 fbf4 	bl	8005428 <siscanf>
						if (id == controllerState.serverUID){
 8004c40:	8ae2      	ldrh	r2, [r4, #22]
 8004c42:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004c46:	429a      	cmp	r2, r3
 8004c48:	f47f aed2 	bne.w	80049f0 <xProcessCommandTask+0x2c>
							controllerState.pressureCompensation = COMPENSATION_OFF;
 8004c4c:	2300      	movs	r3, #0
							controllerState.pressureCompensation = COMPENSATION_ON;
 8004c4e:	7063      	strb	r3, [r4, #1]
 8004c50:	e6ce      	b.n	80049f0 <xProcessCommandTask+0x2c>
 8004c52:	bf00      	nop
 8004c54:	200054bc 	.word	0x200054bc
 8004c58:	40010800 	.word	0x40010800
 8004c5c:	0800672f 	.word	0x0800672f
 8004c60:	2000540c 	.word	0x2000540c
 8004c64:	20005490 	.word	0x20005490
 8004c68:	08006737 	.word	0x08006737
 8004c6c:	2000548c 	.word	0x2000548c
 8004c70:	2000561c 	.word	0x2000561c
 8004c74:	08006752 	.word	0x08006752
 8004c78:	08006760 	.word	0x08006760
 8004c7c:	08006768 	.word	0x08006768
 8004c80:	08006772 	.word	0x08006772
 8004c84:	40010c00 	.word	0x40010c00
 8004c88:	40011000 	.word	0x40011000
 8004c8c:	08006793 	.word	0x08006793
 8004c90:	20005668 	.word	0x20005668
					else if (command[1] == ','){
 8004c94:	2b2c      	cmp	r3, #44	; 0x2c
 8004c96:	f47f aeab 	bne.w	80049f0 <xProcessCommandTask+0x2c>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", &id, 	&controllerState.nessPressure[0],
 8004c9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <xProcessCommandTask+0x4b4>)
 8004cae:	4973      	ldr	r1, [pc, #460]	; (8004e7c <xProcessCommandTask+0x4b8>)
 8004cb0:	1e9a      	subs	r2, r3, #2
 8004cb2:	9201      	str	r2, [sp, #4]
 8004cb4:	1f1a      	subs	r2, r3, #4
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	9200      	str	r2, [sp, #0]
 8004cba:	3b06      	subs	r3, #6
 8004cbc:	aa09      	add	r2, sp, #36	; 0x24
 8004cbe:	a80a      	add	r0, sp, #40	; 0x28
 8004cc0:	f000 fbb2 	bl	8005428 <siscanf>
						if (id == controllerState.serverUID && controllerState.errorStatus == STATUS_NORMAL){
 8004cc4:	8ae2      	ldrh	r2, [r4, #22]
 8004cc6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	f47f ae90 	bne.w	80049f0 <xProcessCommandTask+0x2c>
 8004cd0:	7963      	ldrb	r3, [r4, #5]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f47f ae8c 	bne.w	80049f0 <xProcessCommandTask+0x2c>
							if (systemType == '1'){ // air system choice
 8004cd8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8004cdc:	2a31      	cmp	r2, #49	; 0x31
								controllerState.airSystemType = RECEIVER;
 8004cde:	bf1c      	itt	ne
 8004ce0:	2201      	movne	r2, #1
 8004ce2:	7122      	strbne	r2, [r4, #4]
 8004ce4:	4a66      	ldr	r2, [pc, #408]	; (8004e80 <xProcessCommandTask+0x4bc>)
								controllerState.airSystemType = COMPRESSOR; // for compressor
 8004ce6:	bf04      	itt	eq
 8004ce8:	7123      	strbeq	r3, [r4, #4]
								controllerState.compressorWorkTime = 0;
 8004cea:	6223      	streq	r3, [r4, #32]
 8004cec:	f102 0108 	add.w	r1, r2, #8
								if (controllerState.nessPressure[i] > 4000) controllerState.nessPressure[i] = controllerState.filteredData[i];
 8004cf0:	8810      	ldrh	r0, [r2, #0]
 8004cf2:	3202      	adds	r2, #2
 8004cf4:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8004cf8:	bf84      	itt	hi
 8004cfa:	88d0      	ldrhhi	r0, [r2, #6]
 8004cfc:	f822 0c02 	strhhi.w	r0, [r2, #-2]
							for(i = 0; i < 4; i++){
 8004d00:	428a      	cmp	r2, r1
 8004d02:	d1f5      	bne.n	8004cf0 <xProcessCommandTask+0x32c>
							controllerState.waysType = waysType - '0';
 8004d04:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
							if (accuracy == '1'){
 8004d08:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
							controllerState.waysType = waysType - '0';
 8004d0c:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8004d10:	b2c0      	uxtb	r0, r0
							if (accuracy == '1'){
 8004d12:	2931      	cmp	r1, #49	; 0x31
							controllerState.waysType = waysType - '0';
 8004d14:	76a0      	strb	r0, [r4, #26]
							if (accuracy == '1'){
 8004d16:	d11f      	bne.n	8004d58 <xProcessCommandTask+0x394>
								controllerState.analyzeAccuracy = 30;
 8004d18:	211e      	movs	r1, #30
								controllerState.analyzeAccuracy = 25;
 8004d1a:	76e1      	strb	r1, [r4, #27]
							if (controllerState.waysType > 6 || controllerState.waysType < 2){
 8004d1c:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 8004d20:	b2c9      	uxtb	r1, r1
 8004d22:	2904      	cmp	r1, #4
 8004d24:	f63f ae64 	bhi.w	80049f0 <xProcessCommandTask+0x2c>
							if(controllerState.waysType == VIEW_2_2){
 8004d28:	2806      	cmp	r0, #6
 8004d2a:	d11e      	bne.n	8004d6a <xProcessCommandTask+0x3a6>
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <xProcessCommandTask+0x4b4>)
 8004d2e:	f102 0108 	add.w	r1, r2, #8
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8004d32:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8004d36:	b120      	cbz	r0, 8004d42 <xProcessCommandTask+0x37e>
 8004d38:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8004d3c:	b108      	cbz	r0, 8004d42 <xProcessCommandTask+0x37e>
									successCounter += 1;
 8004d3e:	3301      	adds	r3, #1
 8004d40:	b2db      	uxtb	r3, r3
								for(i = 0; i < 4; i++){
 8004d42:	4291      	cmp	r1, r2
 8004d44:	d1f5      	bne.n	8004d32 <xProcessCommandTask+0x36e>
								if (successCounter != 4){
 8004d46:	2b04      	cmp	r3, #4
								if (successCounter != 3){
 8004d48:	d030      	beq.n	8004dac <xProcessCommandTask+0x3e8>
											messageLength = sprintf(message, "t,%hu,\n", 	controllerData.clientID);
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <xProcessCommandTask+0x4c0>)
 8004d4c:	494e      	ldr	r1, [pc, #312]	; (8004e88 <xProcessCommandTask+0x4c4>)
 8004d4e:	885a      	ldrh	r2, [r3, #2]
 8004d50:	484e      	ldr	r0, [pc, #312]	; (8004e8c <xProcessCommandTask+0x4c8>)
 8004d52:	f000 fb45 	bl	80053e0 <siprintf>
 8004d56:	e6a7      	b.n	8004aa8 <xProcessCommandTask+0xe4>
							else if (accuracy == '2'){
 8004d58:	2932      	cmp	r1, #50	; 0x32
 8004d5a:	d101      	bne.n	8004d60 <xProcessCommandTask+0x39c>
								controllerState.analyzeAccuracy = 60;
 8004d5c:	213c      	movs	r1, #60	; 0x3c
 8004d5e:	e7dc      	b.n	8004d1a <xProcessCommandTask+0x356>
							else if (accuracy == '3'){
 8004d60:	2933      	cmp	r1, #51	; 0x33
								controllerState.analyzeAccuracy = 90;
 8004d62:	bf0c      	ite	eq
 8004d64:	215a      	moveq	r1, #90	; 0x5a
								controllerState.analyzeAccuracy = 25;
 8004d66:	2119      	movne	r1, #25
 8004d68:	e7d7      	b.n	8004d1a <xProcessCommandTask+0x356>
							else if(controllerState.waysType == VIEW_2_1 || controllerState.waysType == VIEW_1_2){
 8004d6a:	3a34      	subs	r2, #52	; 0x34
 8004d6c:	2a01      	cmp	r2, #1
 8004d6e:	d80d      	bhi.n	8004d8c <xProcessCommandTask+0x3c8>
 8004d70:	4a41      	ldr	r2, [pc, #260]	; (8004e78 <xProcessCommandTask+0x4b4>)
 8004d72:	1d91      	adds	r1, r2, #6
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8004d74:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8004d78:	b120      	cbz	r0, 8004d84 <xProcessCommandTask+0x3c0>
 8004d7a:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8004d7e:	b108      	cbz	r0, 8004d84 <xProcessCommandTask+0x3c0>
									successCounter += 1;
 8004d80:	3301      	adds	r3, #1
 8004d82:	b2db      	uxtb	r3, r3
								for(i = 0; i < 3; i++){
 8004d84:	428a      	cmp	r2, r1
 8004d86:	d1f5      	bne.n	8004d74 <xProcessCommandTask+0x3b0>
								if (successCounter != 3){
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	e7dd      	b.n	8004d48 <xProcessCommandTask+0x384>
							else if(controllerState.waysType == VIEW_1_1 || controllerState.waysType == VIEW_0_2){
 8004d8c:	2901      	cmp	r1, #1
 8004d8e:	d80d      	bhi.n	8004dac <xProcessCommandTask+0x3e8>
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8004d90:	89e3      	ldrh	r3, [r4, #14]
 8004d92:	b11b      	cbz	r3, 8004d9c <xProcessCommandTask+0x3d8>
 8004d94:	88e3      	ldrh	r3, [r4, #6]
 8004d96:	3300      	adds	r3, #0
 8004d98:	bf18      	it	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	8a22      	ldrh	r2, [r4, #16]
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	d0d3      	beq.n	8004d4a <xProcessCommandTask+0x386>
 8004da2:	8922      	ldrh	r2, [r4, #8]
 8004da4:	2a00      	cmp	r2, #0
 8004da6:	d0d0      	beq.n	8004d4a <xProcessCommandTask+0x386>
								if (successCounter != 2){
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ce      	beq.n	8004d4a <xProcessCommandTask+0x386>
							controllerState.pressureCompensation = COMPENSATION_ON;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e74e      	b.n	8004c4e <xProcessCommandTask+0x28a>
					if (controllerState.soundIndicationState == SEARCH_INDICATION){
 8004db0:	f894 8003 	ldrb.w	r8, [r4, #3]
 8004db4:	f1b8 0f01 	cmp.w	r8, #1
 8004db8:	f47f ae1a 	bne.w	80049f0 <xProcessCommandTask+0x2c>
						if (command[1] == '?'){
 8004dbc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8004dc0:	2b3f      	cmp	r3, #63	; 0x3f
 8004dc2:	d10c      	bne.n	8004dde <xProcessCommandTask+0x41a>
							sscanf((char*)command, "x?%hu,\n", &controllerData.clientID);
 8004dc4:	4a32      	ldr	r2, [pc, #200]	; (8004e90 <xProcessCommandTask+0x4cc>)
 8004dc6:	4933      	ldr	r1, [pc, #204]	; (8004e94 <xProcessCommandTask+0x4d0>)
 8004dc8:	a80a      	add	r0, sp, #40	; 0x28
 8004dca:	f000 fb2d 	bl	8005428 <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 8004dce:	4a2d      	ldr	r2, [pc, #180]	; (8004e84 <xProcessCommandTask+0x4c0>)
 8004dd0:	8ae3      	ldrh	r3, [r4, #22]
 8004dd2:	8852      	ldrh	r2, [r2, #2]
 8004dd4:	4930      	ldr	r1, [pc, #192]	; (8004e98 <xProcessCommandTask+0x4d4>)
 8004dd6:	482d      	ldr	r0, [pc, #180]	; (8004e8c <xProcessCommandTask+0x4c8>)
 8004dd8:	f000 fb02 	bl	80053e0 <siprintf>
 8004ddc:	e664      	b.n	8004aa8 <xProcessCommandTask+0xe4>
						else if (command[1] == 'c'){
 8004dde:	2b63      	cmp	r3, #99	; 0x63
 8004de0:	f47f ae06 	bne.w	80049f0 <xProcessCommandTask+0x2c>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 8004de4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8004de8:	aa09      	add	r2, sp, #36	; 0x24
 8004dea:	492c      	ldr	r1, [pc, #176]	; (8004e9c <xProcessCommandTask+0x4d8>)
 8004dec:	a80a      	add	r0, sp, #40	; 0x28
 8004dee:	f000 fb1b 	bl	8005428 <siscanf>
							if (id == controllerState.serverUID){
 8004df2:	8ae2      	ldrh	r2, [r4, #22]
 8004df4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f47f adf9 	bne.w	80049f0 <xProcessCommandTask+0x2c>
								controllerData.rfChannel = channel;
 8004dfe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004e02:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004e84 <xProcessCommandTask+0x4c0>
 8004e06:	f889 3000 	strb.w	r3, [r9]
								mWrite_flash();
 8004e0a:	f7ff fbe1 	bl	80045d0 <mWrite_flash>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 8004e0e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8004e12:	4923      	ldr	r1, [pc, #140]	; (8004ea0 <xProcessCommandTask+0x4dc>)
 8004e14:	481d      	ldr	r0, [pc, #116]	; (8004e8c <xProcessCommandTask+0x4c8>)
 8004e16:	f000 fae3 	bl	80053e0 <siprintf>
 8004e1a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004eac <xProcessCommandTask+0x4e8>
 8004e1e:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004e20:	491a      	ldr	r1, [pc, #104]	; (8004e8c <xProcessCommandTask+0x4c8>)
 8004e22:	4820      	ldr	r0, [pc, #128]	; (8004ea4 <xProcessCommandTask+0x4e0>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 8004e24:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004e28:	f7fd faf8 	bl	800241c <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 8004e2c:	20c8      	movs	r0, #200	; 0xc8
 8004e2e:	f7fe fc93 	bl	8003758 <vTaskDelay>
								CMD_RF_ON;
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7fc fd75 	bl	8001928 <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 8004e3e:	2032      	movs	r0, #50	; 0x32
 8004e40:	f7fe fc8a 	bl	8003758 <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004e44:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8004e48:	4917      	ldr	r1, [pc, #92]	; (8004ea8 <xProcessCommandTask+0x4e4>)
 8004e4a:	4810      	ldr	r0, [pc, #64]	; (8004e8c <xProcessCommandTask+0x4c8>)
 8004e4c:	f000 fac8 	bl	80053e0 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004e50:	490e      	ldr	r1, [pc, #56]	; (8004e8c <xProcessCommandTask+0x4c8>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004e52:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004e54:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <xProcessCommandTask+0x4e0>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004e56:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004e5a:	f7fd fadf 	bl	800241c <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 8004e5e:	2032      	movs	r0, #50	; 0x32
 8004e60:	f7fe fc7a 	bl	8003758 <vTaskDelay>
								CMD_RF_OFF;
 8004e64:	4642      	mov	r2, r8
 8004e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7fc fd5c 	bl	8001928 <HAL_GPIO_WritePin>

								controllerState.soundIndicationState = NORMAL_INDICATION;
 8004e70:	2300      	movs	r3, #0
 8004e72:	70e3      	strb	r3, [r4, #3]
 8004e74:	e5bc      	b.n	80049f0 <xProcessCommandTask+0x2c>
 8004e76:	bf00      	nop
 8004e78:	200054c8 	.word	0x200054c8
 8004e7c:	0800679c 	.word	0x0800679c
 8004e80:	200054c2 	.word	0x200054c2
 8004e84:	20005490 	.word	0x20005490
 8004e88:	080067bd 	.word	0x080067bd
 8004e8c:	2000540c 	.word	0x2000540c
 8004e90:	20005492 	.word	0x20005492
 8004e94:	080067c5 	.word	0x080067c5
 8004e98:	080067cd 	.word	0x080067cd
 8004e9c:	080067db 	.word	0x080067db
 8004ea0:	080067e8 	.word	0x080067e8
 8004ea4:	2000561c 	.word	0x2000561c
 8004ea8:	08006699 	.word	0x08006699
 8004eac:	2000548c 	.word	0x2000548c

08004eb0 <xScanInputTask>:
#include "flashFunctions.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 8004eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t prevInputHallState = 1;
	uint8_t curInputHallState = 1;
	uint8_t curInputWireState = 1;
	uint8_t prevInputWireState = 1;
 8004eb4:	2501      	movs	r5, #1

	uint8_t prevOverrcurrentState = 0;
 8004eb6:	f04f 0b00 	mov.w	fp, #0
	uint8_t prevInputHallState = 1;
 8004eba:	46a9      	mov	r9, r5
	uint8_t curOvercurrentState = 0;

	for(;;){
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004ebc:	f8df a250 	ldr.w	sl, [pc, #592]	; 8005110 <xScanInputTask+0x260>
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004ec0:	4e8d      	ldr	r6, [pc, #564]	; (80050f8 <xScanInputTask+0x248>)
				if (prevOverrcurrentState){
					C1_UP_OFF;
					C1_DOWN_OFF;
					C2_UP_OFF;
					C2_DOWN_OFF;
					C3_UP_OFF;
 8004ec2:	4c8e      	ldr	r4, [pc, #568]	; (80050fc <xScanInputTask+0x24c>)
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ec8:	4650      	mov	r0, sl
 8004eca:	f7fc fd27 	bl	800191c <HAL_GPIO_ReadPin>
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004ed2:	4680      	mov	r8, r0
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7fc fd21 	bl	800191c <HAL_GPIO_ReadPin>
		if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8004eda:	45c1      	cmp	r9, r8
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004edc:	4607      	mov	r7, r0
		if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8004ede:	d101      	bne.n	8004ee4 <xScanInputTask+0x34>
 8004ee0:	4285      	cmp	r5, r0
 8004ee2:	d040      	beq.n	8004f66 <xScanInputTask+0xb6>
			vTaskDelay(1 / portTICK_RATE_MS);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7fe fc37 	bl	8003758 <vTaskDelay>
			curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eee:	4650      	mov	r0, sl
 8004ef0:	f7fc fd14 	bl	800191c <HAL_GPIO_ReadPin>
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
			curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004ef8:	4680      	mov	r8, r0
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7fc fd0e 	bl	800191c <HAL_GPIO_ReadPin>
			if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8004f00:	45c1      	cmp	r9, r8
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8004f02:	4607      	mov	r7, r0
			if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8004f04:	d101      	bne.n	8004f0a <xScanInputTask+0x5a>
 8004f06:	4285      	cmp	r5, r0
 8004f08:	d02d      	beq.n	8004f66 <xScanInputTask+0xb6>
				if ((!prevInputHallState) || (!prevInputWireState)){
 8004f0a:	f1b8 0f00 	cmp.w	r8, #0
 8004f0e:	d000      	beq.n	8004f12 <xScanInputTask+0x62>
 8004f10:	bb47      	cbnz	r7, 8004f64 <xScanInputTask+0xb4>
					controllerState.soundIndicationState = SEARCH_INDICATION;
 8004f12:	f04f 0901 	mov.w	r9, #1
					controllerData.offsetPressure[0] = controllerState.filteredData[0];
 8004f16:	4d7a      	ldr	r5, [pc, #488]	; (8005100 <xScanInputTask+0x250>)
 8004f18:	4b7a      	ldr	r3, [pc, #488]	; (8005104 <xScanInputTask+0x254>)
 8004f1a:	89ea      	ldrh	r2, [r5, #14]
 8004f1c:	849a      	strh	r2, [r3, #36]	; 0x24
					controllerData.offsetPressure[1] = controllerState.filteredData[1];
 8004f1e:	8a2a      	ldrh	r2, [r5, #16]
 8004f20:	84da      	strh	r2, [r3, #38]	; 0x26
					controllerData.offsetPressure[2] = controllerState.filteredData[2];
 8004f22:	8a6a      	ldrh	r2, [r5, #18]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
					controllerData.offsetPressure[3] = controllerState.filteredData[3];
 8004f26:	8aaa      	ldrh	r2, [r5, #20]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
					mWrite_flash();
 8004f2a:	f7ff fb51 	bl	80045d0 <mWrite_flash>
					CMD_RF_ON;
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f34:	4650      	mov	r0, sl
					controllerState.soundIndicationState = SEARCH_INDICATION;
 8004f36:	f885 9003 	strb.w	r9, [r5, #3]
					CMD_RF_ON;
 8004f3a:	f7fc fcf5 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8004f3e:	2032      	movs	r0, #50	; 0x32
 8004f40:	f7fe fc0a 	bl	8003758 <vTaskDelay>
					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8004f44:	2208      	movs	r2, #8
 8004f46:	4970      	ldr	r1, [pc, #448]	; (8005108 <xScanInputTask+0x258>)
 8004f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f4c:	486f      	ldr	r0, [pc, #444]	; (800510c <xScanInputTask+0x25c>)
 8004f4e:	f7fd f9e1 	bl	8002314 <HAL_UART_Transmit>
					vTaskDelay(50 / portTICK_RATE_MS);
 8004f52:	2032      	movs	r0, #50	; 0x32
 8004f54:	f7fe fc00 	bl	8003758 <vTaskDelay>
					CMD_RF_OFF;
 8004f58:	464a      	mov	r2, r9
 8004f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f5e:	4650      	mov	r0, sl
 8004f60:	f7fc fce2 	bl	8001928 <HAL_GPIO_WritePin>
 8004f64:	46c1      	mov	r9, r8
		curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 8004f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7fc fcd6 	bl	800191c <HAL_GPIO_ReadPin>
		if (curOvercurrentState != prevOverrcurrentState){
 8004f70:	4583      	cmp	fp, r0
		curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 8004f72:	4680      	mov	r8, r0
		if (curOvercurrentState != prevOverrcurrentState){
 8004f74:	f000 80ba 	beq.w	80050ec <xScanInputTask+0x23c>
			vTaskDelay(1 / portTICK_RATE_MS);
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f7fe fbed 	bl	8003758 <vTaskDelay>
			curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 8004f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7fc fcca 	bl	800191c <HAL_GPIO_ReadPin>
			if (curOvercurrentState != prevOverrcurrentState){
 8004f88:	4583      	cmp	fp, r0
			curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 8004f8a:	4680      	mov	r8, r0
			if (curOvercurrentState != prevOverrcurrentState){
 8004f8c:	f000 80ae 	beq.w	80050ec <xScanInputTask+0x23c>
				if (prevOverrcurrentState){
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f000 80ab 	beq.w	80050ec <xScanInputTask+0x23c>
					C1_UP_OFF;
 8004f96:	2200      	movs	r2, #0
 8004f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7fc fcc3 	bl	8001928 <HAL_GPIO_WritePin>
					C1_DOWN_OFF;
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f7fc fcbd 	bl	8001928 <HAL_GPIO_WritePin>
					C2_UP_OFF;
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7fc fcb7 	bl	8001928 <HAL_GPIO_WritePin>
					C2_DOWN_OFF;
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7fc fcb1 	bl	8001928 <HAL_GPIO_WritePin>
					C3_UP_OFF;
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2140      	movs	r1, #64	; 0x40
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f7fc fcac 	bl	8001928 <HAL_GPIO_WritePin>
					C3_DOWN_OFF;
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7fc fca7 	bl	8001928 <HAL_GPIO_WritePin>
					C4_UP_OFF;
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7fc fca1 	bl	8001928 <HAL_GPIO_WritePin>
					C4_DOWN_OFF;
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7fc fc9b 	bl	8001928 <HAL_GPIO_WritePin>

					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 8004ff2:	4b43      	ldr	r3, [pc, #268]	; (8005100 <xScanInputTask+0x250>)
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8004ff4:	2500      	movs	r5, #0
					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 8004ff6:	795a      	ldrb	r2, [r3, #5]

					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004ff8:	4620      	mov	r0, r4
					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 8004ffa:	f042 0202 	orr.w	r2, r2, #2
 8004ffe:	715a      	strb	r2, [r3, #5]
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8005000:	2201      	movs	r2, #1
 8005002:	4611      	mov	r1, r2
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8005004:	705d      	strb	r5, [r3, #1]
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8005006:	f7fc fc8f 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(100);
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	f7fe fba4 	bl	8003758 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8005010:	2101      	movs	r1, #1
 8005012:	4620      	mov	r0, r4
 8005014:	f7fc fc8d 	bl	8001932 <HAL_GPIO_TogglePin>
					vTaskDelay(200);
 8005018:	20c8      	movs	r0, #200	; 0xc8
 800501a:	f7fe fb9d 	bl	8003758 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 800501e:	2101      	movs	r1, #1
 8005020:	4620      	mov	r0, r4
 8005022:	f7fc fc86 	bl	8001932 <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 8005026:	2064      	movs	r0, #100	; 0x64
 8005028:	f7fe fb96 	bl	8003758 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800502c:	462a      	mov	r2, r5
 800502e:	2101      	movs	r1, #1
 8005030:	4620      	mov	r0, r4
 8005032:	f7fc fc79 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 8005036:	20c8      	movs	r0, #200	; 0xc8
 8005038:	f7fe fb8e 	bl	8003758 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 800503c:	2101      	movs	r1, #1
 800503e:	4620      	mov	r0, r4
 8005040:	f7fc fc77 	bl	8001932 <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 8005044:	2064      	movs	r0, #100	; 0x64
 8005046:	f7fe fb87 	bl	8003758 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800504a:	462a      	mov	r2, r5
 800504c:	2101      	movs	r1, #1
 800504e:	4620      	mov	r0, r4
 8005050:	f7fc fc6a 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 8005054:	20c8      	movs	r0, #200	; 0xc8
 8005056:	f7fe fb7f 	bl	8003758 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 800505a:	2101      	movs	r1, #1
 800505c:	4620      	mov	r0, r4
 800505e:	f7fc fc68 	bl	8001932 <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 8005062:	2064      	movs	r0, #100	; 0x64
 8005064:	f7fe fb78 	bl	8003758 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8005068:	462a      	mov	r2, r5
 800506a:	2101      	movs	r1, #1
 800506c:	4620      	mov	r0, r4
 800506e:	f7fc fc5b 	bl	8001928 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 8005072:	20c8      	movs	r0, #200	; 0xc8
 8005074:	f7fe fb70 	bl	8003758 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8005078:	2101      	movs	r1, #1
 800507a:	4620      	mov	r0, r4
 800507c:	f7fc fc59 	bl	8001932 <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 8005080:	2064      	movs	r0, #100	; 0x64
 8005082:	f7fe fb69 	bl	8003758 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8005086:	462a      	mov	r2, r5
 8005088:	2101      	movs	r1, #1
 800508a:	4620      	mov	r0, r4
 800508c:	f7fc fc4c 	bl	8001928 <HAL_GPIO_WritePin>



					C1_UP_OFF;
 8005090:	462a      	mov	r2, r5
 8005092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005096:	4630      	mov	r0, r6
 8005098:	f7fc fc46 	bl	8001928 <HAL_GPIO_WritePin>
					C1_DOWN_OFF;
 800509c:	462a      	mov	r2, r5
 800509e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fc fc40 	bl	8001928 <HAL_GPIO_WritePin>
					C2_UP_OFF;
 80050a8:	462a      	mov	r2, r5
 80050aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7fc fc3a 	bl	8001928 <HAL_GPIO_WritePin>
					C2_DOWN_OFF;
 80050b4:	462a      	mov	r2, r5
 80050b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7fc fc34 	bl	8001928 <HAL_GPIO_WritePin>
					C3_UP_OFF;
 80050c0:	462a      	mov	r2, r5
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7fc fc2f 	bl	8001928 <HAL_GPIO_WritePin>
					C3_DOWN_OFF;
 80050ca:	462a      	mov	r2, r5
 80050cc:	2180      	movs	r1, #128	; 0x80
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7fc fc2a 	bl	8001928 <HAL_GPIO_WritePin>
					C4_UP_OFF;
 80050d4:	462a      	mov	r2, r5
 80050d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050da:	4620      	mov	r0, r4
 80050dc:	f7fc fc24 	bl	8001928 <HAL_GPIO_WritePin>
					C4_DOWN_OFF;
 80050e0:	462a      	mov	r2, r5
 80050e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7fc fc1e 	bl	8001928 <HAL_GPIO_WritePin>
				}
			}
		}
		vTaskDelay(5 / portTICK_RATE_MS);
 80050ec:	2005      	movs	r0, #5
 80050ee:	f7fe fb33 	bl	8003758 <vTaskDelay>
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 80050f2:	46c3      	mov	fp, r8
 80050f4:	463d      	mov	r5, r7
 80050f6:	e6e5      	b.n	8004ec4 <xScanInputTask+0x14>
 80050f8:	40010c00 	.word	0x40010c00
 80050fc:	40011000 	.word	0x40011000
 8005100:	200054bc 	.word	0x200054bc
 8005104:	20005490 	.word	0x20005490
 8005108:	080067f5 	.word	0x080067f5
 800510c:	2000561c 	.word	0x2000561c
 8005110:	40010800 	.word	0x40010800

08005114 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_MspInit+0x48>)
{
 8005116:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005118:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800511a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	619a      	str	r2, [r3, #24]
 8005122:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005124:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005128:	f002 0201 	and.w	r2, r2, #1
 800512c:	9200      	str	r2, [sp, #0]
 800512e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005136:	61da      	str	r2, [r3, #28]
 8005138:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800513a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005144:	f7fb ffc6 	bl	80010d4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005148:	4a05      	ldr	r2, [pc, #20]	; (8005160 <HAL_MspInit+0x4c>)
 800514a:	6853      	ldr	r3, [r2, #4]
 800514c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005156:	b003      	add	sp, #12
 8005158:	f85d fb04 	ldr.w	pc, [sp], #4
 800515c:	40021000 	.word	0x40021000
 8005160:	40010000 	.word	0x40010000

08005164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005164:	b510      	push	{r4, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516a:	2210      	movs	r2, #16
 800516c:	2100      	movs	r1, #0
 800516e:	a802      	add	r0, sp, #8
 8005170:	f000 f92d 	bl	80053ce <memset>
  if(hadc->Instance==ADC1)
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_ADC_MspInit+0x64>)
 8005178:	429a      	cmp	r2, r3
 800517a:	d123      	bne.n	80051c4 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800517c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005180:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005182:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005188:	619a      	str	r2, [r3, #24]
 800518a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518c:	480f      	ldr	r0, [pc, #60]	; (80051cc <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800518e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005192:	9200      	str	r2, [sp, #0]
 8005194:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	f042 0204 	orr.w	r2, r2, #4
 800519c:	619a      	str	r2, [r3, #24]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80051a8:	230f      	movs	r3, #15
 80051aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ac:	2303      	movs	r3, #3
 80051ae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b0:	f7fc fad4 	bl	800175c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80051b4:	2012      	movs	r0, #18
 80051b6:	2200      	movs	r2, #0
 80051b8:	2105      	movs	r1, #5
 80051ba:	f7fb ff8b 	bl	80010d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80051be:	2012      	movs	r0, #18
 80051c0:	f7fb ffbc 	bl	800113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051c4:	b006      	add	sp, #24
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	40012400 	.word	0x40012400
 80051cc:	40010800 	.word	0x40010800

080051d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d2:	2710      	movs	r7, #16
{
 80051d4:	4606      	mov	r6, r0
 80051d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d8:	463a      	mov	r2, r7
 80051da:	2100      	movs	r1, #0
 80051dc:	a802      	add	r0, sp, #8
 80051de:	f000 f8f6 	bl	80053ce <memset>
  if(huart->Instance==USART1)
 80051e2:	6832      	ldr	r2, [r6, #0]
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <HAL_UART_MspInit+0xa8>)
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d143      	bne.n	8005272 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051ea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80051ee:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80051f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f6:	619a      	str	r2, [r3, #24]
 80051f8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fa:	4820      	ldr	r0, [pc, #128]	; (800527c <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80051fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005200:	9200      	str	r2, [sp, #0]
 8005202:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005204:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005206:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005208:	f042 0204 	orr.w	r2, r2, #4
 800520c:	619a      	str	r2, [r3, #24]
 800520e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005210:	4c1b      	ldr	r4, [pc, #108]	; (8005280 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800521a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005228:	f7fc fa98 	bl	800175c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005230:	4812      	ldr	r0, [pc, #72]	; (800527c <HAL_UART_MspInit+0xac>)
 8005232:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005234:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005236:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	f7fc fa8f 	bl	800175c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005240:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005242:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005246:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005248:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800524a:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800524c:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800524e:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005250:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005252:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005254:	f7fb ff94 	bl	8001180 <HAL_DMA_Init>
 8005258:	b108      	cbz	r0, 800525e <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 800525a:	f7ff fbb1 	bl	80049c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800525e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005260:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005262:	2200      	movs	r2, #0
 8005264:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005266:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005268:	f7fb ff34 	bl	80010d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800526c:	2025      	movs	r0, #37	; 0x25
 800526e:	f7fb ff65 	bl	800113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005272:	b007      	add	sp, #28
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005276:	bf00      	nop
 8005278:	40013800 	.word	0x40013800
 800527c:	40010800 	.word	0x40010800
 8005280:	200055a8 	.word	0x200055a8
 8005284:	40020044 	.word	0x40020044

08005288 <NMI_Handler>:
 8005288:	4770      	bx	lr

0800528a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800528a:	e7fe      	b.n	800528a <HardFault_Handler>

0800528c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800528c:	e7fe      	b.n	800528c <MemManage_Handler>

0800528e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800528e:	e7fe      	b.n	800528e <BusFault_Handler>

08005290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005290:	e7fe      	b.n	8005290 <UsageFault_Handler>

08005292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005292:	4770      	bx	lr

08005294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005296:	f7fb fc97 	bl	8000bc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800529a:	f7fe fb9f 	bl	80039dc <xTaskGetSchedulerState>
 800529e:	2801      	cmp	r0, #1
 80052a0:	d003      	beq.n	80052aa <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80052a6:	f7fd bb35 	b.w	8002914 <xPortSysTickHandler>
 80052aa:	bd08      	pop	{r3, pc}

080052ac <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <DMA1_Channel4_IRQHandler+0x8>)
 80052ae:	f7fc b853 	b.w	8001358 <HAL_DMA_IRQHandler>
 80052b2:	bf00      	nop
 80052b4:	200055a8 	.word	0x200055a8

080052b8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <ADC1_2_IRQHandler+0x8>)
 80052ba:	f7fb bcbb 	b.w	8000c34 <HAL_ADC_IRQHandler>
 80052be:	bf00      	nop
 80052c0:	200055ec 	.word	0x200055ec

080052c4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <USART1_IRQHandler+0x8>)
 80052c6:	f7fd b967 	b.w	8002598 <HAL_UART_IRQHandler>
 80052ca:	bf00      	nop
 80052cc:	2000561c 	.word	0x2000561c

080052d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80052d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052d4:	f7fc bb32 	b.w	800193c <HAL_GPIO_EXTI_IRQHandler>

080052d8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80052d8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <_sbrk+0x2c>)
{
 80052dc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	b909      	cbnz	r1, 80052e6 <_sbrk+0xe>
		heap_end = &end;
 80052e2:	4909      	ldr	r1, [pc, #36]	; (8005308 <_sbrk+0x30>)
 80052e4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80052e6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80052e8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80052ea:	4402      	add	r2, r0
 80052ec:	428a      	cmp	r2, r1
 80052ee:	d906      	bls.n	80052fe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80052f0:	f000 f85c 	bl	80053ac <__errno>
 80052f4:	230c      	movs	r3, #12
 80052f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80052fe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005300:	bd08      	pop	{r3, pc}
 8005302:	bf00      	nop
 8005304:	200054e4 	.word	0x200054e4
 8005308:	20005674 	.word	0x20005674

0800530c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <SystemInit+0x4c>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005316:	6859      	ldr	r1, [r3, #4]
 8005318:	4a10      	ldr	r2, [pc, #64]	; (800535c <SystemInit+0x50>)
 800531a:	400a      	ands	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005324:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005328:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005330:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005338:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005340:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005342:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005346:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005348:	2200      	movs	r2, #0
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800534c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <SystemInit+0x54>)
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000
 800535c:	f0ff0000 	.word	0xf0ff0000
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005366:	e003      	b.n	8005370 <LoopCopyDataInit>

08005368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800536a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800536c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800536e:	3104      	adds	r1, #4

08005370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005370:	4809      	ldr	r0, [pc, #36]	; (8005398 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8005374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005378:	d3f6      	bcc.n	8005368 <CopyDataInit>
  ldr r2, =_sbss
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800537c:	e002      	b.n	8005384 <LoopFillZerobss>

0800537e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005380:	f842 3b04 	str.w	r3, [r2], #4

08005384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005384:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8005386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005388:	d3f9      	bcc.n	800537e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800538a:	f7ff ffbf 	bl	800530c <SystemInit>
/* Call the application's entry point.*/
  bl main
 800538e:	f7ff f9c3 	bl	8004718 <main>
  bx lr
 8005392:	4770      	bx	lr
  ldr r3, =_sidata
 8005394:	080069e0 	.word	0x080069e0
  ldr r0, =_sdata
 8005398:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800539c:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 80053a0:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 80053a4:	20005674 	.word	0x20005674

080053a8 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053a8:	e7fe      	b.n	80053a8 <CAN1_RX0_IRQHandler>
	...

080053ac <__errno>:
 80053ac:	4b01      	ldr	r3, [pc, #4]	; (80053b4 <__errno+0x8>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000050 	.word	0x20000050

080053b8 <memcpy>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	1e43      	subs	r3, r0, #1
 80053bc:	440a      	add	r2, r1
 80053be:	4291      	cmp	r1, r2
 80053c0:	d100      	bne.n	80053c4 <memcpy+0xc>
 80053c2:	bd10      	pop	{r4, pc}
 80053c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053cc:	e7f7      	b.n	80053be <memcpy+0x6>

080053ce <memset>:
 80053ce:	4603      	mov	r3, r0
 80053d0:	4402      	add	r2, r0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d100      	bne.n	80053d8 <memset+0xa>
 80053d6:	4770      	bx	lr
 80053d8:	f803 1b01 	strb.w	r1, [r3], #1
 80053dc:	e7f9      	b.n	80053d2 <memset+0x4>
	...

080053e0 <siprintf>:
 80053e0:	b40e      	push	{r1, r2, r3}
 80053e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80053e6:	b500      	push	{lr}
 80053e8:	b09c      	sub	sp, #112	; 0x70
 80053ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 80053ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f2:	9104      	str	r1, [sp, #16]
 80053f4:	9107      	str	r1, [sp, #28]
 80053f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053fa:	ab1d      	add	r3, sp, #116	; 0x74
 80053fc:	9002      	str	r0, [sp, #8]
 80053fe:	9006      	str	r0, [sp, #24]
 8005400:	4808      	ldr	r0, [pc, #32]	; (8005424 <siprintf+0x44>)
 8005402:	f853 2b04 	ldr.w	r2, [r3], #4
 8005406:	f8ad 1016 	strh.w	r1, [sp, #22]
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	a902      	add	r1, sp, #8
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	f000 f892 	bl	8005538 <_svfiprintf_r>
 8005414:	2200      	movs	r2, #0
 8005416:	9b02      	ldr	r3, [sp, #8]
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	b01c      	add	sp, #112	; 0x70
 800541c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005420:	b003      	add	sp, #12
 8005422:	4770      	bx	lr
 8005424:	20000050 	.word	0x20000050

08005428 <siscanf>:
 8005428:	b40e      	push	{r1, r2, r3}
 800542a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800542e:	b530      	push	{r4, r5, lr}
 8005430:	b09c      	sub	sp, #112	; 0x70
 8005432:	ac1f      	add	r4, sp, #124	; 0x7c
 8005434:	f854 5b04 	ldr.w	r5, [r4], #4
 8005438:	f8ad 2014 	strh.w	r2, [sp, #20]
 800543c:	9002      	str	r0, [sp, #8]
 800543e:	9006      	str	r0, [sp, #24]
 8005440:	f7fa fef6 	bl	8000230 <strlen>
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <siscanf+0x4c>)
 8005446:	9003      	str	r0, [sp, #12]
 8005448:	930b      	str	r3, [sp, #44]	; 0x2c
 800544a:	2300      	movs	r3, #0
 800544c:	930f      	str	r3, [sp, #60]	; 0x3c
 800544e:	9314      	str	r3, [sp, #80]	; 0x50
 8005450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005454:	9007      	str	r0, [sp, #28]
 8005456:	4808      	ldr	r0, [pc, #32]	; (8005478 <siscanf+0x50>)
 8005458:	f8ad 3016 	strh.w	r3, [sp, #22]
 800545c:	462a      	mov	r2, r5
 800545e:	4623      	mov	r3, r4
 8005460:	a902      	add	r1, sp, #8
 8005462:	6800      	ldr	r0, [r0, #0]
 8005464:	9401      	str	r4, [sp, #4]
 8005466:	f000 f9b5 	bl	80057d4 <__ssvfiscanf_r>
 800546a:	b01c      	add	sp, #112	; 0x70
 800546c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005470:	b003      	add	sp, #12
 8005472:	4770      	bx	lr
 8005474:	0800547d 	.word	0x0800547d
 8005478:	20000050 	.word	0x20000050

0800547c <__seofread>:
 800547c:	2000      	movs	r0, #0
 800547e:	4770      	bx	lr

08005480 <__ssputs_r>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	688e      	ldr	r6, [r1, #8]
 8005486:	4682      	mov	sl, r0
 8005488:	429e      	cmp	r6, r3
 800548a:	460c      	mov	r4, r1
 800548c:	4691      	mov	r9, r2
 800548e:	4698      	mov	r8, r3
 8005490:	d835      	bhi.n	80054fe <__ssputs_r+0x7e>
 8005492:	898a      	ldrh	r2, [r1, #12]
 8005494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005498:	d031      	beq.n	80054fe <__ssputs_r+0x7e>
 800549a:	2302      	movs	r3, #2
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	6909      	ldr	r1, [r1, #16]
 80054a0:	1a6f      	subs	r7, r5, r1
 80054a2:	6965      	ldr	r5, [r4, #20]
 80054a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80054ac:	f108 0301 	add.w	r3, r8, #1
 80054b0:	443b      	add	r3, r7
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf38      	it	cc
 80054b6:	461d      	movcc	r5, r3
 80054b8:	0553      	lsls	r3, r2, #21
 80054ba:	d531      	bpl.n	8005520 <__ssputs_r+0xa0>
 80054bc:	4629      	mov	r1, r5
 80054be:	f000 fff1 	bl	80064a4 <_malloc_r>
 80054c2:	4606      	mov	r6, r0
 80054c4:	b950      	cbnz	r0, 80054dc <__ssputs_r+0x5c>
 80054c6:	230c      	movs	r3, #12
 80054c8:	f8ca 3000 	str.w	r3, [sl]
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	463a      	mov	r2, r7
 80054de:	6921      	ldr	r1, [r4, #16]
 80054e0:	f7ff ff6a 	bl	80053b8 <memcpy>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	6126      	str	r6, [r4, #16]
 80054f2:	443e      	add	r6, r7
 80054f4:	6026      	str	r6, [r4, #0]
 80054f6:	4646      	mov	r6, r8
 80054f8:	6165      	str	r5, [r4, #20]
 80054fa:	1bed      	subs	r5, r5, r7
 80054fc:	60a5      	str	r5, [r4, #8]
 80054fe:	4546      	cmp	r6, r8
 8005500:	bf28      	it	cs
 8005502:	4646      	movcs	r6, r8
 8005504:	4649      	mov	r1, r9
 8005506:	4632      	mov	r2, r6
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	f000 ff65 	bl	80063d8 <memmove>
 800550e:	68a3      	ldr	r3, [r4, #8]
 8005510:	2000      	movs	r0, #0
 8005512:	1b9b      	subs	r3, r3, r6
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	441e      	add	r6, r3
 800551a:	6026      	str	r6, [r4, #0]
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	462a      	mov	r2, r5
 8005522:	f001 f81d 	bl	8006560 <_realloc_r>
 8005526:	4606      	mov	r6, r0
 8005528:	2800      	cmp	r0, #0
 800552a:	d1e1      	bne.n	80054f0 <__ssputs_r+0x70>
 800552c:	6921      	ldr	r1, [r4, #16]
 800552e:	4650      	mov	r0, sl
 8005530:	f000 ff6c 	bl	800640c <_free_r>
 8005534:	e7c7      	b.n	80054c6 <__ssputs_r+0x46>
	...

08005538 <_svfiprintf_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	b09d      	sub	sp, #116	; 0x74
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	898b      	ldrh	r3, [r1, #12]
 8005542:	4680      	mov	r8, r0
 8005544:	061c      	lsls	r4, r3, #24
 8005546:	460d      	mov	r5, r1
 8005548:	4616      	mov	r6, r2
 800554a:	d50f      	bpl.n	800556c <_svfiprintf_r+0x34>
 800554c:	690b      	ldr	r3, [r1, #16]
 800554e:	b96b      	cbnz	r3, 800556c <_svfiprintf_r+0x34>
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	f000 ffa7 	bl	80064a4 <_malloc_r>
 8005556:	6028      	str	r0, [r5, #0]
 8005558:	6128      	str	r0, [r5, #16]
 800555a:	b928      	cbnz	r0, 8005568 <_svfiprintf_r+0x30>
 800555c:	230c      	movs	r3, #12
 800555e:	f8c8 3000 	str.w	r3, [r8]
 8005562:	f04f 30ff 	mov.w	r0, #4294967295
 8005566:	e0c4      	b.n	80056f2 <_svfiprintf_r+0x1ba>
 8005568:	2340      	movs	r3, #64	; 0x40
 800556a:	616b      	str	r3, [r5, #20]
 800556c:	2300      	movs	r3, #0
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	2320      	movs	r3, #32
 8005572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005576:	2330      	movs	r3, #48	; 0x30
 8005578:	f04f 0b01 	mov.w	fp, #1
 800557c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005580:	4637      	mov	r7, r6
 8005582:	463c      	mov	r4, r7
 8005584:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13c      	bne.n	8005606 <_svfiprintf_r+0xce>
 800558c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005590:	d00b      	beq.n	80055aa <_svfiprintf_r+0x72>
 8005592:	4653      	mov	r3, sl
 8005594:	4632      	mov	r2, r6
 8005596:	4629      	mov	r1, r5
 8005598:	4640      	mov	r0, r8
 800559a:	f7ff ff71 	bl	8005480 <__ssputs_r>
 800559e:	3001      	adds	r0, #1
 80055a0:	f000 80a2 	beq.w	80056e8 <_svfiprintf_r+0x1b0>
 80055a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a6:	4453      	add	r3, sl
 80055a8:	9309      	str	r3, [sp, #36]	; 0x24
 80055aa:	783b      	ldrb	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 809b 	beq.w	80056e8 <_svfiprintf_r+0x1b0>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	9205      	str	r2, [sp, #20]
 80055be:	9306      	str	r3, [sp, #24]
 80055c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c4:	931a      	str	r3, [sp, #104]	; 0x68
 80055c6:	2205      	movs	r2, #5
 80055c8:	7821      	ldrb	r1, [r4, #0]
 80055ca:	4850      	ldr	r0, [pc, #320]	; (800570c <_svfiprintf_r+0x1d4>)
 80055cc:	f000 fef6 	bl	80063bc <memchr>
 80055d0:	1c67      	adds	r7, r4, #1
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	b9d8      	cbnz	r0, 800560e <_svfiprintf_r+0xd6>
 80055d6:	06d9      	lsls	r1, r3, #27
 80055d8:	bf44      	itt	mi
 80055da:	2220      	movmi	r2, #32
 80055dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055e0:	071a      	lsls	r2, r3, #28
 80055e2:	bf44      	itt	mi
 80055e4:	222b      	movmi	r2, #43	; 0x2b
 80055e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055ea:	7822      	ldrb	r2, [r4, #0]
 80055ec:	2a2a      	cmp	r2, #42	; 0x2a
 80055ee:	d016      	beq.n	800561e <_svfiprintf_r+0xe6>
 80055f0:	2100      	movs	r1, #0
 80055f2:	200a      	movs	r0, #10
 80055f4:	9a07      	ldr	r2, [sp, #28]
 80055f6:	4627      	mov	r7, r4
 80055f8:	783b      	ldrb	r3, [r7, #0]
 80055fa:	3401      	adds	r4, #1
 80055fc:	3b30      	subs	r3, #48	; 0x30
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d950      	bls.n	80056a4 <_svfiprintf_r+0x16c>
 8005602:	b1c9      	cbz	r1, 8005638 <_svfiprintf_r+0x100>
 8005604:	e011      	b.n	800562a <_svfiprintf_r+0xf2>
 8005606:	2b25      	cmp	r3, #37	; 0x25
 8005608:	d0c0      	beq.n	800558c <_svfiprintf_r+0x54>
 800560a:	4627      	mov	r7, r4
 800560c:	e7b9      	b.n	8005582 <_svfiprintf_r+0x4a>
 800560e:	4a3f      	ldr	r2, [pc, #252]	; (800570c <_svfiprintf_r+0x1d4>)
 8005610:	463c      	mov	r4, r7
 8005612:	1a80      	subs	r0, r0, r2
 8005614:	fa0b f000 	lsl.w	r0, fp, r0
 8005618:	4318      	orrs	r0, r3
 800561a:	9004      	str	r0, [sp, #16]
 800561c:	e7d3      	b.n	80055c6 <_svfiprintf_r+0x8e>
 800561e:	9a03      	ldr	r2, [sp, #12]
 8005620:	1d11      	adds	r1, r2, #4
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	9103      	str	r1, [sp, #12]
 8005626:	2a00      	cmp	r2, #0
 8005628:	db01      	blt.n	800562e <_svfiprintf_r+0xf6>
 800562a:	9207      	str	r2, [sp, #28]
 800562c:	e004      	b.n	8005638 <_svfiprintf_r+0x100>
 800562e:	4252      	negs	r2, r2
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	783b      	ldrb	r3, [r7, #0]
 800563a:	2b2e      	cmp	r3, #46	; 0x2e
 800563c:	d10d      	bne.n	800565a <_svfiprintf_r+0x122>
 800563e:	787b      	ldrb	r3, [r7, #1]
 8005640:	1c79      	adds	r1, r7, #1
 8005642:	2b2a      	cmp	r3, #42	; 0x2a
 8005644:	d132      	bne.n	80056ac <_svfiprintf_r+0x174>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	3702      	adds	r7, #2
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9203      	str	r2, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfb8      	it	lt
 8005654:	f04f 33ff 	movlt.w	r3, #4294967295
 8005658:	9305      	str	r3, [sp, #20]
 800565a:	4c2d      	ldr	r4, [pc, #180]	; (8005710 <_svfiprintf_r+0x1d8>)
 800565c:	2203      	movs	r2, #3
 800565e:	7839      	ldrb	r1, [r7, #0]
 8005660:	4620      	mov	r0, r4
 8005662:	f000 feab 	bl	80063bc <memchr>
 8005666:	b138      	cbz	r0, 8005678 <_svfiprintf_r+0x140>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	1b00      	subs	r0, r0, r4
 800566c:	fa03 f000 	lsl.w	r0, r3, r0
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	3701      	adds	r7, #1
 8005674:	4303      	orrs	r3, r0
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	7839      	ldrb	r1, [r7, #0]
 800567a:	2206      	movs	r2, #6
 800567c:	4825      	ldr	r0, [pc, #148]	; (8005714 <_svfiprintf_r+0x1dc>)
 800567e:	1c7e      	adds	r6, r7, #1
 8005680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005684:	f000 fe9a 	bl	80063bc <memchr>
 8005688:	2800      	cmp	r0, #0
 800568a:	d035      	beq.n	80056f8 <_svfiprintf_r+0x1c0>
 800568c:	4b22      	ldr	r3, [pc, #136]	; (8005718 <_svfiprintf_r+0x1e0>)
 800568e:	b9fb      	cbnz	r3, 80056d0 <_svfiprintf_r+0x198>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	3307      	adds	r3, #7
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	3308      	adds	r3, #8
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	444b      	add	r3, r9
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	e76d      	b.n	8005580 <_svfiprintf_r+0x48>
 80056a4:	fb00 3202 	mla	r2, r0, r2, r3
 80056a8:	2101      	movs	r1, #1
 80056aa:	e7a4      	b.n	80055f6 <_svfiprintf_r+0xbe>
 80056ac:	2300      	movs	r3, #0
 80056ae:	240a      	movs	r4, #10
 80056b0:	4618      	mov	r0, r3
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	460f      	mov	r7, r1
 80056b6:	783a      	ldrb	r2, [r7, #0]
 80056b8:	3101      	adds	r1, #1
 80056ba:	3a30      	subs	r2, #48	; 0x30
 80056bc:	2a09      	cmp	r2, #9
 80056be:	d903      	bls.n	80056c8 <_svfiprintf_r+0x190>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ca      	beq.n	800565a <_svfiprintf_r+0x122>
 80056c4:	9005      	str	r0, [sp, #20]
 80056c6:	e7c8      	b.n	800565a <_svfiprintf_r+0x122>
 80056c8:	fb04 2000 	mla	r0, r4, r0, r2
 80056cc:	2301      	movs	r3, #1
 80056ce:	e7f1      	b.n	80056b4 <_svfiprintf_r+0x17c>
 80056d0:	ab03      	add	r3, sp, #12
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	462a      	mov	r2, r5
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <_svfiprintf_r+0x1e4>)
 80056d8:	a904      	add	r1, sp, #16
 80056da:	4640      	mov	r0, r8
 80056dc:	f3af 8000 	nop.w
 80056e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056e4:	4681      	mov	r9, r0
 80056e6:	d1d9      	bne.n	800569c <_svfiprintf_r+0x164>
 80056e8:	89ab      	ldrh	r3, [r5, #12]
 80056ea:	065b      	lsls	r3, r3, #25
 80056ec:	f53f af39 	bmi.w	8005562 <_svfiprintf_r+0x2a>
 80056f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f2:	b01d      	add	sp, #116	; 0x74
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <_svfiprintf_r+0x1e4>)
 8005700:	a904      	add	r1, sp, #16
 8005702:	4640      	mov	r0, r8
 8005704:	f000 fa32 	bl	8005b6c <_printf_i>
 8005708:	e7ea      	b.n	80056e0 <_svfiprintf_r+0x1a8>
 800570a:	bf00      	nop
 800570c:	08006816 	.word	0x08006816
 8005710:	0800681c 	.word	0x0800681c
 8005714:	08006820 	.word	0x08006820
 8005718:	00000000 	.word	0x00000000
 800571c:	08005481 	.word	0x08005481

08005720 <_sungetc_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	1c4b      	adds	r3, r1, #1
 8005724:	4614      	mov	r4, r2
 8005726:	d103      	bne.n	8005730 <_sungetc_r+0x10>
 8005728:	f04f 35ff 	mov.w	r5, #4294967295
 800572c:	4628      	mov	r0, r5
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	8993      	ldrh	r3, [r2, #12]
 8005732:	b2cd      	uxtb	r5, r1
 8005734:	f023 0320 	bic.w	r3, r3, #32
 8005738:	8193      	strh	r3, [r2, #12]
 800573a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800573c:	6852      	ldr	r2, [r2, #4]
 800573e:	b18b      	cbz	r3, 8005764 <_sungetc_r+0x44>
 8005740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005742:	429a      	cmp	r2, r3
 8005744:	da08      	bge.n	8005758 <_sungetc_r+0x38>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	6063      	str	r3, [r4, #4]
 8005756:	e7e9      	b.n	800572c <_sungetc_r+0xc>
 8005758:	4621      	mov	r1, r4
 800575a:	f000 fdd3 	bl	8006304 <__submore>
 800575e:	2800      	cmp	r0, #0
 8005760:	d0f1      	beq.n	8005746 <_sungetc_r+0x26>
 8005762:	e7e1      	b.n	8005728 <_sungetc_r+0x8>
 8005764:	6921      	ldr	r1, [r4, #16]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	b151      	cbz	r1, 8005780 <_sungetc_r+0x60>
 800576a:	4299      	cmp	r1, r3
 800576c:	d208      	bcs.n	8005780 <_sungetc_r+0x60>
 800576e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005772:	428d      	cmp	r5, r1
 8005774:	d104      	bne.n	8005780 <_sungetc_r+0x60>
 8005776:	3b01      	subs	r3, #1
 8005778:	3201      	adds	r2, #1
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	6062      	str	r2, [r4, #4]
 800577e:	e7d5      	b.n	800572c <_sungetc_r+0xc>
 8005780:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005786:	6363      	str	r3, [r4, #52]	; 0x34
 8005788:	2303      	movs	r3, #3
 800578a:	63a3      	str	r3, [r4, #56]	; 0x38
 800578c:	4623      	mov	r3, r4
 800578e:	6422      	str	r2, [r4, #64]	; 0x40
 8005790:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	2301      	movs	r3, #1
 8005798:	e7dc      	b.n	8005754 <_sungetc_r+0x34>

0800579a <__ssrefill_r>:
 800579a:	b510      	push	{r4, lr}
 800579c:	460c      	mov	r4, r1
 800579e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057a0:	b169      	cbz	r1, 80057be <__ssrefill_r+0x24>
 80057a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a6:	4299      	cmp	r1, r3
 80057a8:	d001      	beq.n	80057ae <__ssrefill_r+0x14>
 80057aa:	f000 fe2f 	bl	800640c <_free_r>
 80057ae:	2000      	movs	r0, #0
 80057b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057b2:	6360      	str	r0, [r4, #52]	; 0x34
 80057b4:	6063      	str	r3, [r4, #4]
 80057b6:	b113      	cbz	r3, 80057be <__ssrefill_r+0x24>
 80057b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f043 0320 	orr.w	r3, r3, #32
 80057d0:	81a3      	strh	r3, [r4, #12]
 80057d2:	bd10      	pop	{r4, pc}

080057d4 <__ssvfiscanf_r>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2300      	movs	r3, #0
 80057e0:	4606      	mov	r6, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4692      	mov	sl, r2
 80057e6:	270a      	movs	r7, #10
 80057e8:	9346      	str	r3, [sp, #280]	; 0x118
 80057ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80057ec:	4b9f      	ldr	r3, [pc, #636]	; (8005a6c <__ssvfiscanf_r+0x298>)
 80057ee:	f10d 080c 	add.w	r8, sp, #12
 80057f2:	93a2      	str	r3, [sp, #648]	; 0x288
 80057f4:	4b9e      	ldr	r3, [pc, #632]	; (8005a70 <__ssvfiscanf_r+0x29c>)
 80057f6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8005a74 <__ssvfiscanf_r+0x2a0>
 80057fa:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80057fe:	93a3      	str	r3, [sp, #652]	; 0x28c
 8005800:	f89a 3000 	ldrb.w	r3, [sl]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 812f 	beq.w	8005a68 <__ssvfiscanf_r+0x294>
 800580a:	f000 fdb7 	bl	800637c <__locale_ctype_ptr>
 800580e:	f89a b000 	ldrb.w	fp, [sl]
 8005812:	4458      	add	r0, fp
 8005814:	7843      	ldrb	r3, [r0, #1]
 8005816:	f013 0308 	ands.w	r3, r3, #8
 800581a:	d143      	bne.n	80058a4 <__ssvfiscanf_r+0xd0>
 800581c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005820:	f10a 0501 	add.w	r5, sl, #1
 8005824:	f040 8099 	bne.w	800595a <__ssvfiscanf_r+0x186>
 8005828:	9345      	str	r3, [sp, #276]	; 0x114
 800582a:	9343      	str	r3, [sp, #268]	; 0x10c
 800582c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005830:	2b2a      	cmp	r3, #42	; 0x2a
 8005832:	d103      	bne.n	800583c <__ssvfiscanf_r+0x68>
 8005834:	2310      	movs	r3, #16
 8005836:	f10a 0502 	add.w	r5, sl, #2
 800583a:	9343      	str	r3, [sp, #268]	; 0x10c
 800583c:	7829      	ldrb	r1, [r5, #0]
 800583e:	46aa      	mov	sl, r5
 8005840:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	f105 0501 	add.w	r5, r5, #1
 800584a:	d941      	bls.n	80058d0 <__ssvfiscanf_r+0xfc>
 800584c:	2203      	movs	r2, #3
 800584e:	4889      	ldr	r0, [pc, #548]	; (8005a74 <__ssvfiscanf_r+0x2a0>)
 8005850:	f000 fdb4 	bl	80063bc <memchr>
 8005854:	b138      	cbz	r0, 8005866 <__ssvfiscanf_r+0x92>
 8005856:	eba0 0309 	sub.w	r3, r0, r9
 800585a:	2001      	movs	r0, #1
 800585c:	46aa      	mov	sl, r5
 800585e:	4098      	lsls	r0, r3
 8005860:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005862:	4318      	orrs	r0, r3
 8005864:	9043      	str	r0, [sp, #268]	; 0x10c
 8005866:	f89a 3000 	ldrb.w	r3, [sl]
 800586a:	f10a 0501 	add.w	r5, sl, #1
 800586e:	2b67      	cmp	r3, #103	; 0x67
 8005870:	d84a      	bhi.n	8005908 <__ssvfiscanf_r+0x134>
 8005872:	2b65      	cmp	r3, #101	; 0x65
 8005874:	f080 80b7 	bcs.w	80059e6 <__ssvfiscanf_r+0x212>
 8005878:	2b47      	cmp	r3, #71	; 0x47
 800587a:	d82f      	bhi.n	80058dc <__ssvfiscanf_r+0x108>
 800587c:	2b45      	cmp	r3, #69	; 0x45
 800587e:	f080 80b2 	bcs.w	80059e6 <__ssvfiscanf_r+0x212>
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8082 	beq.w	800598c <__ssvfiscanf_r+0x1b8>
 8005888:	2b25      	cmp	r3, #37	; 0x25
 800588a:	d066      	beq.n	800595a <__ssvfiscanf_r+0x186>
 800588c:	2303      	movs	r3, #3
 800588e:	9744      	str	r7, [sp, #272]	; 0x110
 8005890:	9349      	str	r3, [sp, #292]	; 0x124
 8005892:	e045      	b.n	8005920 <__ssvfiscanf_r+0x14c>
 8005894:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8005896:	3301      	adds	r3, #1
 8005898:	3101      	adds	r1, #1
 800589a:	9147      	str	r1, [sp, #284]	; 0x11c
 800589c:	6861      	ldr	r1, [r4, #4]
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	3901      	subs	r1, #1
 80058a2:	6061      	str	r1, [r4, #4]
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	dd0b      	ble.n	80058c2 <__ssvfiscanf_r+0xee>
 80058aa:	f000 fd67 	bl	800637c <__locale_ctype_ptr>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	7819      	ldrb	r1, [r3, #0]
 80058b2:	4408      	add	r0, r1
 80058b4:	7841      	ldrb	r1, [r0, #1]
 80058b6:	070d      	lsls	r5, r1, #28
 80058b8:	d4ec      	bmi.n	8005894 <__ssvfiscanf_r+0xc0>
 80058ba:	f10a 0501 	add.w	r5, sl, #1
 80058be:	46aa      	mov	sl, r5
 80058c0:	e79e      	b.n	8005800 <__ssvfiscanf_r+0x2c>
 80058c2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80058c4:	4621      	mov	r1, r4
 80058c6:	4630      	mov	r0, r6
 80058c8:	4798      	blx	r3
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d0ed      	beq.n	80058aa <__ssvfiscanf_r+0xd6>
 80058ce:	e7f4      	b.n	80058ba <__ssvfiscanf_r+0xe6>
 80058d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80058d2:	fb07 1303 	mla	r3, r7, r3, r1
 80058d6:	3b30      	subs	r3, #48	; 0x30
 80058d8:	9345      	str	r3, [sp, #276]	; 0x114
 80058da:	e7af      	b.n	800583c <__ssvfiscanf_r+0x68>
 80058dc:	2b5b      	cmp	r3, #91	; 0x5b
 80058de:	d061      	beq.n	80059a4 <__ssvfiscanf_r+0x1d0>
 80058e0:	d80c      	bhi.n	80058fc <__ssvfiscanf_r+0x128>
 80058e2:	2b58      	cmp	r3, #88	; 0x58
 80058e4:	d1d2      	bne.n	800588c <__ssvfiscanf_r+0xb8>
 80058e6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ec:	9243      	str	r2, [sp, #268]	; 0x10c
 80058ee:	2210      	movs	r2, #16
 80058f0:	9244      	str	r2, [sp, #272]	; 0x110
 80058f2:	2b6f      	cmp	r3, #111	; 0x6f
 80058f4:	bfb4      	ite	lt
 80058f6:	2303      	movlt	r3, #3
 80058f8:	2304      	movge	r3, #4
 80058fa:	e010      	b.n	800591e <__ssvfiscanf_r+0x14a>
 80058fc:	2b63      	cmp	r3, #99	; 0x63
 80058fe:	d05c      	beq.n	80059ba <__ssvfiscanf_r+0x1e6>
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d1c3      	bne.n	800588c <__ssvfiscanf_r+0xb8>
 8005904:	9744      	str	r7, [sp, #272]	; 0x110
 8005906:	e7f4      	b.n	80058f2 <__ssvfiscanf_r+0x11e>
 8005908:	2b70      	cmp	r3, #112	; 0x70
 800590a:	d042      	beq.n	8005992 <__ssvfiscanf_r+0x1be>
 800590c:	d81d      	bhi.n	800594a <__ssvfiscanf_r+0x176>
 800590e:	2b6e      	cmp	r3, #110	; 0x6e
 8005910:	d059      	beq.n	80059c6 <__ssvfiscanf_r+0x1f2>
 8005912:	d843      	bhi.n	800599c <__ssvfiscanf_r+0x1c8>
 8005914:	2b69      	cmp	r3, #105	; 0x69
 8005916:	d1b9      	bne.n	800588c <__ssvfiscanf_r+0xb8>
 8005918:	2300      	movs	r3, #0
 800591a:	9344      	str	r3, [sp, #272]	; 0x110
 800591c:	2303      	movs	r3, #3
 800591e:	9349      	str	r3, [sp, #292]	; 0x124
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	dd61      	ble.n	80059ea <__ssvfiscanf_r+0x216>
 8005926:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005928:	0659      	lsls	r1, r3, #25
 800592a:	d56f      	bpl.n	8005a0c <__ssvfiscanf_r+0x238>
 800592c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800592e:	2b02      	cmp	r3, #2
 8005930:	dc7c      	bgt.n	8005a2c <__ssvfiscanf_r+0x258>
 8005932:	ab01      	add	r3, sp, #4
 8005934:	4622      	mov	r2, r4
 8005936:	a943      	add	r1, sp, #268	; 0x10c
 8005938:	4630      	mov	r0, r6
 800593a:	f000 fa37 	bl	8005dac <_scanf_chars>
 800593e:	2801      	cmp	r0, #1
 8005940:	f000 8092 	beq.w	8005a68 <__ssvfiscanf_r+0x294>
 8005944:	2802      	cmp	r0, #2
 8005946:	d1ba      	bne.n	80058be <__ssvfiscanf_r+0xea>
 8005948:	e01d      	b.n	8005986 <__ssvfiscanf_r+0x1b2>
 800594a:	2b75      	cmp	r3, #117	; 0x75
 800594c:	d0da      	beq.n	8005904 <__ssvfiscanf_r+0x130>
 800594e:	2b78      	cmp	r3, #120	; 0x78
 8005950:	d0c9      	beq.n	80058e6 <__ssvfiscanf_r+0x112>
 8005952:	2b73      	cmp	r3, #115	; 0x73
 8005954:	d19a      	bne.n	800588c <__ssvfiscanf_r+0xb8>
 8005956:	2302      	movs	r3, #2
 8005958:	e7e1      	b.n	800591e <__ssvfiscanf_r+0x14a>
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	dd0c      	ble.n	800597a <__ssvfiscanf_r+0x1a6>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	4593      	cmp	fp, r2
 8005966:	d17f      	bne.n	8005a68 <__ssvfiscanf_r+0x294>
 8005968:	3301      	adds	r3, #1
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005970:	3a01      	subs	r2, #1
 8005972:	3301      	adds	r3, #1
 8005974:	6062      	str	r2, [r4, #4]
 8005976:	9347      	str	r3, [sp, #284]	; 0x11c
 8005978:	e7a1      	b.n	80058be <__ssvfiscanf_r+0xea>
 800597a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	4798      	blx	r3
 8005982:	2800      	cmp	r0, #0
 8005984:	d0ec      	beq.n	8005960 <__ssvfiscanf_r+0x18c>
 8005986:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005988:	2800      	cmp	r0, #0
 800598a:	d163      	bne.n	8005a54 <__ssvfiscanf_r+0x280>
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	e066      	b.n	8005a60 <__ssvfiscanf_r+0x28c>
 8005992:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005994:	f042 0220 	orr.w	r2, r2, #32
 8005998:	9243      	str	r2, [sp, #268]	; 0x10c
 800599a:	e7a4      	b.n	80058e6 <__ssvfiscanf_r+0x112>
 800599c:	2308      	movs	r3, #8
 800599e:	9344      	str	r3, [sp, #272]	; 0x110
 80059a0:	2304      	movs	r3, #4
 80059a2:	e7bc      	b.n	800591e <__ssvfiscanf_r+0x14a>
 80059a4:	4629      	mov	r1, r5
 80059a6:	4640      	mov	r0, r8
 80059a8:	f000 fb5a 	bl	8006060 <__sccl>
 80059ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80059ae:	4605      	mov	r5, r0
 80059b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80059b6:	2301      	movs	r3, #1
 80059b8:	e7b1      	b.n	800591e <__ssvfiscanf_r+0x14a>
 80059ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80059bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80059c2:	2300      	movs	r3, #0
 80059c4:	e7ab      	b.n	800591e <__ssvfiscanf_r+0x14a>
 80059c6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80059c8:	06d0      	lsls	r0, r2, #27
 80059ca:	f53f af78 	bmi.w	80058be <__ssvfiscanf_r+0xea>
 80059ce:	f012 0f01 	tst.w	r2, #1
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80059d6:	f102 0104 	add.w	r1, r2, #4
 80059da:	9101      	str	r1, [sp, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	bf14      	ite	ne
 80059e0:	8013      	strhne	r3, [r2, #0]
 80059e2:	6013      	streq	r3, [r2, #0]
 80059e4:	e76b      	b.n	80058be <__ssvfiscanf_r+0xea>
 80059e6:	2305      	movs	r3, #5
 80059e8:	e799      	b.n	800591e <__ssvfiscanf_r+0x14a>
 80059ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80059ec:	4621      	mov	r1, r4
 80059ee:	4630      	mov	r0, r6
 80059f0:	4798      	blx	r3
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d097      	beq.n	8005926 <__ssvfiscanf_r+0x152>
 80059f6:	e7c6      	b.n	8005986 <__ssvfiscanf_r+0x1b2>
 80059f8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80059fa:	3201      	adds	r2, #1
 80059fc:	9247      	str	r2, [sp, #284]	; 0x11c
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	3a01      	subs	r2, #1
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	6062      	str	r2, [r4, #4]
 8005a06:	dd0a      	ble.n	8005a1e <__ssvfiscanf_r+0x24a>
 8005a08:	3301      	adds	r3, #1
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	f000 fcb6 	bl	800637c <__locale_ctype_ptr>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	4410      	add	r0, r2
 8005a16:	7842      	ldrb	r2, [r0, #1]
 8005a18:	0712      	lsls	r2, r2, #28
 8005a1a:	d4ed      	bmi.n	80059f8 <__ssvfiscanf_r+0x224>
 8005a1c:	e786      	b.n	800592c <__ssvfiscanf_r+0x158>
 8005a1e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005a20:	4621      	mov	r1, r4
 8005a22:	4630      	mov	r0, r6
 8005a24:	4798      	blx	r3
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d0f0      	beq.n	8005a0c <__ssvfiscanf_r+0x238>
 8005a2a:	e7ac      	b.n	8005986 <__ssvfiscanf_r+0x1b2>
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	dc06      	bgt.n	8005a3e <__ssvfiscanf_r+0x26a>
 8005a30:	ab01      	add	r3, sp, #4
 8005a32:	4622      	mov	r2, r4
 8005a34:	a943      	add	r1, sp, #268	; 0x10c
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 fa1c 	bl	8005e74 <_scanf_i>
 8005a3c:	e77f      	b.n	800593e <__ssvfiscanf_r+0x16a>
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <__ssvfiscanf_r+0x2a4>)
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f43f af3c 	beq.w	80058be <__ssvfiscanf_r+0xea>
 8005a46:	ab01      	add	r3, sp, #4
 8005a48:	4622      	mov	r2, r4
 8005a4a:	a943      	add	r1, sp, #268	; 0x10c
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f3af 8000 	nop.w
 8005a52:	e774      	b.n	800593e <__ssvfiscanf_r+0x16a>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a5a:	bf18      	it	ne
 8005a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8005a60:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005a6a:	e7f9      	b.n	8005a60 <__ssvfiscanf_r+0x28c>
 8005a6c:	08005721 	.word	0x08005721
 8005a70:	0800579b 	.word	0x0800579b
 8005a74:	0800681c 	.word	0x0800681c
 8005a78:	00000000 	.word	0x00000000

08005a7c <_printf_common>:
 8005a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	4691      	mov	r9, r2
 8005a82:	461f      	mov	r7, r3
 8005a84:	688a      	ldr	r2, [r1, #8]
 8005a86:	690b      	ldr	r3, [r1, #16]
 8005a88:	4606      	mov	r6, r0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bfb8      	it	lt
 8005a8e:	4613      	movlt	r3, r2
 8005a90:	f8c9 3000 	str.w	r3, [r9]
 8005a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a98:	460c      	mov	r4, r1
 8005a9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a9e:	b112      	cbz	r2, 8005aa6 <_printf_common+0x2a>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c9 3000 	str.w	r3, [r9]
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	0699      	lsls	r1, r3, #26
 8005aaa:	bf42      	ittt	mi
 8005aac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ab0:	3302      	addmi	r3, #2
 8005ab2:	f8c9 3000 	strmi.w	r3, [r9]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	f015 0506 	ands.w	r5, r5, #6
 8005abc:	d107      	bne.n	8005ace <_printf_common+0x52>
 8005abe:	f104 0a19 	add.w	sl, r4, #25
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	429d      	cmp	r5, r3
 8005acc:	db2a      	blt.n	8005b24 <_printf_common+0xa8>
 8005ace:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	3300      	adds	r3, #0
 8005ad6:	bf18      	it	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	0692      	lsls	r2, r2, #26
 8005adc:	d42f      	bmi.n	8005b3e <_printf_common+0xc2>
 8005ade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	47c0      	blx	r8
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d022      	beq.n	8005b32 <_printf_common+0xb6>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	68e5      	ldr	r5, [r4, #12]
 8005af0:	f003 0306 	and.w	r3, r3, #6
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	bf18      	it	ne
 8005af8:	2500      	movne	r5, #0
 8005afa:	f8d9 2000 	ldr.w	r2, [r9]
 8005afe:	f04f 0900 	mov.w	r9, #0
 8005b02:	bf08      	it	eq
 8005b04:	1aad      	subeq	r5, r5, r2
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	6922      	ldr	r2, [r4, #16]
 8005b0a:	bf08      	it	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bfc4      	itt	gt
 8005b14:	1a9b      	subgt	r3, r3, r2
 8005b16:	18ed      	addgt	r5, r5, r3
 8005b18:	341a      	adds	r4, #26
 8005b1a:	454d      	cmp	r5, r9
 8005b1c:	d11b      	bne.n	8005b56 <_printf_common+0xda>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	2301      	movs	r3, #1
 8005b26:	4652      	mov	r2, sl
 8005b28:	4639      	mov	r1, r7
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d103      	bne.n	8005b3a <_printf_common+0xbe>
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	e7c1      	b.n	8005ac2 <_printf_common+0x46>
 8005b3e:	2030      	movs	r0, #48	; 0x30
 8005b40:	18e1      	adds	r1, r4, r3
 8005b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b4c:	4422      	add	r2, r4
 8005b4e:	3302      	adds	r3, #2
 8005b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b54:	e7c3      	b.n	8005ade <_printf_common+0x62>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4622      	mov	r2, r4
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	47c0      	blx	r8
 8005b60:	3001      	adds	r0, #1
 8005b62:	d0e6      	beq.n	8005b32 <_printf_common+0xb6>
 8005b64:	f109 0901 	add.w	r9, r9, #1
 8005b68:	e7d7      	b.n	8005b1a <_printf_common+0x9e>
	...

08005b6c <_printf_i>:
 8005b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4617      	mov	r7, r2
 8005b72:	7e0a      	ldrb	r2, [r1, #24]
 8005b74:	b085      	sub	sp, #20
 8005b76:	2a6e      	cmp	r2, #110	; 0x6e
 8005b78:	4698      	mov	r8, r3
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b80:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005b84:	f000 80bc 	beq.w	8005d00 <_printf_i+0x194>
 8005b88:	d81a      	bhi.n	8005bc0 <_printf_i+0x54>
 8005b8a:	2a63      	cmp	r2, #99	; 0x63
 8005b8c:	d02e      	beq.n	8005bec <_printf_i+0x80>
 8005b8e:	d80a      	bhi.n	8005ba6 <_printf_i+0x3a>
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	f000 80c8 	beq.w	8005d26 <_printf_i+0x1ba>
 8005b96:	2a58      	cmp	r2, #88	; 0x58
 8005b98:	f000 808a 	beq.w	8005cb0 <_printf_i+0x144>
 8005b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005ba4:	e02a      	b.n	8005bfc <_printf_i+0x90>
 8005ba6:	2a64      	cmp	r2, #100	; 0x64
 8005ba8:	d001      	beq.n	8005bae <_printf_i+0x42>
 8005baa:	2a69      	cmp	r2, #105	; 0x69
 8005bac:	d1f6      	bne.n	8005b9c <_printf_i+0x30>
 8005bae:	6821      	ldr	r1, [r4, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005bb6:	d023      	beq.n	8005c00 <_printf_i+0x94>
 8005bb8:	1d11      	adds	r1, r2, #4
 8005bba:	6019      	str	r1, [r3, #0]
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	e027      	b.n	8005c10 <_printf_i+0xa4>
 8005bc0:	2a73      	cmp	r2, #115	; 0x73
 8005bc2:	f000 80b4 	beq.w	8005d2e <_printf_i+0x1c2>
 8005bc6:	d808      	bhi.n	8005bda <_printf_i+0x6e>
 8005bc8:	2a6f      	cmp	r2, #111	; 0x6f
 8005bca:	d02a      	beq.n	8005c22 <_printf_i+0xb6>
 8005bcc:	2a70      	cmp	r2, #112	; 0x70
 8005bce:	d1e5      	bne.n	8005b9c <_printf_i+0x30>
 8005bd0:	680a      	ldr	r2, [r1, #0]
 8005bd2:	f042 0220 	orr.w	r2, r2, #32
 8005bd6:	600a      	str	r2, [r1, #0]
 8005bd8:	e003      	b.n	8005be2 <_printf_i+0x76>
 8005bda:	2a75      	cmp	r2, #117	; 0x75
 8005bdc:	d021      	beq.n	8005c22 <_printf_i+0xb6>
 8005bde:	2a78      	cmp	r2, #120	; 0x78
 8005be0:	d1dc      	bne.n	8005b9c <_printf_i+0x30>
 8005be2:	2278      	movs	r2, #120	; 0x78
 8005be4:	496f      	ldr	r1, [pc, #444]	; (8005da4 <_printf_i+0x238>)
 8005be6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005bea:	e064      	b.n	8005cb6 <_printf_i+0x14a>
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005bf2:	1d11      	adds	r1, r2, #4
 8005bf4:	6019      	str	r1, [r3, #0]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0a3      	b.n	8005d48 <_printf_i+0x1dc>
 8005c00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005c04:	f102 0104 	add.w	r1, r2, #4
 8005c08:	6019      	str	r1, [r3, #0]
 8005c0a:	d0d7      	beq.n	8005bbc <_printf_i+0x50>
 8005c0c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da03      	bge.n	8005c1c <_printf_i+0xb0>
 8005c14:	222d      	movs	r2, #45	; 0x2d
 8005c16:	425b      	negs	r3, r3
 8005c18:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c1c:	4962      	ldr	r1, [pc, #392]	; (8005da8 <_printf_i+0x23c>)
 8005c1e:	220a      	movs	r2, #10
 8005c20:	e017      	b.n	8005c52 <_printf_i+0xe6>
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	6819      	ldr	r1, [r3, #0]
 8005c26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005c2a:	d003      	beq.n	8005c34 <_printf_i+0xc8>
 8005c2c:	1d08      	adds	r0, r1, #4
 8005c2e:	6018      	str	r0, [r3, #0]
 8005c30:	680b      	ldr	r3, [r1, #0]
 8005c32:	e006      	b.n	8005c42 <_printf_i+0xd6>
 8005c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c38:	f101 0004 	add.w	r0, r1, #4
 8005c3c:	6018      	str	r0, [r3, #0]
 8005c3e:	d0f7      	beq.n	8005c30 <_printf_i+0xc4>
 8005c40:	880b      	ldrh	r3, [r1, #0]
 8005c42:	2a6f      	cmp	r2, #111	; 0x6f
 8005c44:	bf14      	ite	ne
 8005c46:	220a      	movne	r2, #10
 8005c48:	2208      	moveq	r2, #8
 8005c4a:	4957      	ldr	r1, [pc, #348]	; (8005da8 <_printf_i+0x23c>)
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005c52:	6865      	ldr	r5, [r4, #4]
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	60a5      	str	r5, [r4, #8]
 8005c58:	f2c0 809c 	blt.w	8005d94 <_printf_i+0x228>
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	f020 0004 	bic.w	r0, r0, #4
 8005c62:	6020      	str	r0, [r4, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d13f      	bne.n	8005ce8 <_printf_i+0x17c>
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	f040 8095 	bne.w	8005d98 <_printf_i+0x22c>
 8005c6e:	4675      	mov	r5, lr
 8005c70:	2a08      	cmp	r2, #8
 8005c72:	d10b      	bne.n	8005c8c <_printf_i+0x120>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07da      	lsls	r2, r3, #31
 8005c78:	d508      	bpl.n	8005c8c <_printf_i+0x120>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6862      	ldr	r2, [r4, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	bfde      	ittt	le
 8005c82:	2330      	movle	r3, #48	; 0x30
 8005c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c8c:	ebae 0305 	sub.w	r3, lr, r5
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	f8cd 8000 	str.w	r8, [sp]
 8005c96:	463b      	mov	r3, r7
 8005c98:	aa03      	add	r2, sp, #12
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff feed 	bl	8005a7c <_printf_common>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d155      	bne.n	8005d52 <_printf_i+0x1e6>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b005      	add	sp, #20
 8005cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005cb4:	493c      	ldr	r1, [pc, #240]	; (8005da8 <_printf_i+0x23c>)
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005cbe:	f100 0504 	add.w	r5, r0, #4
 8005cc2:	601d      	str	r5, [r3, #0]
 8005cc4:	d001      	beq.n	8005cca <_printf_i+0x15e>
 8005cc6:	6803      	ldr	r3, [r0, #0]
 8005cc8:	e002      	b.n	8005cd0 <_printf_i+0x164>
 8005cca:	0655      	lsls	r5, r2, #25
 8005ccc:	d5fb      	bpl.n	8005cc6 <_printf_i+0x15a>
 8005cce:	8803      	ldrh	r3, [r0, #0]
 8005cd0:	07d0      	lsls	r0, r2, #31
 8005cd2:	bf44      	itt	mi
 8005cd4:	f042 0220 	orrmi.w	r2, r2, #32
 8005cd8:	6022      	strmi	r2, [r4, #0]
 8005cda:	b91b      	cbnz	r3, 8005ce4 <_printf_i+0x178>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	f022 0220 	bic.w	r2, r2, #32
 8005ce2:	6022      	str	r2, [r4, #0]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	e7b1      	b.n	8005c4c <_printf_i+0xe0>
 8005ce8:	4675      	mov	r5, lr
 8005cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cee:	fb02 3310 	mls	r3, r2, r0, r3
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d1f5      	bne.n	8005cea <_printf_i+0x17e>
 8005cfe:	e7b7      	b.n	8005c70 <_printf_i+0x104>
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d08:	6949      	ldr	r1, [r1, #20]
 8005d0a:	d004      	beq.n	8005d16 <_printf_i+0x1aa>
 8005d0c:	1d10      	adds	r0, r2, #4
 8005d0e:	6018      	str	r0, [r3, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	6019      	str	r1, [r3, #0]
 8005d14:	e007      	b.n	8005d26 <_printf_i+0x1ba>
 8005d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d1a:	f102 0004 	add.w	r0, r2, #4
 8005d1e:	6018      	str	r0, [r3, #0]
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	d0f6      	beq.n	8005d12 <_printf_i+0x1a6>
 8005d24:	8019      	strh	r1, [r3, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	4675      	mov	r5, lr
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	e7b1      	b.n	8005c92 <_printf_i+0x126>
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	1d11      	adds	r1, r2, #4
 8005d32:	6019      	str	r1, [r3, #0]
 8005d34:	6815      	ldr	r5, [r2, #0]
 8005d36:	2100      	movs	r1, #0
 8005d38:	6862      	ldr	r2, [r4, #4]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 fb3e 	bl	80063bc <memchr>
 8005d40:	b108      	cbz	r0, 8005d46 <_printf_i+0x1da>
 8005d42:	1b40      	subs	r0, r0, r5
 8005d44:	6060      	str	r0, [r4, #4]
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d50:	e79f      	b.n	8005c92 <_printf_i+0x126>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	462a      	mov	r2, r5
 8005d56:	4639      	mov	r1, r7
 8005d58:	4630      	mov	r0, r6
 8005d5a:	47c0      	blx	r8
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d0a2      	beq.n	8005ca6 <_printf_i+0x13a>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	d507      	bpl.n	8005d76 <_printf_i+0x20a>
 8005d66:	2500      	movs	r5, #0
 8005d68:	f104 0919 	add.w	r9, r4, #25
 8005d6c:	68e3      	ldr	r3, [r4, #12]
 8005d6e:	9a03      	ldr	r2, [sp, #12]
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	429d      	cmp	r5, r3
 8005d74:	db05      	blt.n	8005d82 <_printf_i+0x216>
 8005d76:	68e0      	ldr	r0, [r4, #12]
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	bfb8      	it	lt
 8005d7e:	4618      	movlt	r0, r3
 8005d80:	e793      	b.n	8005caa <_printf_i+0x13e>
 8005d82:	2301      	movs	r3, #1
 8005d84:	464a      	mov	r2, r9
 8005d86:	4639      	mov	r1, r7
 8005d88:	4630      	mov	r0, r6
 8005d8a:	47c0      	blx	r8
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d08a      	beq.n	8005ca6 <_printf_i+0x13a>
 8005d90:	3501      	adds	r5, #1
 8005d92:	e7eb      	b.n	8005d6c <_printf_i+0x200>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1a7      	bne.n	8005ce8 <_printf_i+0x17c>
 8005d98:	780b      	ldrb	r3, [r1, #0]
 8005d9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005da2:	e765      	b.n	8005c70 <_printf_i+0x104>
 8005da4:	08006838 	.word	0x08006838
 8005da8:	08006827 	.word	0x08006827

08005dac <_scanf_chars>:
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	4615      	mov	r5, r2
 8005db2:	688a      	ldr	r2, [r1, #8]
 8005db4:	4680      	mov	r8, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	b932      	cbnz	r2, 8005dc8 <_scanf_chars+0x1c>
 8005dba:	698a      	ldr	r2, [r1, #24]
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2201      	moveq	r2, #1
 8005dc2:	f04f 32ff 	movne.w	r2, #4294967295
 8005dc6:	608a      	str	r2, [r1, #8]
 8005dc8:	2600      	movs	r6, #0
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	06d1      	lsls	r1, r2, #27
 8005dce:	bf5f      	itttt	pl
 8005dd0:	681a      	ldrpl	r2, [r3, #0]
 8005dd2:	1d11      	addpl	r1, r2, #4
 8005dd4:	6019      	strpl	r1, [r3, #0]
 8005dd6:	6817      	ldrpl	r7, [r2, #0]
 8005dd8:	69a3      	ldr	r3, [r4, #24]
 8005dda:	b1db      	cbz	r3, 8005e14 <_scanf_chars+0x68>
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d107      	bne.n	8005df0 <_scanf_chars+0x44>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	6962      	ldr	r2, [r4, #20]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
 8005de8:	b9a3      	cbnz	r3, 8005e14 <_scanf_chars+0x68>
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	d131      	bne.n	8005e52 <_scanf_chars+0xa6>
 8005dee:	e006      	b.n	8005dfe <_scanf_chars+0x52>
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d007      	beq.n	8005e04 <_scanf_chars+0x58>
 8005df4:	2e00      	cmp	r6, #0
 8005df6:	d12c      	bne.n	8005e52 <_scanf_chars+0xa6>
 8005df8:	69a3      	ldr	r3, [r4, #24]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d129      	bne.n	8005e52 <_scanf_chars+0xa6>
 8005dfe:	2001      	movs	r0, #1
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	f000 faba 	bl	800637c <__locale_ctype_ptr>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	4418      	add	r0, r3
 8005e0e:	7843      	ldrb	r3, [r0, #1]
 8005e10:	071b      	lsls	r3, r3, #28
 8005e12:	d4ef      	bmi.n	8005df4 <_scanf_chars+0x48>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	3601      	adds	r6, #1
 8005e18:	06da      	lsls	r2, r3, #27
 8005e1a:	bf5e      	ittt	pl
 8005e1c:	682b      	ldrpl	r3, [r5, #0]
 8005e1e:	781b      	ldrbpl	r3, [r3, #0]
 8005e20:	703b      	strbpl	r3, [r7, #0]
 8005e22:	682a      	ldr	r2, [r5, #0]
 8005e24:	686b      	ldr	r3, [r5, #4]
 8005e26:	f102 0201 	add.w	r2, r2, #1
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	68a2      	ldr	r2, [r4, #8]
 8005e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e32:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e36:	606b      	str	r3, [r5, #4]
 8005e38:	bf58      	it	pl
 8005e3a:	3701      	addpl	r7, #1
 8005e3c:	60a2      	str	r2, [r4, #8]
 8005e3e:	b142      	cbz	r2, 8005e52 <_scanf_chars+0xa6>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dcc9      	bgt.n	8005dd8 <_scanf_chars+0x2c>
 8005e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4798      	blx	r3
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0c2      	beq.n	8005dd8 <_scanf_chars+0x2c>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f013 0310 	ands.w	r3, r3, #16
 8005e58:	d105      	bne.n	8005e66 <_scanf_chars+0xba>
 8005e5a:	68e2      	ldr	r2, [r4, #12]
 8005e5c:	3201      	adds	r2, #1
 8005e5e:	60e2      	str	r2, [r4, #12]
 8005e60:	69a2      	ldr	r2, [r4, #24]
 8005e62:	b102      	cbz	r2, 8005e66 <_scanf_chars+0xba>
 8005e64:	703b      	strb	r3, [r7, #0]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	2000      	movs	r0, #0
 8005e6a:	441e      	add	r6, r3
 8005e6c:	6126      	str	r6, [r4, #16]
 8005e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005e74 <_scanf_i>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	469a      	mov	sl, r3
 8005e7c:	4b74      	ldr	r3, [pc, #464]	; (8006050 <_scanf_i+0x1dc>)
 8005e7e:	b087      	sub	sp, #28
 8005e80:	4683      	mov	fp, r0
 8005e82:	4616      	mov	r6, r2
 8005e84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	68a7      	ldr	r7, [r4, #8]
 8005e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e90:	4b70      	ldr	r3, [pc, #448]	; (8006054 <_scanf_i+0x1e0>)
 8005e92:	69a1      	ldr	r1, [r4, #24]
 8005e94:	4a70      	ldr	r2, [pc, #448]	; (8006058 <_scanf_i+0x1e4>)
 8005e96:	f104 091c 	add.w	r9, r4, #28
 8005e9a:	2903      	cmp	r1, #3
 8005e9c:	bf18      	it	ne
 8005e9e:	461a      	movne	r2, r3
 8005ea0:	1e7b      	subs	r3, r7, #1
 8005ea2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005ea6:	bf84      	itt	hi
 8005ea8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005eac:	60a3      	strhi	r3, [r4, #8]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	bf88      	it	hi
 8005eb2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005eb6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	bf98      	it	ls
 8005ebe:	2700      	movls	r7, #0
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	f04f 0800 	mov.w	r8, #0
 8005ec6:	9200      	str	r2, [sp, #0]
 8005ec8:	bf88      	it	hi
 8005eca:	197f      	addhi	r7, r7, r5
 8005ecc:	6831      	ldr	r1, [r6, #0]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	7809      	ldrb	r1, [r1, #0]
 8005eda:	f000 fa6f 	bl	80063bc <memchr>
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	b328      	cbz	r0, 8005f2e <_scanf_i+0xba>
 8005ee2:	f1b8 0f01 	cmp.w	r8, #1
 8005ee6:	d156      	bne.n	8005f96 <_scanf_i+0x122>
 8005ee8:	6862      	ldr	r2, [r4, #4]
 8005eea:	b92a      	cbnz	r2, 8005ef8 <_scanf_i+0x84>
 8005eec:	2208      	movs	r2, #8
 8005eee:	6062      	str	r2, [r4, #4]
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	68a2      	ldr	r2, [r4, #8]
 8005f02:	1e51      	subs	r1, r2, #1
 8005f04:	60a1      	str	r1, [r4, #8]
 8005f06:	b192      	cbz	r2, 8005f2e <_scanf_i+0xba>
 8005f08:	6832      	ldr	r2, [r6, #0]
 8005f0a:	1c5d      	adds	r5, r3, #1
 8005f0c:	1c51      	adds	r1, r2, #1
 8005f0e:	6031      	str	r1, [r6, #0]
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	6873      	ldr	r3, [r6, #4]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	6073      	str	r3, [r6, #4]
 8005f1c:	dc06      	bgt.n	8005f2c <_scanf_i+0xb8>
 8005f1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f22:	4631      	mov	r1, r6
 8005f24:	4658      	mov	r0, fp
 8005f26:	4798      	blx	r3
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d177      	bne.n	800601c <_scanf_i+0x1a8>
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	f1b8 0f03 	cmp.w	r8, #3
 8005f36:	d1c9      	bne.n	8005ecc <_scanf_i+0x58>
 8005f38:	6862      	ldr	r2, [r4, #4]
 8005f3a:	b90a      	cbnz	r2, 8005f40 <_scanf_i+0xcc>
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	6062      	str	r2, [r4, #4]
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	4946      	ldr	r1, [pc, #280]	; (800605c <_scanf_i+0x1e8>)
 8005f44:	6960      	ldr	r0, [r4, #20]
 8005f46:	1a89      	subs	r1, r1, r2
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	f000 f889 	bl	8006060 <__sccl>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	f04f 0800 	mov.w	r8, #0
 8005f54:	461d      	mov	r5, r3
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d039      	beq.n	8005fd0 <_scanf_i+0x15c>
 8005f5c:	6831      	ldr	r1, [r6, #0]
 8005f5e:	6960      	ldr	r0, [r4, #20]
 8005f60:	780a      	ldrb	r2, [r1, #0]
 8005f62:	5c80      	ldrb	r0, [r0, r2]
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d033      	beq.n	8005fd0 <_scanf_i+0x15c>
 8005f68:	2a30      	cmp	r2, #48	; 0x30
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	d121      	bne.n	8005fb2 <_scanf_i+0x13e>
 8005f6e:	0510      	lsls	r0, r2, #20
 8005f70:	d51f      	bpl.n	8005fb2 <_scanf_i+0x13e>
 8005f72:	f108 0801 	add.w	r8, r8, #1
 8005f76:	b117      	cbz	r7, 8005f7e <_scanf_i+0x10a>
 8005f78:	3301      	adds	r3, #1
 8005f7a:	3f01      	subs	r7, #1
 8005f7c:	60a3      	str	r3, [r4, #8]
 8005f7e:	6873      	ldr	r3, [r6, #4]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	6073      	str	r3, [r6, #4]
 8005f86:	dd1c      	ble.n	8005fc2 <_scanf_i+0x14e>
 8005f88:	6833      	ldr	r3, [r6, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	68a3      	ldr	r3, [r4, #8]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	e7df      	b.n	8005f56 <_scanf_i+0xe2>
 8005f96:	f1b8 0f02 	cmp.w	r8, #2
 8005f9a:	d1b1      	bne.n	8005f00 <_scanf_i+0x8c>
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005fa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005fa6:	d1c2      	bne.n	8005f2e <_scanf_i+0xba>
 8005fa8:	2110      	movs	r1, #16
 8005faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fae:	6061      	str	r1, [r4, #4]
 8005fb0:	e7a5      	b.n	8005efe <_scanf_i+0x8a>
 8005fb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	780b      	ldrb	r3, [r1, #0]
 8005fba:	3501      	adds	r5, #1
 8005fbc:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005fc0:	e7dd      	b.n	8005f7e <_scanf_i+0x10a>
 8005fc2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4658      	mov	r0, fp
 8005fca:	4798      	blx	r3
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d0de      	beq.n	8005f8e <_scanf_i+0x11a>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	05d9      	lsls	r1, r3, #23
 8005fd4:	d50c      	bpl.n	8005ff0 <_scanf_i+0x17c>
 8005fd6:	454d      	cmp	r5, r9
 8005fd8:	d908      	bls.n	8005fec <_scanf_i+0x178>
 8005fda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005fde:	1e6f      	subs	r7, r5, #1
 8005fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4658      	mov	r0, fp
 8005fe8:	4798      	blx	r3
 8005fea:	463d      	mov	r5, r7
 8005fec:	454d      	cmp	r5, r9
 8005fee:	d02c      	beq.n	800604a <_scanf_i+0x1d6>
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	f012 0210 	ands.w	r2, r2, #16
 8005ff6:	d11e      	bne.n	8006036 <_scanf_i+0x1c2>
 8005ff8:	702a      	strb	r2, [r5, #0]
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	4658      	mov	r0, fp
 8006000:	9e00      	ldr	r6, [sp, #0]
 8006002:	47b0      	blx	r6
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	f8da 3000 	ldr.w	r3, [sl]
 800600a:	f012 0f20 	tst.w	r2, #32
 800600e:	d008      	beq.n	8006022 <_scanf_i+0x1ae>
 8006010:	1d1a      	adds	r2, r3, #4
 8006012:	f8ca 2000 	str.w	r2, [sl]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6018      	str	r0, [r3, #0]
 800601a:	e009      	b.n	8006030 <_scanf_i+0x1bc>
 800601c:	f04f 0800 	mov.w	r8, #0
 8006020:	e7d6      	b.n	8005fd0 <_scanf_i+0x15c>
 8006022:	07d2      	lsls	r2, r2, #31
 8006024:	d5f4      	bpl.n	8006010 <_scanf_i+0x19c>
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	f8ca 2000 	str.w	r2, [sl]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	8018      	strh	r0, [r3, #0]
 8006030:	68e3      	ldr	r3, [r4, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60e3      	str	r3, [r4, #12]
 8006036:	2000      	movs	r0, #0
 8006038:	eba5 0509 	sub.w	r5, r5, r9
 800603c:	44a8      	add	r8, r5
 800603e:	6925      	ldr	r5, [r4, #16]
 8006040:	4445      	add	r5, r8
 8006042:	6125      	str	r5, [r4, #16]
 8006044:	b007      	add	sp, #28
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	2001      	movs	r0, #1
 800604c:	e7fa      	b.n	8006044 <_scanf_i+0x1d0>
 800604e:	bf00      	nop
 8006050:	08006688 	.word	0x08006688
 8006054:	080062e1 	.word	0x080062e1
 8006058:	080061c1 	.word	0x080061c1
 800605c:	08006859 	.word	0x08006859

08006060 <__sccl>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	780b      	ldrb	r3, [r1, #0]
 8006064:	1e44      	subs	r4, r0, #1
 8006066:	2b5e      	cmp	r3, #94	; 0x5e
 8006068:	bf13      	iteet	ne
 800606a:	1c4a      	addne	r2, r1, #1
 800606c:	1c8a      	addeq	r2, r1, #2
 800606e:	784b      	ldrbeq	r3, [r1, #1]
 8006070:	2100      	movne	r1, #0
 8006072:	bf08      	it	eq
 8006074:	2101      	moveq	r1, #1
 8006076:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800607a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800607e:	42a5      	cmp	r5, r4
 8006080:	d1fb      	bne.n	800607a <__sccl+0x1a>
 8006082:	b913      	cbnz	r3, 800608a <__sccl+0x2a>
 8006084:	3a01      	subs	r2, #1
 8006086:	4610      	mov	r0, r2
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	f081 0401 	eor.w	r4, r1, #1
 800608e:	4611      	mov	r1, r2
 8006090:	54c4      	strb	r4, [r0, r3]
 8006092:	780d      	ldrb	r5, [r1, #0]
 8006094:	1c4a      	adds	r2, r1, #1
 8006096:	2d2d      	cmp	r5, #45	; 0x2d
 8006098:	d006      	beq.n	80060a8 <__sccl+0x48>
 800609a:	2d5d      	cmp	r5, #93	; 0x5d
 800609c:	d0f3      	beq.n	8006086 <__sccl+0x26>
 800609e:	b90d      	cbnz	r5, 80060a4 <__sccl+0x44>
 80060a0:	460a      	mov	r2, r1
 80060a2:	e7f0      	b.n	8006086 <__sccl+0x26>
 80060a4:	462b      	mov	r3, r5
 80060a6:	e7f2      	b.n	800608e <__sccl+0x2e>
 80060a8:	784e      	ldrb	r6, [r1, #1]
 80060aa:	2e5d      	cmp	r6, #93	; 0x5d
 80060ac:	d0fa      	beq.n	80060a4 <__sccl+0x44>
 80060ae:	42b3      	cmp	r3, r6
 80060b0:	dcf8      	bgt.n	80060a4 <__sccl+0x44>
 80060b2:	3102      	adds	r1, #2
 80060b4:	3301      	adds	r3, #1
 80060b6:	429e      	cmp	r6, r3
 80060b8:	54c4      	strb	r4, [r0, r3]
 80060ba:	dcfb      	bgt.n	80060b4 <__sccl+0x54>
 80060bc:	e7e9      	b.n	8006092 <__sccl+0x32>

080060be <_strtol_l.isra.0>:
 80060be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c2:	4680      	mov	r8, r0
 80060c4:	4689      	mov	r9, r1
 80060c6:	4692      	mov	sl, r2
 80060c8:	461f      	mov	r7, r3
 80060ca:	468b      	mov	fp, r1
 80060cc:	465d      	mov	r5, fp
 80060ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060d4:	f000 f94f 	bl	8006376 <__locale_ctype_ptr_l>
 80060d8:	4420      	add	r0, r4
 80060da:	7846      	ldrb	r6, [r0, #1]
 80060dc:	f016 0608 	ands.w	r6, r6, #8
 80060e0:	d10b      	bne.n	80060fa <_strtol_l.isra.0+0x3c>
 80060e2:	2c2d      	cmp	r4, #45	; 0x2d
 80060e4:	d10b      	bne.n	80060fe <_strtol_l.isra.0+0x40>
 80060e6:	2601      	movs	r6, #1
 80060e8:	782c      	ldrb	r4, [r5, #0]
 80060ea:	f10b 0502 	add.w	r5, fp, #2
 80060ee:	b167      	cbz	r7, 800610a <_strtol_l.isra.0+0x4c>
 80060f0:	2f10      	cmp	r7, #16
 80060f2:	d114      	bne.n	800611e <_strtol_l.isra.0+0x60>
 80060f4:	2c30      	cmp	r4, #48	; 0x30
 80060f6:	d00a      	beq.n	800610e <_strtol_l.isra.0+0x50>
 80060f8:	e011      	b.n	800611e <_strtol_l.isra.0+0x60>
 80060fa:	46ab      	mov	fp, r5
 80060fc:	e7e6      	b.n	80060cc <_strtol_l.isra.0+0xe>
 80060fe:	2c2b      	cmp	r4, #43	; 0x2b
 8006100:	bf04      	itt	eq
 8006102:	782c      	ldrbeq	r4, [r5, #0]
 8006104:	f10b 0502 	addeq.w	r5, fp, #2
 8006108:	e7f1      	b.n	80060ee <_strtol_l.isra.0+0x30>
 800610a:	2c30      	cmp	r4, #48	; 0x30
 800610c:	d127      	bne.n	800615e <_strtol_l.isra.0+0xa0>
 800610e:	782b      	ldrb	r3, [r5, #0]
 8006110:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006114:	2b58      	cmp	r3, #88	; 0x58
 8006116:	d14b      	bne.n	80061b0 <_strtol_l.isra.0+0xf2>
 8006118:	2710      	movs	r7, #16
 800611a:	786c      	ldrb	r4, [r5, #1]
 800611c:	3502      	adds	r5, #2
 800611e:	2e00      	cmp	r6, #0
 8006120:	bf0c      	ite	eq
 8006122:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006126:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800612a:	2200      	movs	r2, #0
 800612c:	fbb1 fef7 	udiv	lr, r1, r7
 8006130:	4610      	mov	r0, r2
 8006132:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006136:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800613a:	2b09      	cmp	r3, #9
 800613c:	d811      	bhi.n	8006162 <_strtol_l.isra.0+0xa4>
 800613e:	461c      	mov	r4, r3
 8006140:	42a7      	cmp	r7, r4
 8006142:	dd1d      	ble.n	8006180 <_strtol_l.isra.0+0xc2>
 8006144:	1c53      	adds	r3, r2, #1
 8006146:	d007      	beq.n	8006158 <_strtol_l.isra.0+0x9a>
 8006148:	4586      	cmp	lr, r0
 800614a:	d316      	bcc.n	800617a <_strtol_l.isra.0+0xbc>
 800614c:	d101      	bne.n	8006152 <_strtol_l.isra.0+0x94>
 800614e:	45a4      	cmp	ip, r4
 8006150:	db13      	blt.n	800617a <_strtol_l.isra.0+0xbc>
 8006152:	2201      	movs	r2, #1
 8006154:	fb00 4007 	mla	r0, r0, r7, r4
 8006158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800615c:	e7eb      	b.n	8006136 <_strtol_l.isra.0+0x78>
 800615e:	270a      	movs	r7, #10
 8006160:	e7dd      	b.n	800611e <_strtol_l.isra.0+0x60>
 8006162:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006166:	2b19      	cmp	r3, #25
 8006168:	d801      	bhi.n	800616e <_strtol_l.isra.0+0xb0>
 800616a:	3c37      	subs	r4, #55	; 0x37
 800616c:	e7e8      	b.n	8006140 <_strtol_l.isra.0+0x82>
 800616e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006172:	2b19      	cmp	r3, #25
 8006174:	d804      	bhi.n	8006180 <_strtol_l.isra.0+0xc2>
 8006176:	3c57      	subs	r4, #87	; 0x57
 8006178:	e7e2      	b.n	8006140 <_strtol_l.isra.0+0x82>
 800617a:	f04f 32ff 	mov.w	r2, #4294967295
 800617e:	e7eb      	b.n	8006158 <_strtol_l.isra.0+0x9a>
 8006180:	1c53      	adds	r3, r2, #1
 8006182:	d108      	bne.n	8006196 <_strtol_l.isra.0+0xd8>
 8006184:	2322      	movs	r3, #34	; 0x22
 8006186:	4608      	mov	r0, r1
 8006188:	f8c8 3000 	str.w	r3, [r8]
 800618c:	f1ba 0f00 	cmp.w	sl, #0
 8006190:	d107      	bne.n	80061a2 <_strtol_l.isra.0+0xe4>
 8006192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	b106      	cbz	r6, 800619a <_strtol_l.isra.0+0xdc>
 8006198:	4240      	negs	r0, r0
 800619a:	f1ba 0f00 	cmp.w	sl, #0
 800619e:	d00c      	beq.n	80061ba <_strtol_l.isra.0+0xfc>
 80061a0:	b122      	cbz	r2, 80061ac <_strtol_l.isra.0+0xee>
 80061a2:	3d01      	subs	r5, #1
 80061a4:	f8ca 5000 	str.w	r5, [sl]
 80061a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	464d      	mov	r5, r9
 80061ae:	e7f9      	b.n	80061a4 <_strtol_l.isra.0+0xe6>
 80061b0:	2430      	movs	r4, #48	; 0x30
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	d1b3      	bne.n	800611e <_strtol_l.isra.0+0x60>
 80061b6:	2708      	movs	r7, #8
 80061b8:	e7b1      	b.n	800611e <_strtol_l.isra.0+0x60>
 80061ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080061c0 <_strtol_r>:
 80061c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061c2:	4c06      	ldr	r4, [pc, #24]	; (80061dc <_strtol_r+0x1c>)
 80061c4:	4d06      	ldr	r5, [pc, #24]	; (80061e0 <_strtol_r+0x20>)
 80061c6:	6824      	ldr	r4, [r4, #0]
 80061c8:	6a24      	ldr	r4, [r4, #32]
 80061ca:	2c00      	cmp	r4, #0
 80061cc:	bf08      	it	eq
 80061ce:	462c      	moveq	r4, r5
 80061d0:	9400      	str	r4, [sp, #0]
 80061d2:	f7ff ff74 	bl	80060be <_strtol_l.isra.0>
 80061d6:	b003      	add	sp, #12
 80061d8:	bd30      	pop	{r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	20000050 	.word	0x20000050
 80061e0:	200000b4 	.word	0x200000b4

080061e4 <_strtoul_l.isra.0>:
 80061e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	4680      	mov	r8, r0
 80061ea:	4689      	mov	r9, r1
 80061ec:	4692      	mov	sl, r2
 80061ee:	461e      	mov	r6, r3
 80061f0:	460f      	mov	r7, r1
 80061f2:	463d      	mov	r5, r7
 80061f4:	9808      	ldr	r0, [sp, #32]
 80061f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061fa:	f000 f8bc 	bl	8006376 <__locale_ctype_ptr_l>
 80061fe:	4420      	add	r0, r4
 8006200:	7843      	ldrb	r3, [r0, #1]
 8006202:	f013 0308 	ands.w	r3, r3, #8
 8006206:	d10a      	bne.n	800621e <_strtoul_l.isra.0+0x3a>
 8006208:	2c2d      	cmp	r4, #45	; 0x2d
 800620a:	d10a      	bne.n	8006222 <_strtoul_l.isra.0+0x3e>
 800620c:	2301      	movs	r3, #1
 800620e:	782c      	ldrb	r4, [r5, #0]
 8006210:	1cbd      	adds	r5, r7, #2
 8006212:	b15e      	cbz	r6, 800622c <_strtoul_l.isra.0+0x48>
 8006214:	2e10      	cmp	r6, #16
 8006216:	d113      	bne.n	8006240 <_strtoul_l.isra.0+0x5c>
 8006218:	2c30      	cmp	r4, #48	; 0x30
 800621a:	d009      	beq.n	8006230 <_strtoul_l.isra.0+0x4c>
 800621c:	e010      	b.n	8006240 <_strtoul_l.isra.0+0x5c>
 800621e:	462f      	mov	r7, r5
 8006220:	e7e7      	b.n	80061f2 <_strtoul_l.isra.0+0xe>
 8006222:	2c2b      	cmp	r4, #43	; 0x2b
 8006224:	bf04      	itt	eq
 8006226:	782c      	ldrbeq	r4, [r5, #0]
 8006228:	1cbd      	addeq	r5, r7, #2
 800622a:	e7f2      	b.n	8006212 <_strtoul_l.isra.0+0x2e>
 800622c:	2c30      	cmp	r4, #48	; 0x30
 800622e:	d125      	bne.n	800627c <_strtoul_l.isra.0+0x98>
 8006230:	782a      	ldrb	r2, [r5, #0]
 8006232:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006236:	2a58      	cmp	r2, #88	; 0x58
 8006238:	d14a      	bne.n	80062d0 <_strtoul_l.isra.0+0xec>
 800623a:	2610      	movs	r6, #16
 800623c:	786c      	ldrb	r4, [r5, #1]
 800623e:	3502      	adds	r5, #2
 8006240:	f04f 31ff 	mov.w	r1, #4294967295
 8006244:	fbb1 f1f6 	udiv	r1, r1, r6
 8006248:	2700      	movs	r7, #0
 800624a:	fb06 fe01 	mul.w	lr, r6, r1
 800624e:	4638      	mov	r0, r7
 8006250:	ea6f 0e0e 	mvn.w	lr, lr
 8006254:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8006258:	2a09      	cmp	r2, #9
 800625a:	d811      	bhi.n	8006280 <_strtoul_l.isra.0+0x9c>
 800625c:	4614      	mov	r4, r2
 800625e:	42a6      	cmp	r6, r4
 8006260:	dd1d      	ble.n	800629e <_strtoul_l.isra.0+0xba>
 8006262:	2f00      	cmp	r7, #0
 8006264:	db18      	blt.n	8006298 <_strtoul_l.isra.0+0xb4>
 8006266:	4281      	cmp	r1, r0
 8006268:	d316      	bcc.n	8006298 <_strtoul_l.isra.0+0xb4>
 800626a:	d101      	bne.n	8006270 <_strtoul_l.isra.0+0x8c>
 800626c:	45a6      	cmp	lr, r4
 800626e:	db13      	blt.n	8006298 <_strtoul_l.isra.0+0xb4>
 8006270:	2701      	movs	r7, #1
 8006272:	fb00 4006 	mla	r0, r0, r6, r4
 8006276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800627a:	e7eb      	b.n	8006254 <_strtoul_l.isra.0+0x70>
 800627c:	260a      	movs	r6, #10
 800627e:	e7df      	b.n	8006240 <_strtoul_l.isra.0+0x5c>
 8006280:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8006284:	2a19      	cmp	r2, #25
 8006286:	d801      	bhi.n	800628c <_strtoul_l.isra.0+0xa8>
 8006288:	3c37      	subs	r4, #55	; 0x37
 800628a:	e7e8      	b.n	800625e <_strtoul_l.isra.0+0x7a>
 800628c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8006290:	2a19      	cmp	r2, #25
 8006292:	d804      	bhi.n	800629e <_strtoul_l.isra.0+0xba>
 8006294:	3c57      	subs	r4, #87	; 0x57
 8006296:	e7e2      	b.n	800625e <_strtoul_l.isra.0+0x7a>
 8006298:	f04f 37ff 	mov.w	r7, #4294967295
 800629c:	e7eb      	b.n	8006276 <_strtoul_l.isra.0+0x92>
 800629e:	2f00      	cmp	r7, #0
 80062a0:	da09      	bge.n	80062b6 <_strtoul_l.isra.0+0xd2>
 80062a2:	2322      	movs	r3, #34	; 0x22
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	f8c8 3000 	str.w	r3, [r8]
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	d107      	bne.n	80062c2 <_strtoul_l.isra.0+0xde>
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	b103      	cbz	r3, 80062ba <_strtoul_l.isra.0+0xd6>
 80062b8:	4240      	negs	r0, r0
 80062ba:	f1ba 0f00 	cmp.w	sl, #0
 80062be:	d00c      	beq.n	80062da <_strtoul_l.isra.0+0xf6>
 80062c0:	b127      	cbz	r7, 80062cc <_strtoul_l.isra.0+0xe8>
 80062c2:	3d01      	subs	r5, #1
 80062c4:	f8ca 5000 	str.w	r5, [sl]
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	464d      	mov	r5, r9
 80062ce:	e7f9      	b.n	80062c4 <_strtoul_l.isra.0+0xe0>
 80062d0:	2430      	movs	r4, #48	; 0x30
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d1b4      	bne.n	8006240 <_strtoul_l.isra.0+0x5c>
 80062d6:	2608      	movs	r6, #8
 80062d8:	e7b2      	b.n	8006240 <_strtoul_l.isra.0+0x5c>
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080062e0 <_strtoul_r>:
 80062e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062e2:	4c06      	ldr	r4, [pc, #24]	; (80062fc <_strtoul_r+0x1c>)
 80062e4:	4d06      	ldr	r5, [pc, #24]	; (8006300 <_strtoul_r+0x20>)
 80062e6:	6824      	ldr	r4, [r4, #0]
 80062e8:	6a24      	ldr	r4, [r4, #32]
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	bf08      	it	eq
 80062ee:	462c      	moveq	r4, r5
 80062f0:	9400      	str	r4, [sp, #0]
 80062f2:	f7ff ff77 	bl	80061e4 <_strtoul_l.isra.0>
 80062f6:	b003      	add	sp, #12
 80062f8:	bd30      	pop	{r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	20000050 	.word	0x20000050
 8006300:	200000b4 	.word	0x200000b4

08006304 <__submore>:
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006308:	460c      	mov	r4, r1
 800630a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800630c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006310:	4299      	cmp	r1, r3
 8006312:	d11c      	bne.n	800634e <__submore+0x4a>
 8006314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006318:	f000 f8c4 	bl	80064a4 <_malloc_r>
 800631c:	b918      	cbnz	r0, 8006326 <__submore+0x22>
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632a:	63a3      	str	r3, [r4, #56]	; 0x38
 800632c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006330:	6360      	str	r0, [r4, #52]	; 0x34
 8006332:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006336:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800633a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800633e:	7043      	strb	r3, [r0, #1]
 8006340:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006344:	7003      	strb	r3, [r0, #0]
 8006346:	6020      	str	r0, [r4, #0]
 8006348:	2000      	movs	r0, #0
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006350:	0077      	lsls	r7, r6, #1
 8006352:	463a      	mov	r2, r7
 8006354:	f000 f904 	bl	8006560 <_realloc_r>
 8006358:	4605      	mov	r5, r0
 800635a:	2800      	cmp	r0, #0
 800635c:	d0df      	beq.n	800631e <__submore+0x1a>
 800635e:	eb00 0806 	add.w	r8, r0, r6
 8006362:	4601      	mov	r1, r0
 8006364:	4632      	mov	r2, r6
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff f826 	bl	80053b8 <memcpy>
 800636c:	f8c4 8000 	str.w	r8, [r4]
 8006370:	6365      	str	r5, [r4, #52]	; 0x34
 8006372:	63a7      	str	r7, [r4, #56]	; 0x38
 8006374:	e7e8      	b.n	8006348 <__submore+0x44>

08006376 <__locale_ctype_ptr_l>:
 8006376:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800637a:	4770      	bx	lr

0800637c <__locale_ctype_ptr>:
 800637c:	4b04      	ldr	r3, [pc, #16]	; (8006390 <__locale_ctype_ptr+0x14>)
 800637e:	4a05      	ldr	r2, [pc, #20]	; (8006394 <__locale_ctype_ptr+0x18>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf08      	it	eq
 8006388:	4613      	moveq	r3, r2
 800638a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800638e:	4770      	bx	lr
 8006390:	20000050 	.word	0x20000050
 8006394:	200000b4 	.word	0x200000b4

08006398 <__ascii_mbtowc>:
 8006398:	b082      	sub	sp, #8
 800639a:	b901      	cbnz	r1, 800639e <__ascii_mbtowc+0x6>
 800639c:	a901      	add	r1, sp, #4
 800639e:	b142      	cbz	r2, 80063b2 <__ascii_mbtowc+0x1a>
 80063a0:	b14b      	cbz	r3, 80063b6 <__ascii_mbtowc+0x1e>
 80063a2:	7813      	ldrb	r3, [r2, #0]
 80063a4:	600b      	str	r3, [r1, #0]
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	1c10      	adds	r0, r2, #0
 80063aa:	bf18      	it	ne
 80063ac:	2001      	movne	r0, #1
 80063ae:	b002      	add	sp, #8
 80063b0:	4770      	bx	lr
 80063b2:	4610      	mov	r0, r2
 80063b4:	e7fb      	b.n	80063ae <__ascii_mbtowc+0x16>
 80063b6:	f06f 0001 	mvn.w	r0, #1
 80063ba:	e7f8      	b.n	80063ae <__ascii_mbtowc+0x16>

080063bc <memchr>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	b2c9      	uxtb	r1, r1
 80063c0:	4402      	add	r2, r0
 80063c2:	4290      	cmp	r0, r2
 80063c4:	4603      	mov	r3, r0
 80063c6:	d101      	bne.n	80063cc <memchr+0x10>
 80063c8:	2000      	movs	r0, #0
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	781c      	ldrb	r4, [r3, #0]
 80063ce:	3001      	adds	r0, #1
 80063d0:	428c      	cmp	r4, r1
 80063d2:	d1f6      	bne.n	80063c2 <memchr+0x6>
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <memmove>:
 80063d8:	4288      	cmp	r0, r1
 80063da:	b510      	push	{r4, lr}
 80063dc:	eb01 0302 	add.w	r3, r1, r2
 80063e0:	d803      	bhi.n	80063ea <memmove+0x12>
 80063e2:	1e42      	subs	r2, r0, #1
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d10c      	bne.n	8006402 <memmove+0x2a>
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	4298      	cmp	r0, r3
 80063ec:	d2f9      	bcs.n	80063e2 <memmove+0xa>
 80063ee:	1881      	adds	r1, r0, r2
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	42d3      	cmn	r3, r2
 80063f4:	d100      	bne.n	80063f8 <memmove+0x20>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006400:	e7f7      	b.n	80063f2 <memmove+0x1a>
 8006402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006406:	f802 4f01 	strb.w	r4, [r2, #1]!
 800640a:	e7eb      	b.n	80063e4 <memmove+0xc>

0800640c <_free_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	d043      	beq.n	800649c <_free_r+0x90>
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f0c      	subs	r4, r1, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	18e4      	addlt	r4, r4, r3
 8006420:	f000 f8e1 	bl	80065e6 <__malloc_lock>
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <_free_r+0x94>)
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	4610      	mov	r0, r2
 800642a:	b933      	cbnz	r3, 800643a <_free_r+0x2e>
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6014      	str	r4, [r2, #0]
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006436:	f000 b8d7 	b.w	80065e8 <__malloc_unlock>
 800643a:	42a3      	cmp	r3, r4
 800643c:	d90b      	bls.n	8006456 <_free_r+0x4a>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	1862      	adds	r2, r4, r1
 8006442:	4293      	cmp	r3, r2
 8006444:	bf01      	itttt	eq
 8006446:	681a      	ldreq	r2, [r3, #0]
 8006448:	685b      	ldreq	r3, [r3, #4]
 800644a:	1852      	addeq	r2, r2, r1
 800644c:	6022      	streq	r2, [r4, #0]
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	6004      	str	r4, [r0, #0]
 8006452:	e7ed      	b.n	8006430 <_free_r+0x24>
 8006454:	4613      	mov	r3, r2
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	b10a      	cbz	r2, 800645e <_free_r+0x52>
 800645a:	42a2      	cmp	r2, r4
 800645c:	d9fa      	bls.n	8006454 <_free_r+0x48>
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	1858      	adds	r0, r3, r1
 8006462:	42a0      	cmp	r0, r4
 8006464:	d10b      	bne.n	800647e <_free_r+0x72>
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	4401      	add	r1, r0
 800646a:	1858      	adds	r0, r3, r1
 800646c:	4282      	cmp	r2, r0
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	d1de      	bne.n	8006430 <_free_r+0x24>
 8006472:	6810      	ldr	r0, [r2, #0]
 8006474:	6852      	ldr	r2, [r2, #4]
 8006476:	4401      	add	r1, r0
 8006478:	6019      	str	r1, [r3, #0]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	e7d8      	b.n	8006430 <_free_r+0x24>
 800647e:	d902      	bls.n	8006486 <_free_r+0x7a>
 8006480:	230c      	movs	r3, #12
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	e7d4      	b.n	8006430 <_free_r+0x24>
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1821      	adds	r1, r4, r0
 800648a:	428a      	cmp	r2, r1
 800648c:	bf01      	itttt	eq
 800648e:	6811      	ldreq	r1, [r2, #0]
 8006490:	6852      	ldreq	r2, [r2, #4]
 8006492:	1809      	addeq	r1, r1, r0
 8006494:	6021      	streq	r1, [r4, #0]
 8006496:	6062      	str	r2, [r4, #4]
 8006498:	605c      	str	r4, [r3, #4]
 800649a:	e7c9      	b.n	8006430 <_free_r+0x24>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	200054e8 	.word	0x200054e8

080064a4 <_malloc_r>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	1ccd      	adds	r5, r1, #3
 80064a8:	f025 0503 	bic.w	r5, r5, #3
 80064ac:	3508      	adds	r5, #8
 80064ae:	2d0c      	cmp	r5, #12
 80064b0:	bf38      	it	cc
 80064b2:	250c      	movcc	r5, #12
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	4606      	mov	r6, r0
 80064b8:	db01      	blt.n	80064be <_malloc_r+0x1a>
 80064ba:	42a9      	cmp	r1, r5
 80064bc:	d903      	bls.n	80064c6 <_malloc_r+0x22>
 80064be:	230c      	movs	r3, #12
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	2000      	movs	r0, #0
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	f000 f88e 	bl	80065e6 <__malloc_lock>
 80064ca:	4a23      	ldr	r2, [pc, #140]	; (8006558 <_malloc_r+0xb4>)
 80064cc:	6814      	ldr	r4, [r2, #0]
 80064ce:	4621      	mov	r1, r4
 80064d0:	b991      	cbnz	r1, 80064f8 <_malloc_r+0x54>
 80064d2:	4c22      	ldr	r4, [pc, #136]	; (800655c <_malloc_r+0xb8>)
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	b91b      	cbnz	r3, 80064e0 <_malloc_r+0x3c>
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f867 	bl	80065ac <_sbrk_r>
 80064de:	6020      	str	r0, [r4, #0]
 80064e0:	4629      	mov	r1, r5
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 f862 	bl	80065ac <_sbrk_r>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d126      	bne.n	800653a <_malloc_r+0x96>
 80064ec:	230c      	movs	r3, #12
 80064ee:	4630      	mov	r0, r6
 80064f0:	6033      	str	r3, [r6, #0]
 80064f2:	f000 f879 	bl	80065e8 <__malloc_unlock>
 80064f6:	e7e4      	b.n	80064c2 <_malloc_r+0x1e>
 80064f8:	680b      	ldr	r3, [r1, #0]
 80064fa:	1b5b      	subs	r3, r3, r5
 80064fc:	d41a      	bmi.n	8006534 <_malloc_r+0x90>
 80064fe:	2b0b      	cmp	r3, #11
 8006500:	d90f      	bls.n	8006522 <_malloc_r+0x7e>
 8006502:	600b      	str	r3, [r1, #0]
 8006504:	18cc      	adds	r4, r1, r3
 8006506:	50cd      	str	r5, [r1, r3]
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f86d 	bl	80065e8 <__malloc_unlock>
 800650e:	f104 000b 	add.w	r0, r4, #11
 8006512:	1d23      	adds	r3, r4, #4
 8006514:	f020 0007 	bic.w	r0, r0, #7
 8006518:	1ac3      	subs	r3, r0, r3
 800651a:	d01b      	beq.n	8006554 <_malloc_r+0xb0>
 800651c:	425a      	negs	r2, r3
 800651e:	50e2      	str	r2, [r4, r3]
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	428c      	cmp	r4, r1
 8006524:	bf0b      	itete	eq
 8006526:	6863      	ldreq	r3, [r4, #4]
 8006528:	684b      	ldrne	r3, [r1, #4]
 800652a:	6013      	streq	r3, [r2, #0]
 800652c:	6063      	strne	r3, [r4, #4]
 800652e:	bf18      	it	ne
 8006530:	460c      	movne	r4, r1
 8006532:	e7e9      	b.n	8006508 <_malloc_r+0x64>
 8006534:	460c      	mov	r4, r1
 8006536:	6849      	ldr	r1, [r1, #4]
 8006538:	e7ca      	b.n	80064d0 <_malloc_r+0x2c>
 800653a:	1cc4      	adds	r4, r0, #3
 800653c:	f024 0403 	bic.w	r4, r4, #3
 8006540:	42a0      	cmp	r0, r4
 8006542:	d005      	beq.n	8006550 <_malloc_r+0xac>
 8006544:	1a21      	subs	r1, r4, r0
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f830 	bl	80065ac <_sbrk_r>
 800654c:	3001      	adds	r0, #1
 800654e:	d0cd      	beq.n	80064ec <_malloc_r+0x48>
 8006550:	6025      	str	r5, [r4, #0]
 8006552:	e7d9      	b.n	8006508 <_malloc_r+0x64>
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	bf00      	nop
 8006558:	200054e8 	.word	0x200054e8
 800655c:	200054ec 	.word	0x200054ec

08006560 <_realloc_r>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	4607      	mov	r7, r0
 8006564:	4614      	mov	r4, r2
 8006566:	460e      	mov	r6, r1
 8006568:	b921      	cbnz	r1, 8006574 <_realloc_r+0x14>
 800656a:	4611      	mov	r1, r2
 800656c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006570:	f7ff bf98 	b.w	80064a4 <_malloc_r>
 8006574:	b922      	cbnz	r2, 8006580 <_realloc_r+0x20>
 8006576:	f7ff ff49 	bl	800640c <_free_r>
 800657a:	4625      	mov	r5, r4
 800657c:	4628      	mov	r0, r5
 800657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006580:	f000 f833 	bl	80065ea <_malloc_usable_size_r>
 8006584:	4284      	cmp	r4, r0
 8006586:	d90f      	bls.n	80065a8 <_realloc_r+0x48>
 8006588:	4621      	mov	r1, r4
 800658a:	4638      	mov	r0, r7
 800658c:	f7ff ff8a 	bl	80064a4 <_malloc_r>
 8006590:	4605      	mov	r5, r0
 8006592:	2800      	cmp	r0, #0
 8006594:	d0f2      	beq.n	800657c <_realloc_r+0x1c>
 8006596:	4631      	mov	r1, r6
 8006598:	4622      	mov	r2, r4
 800659a:	f7fe ff0d 	bl	80053b8 <memcpy>
 800659e:	4631      	mov	r1, r6
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff ff33 	bl	800640c <_free_r>
 80065a6:	e7e9      	b.n	800657c <_realloc_r+0x1c>
 80065a8:	4635      	mov	r5, r6
 80065aa:	e7e7      	b.n	800657c <_realloc_r+0x1c>

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	2300      	movs	r3, #0
 80065b0:	4c05      	ldr	r4, [pc, #20]	; (80065c8 <_sbrk_r+0x1c>)
 80065b2:	4605      	mov	r5, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	f7fe fe8e 	bl	80052d8 <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20005670 	.word	0x20005670

080065cc <__ascii_wctomb>:
 80065cc:	b149      	cbz	r1, 80065e2 <__ascii_wctomb+0x16>
 80065ce:	2aff      	cmp	r2, #255	; 0xff
 80065d0:	bf8b      	itete	hi
 80065d2:	238a      	movhi	r3, #138	; 0x8a
 80065d4:	700a      	strbls	r2, [r1, #0]
 80065d6:	6003      	strhi	r3, [r0, #0]
 80065d8:	2001      	movls	r0, #1
 80065da:	bf88      	it	hi
 80065dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80065e0:	4770      	bx	lr
 80065e2:	4608      	mov	r0, r1
 80065e4:	4770      	bx	lr

080065e6 <__malloc_lock>:
 80065e6:	4770      	bx	lr

080065e8 <__malloc_unlock>:
 80065e8:	4770      	bx	lr

080065ea <_malloc_usable_size_r>:
 80065ea:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f1a0 0004 	sub.w	r0, r0, #4
 80065f4:	bfbc      	itt	lt
 80065f6:	580b      	ldrlt	r3, [r1, r0]
 80065f8:	18c0      	addlt	r0, r0, r3
 80065fa:	4770      	bx	lr

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
