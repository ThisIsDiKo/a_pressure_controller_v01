
a_pressure_controller_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08007564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000522c  20000220  08007784  00020220  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000544c  08007784  0002544c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026294  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000531a  00000000  00000000  000464dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000091ac  00000000  00000000  0004b7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e60  00000000  00000000  000549a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012d0  00000000  00000000  00055808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a550  00000000  00000000  00056ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000054ba  00000000  00000000  00061028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000664e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030ac  00000000  00000000  00066560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000220 	.word	0x20000220
 800020c:	00000000 	.word	0x00000000
 8000210:	08006fac 	.word	0x08006fac

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000224 	.word	0x20000224
 800022c:	08006fac 	.word	0x08006fac

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_llsr>:
 8000240:	40d0      	lsrs	r0, r2
 8000242:	1c0b      	adds	r3, r1, #0
 8000244:	40d1      	lsrs	r1, r2
 8000246:	469c      	mov	ip, r3
 8000248:	3a20      	subs	r2, #32
 800024a:	40d3      	lsrs	r3, r2
 800024c:	4318      	orrs	r0, r3
 800024e:	4252      	negs	r2, r2
 8000250:	4663      	mov	r3, ip
 8000252:	4093      	lsls	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4770      	bx	lr

08000258 <__aeabi_frsub>:
 8000258:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800025c:	e002      	b.n	8000264 <__addsf3>
 800025e:	bf00      	nop

08000260 <__aeabi_fsub>:
 8000260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000264 <__addsf3>:
 8000264:	0042      	lsls	r2, r0, #1
 8000266:	bf1f      	itttt	ne
 8000268:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800026c:	ea92 0f03 	teqne	r2, r3
 8000270:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000274:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000278:	d06a      	beq.n	8000350 <__addsf3+0xec>
 800027a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000282:	bfc1      	itttt	gt
 8000284:	18d2      	addgt	r2, r2, r3
 8000286:	4041      	eorgt	r1, r0
 8000288:	4048      	eorgt	r0, r1
 800028a:	4041      	eorgt	r1, r0
 800028c:	bfb8      	it	lt
 800028e:	425b      	neglt	r3, r3
 8000290:	2b19      	cmp	r3, #25
 8000292:	bf88      	it	hi
 8000294:	4770      	bxhi	lr
 8000296:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800029a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002a2:	bf18      	it	ne
 80002a4:	4240      	negne	r0, r0
 80002a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002b2:	bf18      	it	ne
 80002b4:	4249      	negne	r1, r1
 80002b6:	ea92 0f03 	teq	r2, r3
 80002ba:	d03f      	beq.n	800033c <__addsf3+0xd8>
 80002bc:	f1a2 0201 	sub.w	r2, r2, #1
 80002c0:	fa41 fc03 	asr.w	ip, r1, r3
 80002c4:	eb10 000c 	adds.w	r0, r0, ip
 80002c8:	f1c3 0320 	rsb	r3, r3, #32
 80002cc:	fa01 f103 	lsl.w	r1, r1, r3
 80002d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	d502      	bpl.n	80002dc <__addsf3+0x78>
 80002d6:	4249      	negs	r1, r1
 80002d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002e0:	d313      	bcc.n	800030a <__addsf3+0xa6>
 80002e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e6:	d306      	bcc.n	80002f6 <__addsf3+0x92>
 80002e8:	0840      	lsrs	r0, r0, #1
 80002ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ee:	f102 0201 	add.w	r2, r2, #1
 80002f2:	2afe      	cmp	r2, #254	; 0xfe
 80002f4:	d251      	bcs.n	800039a <__addsf3+0x136>
 80002f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fe:	bf08      	it	eq
 8000300:	f020 0001 	biceq.w	r0, r0, #1
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	4770      	bx	lr
 800030a:	0049      	lsls	r1, r1, #1
 800030c:	eb40 0000 	adc.w	r0, r0, r0
 8000310:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000314:	f1a2 0201 	sub.w	r2, r2, #1
 8000318:	d1ed      	bne.n	80002f6 <__addsf3+0x92>
 800031a:	fab0 fc80 	clz	ip, r0
 800031e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000322:	ebb2 020c 	subs.w	r2, r2, ip
 8000326:	fa00 f00c 	lsl.w	r0, r0, ip
 800032a:	bfaa      	itet	ge
 800032c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000330:	4252      	neglt	r2, r2
 8000332:	4318      	orrge	r0, r3
 8000334:	bfbc      	itt	lt
 8000336:	40d0      	lsrlt	r0, r2
 8000338:	4318      	orrlt	r0, r3
 800033a:	4770      	bx	lr
 800033c:	f092 0f00 	teq	r2, #0
 8000340:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000344:	bf06      	itte	eq
 8000346:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800034a:	3201      	addeq	r2, #1
 800034c:	3b01      	subne	r3, #1
 800034e:	e7b5      	b.n	80002bc <__addsf3+0x58>
 8000350:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000354:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000358:	bf18      	it	ne
 800035a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035e:	d021      	beq.n	80003a4 <__addsf3+0x140>
 8000360:	ea92 0f03 	teq	r2, r3
 8000364:	d004      	beq.n	8000370 <__addsf3+0x10c>
 8000366:	f092 0f00 	teq	r2, #0
 800036a:	bf08      	it	eq
 800036c:	4608      	moveq	r0, r1
 800036e:	4770      	bx	lr
 8000370:	ea90 0f01 	teq	r0, r1
 8000374:	bf1c      	itt	ne
 8000376:	2000      	movne	r0, #0
 8000378:	4770      	bxne	lr
 800037a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037e:	d104      	bne.n	800038a <__addsf3+0x126>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	bf28      	it	cs
 8000384:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000388:	4770      	bx	lr
 800038a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038e:	bf3c      	itt	cc
 8000390:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bxcc	lr
 8000396:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800039a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a2:	4770      	bx	lr
 80003a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a8:	bf16      	itet	ne
 80003aa:	4608      	movne	r0, r1
 80003ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003b0:	4601      	movne	r1, r0
 80003b2:	0242      	lsls	r2, r0, #9
 80003b4:	bf06      	itte	eq
 80003b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003ba:	ea90 0f01 	teqeq	r0, r1
 80003be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003c2:	4770      	bx	lr

080003c4 <__aeabi_ui2f>:
 80003c4:	f04f 0300 	mov.w	r3, #0
 80003c8:	e004      	b.n	80003d4 <__aeabi_i2f+0x8>
 80003ca:	bf00      	nop

080003cc <__aeabi_i2f>:
 80003cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003d0:	bf48      	it	mi
 80003d2:	4240      	negmi	r0, r0
 80003d4:	ea5f 0c00 	movs.w	ip, r0
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003e0:	4601      	mov	r1, r0
 80003e2:	f04f 0000 	mov.w	r0, #0
 80003e6:	e01c      	b.n	8000422 <__aeabi_l2f+0x2a>

080003e8 <__aeabi_ul2f>:
 80003e8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ec:	bf08      	it	eq
 80003ee:	4770      	bxeq	lr
 80003f0:	f04f 0300 	mov.w	r3, #0
 80003f4:	e00a      	b.n	800040c <__aeabi_l2f+0x14>
 80003f6:	bf00      	nop

080003f8 <__aeabi_l2f>:
 80003f8:	ea50 0201 	orrs.w	r2, r0, r1
 80003fc:	bf08      	it	eq
 80003fe:	4770      	bxeq	lr
 8000400:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000404:	d502      	bpl.n	800040c <__aeabi_l2f+0x14>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	ea5f 0c01 	movs.w	ip, r1
 8000410:	bf02      	ittt	eq
 8000412:	4684      	moveq	ip, r0
 8000414:	4601      	moveq	r1, r0
 8000416:	2000      	moveq	r0, #0
 8000418:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800041c:	bf08      	it	eq
 800041e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000422:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000426:	fabc f28c 	clz	r2, ip
 800042a:	3a08      	subs	r2, #8
 800042c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000430:	db10      	blt.n	8000454 <__aeabi_l2f+0x5c>
 8000432:	fa01 fc02 	lsl.w	ip, r1, r2
 8000436:	4463      	add	r3, ip
 8000438:	fa00 fc02 	lsl.w	ip, r0, r2
 800043c:	f1c2 0220 	rsb	r2, r2, #32
 8000440:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	eb43 0002 	adc.w	r0, r3, r2
 800044c:	bf08      	it	eq
 800044e:	f020 0001 	biceq.w	r0, r0, #1
 8000452:	4770      	bx	lr
 8000454:	f102 0220 	add.w	r2, r2, #32
 8000458:	fa01 fc02 	lsl.w	ip, r1, r2
 800045c:	f1c2 0220 	rsb	r2, r2, #32
 8000460:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000464:	fa21 f202 	lsr.w	r2, r1, r2
 8000468:	eb43 0002 	adc.w	r0, r3, r2
 800046c:	bf08      	it	eq
 800046e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000472:	4770      	bx	lr

08000474 <__aeabi_fmul>:
 8000474:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000478:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800047c:	bf1e      	ittt	ne
 800047e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000482:	ea92 0f0c 	teqne	r2, ip
 8000486:	ea93 0f0c 	teqne	r3, ip
 800048a:	d06f      	beq.n	800056c <__aeabi_fmul+0xf8>
 800048c:	441a      	add	r2, r3
 800048e:	ea80 0c01 	eor.w	ip, r0, r1
 8000492:	0240      	lsls	r0, r0, #9
 8000494:	bf18      	it	ne
 8000496:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800049a:	d01e      	beq.n	80004da <__aeabi_fmul+0x66>
 800049c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a8:	fba0 3101 	umull	r3, r1, r0, r1
 80004ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b4:	bf3e      	ittt	cc
 80004b6:	0049      	lslcc	r1, r1, #1
 80004b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004bc:	005b      	lslcc	r3, r3, #1
 80004be:	ea40 0001 	orr.w	r0, r0, r1
 80004c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c6:	2afd      	cmp	r2, #253	; 0xfd
 80004c8:	d81d      	bhi.n	8000506 <__aeabi_fmul+0x92>
 80004ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004d2:	bf08      	it	eq
 80004d4:	f020 0001 	biceq.w	r0, r0, #1
 80004d8:	4770      	bx	lr
 80004da:	f090 0f00 	teq	r0, #0
 80004de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004e2:	bf08      	it	eq
 80004e4:	0249      	lsleq	r1, r1, #9
 80004e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ee:	3a7f      	subs	r2, #127	; 0x7f
 80004f0:	bfc2      	ittt	gt
 80004f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004fa:	4770      	bxgt	lr
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	3a01      	subs	r2, #1
 8000506:	dc5d      	bgt.n	80005c4 <__aeabi_fmul+0x150>
 8000508:	f112 0f19 	cmn.w	r2, #25
 800050c:	bfdc      	itt	le
 800050e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000512:	4770      	bxle	lr
 8000514:	f1c2 0200 	rsb	r2, r2, #0
 8000518:	0041      	lsls	r1, r0, #1
 800051a:	fa21 f102 	lsr.w	r1, r1, r2
 800051e:	f1c2 0220 	rsb	r2, r2, #32
 8000522:	fa00 fc02 	lsl.w	ip, r0, r2
 8000526:	ea5f 0031 	movs.w	r0, r1, rrx
 800052a:	f140 0000 	adc.w	r0, r0, #0
 800052e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000532:	bf08      	it	eq
 8000534:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000538:	4770      	bx	lr
 800053a:	f092 0f00 	teq	r2, #0
 800053e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000542:	bf02      	ittt	eq
 8000544:	0040      	lsleq	r0, r0, #1
 8000546:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800054a:	3a01      	subeq	r2, #1
 800054c:	d0f9      	beq.n	8000542 <__aeabi_fmul+0xce>
 800054e:	ea40 000c 	orr.w	r0, r0, ip
 8000552:	f093 0f00 	teq	r3, #0
 8000556:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800055a:	bf02      	ittt	eq
 800055c:	0049      	lsleq	r1, r1, #1
 800055e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000562:	3b01      	subeq	r3, #1
 8000564:	d0f9      	beq.n	800055a <__aeabi_fmul+0xe6>
 8000566:	ea41 010c 	orr.w	r1, r1, ip
 800056a:	e78f      	b.n	800048c <__aeabi_fmul+0x18>
 800056c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000570:	ea92 0f0c 	teq	r2, ip
 8000574:	bf18      	it	ne
 8000576:	ea93 0f0c 	teqne	r3, ip
 800057a:	d00a      	beq.n	8000592 <__aeabi_fmul+0x11e>
 800057c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000580:	bf18      	it	ne
 8000582:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000586:	d1d8      	bne.n	800053a <__aeabi_fmul+0xc6>
 8000588:	ea80 0001 	eor.w	r0, r0, r1
 800058c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000590:	4770      	bx	lr
 8000592:	f090 0f00 	teq	r0, #0
 8000596:	bf17      	itett	ne
 8000598:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800059c:	4608      	moveq	r0, r1
 800059e:	f091 0f00 	teqne	r1, #0
 80005a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a6:	d014      	beq.n	80005d2 <__aeabi_fmul+0x15e>
 80005a8:	ea92 0f0c 	teq	r2, ip
 80005ac:	d101      	bne.n	80005b2 <__aeabi_fmul+0x13e>
 80005ae:	0242      	lsls	r2, r0, #9
 80005b0:	d10f      	bne.n	80005d2 <__aeabi_fmul+0x15e>
 80005b2:	ea93 0f0c 	teq	r3, ip
 80005b6:	d103      	bne.n	80005c0 <__aeabi_fmul+0x14c>
 80005b8:	024b      	lsls	r3, r1, #9
 80005ba:	bf18      	it	ne
 80005bc:	4608      	movne	r0, r1
 80005be:	d108      	bne.n	80005d2 <__aeabi_fmul+0x15e>
 80005c0:	ea80 0001 	eor.w	r0, r0, r1
 80005c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d0:	4770      	bx	lr
 80005d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005da:	4770      	bx	lr

080005dc <__aeabi_fdiv>:
 80005dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e4:	bf1e      	ittt	ne
 80005e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005ea:	ea92 0f0c 	teqne	r2, ip
 80005ee:	ea93 0f0c 	teqne	r3, ip
 80005f2:	d069      	beq.n	80006c8 <__aeabi_fdiv+0xec>
 80005f4:	eba2 0203 	sub.w	r2, r2, r3
 80005f8:	ea80 0c01 	eor.w	ip, r0, r1
 80005fc:	0249      	lsls	r1, r1, #9
 80005fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000602:	d037      	beq.n	8000674 <__aeabi_fdiv+0x98>
 8000604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000608:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800060c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000614:	428b      	cmp	r3, r1
 8000616:	bf38      	it	cc
 8000618:	005b      	lslcc	r3, r3, #1
 800061a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000622:	428b      	cmp	r3, r1
 8000624:	bf24      	itt	cs
 8000626:	1a5b      	subcs	r3, r3, r1
 8000628:	ea40 000c 	orrcs.w	r0, r0, ip
 800062c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000630:	bf24      	itt	cs
 8000632:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000636:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800063a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063e:	bf24      	itt	cs
 8000640:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000644:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000648:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800064c:	bf24      	itt	cs
 800064e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000652:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	bf18      	it	ne
 800065a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065e:	d1e0      	bne.n	8000622 <__aeabi_fdiv+0x46>
 8000660:	2afd      	cmp	r2, #253	; 0xfd
 8000662:	f63f af50 	bhi.w	8000506 <__aeabi_fmul+0x92>
 8000666:	428b      	cmp	r3, r1
 8000668:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800066c:	bf08      	it	eq
 800066e:	f020 0001 	biceq.w	r0, r0, #1
 8000672:	4770      	bx	lr
 8000674:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000678:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800067c:	327f      	adds	r2, #127	; 0x7f
 800067e:	bfc2      	ittt	gt
 8000680:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000684:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000688:	4770      	bxgt	lr
 800068a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068e:	f04f 0300 	mov.w	r3, #0
 8000692:	3a01      	subs	r2, #1
 8000694:	e737      	b.n	8000506 <__aeabi_fmul+0x92>
 8000696:	f092 0f00 	teq	r2, #0
 800069a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069e:	bf02      	ittt	eq
 80006a0:	0040      	lsleq	r0, r0, #1
 80006a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a6:	3a01      	subeq	r2, #1
 80006a8:	d0f9      	beq.n	800069e <__aeabi_fdiv+0xc2>
 80006aa:	ea40 000c 	orr.w	r0, r0, ip
 80006ae:	f093 0f00 	teq	r3, #0
 80006b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	bf02      	ittt	eq
 80006b8:	0049      	lsleq	r1, r1, #1
 80006ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006be:	3b01      	subeq	r3, #1
 80006c0:	d0f9      	beq.n	80006b6 <__aeabi_fdiv+0xda>
 80006c2:	ea41 010c 	orr.w	r1, r1, ip
 80006c6:	e795      	b.n	80005f4 <__aeabi_fdiv+0x18>
 80006c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006cc:	ea92 0f0c 	teq	r2, ip
 80006d0:	d108      	bne.n	80006e4 <__aeabi_fdiv+0x108>
 80006d2:	0242      	lsls	r2, r0, #9
 80006d4:	f47f af7d 	bne.w	80005d2 <__aeabi_fmul+0x15e>
 80006d8:	ea93 0f0c 	teq	r3, ip
 80006dc:	f47f af70 	bne.w	80005c0 <__aeabi_fmul+0x14c>
 80006e0:	4608      	mov	r0, r1
 80006e2:	e776      	b.n	80005d2 <__aeabi_fmul+0x15e>
 80006e4:	ea93 0f0c 	teq	r3, ip
 80006e8:	d104      	bne.n	80006f4 <__aeabi_fdiv+0x118>
 80006ea:	024b      	lsls	r3, r1, #9
 80006ec:	f43f af4c 	beq.w	8000588 <__aeabi_fmul+0x114>
 80006f0:	4608      	mov	r0, r1
 80006f2:	e76e      	b.n	80005d2 <__aeabi_fmul+0x15e>
 80006f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f8:	bf18      	it	ne
 80006fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fe:	d1ca      	bne.n	8000696 <__aeabi_fdiv+0xba>
 8000700:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000704:	f47f af5c 	bne.w	80005c0 <__aeabi_fmul+0x14c>
 8000708:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800070c:	f47f af3c 	bne.w	8000588 <__aeabi_fmul+0x114>
 8000710:	e75f      	b.n	80005d2 <__aeabi_fmul+0x15e>
 8000712:	bf00      	nop

08000714 <__gesf2>:
 8000714:	f04f 3cff 	mov.w	ip, #4294967295
 8000718:	e006      	b.n	8000728 <__cmpsf2+0x4>
 800071a:	bf00      	nop

0800071c <__lesf2>:
 800071c:	f04f 0c01 	mov.w	ip, #1
 8000720:	e002      	b.n	8000728 <__cmpsf2+0x4>
 8000722:	bf00      	nop

08000724 <__cmpsf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	f84d cd04 	str.w	ip, [sp, #-4]!
 800072c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000730:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000738:	bf18      	it	ne
 800073a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800073e:	d011      	beq.n	8000764 <__cmpsf2+0x40>
 8000740:	b001      	add	sp, #4
 8000742:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000746:	bf18      	it	ne
 8000748:	ea90 0f01 	teqne	r0, r1
 800074c:	bf58      	it	pl
 800074e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000752:	bf88      	it	hi
 8000754:	17c8      	asrhi	r0, r1, #31
 8000756:	bf38      	it	cc
 8000758:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800075c:	bf18      	it	ne
 800075e:	f040 0001 	orrne.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	d102      	bne.n	8000770 <__cmpsf2+0x4c>
 800076a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800076e:	d105      	bne.n	800077c <__cmpsf2+0x58>
 8000770:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000774:	d1e4      	bne.n	8000740 <__cmpsf2+0x1c>
 8000776:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800077a:	d0e1      	beq.n	8000740 <__cmpsf2+0x1c>
 800077c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop

08000784 <__aeabi_cfrcmple>:
 8000784:	4684      	mov	ip, r0
 8000786:	4608      	mov	r0, r1
 8000788:	4661      	mov	r1, ip
 800078a:	e7ff      	b.n	800078c <__aeabi_cfcmpeq>

0800078c <__aeabi_cfcmpeq>:
 800078c:	b50f      	push	{r0, r1, r2, r3, lr}
 800078e:	f7ff ffc9 	bl	8000724 <__cmpsf2>
 8000792:	2800      	cmp	r0, #0
 8000794:	bf48      	it	mi
 8000796:	f110 0f00 	cmnmi.w	r0, #0
 800079a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800079c <__aeabi_fcmpeq>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff fff4 	bl	800078c <__aeabi_cfcmpeq>
 80007a4:	bf0c      	ite	eq
 80007a6:	2001      	moveq	r0, #1
 80007a8:	2000      	movne	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmplt>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffea 	bl	800078c <__aeabi_cfcmpeq>
 80007b8:	bf34      	ite	cc
 80007ba:	2001      	movcc	r0, #1
 80007bc:	2000      	movcs	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmple>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffe0 	bl	800078c <__aeabi_cfcmpeq>
 80007cc:	bf94      	ite	ls
 80007ce:	2001      	movls	r0, #1
 80007d0:	2000      	movhi	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <__aeabi_fcmpge>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff ffd2 	bl	8000784 <__aeabi_cfrcmple>
 80007e0:	bf94      	ite	ls
 80007e2:	2001      	movls	r0, #1
 80007e4:	2000      	movhi	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_fcmpgt>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffc8 	bl	8000784 <__aeabi_cfrcmple>
 80007f4:	bf34      	ite	cc
 80007f6:	2001      	movcc	r0, #1
 80007f8:	2000      	movcs	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_f2iz>:
 8000800:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000804:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000808:	d30f      	bcc.n	800082a <__aeabi_f2iz+0x2a>
 800080a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800080e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000812:	d90d      	bls.n	8000830 <__aeabi_f2iz+0x30>
 8000814:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000820:	fa23 f002 	lsr.w	r0, r3, r2
 8000824:	bf18      	it	ne
 8000826:	4240      	negne	r0, r0
 8000828:	4770      	bx	lr
 800082a:	f04f 0000 	mov.w	r0, #0
 800082e:	4770      	bx	lr
 8000830:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000834:	d101      	bne.n	800083a <__aeabi_f2iz+0x3a>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	d105      	bne.n	8000846 <__aeabi_f2iz+0x46>
 800083a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800083e:	bf08      	it	eq
 8000840:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000844:	4770      	bx	lr
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	4770      	bx	lr

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b97a 	b.w	8000b58 <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	468c      	mov	ip, r1
 8000882:	460e      	mov	r6, r1
 8000884:	4604      	mov	r4, r0
 8000886:	9d08      	ldr	r5, [sp, #32]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d150      	bne.n	800092e <__udivmoddi4+0xb2>
 800088c:	428a      	cmp	r2, r1
 800088e:	4617      	mov	r7, r2
 8000890:	d96c      	bls.n	800096c <__udivmoddi4+0xf0>
 8000892:	fab2 fe82 	clz	lr, r2
 8000896:	f1be 0f00 	cmp.w	lr, #0
 800089a:	d00b      	beq.n	80008b4 <__udivmoddi4+0x38>
 800089c:	f1ce 0c20 	rsb	ip, lr, #32
 80008a0:	fa01 f60e 	lsl.w	r6, r1, lr
 80008a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008a8:	fa02 f70e 	lsl.w	r7, r2, lr
 80008ac:	ea4c 0c06 	orr.w	ip, ip, r6
 80008b0:	fa00 f40e 	lsl.w	r4, r0, lr
 80008b4:	0c3a      	lsrs	r2, r7, #16
 80008b6:	fbbc f9f2 	udiv	r9, ip, r2
 80008ba:	b2bb      	uxth	r3, r7
 80008bc:	fb02 cc19 	mls	ip, r2, r9, ip
 80008c0:	fb09 fa03 	mul.w	sl, r9, r3
 80008c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80008c8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80008cc:	45b2      	cmp	sl, r6
 80008ce:	d90a      	bls.n	80008e6 <__udivmoddi4+0x6a>
 80008d0:	19f6      	adds	r6, r6, r7
 80008d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80008d6:	f080 8125 	bcs.w	8000b24 <__udivmoddi4+0x2a8>
 80008da:	45b2      	cmp	sl, r6
 80008dc:	f240 8122 	bls.w	8000b24 <__udivmoddi4+0x2a8>
 80008e0:	f1a9 0902 	sub.w	r9, r9, #2
 80008e4:	443e      	add	r6, r7
 80008e6:	eba6 060a 	sub.w	r6, r6, sl
 80008ea:	fbb6 f0f2 	udiv	r0, r6, r2
 80008ee:	fb02 6610 	mls	r6, r2, r0, r6
 80008f2:	fb00 f303 	mul.w	r3, r0, r3
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	d909      	bls.n	8000914 <__udivmoddi4+0x98>
 8000900:	19e4      	adds	r4, r4, r7
 8000902:	f100 32ff 	add.w	r2, r0, #4294967295
 8000906:	f080 810b 	bcs.w	8000b20 <__udivmoddi4+0x2a4>
 800090a:	42a3      	cmp	r3, r4
 800090c:	f240 8108 	bls.w	8000b20 <__udivmoddi4+0x2a4>
 8000910:	3802      	subs	r0, #2
 8000912:	443c      	add	r4, r7
 8000914:	2100      	movs	r1, #0
 8000916:	1ae4      	subs	r4, r4, r3
 8000918:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800091c:	2d00      	cmp	r5, #0
 800091e:	d062      	beq.n	80009e6 <__udivmoddi4+0x16a>
 8000920:	2300      	movs	r3, #0
 8000922:	fa24 f40e 	lsr.w	r4, r4, lr
 8000926:	602c      	str	r4, [r5, #0]
 8000928:	606b      	str	r3, [r5, #4]
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0xc6>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d055      	beq.n	80009e2 <__udivmoddi4+0x166>
 8000936:	2100      	movs	r1, #0
 8000938:	e885 0041 	stmia.w	r5, {r0, r6}
 800093c:	4608      	mov	r0, r1
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f183 	clz	r1, r3
 8000946:	2900      	cmp	r1, #0
 8000948:	f040 808f 	bne.w	8000a6a <__udivmoddi4+0x1ee>
 800094c:	42b3      	cmp	r3, r6
 800094e:	d302      	bcc.n	8000956 <__udivmoddi4+0xda>
 8000950:	4282      	cmp	r2, r0
 8000952:	f200 80fc 	bhi.w	8000b4e <__udivmoddi4+0x2d2>
 8000956:	1a84      	subs	r4, r0, r2
 8000958:	eb66 0603 	sbc.w	r6, r6, r3
 800095c:	2001      	movs	r0, #1
 800095e:	46b4      	mov	ip, r6
 8000960:	2d00      	cmp	r5, #0
 8000962:	d040      	beq.n	80009e6 <__udivmoddi4+0x16a>
 8000964:	e885 1010 	stmia.w	r5, {r4, ip}
 8000968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096c:	b912      	cbnz	r2, 8000974 <__udivmoddi4+0xf8>
 800096e:	2701      	movs	r7, #1
 8000970:	fbb7 f7f2 	udiv	r7, r7, r2
 8000974:	fab7 fe87 	clz	lr, r7
 8000978:	f1be 0f00 	cmp.w	lr, #0
 800097c:	d135      	bne.n	80009ea <__udivmoddi4+0x16e>
 800097e:	2101      	movs	r1, #1
 8000980:	1bf6      	subs	r6, r6, r7
 8000982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000986:	fa1f f887 	uxth.w	r8, r7
 800098a:	fbb6 f2fc 	udiv	r2, r6, ip
 800098e:	fb0c 6612 	mls	r6, ip, r2, r6
 8000992:	fb08 f002 	mul.w	r0, r8, r2
 8000996:	0c23      	lsrs	r3, r4, #16
 8000998:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800099c:	42b0      	cmp	r0, r6
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x134>
 80009a0:	19f6      	adds	r6, r6, r7
 80009a2:	f102 33ff 	add.w	r3, r2, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x132>
 80009a8:	42b0      	cmp	r0, r6
 80009aa:	f200 80d2 	bhi.w	8000b52 <__udivmoddi4+0x2d6>
 80009ae:	461a      	mov	r2, r3
 80009b0:	1a36      	subs	r6, r6, r0
 80009b2:	fbb6 f0fc 	udiv	r0, r6, ip
 80009b6:	fb0c 6610 	mls	r6, ip, r0, r6
 80009ba:	fb08 f800 	mul.w	r8, r8, r0
 80009be:	b2a3      	uxth	r3, r4
 80009c0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x15c>
 80009c8:	19e4      	adds	r4, r4, r7
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x15a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80b9 	bhi.w	8000b48 <__udivmoddi4+0x2cc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80009e0:	e79c      	b.n	800091c <__udivmoddi4+0xa0>
 80009e2:	4629      	mov	r1, r5
 80009e4:	4628      	mov	r0, r5
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80009ee:	f1ce 0320 	rsb	r3, lr, #32
 80009f2:	fa26 f203 	lsr.w	r2, r6, r3
 80009f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80009fa:	fbb2 f1fc 	udiv	r1, r2, ip
 80009fe:	fa1f f887 	uxth.w	r8, r7
 8000a02:	fb0c 2211 	mls	r2, ip, r1, r2
 8000a06:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a0a:	fa20 f303 	lsr.w	r3, r0, r3
 8000a0e:	fb01 f908 	mul.w	r9, r1, r8
 8000a12:	4333      	orrs	r3, r6
 8000a14:	0c1e      	lsrs	r6, r3, #16
 8000a16:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a1a:	45b1      	cmp	r9, r6
 8000a1c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x1ba>
 8000a22:	19f6      	adds	r6, r6, r7
 8000a24:	f101 32ff 	add.w	r2, r1, #4294967295
 8000a28:	f080 808c 	bcs.w	8000b44 <__udivmoddi4+0x2c8>
 8000a2c:	45b1      	cmp	r9, r6
 8000a2e:	f240 8089 	bls.w	8000b44 <__udivmoddi4+0x2c8>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443e      	add	r6, r7
 8000a36:	eba6 0609 	sub.w	r6, r6, r9
 8000a3a:	fbb6 f0fc 	udiv	r0, r6, ip
 8000a3e:	fb0c 6210 	mls	r2, ip, r0, r6
 8000a42:	fb00 f908 	mul.w	r9, r0, r8
 8000a46:	b29e      	uxth	r6, r3
 8000a48:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a4c:	45b1      	cmp	r9, r6
 8000a4e:	d907      	bls.n	8000a60 <__udivmoddi4+0x1e4>
 8000a50:	19f6      	adds	r6, r6, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	d271      	bcs.n	8000b3c <__udivmoddi4+0x2c0>
 8000a58:	45b1      	cmp	r9, r6
 8000a5a:	d96f      	bls.n	8000b3c <__udivmoddi4+0x2c0>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443e      	add	r6, r7
 8000a60:	eba6 0609 	sub.w	r6, r6, r9
 8000a64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a68:	e78f      	b.n	800098a <__udivmoddi4+0x10e>
 8000a6a:	f1c1 0720 	rsb	r7, r1, #32
 8000a6e:	fa22 f807 	lsr.w	r8, r2, r7
 8000a72:	408b      	lsls	r3, r1
 8000a74:	ea48 0303 	orr.w	r3, r8, r3
 8000a78:	fa26 f407 	lsr.w	r4, r6, r7
 8000a7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000a80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a84:	fa1f fc83 	uxth.w	ip, r3
 8000a88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a8c:	408e      	lsls	r6, r1
 8000a8e:	fa20 f807 	lsr.w	r8, r0, r7
 8000a92:	fb09 fa0c 	mul.w	sl, r9, ip
 8000a96:	ea48 0806 	orr.w	r8, r8, r6
 8000a9a:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000a9e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000aa2:	45a2      	cmp	sl, r4
 8000aa4:	fa02 f201 	lsl.w	r2, r2, r1
 8000aa8:	fa00 f601 	lsl.w	r6, r0, r1
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x244>
 8000aae:	18e4      	adds	r4, r4, r3
 8000ab0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab4:	d244      	bcs.n	8000b40 <__udivmoddi4+0x2c4>
 8000ab6:	45a2      	cmp	sl, r4
 8000ab8:	d942      	bls.n	8000b40 <__udivmoddi4+0x2c4>
 8000aba:	f1a9 0902 	sub.w	r9, r9, #2
 8000abe:	441c      	add	r4, r3
 8000ac0:	eba4 040a 	sub.w	r4, r4, sl
 8000ac4:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ac8:	fb0e 4410 	mls	r4, lr, r0, r4
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	fa1f f888 	uxth.w	r8, r8
 8000ad4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000ad8:	45a4      	cmp	ip, r4
 8000ada:	d907      	bls.n	8000aec <__udivmoddi4+0x270>
 8000adc:	18e4      	adds	r4, r4, r3
 8000ade:	f100 3eff 	add.w	lr, r0, #4294967295
 8000ae2:	d229      	bcs.n	8000b38 <__udivmoddi4+0x2bc>
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d927      	bls.n	8000b38 <__udivmoddi4+0x2bc>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	441c      	add	r4, r3
 8000aec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af0:	fba0 8902 	umull	r8, r9, r0, r2
 8000af4:	eba4 0c0c 	sub.w	ip, r4, ip
 8000af8:	45cc      	cmp	ip, r9
 8000afa:	46c2      	mov	sl, r8
 8000afc:	46ce      	mov	lr, r9
 8000afe:	d315      	bcc.n	8000b2c <__udivmoddi4+0x2b0>
 8000b00:	d012      	beq.n	8000b28 <__udivmoddi4+0x2ac>
 8000b02:	b155      	cbz	r5, 8000b1a <__udivmoddi4+0x29e>
 8000b04:	ebb6 030a 	subs.w	r3, r6, sl
 8000b08:	eb6c 060e 	sbc.w	r6, ip, lr
 8000b0c:	fa06 f707 	lsl.w	r7, r6, r7
 8000b10:	40cb      	lsrs	r3, r1
 8000b12:	431f      	orrs	r7, r3
 8000b14:	40ce      	lsrs	r6, r1
 8000b16:	602f      	str	r7, [r5, #0]
 8000b18:	606e      	str	r6, [r5, #4]
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b20:	4610      	mov	r0, r2
 8000b22:	e6f7      	b.n	8000914 <__udivmoddi4+0x98>
 8000b24:	4689      	mov	r9, r1
 8000b26:	e6de      	b.n	80008e6 <__udivmoddi4+0x6a>
 8000b28:	4546      	cmp	r6, r8
 8000b2a:	d2ea      	bcs.n	8000b02 <__udivmoddi4+0x286>
 8000b2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000b30:	eb69 0e03 	sbc.w	lr, r9, r3
 8000b34:	3801      	subs	r0, #1
 8000b36:	e7e4      	b.n	8000b02 <__udivmoddi4+0x286>
 8000b38:	4670      	mov	r0, lr
 8000b3a:	e7d7      	b.n	8000aec <__udivmoddi4+0x270>
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	e78f      	b.n	8000a60 <__udivmoddi4+0x1e4>
 8000b40:	4681      	mov	r9, r0
 8000b42:	e7bd      	b.n	8000ac0 <__udivmoddi4+0x244>
 8000b44:	4611      	mov	r1, r2
 8000b46:	e776      	b.n	8000a36 <__udivmoddi4+0x1ba>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	443c      	add	r4, r7
 8000b4c:	e744      	b.n	80009d8 <__udivmoddi4+0x15c>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0xe4>
 8000b52:	3a02      	subs	r2, #2
 8000b54:	443e      	add	r6, r7
 8000b56:	e72b      	b.n	80009b0 <__udivmoddi4+0x134>

08000b58 <__aeabi_idiv0>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_InitTick+0x3c>)
{
 8000b60:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b62:	7818      	ldrb	r0, [r3, #0]
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_InitTick+0x40>)
 8000b6e:	6810      	ldr	r0, [r2, #0]
 8000b70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b74:	f000 fbda 	bl	800132c <HAL_SYSTICK_Config>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	b958      	cbnz	r0, 8000b94 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	2d0f      	cmp	r5, #15
 8000b7e:	d809      	bhi.n	8000b94 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	4602      	mov	r2, r0
 8000b82:	4629      	mov	r1, r5
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 fb90 	bl	80012ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_InitTick+0x44>)
 8000b8e:	4620      	mov	r0, r4
 8000b90:	601d      	str	r5, [r3, #0]
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	2000004c 	.word	0x2000004c
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x20>)
{
 8000ba6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb2:	f000 fb69 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f7ff ffd0 	bl	8000b5c <HAL_InitTick>
  HAL_MspInit();
 8000bbc:	f004 ff54 	bl	8005a68 <HAL_MspInit>
}
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	bd08      	pop	{r3, pc}
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <HAL_IncTick+0x10>)
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_IncTick+0x14>)
 8000bcc:	6811      	ldr	r1, [r2, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000529c 	.word	0x2000529c
 8000bdc:	20000000 	.word	0x20000000

08000be0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <HAL_GetTick+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000529c 	.word	0x2000529c

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff6 	bl	8000be0 <HAL_GetTick>
 8000bf4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	4b04      	ldrne	r3, [pc, #16]	; (8000c0c <HAL_Delay+0x20>)
 8000bfc:	781b      	ldrbne	r3, [r3, #0]
 8000bfe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	1b40      	subs	r0, r0, r5
 8000c06:	4284      	cmp	r4, r0
 8000c08:	d8fa      	bhi.n	8000c00 <HAL_Delay+0x14>
  {
  }
}
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
 8000c0c:	20000000 	.word	0x20000000

08000c10 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_GetUID+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_GetUID+0x18>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetUID+0x1c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6083      	str	r3, [r0, #8]
 8000c22:	4770      	bx	lr
 8000c24:	1ffff7e8 	.word	0x1ffff7e8
 8000c28:	1ffff7ec 	.word	0x1ffff7ec
 8000c2c:	1ffff7f0 	.word	0x1ffff7f0

08000c30 <HAL_ADC_ConvCpltCallback>:
 8000c30:	4770      	bx	lr

08000c32 <HAL_ADC_LevelOutOfWindowCallback>:
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c34:	6803      	ldr	r3, [r0, #0]
{
 8000c36:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c38:	685a      	ldr	r2, [r3, #4]
{
 8000c3a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c3c:	0690      	lsls	r0, r2, #26
 8000c3e:	d527      	bpl.n	8000c90 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	0791      	lsls	r1, r2, #30
 8000c44:	d524      	bpl.n	8000c90 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c48:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c4a:	bf5e      	ittt	pl
 8000c4c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c4e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000c52:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c5a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c5e:	d110      	bne.n	8000c82 <HAL_ADC_IRQHandler+0x4e>
 8000c60:	68e2      	ldr	r2, [r4, #12]
 8000c62:	b972      	cbnz	r2, 8000c82 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	f022 0220 	bic.w	r2, r2, #32
 8000c6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c72:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c76:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c78:	bf5e      	ittt	pl
 8000c7a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c7c:	f043 0301 	orrpl.w	r3, r3, #1
 8000c80:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff ffd4 	bl	8000c30 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c88:	f06f 0212 	mvn.w	r2, #18
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	0610      	lsls	r0, r2, #24
 8000c96:	d530      	bpl.n	8000cfa <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	0751      	lsls	r1, r2, #29
 8000c9c:	d52d      	bpl.n	8000cfa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ca0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ca2:	bf5e      	ittt	pl
 8000ca4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000ca6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000caa:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000cb2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000cb6:	d00a      	beq.n	8000cce <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cb8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cba:	0550      	lsls	r0, r2, #21
 8000cbc:	d416      	bmi.n	8000cec <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cc4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cc8:	d110      	bne.n	8000cec <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cca:	68e2      	ldr	r2, [r4, #12]
 8000ccc:	b972      	cbnz	r2, 8000cec <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cdc:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ce0:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ce2:	bf5e      	ittt	pl
 8000ce4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000ce6:	f043 0301 	orrpl.w	r3, r3, #1
 8000cea:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cec:	4620      	mov	r0, r4
 8000cee:	f004 fae3 	bl	80052b8 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cf2:	f06f 020c 	mvn.w	r2, #12
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	0652      	lsls	r2, r2, #25
 8000d00:	d50d      	bpl.n	8000d1e <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	07db      	lsls	r3, r3, #31
 8000d06:	d50a      	bpl.n	8000d1e <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d0a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d10:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d12:	f7ff ff8e 	bl	8000c32 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d16:	f06f 0201 	mvn.w	r2, #1
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	bd10      	pop	{r4, pc}

08000d20 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000d20:	2300      	movs	r3, #0
{ 
 8000d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000d24:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d074      	beq.n	8000e18 <HAL_ADC_ConfigChannel+0xf8>
 8000d2e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d30:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000d32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d36:	2d06      	cmp	r5, #6
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000d3e:	680c      	ldr	r4, [r1, #0]
 8000d40:	d825      	bhi.n	8000d8e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d42:	442b      	add	r3, r5
 8000d44:	251f      	movs	r5, #31
 8000d46:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000d48:	3b05      	subs	r3, #5
 8000d4a:	409d      	lsls	r5, r3
 8000d4c:	ea26 0505 	bic.w	r5, r6, r5
 8000d50:	fa04 f303 	lsl.w	r3, r4, r3
 8000d54:	432b      	orrs	r3, r5
 8000d56:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d58:	2c09      	cmp	r4, #9
 8000d5a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000d5e:	688d      	ldr	r5, [r1, #8]
 8000d60:	d92f      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d62:	2607      	movs	r6, #7
 8000d64:	4423      	add	r3, r4
 8000d66:	68d1      	ldr	r1, [r2, #12]
 8000d68:	3b1e      	subs	r3, #30
 8000d6a:	409e      	lsls	r6, r3
 8000d6c:	ea21 0106 	bic.w	r1, r1, r6
 8000d70:	fa05 f303 	lsl.w	r3, r5, r3
 8000d74:	430b      	orrs	r3, r1
 8000d76:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d78:	f1a4 0310 	sub.w	r3, r4, #16
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d92b      	bls.n	8000dd8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d8e:	2d0c      	cmp	r5, #12
 8000d90:	d80b      	bhi.n	8000daa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d92:	442b      	add	r3, r5
 8000d94:	251f      	movs	r5, #31
 8000d96:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d98:	3b23      	subs	r3, #35	; 0x23
 8000d9a:	409d      	lsls	r5, r3
 8000d9c:	ea26 0505 	bic.w	r5, r6, r5
 8000da0:	fa04 f303 	lsl.w	r3, r4, r3
 8000da4:	432b      	orrs	r3, r5
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	e7d6      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000daa:	442b      	add	r3, r5
 8000dac:	251f      	movs	r5, #31
 8000dae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000db0:	3b41      	subs	r3, #65	; 0x41
 8000db2:	409d      	lsls	r5, r3
 8000db4:	ea26 0505 	bic.w	r5, r6, r5
 8000db8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dbc:	432b      	orrs	r3, r5
 8000dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dc0:	e7ca      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dc2:	2607      	movs	r6, #7
 8000dc4:	6911      	ldr	r1, [r2, #16]
 8000dc6:	4423      	add	r3, r4
 8000dc8:	409e      	lsls	r6, r3
 8000dca:	ea21 0106 	bic.w	r1, r1, r6
 8000dce:	fa05 f303 	lsl.w	r3, r5, r3
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	6113      	str	r3, [r2, #16]
 8000dd6:	e7cf      	b.n	8000d78 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_ADC_ConfigChannel+0xfc>)
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d116      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dde:	6893      	ldr	r3, [r2, #8]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	d4cd      	bmi.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000de6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dec:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dee:	d1c7      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_ADC_ConfigChannel+0x100>)
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <HAL_ADC_ConfigChannel+0x104>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	4353      	muls	r3, r2
            wait_loop_index--;
 8000dfe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0bc      	beq.n	8000d80 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000e06:	9b01      	ldr	r3, [sp, #4]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	e7f8      	b.n	8000dfe <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e7b4      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e7b5      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x68>
 8000e1c:	40012400 	.word	0x40012400
 8000e20:	2000004c 	.word	0x2000004c
 8000e24:	000f4240 	.word	0x000f4240

08000e28 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000e28:	2300      	movs	r3, #0
{
 8000e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e2c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2e:	6803      	ldr	r3, [r0, #0]
{
 8000e30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	07d2      	lsls	r2, r2, #31
 8000e36:	d502      	bpl.n	8000e3e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e38:	2000      	movs	r0, #0
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	f042 0201 	orr.w	r2, r2, #1
 8000e44:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <ADC_Enable+0x68>)
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <ADC_Enable+0x6c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000e50:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	b9c3      	cbnz	r3, 8000e88 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000e56:	f7ff fec3 	bl	8000be0 <HAL_GetTick>
 8000e5a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	689d      	ldr	r5, [r3, #8]
 8000e60:	f015 0501 	ands.w	r5, r5, #1
 8000e64:	d1e8      	bne.n	8000e38 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e66:	f7ff febb 	bl	8000be0 <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f5      	bls.n	8000e5c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000e72:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000e7e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e86:	e7d8      	b.n	8000e3a <ADC_Enable+0x12>
      wait_loop_index--;
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	e7e0      	b.n	8000e50 <ADC_Enable+0x28>
 8000e8e:	bf00      	nop
 8000e90:	2000004c 	.word	0x2000004c
 8000e94:	000f4240 	.word	0x000f4240

08000e98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e98:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e9a:	6803      	ldr	r3, [r0, #0]
{
 8000e9c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	07d2      	lsls	r2, r2, #31
 8000ea2:	d401      	bmi.n	8000ea8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000eb0:	f7ff fe96 	bl	8000be0 <HAL_GetTick>
 8000eb4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	07db      	lsls	r3, r3, #31
 8000ebc:	d5f2      	bpl.n	8000ea4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ebe:	f7ff fe8f 	bl	8000be0 <HAL_GetTick>
 8000ec2:	1b40      	subs	r0, r0, r5
 8000ec4:	2802      	cmp	r0, #2
 8000ec6:	d9f6      	bls.n	8000eb6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eda:	bd38      	pop	{r3, r4, r5, pc}

08000edc <HAL_ADC_Init>:
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000ede:	4604      	mov	r4, r0
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d071      	beq.n	8000fc8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ee6:	b923      	cbnz	r3, 8000ef2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000eea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000eee:	f004 fde3 	bl	8005ab8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff ffd0 	bl	8000e98 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000efa:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f00:	d164      	bne.n	8000fcc <HAL_ADC_Init+0xf0>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d162      	bne.n	8000fcc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f06:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f0c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	f023 0302 	bic.w	r3, r3, #2
 8000f12:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f16:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f18:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f1c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f22:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f26:	d038      	beq.n	8000f9a <HAL_ADC_Init+0xbe>
 8000f28:	2901      	cmp	r1, #1
 8000f2a:	bf14      	ite	ne
 8000f2c:	4606      	movne	r6, r0
 8000f2e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f32:	6965      	ldr	r5, [r4, #20]
 8000f34:	2d01      	cmp	r5, #1
 8000f36:	d107      	bne.n	8000f48 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d130      	bne.n	8000f9e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f3c:	69a3      	ldr	r3, [r4, #24]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000f44:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000f48:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f4a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000f4e:	685d      	ldr	r5, [r3, #4]
 8000f50:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000f54:	ea45 0506 	orr.w	r5, r5, r6
 8000f58:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f5a:	689e      	ldr	r6, [r3, #8]
 8000f5c:	4d1d      	ldr	r5, [pc, #116]	; (8000fd4 <HAL_ADC_Init+0xf8>)
 8000f5e:	ea05 0506 	and.w	r5, r5, r6
 8000f62:	ea45 0502 	orr.w	r5, r5, r2
 8000f66:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	d001      	beq.n	8000f6e <HAL_ADC_Init+0x92>
 8000f6a:	2901      	cmp	r1, #1
 8000f6c:	d120      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f6e:	6921      	ldr	r1, [r4, #16]
 8000f70:	3901      	subs	r1, #1
 8000f72:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000f74:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000f76:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000f7a:	4329      	orrs	r1, r5
 8000f7c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f7e:	6899      	ldr	r1, [r3, #8]
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_ADC_Init+0xfc>)
 8000f82:	400b      	ands	r3, r1
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d115      	bne.n	8000fb4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f9a:	460e      	mov	r6, r1
 8000f9c:	e7c9      	b.n	8000f32 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fae:	e7cb      	b.n	8000f48 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	e7df      	b.n	8000f74 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb6:	f023 0312 	bic.w	r3, r3, #18
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fd2:	e7f9      	b.n	8000fc8 <HAL_ADC_Init+0xec>
 8000fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fd8:	ff1f0efe 	.word	0xff1f0efe

08000fdc <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fdc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000fe0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000fe2:	2b01      	cmp	r3, #1
{
 8000fe4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000fe6:	d04e      	beq.n	8001086 <HAL_ADCEx_InjectedStart_IT+0xaa>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000fee:	f7ff ff1b 	bl	8000e28 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d143      	bne.n	800107e <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001006:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	4293      	cmp	r3, r2
 800100c:	d105      	bne.n	800101a <HAL_ADCEx_InjectedStart_IT+0x3e>
 800100e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001012:	6852      	ldr	r2, [r2, #4]
 8001014:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001018:	d129      	bne.n	800106e <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800101a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800101c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001020:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001022:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001024:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001028:	bf08      	it	eq
 800102a:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800102c:	2200      	movs	r2, #0
 800102e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001032:	f06f 0204 	mvn.w	r2, #4
 8001036:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103e:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	0552      	lsls	r2, r2, #21
 8001044:	d420      	bmi.n	8001088 <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800104c:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001050:	d111      	bne.n	8001076 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADCEx_InjectedStart_IT+0xb0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d105      	bne.n	8001064 <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001058:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800105c:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800105e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001062:	d108      	bne.n	8001076 <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800106e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001074:	e7d4      	b.n	8001020 <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107c:	e7f5      	b.n	800106a <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800107e:	2300      	movs	r3, #0
 8001080:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001084:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001086:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	40012800 	.word	0x40012800

08001090 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001090:	2903      	cmp	r1, #3
 8001092:	6803      	ldr	r3, [r0, #0]
 8001094:	d007      	beq.n	80010a6 <HAL_ADCEx_InjectedGetValue+0x16>
 8001096:	2904      	cmp	r1, #4
 8001098:	d003      	beq.n	80010a2 <HAL_ADCEx_InjectedGetValue+0x12>
 800109a:	2902      	cmp	r1, #2
 800109c:	d105      	bne.n	80010aa <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 800109e:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80010a0:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80010a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 80010a4:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80010a6:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 80010a8:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80010aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80010b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010b2:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80010b4:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 80010ba:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f000 80d8 	beq.w	8001272 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 80010c2:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c4:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 80010c8:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 80010cc:	684e      	ldr	r6, [r1, #4]
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010d2:	f1be 0f00 	cmp.w	lr, #0
 80010d6:	d17b      	bne.n	80011d0 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80010d8:	42be      	cmp	r6, r7
 80010da:	d173      	bne.n	80011c4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80010de:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80010e0:	0da4      	lsrs	r4, r4, #22
 80010e2:	05a4      	lsls	r4, r4, #22
 80010e4:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 80010e8:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ea:	689c      	ldr	r4, [r3, #8]
 80010ec:	07e4      	lsls	r4, r4, #31
 80010ee:	d407      	bmi.n	8001100 <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80010f0:	689c      	ldr	r4, [r3, #8]
 80010f2:	69cf      	ldr	r7, [r1, #28]
 80010f4:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80010f8:	f024 0401 	bic.w	r4, r4, #1
 80010fc:	433c      	orrs	r4, r7
 80010fe:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001100:	698c      	ldr	r4, [r1, #24]
 8001102:	2c01      	cmp	r4, #1
 8001104:	d10d      	bne.n	8001122 <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001106:	69cf      	ldr	r7, [r1, #28]
 8001108:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110c:	bf17      	itett	ne
 800110e:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001110:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001112:	f040 0020 	orrne.w	r0, r0, #32
 8001116:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001118:	bf12      	itee	ne
 800111a:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800111c:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8001120:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001122:	694f      	ldr	r7, [r1, #20]
 8001124:	2f01      	cmp	r7, #1
 8001126:	d105      	bne.n	8001134 <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001128:	2c00      	cmp	r4, #0
 800112a:	d174      	bne.n	8001216 <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800112c:	685c      	ldr	r4, [r3, #4]
 800112e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8001132:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001134:	2d09      	cmp	r5, #9
 8001136:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800113a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800113e:	d970      	bls.n	8001222 <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001140:	f04f 0c07 	mov.w	ip, #7
 8001144:	442c      	add	r4, r5
 8001146:	68df      	ldr	r7, [r3, #12]
 8001148:	3c1e      	subs	r4, #30
 800114a:	fa0c fc04 	lsl.w	ip, ip, r4
 800114e:	ea27 070c 	bic.w	r7, r7, ip
 8001152:	fa0e f404 	lsl.w	r4, lr, r4
 8001156:	433c      	orrs	r4, r7
 8001158:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800115a:	f1a5 0410 	sub.w	r4, r5, #16
 800115e:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001160:	bf98      	it	ls
 8001162:	689f      	ldrls	r7, [r3, #8]
 8001164:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8001284 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 8001168:	bf9c      	itt	ls
 800116a:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 800116e:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001170:	2e02      	cmp	r6, #2
 8001172:	68cf      	ldr	r7, [r1, #12]
 8001174:	d062      	beq.n	800123c <HAL_ADCEx_InjectedConfigChannel+0x18c>
 8001176:	2e03      	cmp	r6, #3
 8001178:	d066      	beq.n	8001248 <HAL_ADCEx_InjectedConfigChannel+0x198>
 800117a:	2e01      	cmp	r6, #1
 800117c:	d16a      	bne.n	8001254 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800117e:	6959      	ldr	r1, [r3, #20]
 8001180:	ea01 010e 	and.w	r1, r1, lr
 8001184:	4339      	orrs	r1, r7
 8001186:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001188:	2c01      	cmp	r4, #1
 800118a:	d816      	bhi.n	80011ba <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800118c:	493a      	ldr	r1, [pc, #232]	; (8001278 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 800118e:	428b      	cmp	r3, r1
 8001190:	d169      	bne.n	8001266 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001192:	6899      	ldr	r1, [r3, #8]
 8001194:	0209      	lsls	r1, r1, #8
 8001196:	d410      	bmi.n	80011ba <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001198:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800119a:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800119c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80011a0:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80011a2:	d10a      	bne.n	80011ba <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fbb3 f1f1 	udiv	r1, r3, r1
 80011ae:	230a      	movs	r3, #10
 80011b0:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 80011b2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80011b4:	9b01      	ldr	r3, [sp, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d152      	bne.n	8001260 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ba:	2300      	movs	r3, #0
 80011bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80011c0:	b003      	add	sp, #12
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c4:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011c6:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c8:	f044 0420 	orr.w	r4, r4, #32
 80011cc:	6294      	str	r4, [r2, #40]	; 0x28
 80011ce:	e78c      	b.n	80010ea <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011d0:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011d2:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 80011d6:	1bf4      	subs	r4, r6, r7
 80011d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011dc:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011de:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011e2:	d810      	bhi.n	8001206 <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011e4:	f107 3cff 	add.w	ip, r7, #4294967295
 80011e8:	fa05 f704 	lsl.w	r7, r5, r4
 80011ec:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 80011f0:	f04f 0c1f 	mov.w	ip, #31
 80011f4:	fa0c f404 	lsl.w	r4, ip, r4
 80011f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80011fc:	ea2e 0404 	bic.w	r4, lr, r4
 8001200:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001202:	639c      	str	r4, [r3, #56]	; 0x38
 8001204:	e771      	b.n	80010ea <HAL_ADCEx_InjectedConfigChannel+0x3a>
 8001206:	271f      	movs	r7, #31
 8001208:	fa07 f404 	lsl.w	r4, r7, r4
 800120c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8001210:	ea2e 0404 	bic.w	r4, lr, r4
 8001214:	e7f5      	b.n	8001202 <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001216:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001218:	f040 0020 	orr.w	r0, r0, #32
 800121c:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 800121e:	4638      	mov	r0, r7
 8001220:	e788      	b.n	8001134 <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001222:	f04f 0c07 	mov.w	ip, #7
 8001226:	691f      	ldr	r7, [r3, #16]
 8001228:	442c      	add	r4, r5
 800122a:	fa0c fc04 	lsl.w	ip, ip, r4
 800122e:	ea27 070c 	bic.w	r7, r7, ip
 8001232:	fa0e f404 	lsl.w	r4, lr, r4
 8001236:	433c      	orrs	r4, r7
 8001238:	611c      	str	r4, [r3, #16]
 800123a:	e78e      	b.n	800115a <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 800123c:	6999      	ldr	r1, [r3, #24]
 800123e:	ea01 010e 	and.w	r1, r1, lr
 8001242:	4339      	orrs	r1, r7
 8001244:	6199      	str	r1, [r3, #24]
      break;
 8001246:	e79f      	b.n	8001188 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8001248:	69d9      	ldr	r1, [r3, #28]
 800124a:	ea01 010e 	and.w	r1, r1, lr
 800124e:	4339      	orrs	r1, r7
 8001250:	61d9      	str	r1, [r3, #28]
      break;
 8001252:	e799      	b.n	8001188 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 8001254:	6a19      	ldr	r1, [r3, #32]
 8001256:	ea01 010e 	and.w	r1, r1, lr
 800125a:	4339      	orrs	r1, r7
 800125c:	6219      	str	r1, [r3, #32]
      break;
 800125e:	e793      	b.n	8001188 <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8001260:	9b01      	ldr	r3, [sp, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	e7a5      	b.n	80011b2 <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001266:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001268:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	f043 0320 	orr.w	r3, r3, #32
 800126e:	6293      	str	r3, [r2, #40]	; 0x28
 8001270:	e7a3      	b.n	80011ba <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 8001272:	2002      	movs	r0, #2
 8001274:	e7a4      	b.n	80011c0 <HAL_ADCEx_InjectedConfigChannel+0x110>
 8001276:	bf00      	nop
 8001278:	40012400 	.word	0x40012400
 800127c:	2000004c 	.word	0x2000004c
 8001280:	000f4240 	.word	0x000f4240
 8001284:	fffff000 	.word	0xfffff000

08001288 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800128a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800128e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001296:	041b      	lsls	r3, r3, #16
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80012a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012a4:	60d3      	str	r3, [r2, #12]
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b530      	push	{r4, r5, lr}
 80012b0:	68dc      	ldr	r4, [r3, #12]
 80012b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	2b04      	cmp	r3, #4
 80012be:	bf28      	it	cs
 80012c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c8:	bf98      	it	ls
 80012ca:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	fa05 f303 	lsl.w	r3, r5, r3
 80012d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d4:	bf88      	it	hi
 80012d6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4019      	ands	r1, r3
 80012da:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	fa05 f404 	lsl.w	r4, r5, r4
 80012e0:	3c01      	subs	r4, #1
 80012e2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e6:	ea42 0201 	orr.w	r2, r2, r1
 80012ea:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	bfaf      	iteee	ge
 80012f0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	4b06      	ldrlt	r3, [pc, #24]	; (8001310 <HAL_NVIC_SetPriority+0x64>)
 80012f6:	f000 000f 	andlt.w	r0, r0, #15
 80012fa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	bfa5      	ittet	ge
 80012fe:	b2d2      	uxtbge	r2, r2
 8001300:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800130a:	bd30      	pop	{r4, r5, pc}
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	e000ed14 	.word	0xe000ed14

08001314 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001314:	2301      	movs	r3, #1
 8001316:	0942      	lsrs	r2, r0, #5
 8001318:	f000 001f 	and.w	r0, r0, #31
 800131c:	fa03 f000 	lsl.w	r0, r3, r0
 8001320:	4b01      	ldr	r3, [pc, #4]	; (8001328 <HAL_NVIC_EnableIRQ+0x14>)
 8001322:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	3801      	subs	r0, #1
 800132e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001332:	d20a      	bcs.n	800134a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001358:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800135a:	2800      	cmp	r0, #0
 800135c:	d032      	beq.n	80013c4 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800135e:	6801      	ldr	r1, [r0, #0]
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_DMA_Init+0x70>)
 8001362:	2414      	movs	r4, #20
 8001364:	4299      	cmp	r1, r3
 8001366:	d825      	bhi.n	80013b4 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 800136a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800136e:	440a      	add	r2, r1
 8001370:	fbb2 f2f4 	udiv	r2, r2, r4
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001378:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 800137a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 800137c:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 800137e:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001380:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001382:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001384:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	4323      	orrs	r3, r4
 800138a:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800138c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001390:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	6944      	ldr	r4, [r0, #20]
 8001394:	4323      	orrs	r3, r4
 8001396:	6984      	ldr	r4, [r0, #24]
 8001398:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800139a:	69c4      	ldr	r4, [r0, #28]
 800139c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800139e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013a0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013a2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80013a6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013aa:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ac:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_DMA_Init+0x78>)
 80013b6:	440b      	add	r3, r1
 80013b8:	fbb3 f3f4 	udiv	r3, r3, r4
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_DMA_Init+0x7c>)
 80013c2:	e7d9      	b.n	8001378 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80013c4:	2001      	movs	r0, #1
}
 80013c6:	bd10      	pop	{r4, pc}
 80013c8:	40020407 	.word	0x40020407
 80013cc:	bffdfff8 	.word	0xbffdfff8
 80013d0:	bffdfbf8 	.word	0xbffdfbf8
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013da:	f890 4020 	ldrb.w	r4, [r0, #32]
 80013de:	2c01      	cmp	r4, #1
 80013e0:	d035      	beq.n	800144e <HAL_DMA_Start_IT+0x76>
 80013e2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80013e8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ec:	42a5      	cmp	r5, r4
 80013ee:	f04f 0600 	mov.w	r6, #0
 80013f2:	f04f 0402 	mov.w	r4, #2
 80013f6:	d128      	bne.n	800144a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fe:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001400:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001402:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001404:	f026 0601 	bic.w	r6, r6, #1
 8001408:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800140a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800140c:	40bd      	lsls	r5, r7
 800140e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001410:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001412:	6843      	ldr	r3, [r0, #4]
 8001414:	6805      	ldr	r5, [r0, #0]
 8001416:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001418:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800141a:	bf0b      	itete	eq
 800141c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800141e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001420:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001422:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001424:	b14b      	cbz	r3, 800143a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800142c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800142e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001430:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	602b      	str	r3, [r5, #0]
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	f043 030a 	orr.w	r3, r3, #10
 8001448:	e7f0      	b.n	800142c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800144a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800144e:	2002      	movs	r0, #2
}
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001454 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001454:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001458:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800145a:	2b02      	cmp	r3, #2
 800145c:	d003      	beq.n	8001466 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	2304      	movs	r3, #4
 8001460:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001462:	2001      	movs	r0, #1
 8001464:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001466:	6803      	ldr	r3, [r0, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001478:	4a29      	ldr	r2, [pc, #164]	; (8001520 <HAL_DMA_Abort_IT+0xcc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d924      	bls.n	80014c8 <HAL_DMA_Abort_IT+0x74>
 800147e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_DMA_Abort_IT+0x66>
 8001486:	3214      	adds	r2, #20
 8001488:	4293      	cmp	r3, r2
 800148a:	d018      	beq.n	80014be <HAL_DMA_Abort_IT+0x6a>
 800148c:	3214      	adds	r2, #20
 800148e:	4293      	cmp	r3, r2
 8001490:	d017      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x6e>
 8001492:	3214      	adds	r2, #20
 8001494:	4293      	cmp	r3, r2
 8001496:	bf0c      	ite	eq
 8001498:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800149c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <HAL_DMA_Abort_IT+0xd0>)
 80014a2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80014a6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80014a8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80014ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80014ae:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014b2:	b39b      	cbz	r3, 800151c <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 80014b4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	4620      	mov	r0, r4
 80014b8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ba:	2301      	movs	r3, #1
 80014bc:	e7f0      	b.n	80014a0 <HAL_DMA_Abort_IT+0x4c>
 80014be:	2310      	movs	r3, #16
 80014c0:	e7ee      	b.n	80014a0 <HAL_DMA_Abort_IT+0x4c>
 80014c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c6:	e7eb      	b.n	80014a0 <HAL_DMA_Abort_IT+0x4c>
 80014c8:	4917      	ldr	r1, [pc, #92]	; (8001528 <HAL_DMA_Abort_IT+0xd4>)
 80014ca:	428b      	cmp	r3, r1
 80014cc:	d016      	beq.n	80014fc <HAL_DMA_Abort_IT+0xa8>
 80014ce:	3114      	adds	r1, #20
 80014d0:	428b      	cmp	r3, r1
 80014d2:	d015      	beq.n	8001500 <HAL_DMA_Abort_IT+0xac>
 80014d4:	3114      	adds	r1, #20
 80014d6:	428b      	cmp	r3, r1
 80014d8:	d014      	beq.n	8001504 <HAL_DMA_Abort_IT+0xb0>
 80014da:	3114      	adds	r1, #20
 80014dc:	428b      	cmp	r3, r1
 80014de:	d014      	beq.n	800150a <HAL_DMA_Abort_IT+0xb6>
 80014e0:	3114      	adds	r1, #20
 80014e2:	428b      	cmp	r3, r1
 80014e4:	d014      	beq.n	8001510 <HAL_DMA_Abort_IT+0xbc>
 80014e6:	3114      	adds	r1, #20
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d014      	beq.n	8001516 <HAL_DMA_Abort_IT+0xc2>
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf14      	ite	ne
 80014f0:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80014f4:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_DMA_Abort_IT+0xd8>)
 80014fa:	e7d2      	b.n	80014a2 <HAL_DMA_Abort_IT+0x4e>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e7fb      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 8001500:	2310      	movs	r3, #16
 8001502:	e7f9      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 8001504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001508:	e7f6      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	e7f3      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	e7f0      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 8001516:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800151a:	e7ed      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	4618      	mov	r0, r3
}
 800151e:	bd10      	pop	{r4, pc}
 8001520:	40020080 	.word	0x40020080
 8001524:	40020400 	.word	0x40020400
 8001528:	40020008 	.word	0x40020008
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_DMA_IRQHandler>:
{
 8001530:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001532:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001534:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001536:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001538:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800153a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800153c:	4095      	lsls	r5, r2
 800153e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001540:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001542:	d055      	beq.n	80015f0 <HAL_DMA_IRQHandler+0xc0>
 8001544:	074d      	lsls	r5, r1, #29
 8001546:	d553      	bpl.n	80015f0 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800154c:	bf5e      	ittt	pl
 800154e:	681a      	ldrpl	r2, [r3, #0]
 8001550:	f022 0204 	bicpl.w	r2, r2, #4
 8001554:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001556:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_DMA_IRQHandler+0x1a8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d91f      	bls.n	800159c <HAL_DMA_IRQHandler+0x6c>
 800155c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001560:	4293      	cmp	r3, r2
 8001562:	d014      	beq.n	800158e <HAL_DMA_IRQHandler+0x5e>
 8001564:	3214      	adds	r2, #20
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_DMA_IRQHandler+0x62>
 800156a:	3214      	adds	r2, #20
 800156c:	4293      	cmp	r3, r2
 800156e:	d012      	beq.n	8001596 <HAL_DMA_IRQHandler+0x66>
 8001570:	3214      	adds	r2, #20
 8001572:	4293      	cmp	r3, r2
 8001574:	bf0c      	ite	eq
 8001576:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800157a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800157e:	4a57      	ldr	r2, [pc, #348]	; (80016dc <HAL_DMA_IRQHandler+0x1ac>)
 8001580:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001582:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a5 	beq.w	80016d4 <HAL_DMA_IRQHandler+0x1a4>
}
 800158a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800158c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800158e:	2304      	movs	r3, #4
 8001590:	e7f5      	b.n	800157e <HAL_DMA_IRQHandler+0x4e>
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	e7f3      	b.n	800157e <HAL_DMA_IRQHandler+0x4e>
 8001596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159a:	e7f0      	b.n	800157e <HAL_DMA_IRQHandler+0x4e>
 800159c:	4950      	ldr	r1, [pc, #320]	; (80016e0 <HAL_DMA_IRQHandler+0x1b0>)
 800159e:	428b      	cmp	r3, r1
 80015a0:	d016      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xa0>
 80015a2:	3114      	adds	r1, #20
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d015      	beq.n	80015d4 <HAL_DMA_IRQHandler+0xa4>
 80015a8:	3114      	adds	r1, #20
 80015aa:	428b      	cmp	r3, r1
 80015ac:	d014      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xa8>
 80015ae:	3114      	adds	r1, #20
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d014      	beq.n	80015de <HAL_DMA_IRQHandler+0xae>
 80015b4:	3114      	adds	r1, #20
 80015b6:	428b      	cmp	r3, r1
 80015b8:	d014      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xb4>
 80015ba:	3114      	adds	r1, #20
 80015bc:	428b      	cmp	r3, r1
 80015be:	d014      	beq.n	80015ea <HAL_DMA_IRQHandler+0xba>
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf14      	ite	ne
 80015c4:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80015c8:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_DMA_IRQHandler+0x1b4>)
 80015ce:	e7d7      	b.n	8001580 <HAL_DMA_IRQHandler+0x50>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e7fb      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	e7f9      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	e7f6      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
 80015de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e2:	e7f3      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
 80015e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015e8:	e7f0      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
 80015ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ee:	e7ed      	b.n	80015cc <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015f0:	2502      	movs	r5, #2
 80015f2:	4095      	lsls	r5, r2
 80015f4:	4225      	tst	r5, r4
 80015f6:	d057      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x178>
 80015f8:	078d      	lsls	r5, r1, #30
 80015fa:	d555      	bpl.n	80016a8 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	0694      	lsls	r4, r2, #26
 8001600:	d406      	bmi.n	8001610 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f022 020a 	bic.w	r2, r2, #10
 8001608:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800160a:	2201      	movs	r2, #1
 800160c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_DMA_IRQHandler+0x1a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d91e      	bls.n	8001654 <HAL_DMA_IRQHandler+0x124>
 8001616:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_DMA_IRQHandler+0x116>
 800161e:	3214      	adds	r2, #20
 8001620:	4293      	cmp	r3, r2
 8001622:	d012      	beq.n	800164a <HAL_DMA_IRQHandler+0x11a>
 8001624:	3214      	adds	r2, #20
 8001626:	4293      	cmp	r3, r2
 8001628:	d011      	beq.n	800164e <HAL_DMA_IRQHandler+0x11e>
 800162a:	3214      	adds	r2, #20
 800162c:	4293      	cmp	r3, r2
 800162e:	bf0c      	ite	eq
 8001630:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001634:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_DMA_IRQHandler+0x1ac>)
 800163a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800163c:	2300      	movs	r3, #0
 800163e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001642:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001644:	e79e      	b.n	8001584 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001646:	2302      	movs	r3, #2
 8001648:	e7f6      	b.n	8001638 <HAL_DMA_IRQHandler+0x108>
 800164a:	2320      	movs	r3, #32
 800164c:	e7f4      	b.n	8001638 <HAL_DMA_IRQHandler+0x108>
 800164e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001652:	e7f1      	b.n	8001638 <HAL_DMA_IRQHandler+0x108>
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <HAL_DMA_IRQHandler+0x1b0>)
 8001656:	428b      	cmp	r3, r1
 8001658:	d016      	beq.n	8001688 <HAL_DMA_IRQHandler+0x158>
 800165a:	3114      	adds	r1, #20
 800165c:	428b      	cmp	r3, r1
 800165e:	d015      	beq.n	800168c <HAL_DMA_IRQHandler+0x15c>
 8001660:	3114      	adds	r1, #20
 8001662:	428b      	cmp	r3, r1
 8001664:	d014      	beq.n	8001690 <HAL_DMA_IRQHandler+0x160>
 8001666:	3114      	adds	r1, #20
 8001668:	428b      	cmp	r3, r1
 800166a:	d014      	beq.n	8001696 <HAL_DMA_IRQHandler+0x166>
 800166c:	3114      	adds	r1, #20
 800166e:	428b      	cmp	r3, r1
 8001670:	d014      	beq.n	800169c <HAL_DMA_IRQHandler+0x16c>
 8001672:	3114      	adds	r1, #20
 8001674:	428b      	cmp	r3, r1
 8001676:	d014      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x172>
 8001678:	4293      	cmp	r3, r2
 800167a:	bf14      	ite	ne
 800167c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001680:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_DMA_IRQHandler+0x1b4>)
 8001686:	e7d8      	b.n	800163a <HAL_DMA_IRQHandler+0x10a>
 8001688:	2302      	movs	r3, #2
 800168a:	e7fb      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
 800168c:	2320      	movs	r3, #32
 800168e:	e7f9      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
 8001690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001694:	e7f6      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
 8001696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169a:	e7f3      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
 800169c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a0:	e7f0      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
 80016a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016a6:	e7ed      	b.n	8001684 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016a8:	2508      	movs	r5, #8
 80016aa:	4095      	lsls	r5, r2
 80016ac:	4225      	tst	r5, r4
 80016ae:	d011      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1a4>
 80016b0:	0709      	lsls	r1, r1, #28
 80016b2:	d50f      	bpl.n	80016d4 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f021 010e 	bic.w	r1, r1, #14
 80016ba:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016bc:	2301      	movs	r3, #1
 80016be:	fa03 f202 	lsl.w	r2, r3, r2
 80016c2:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016c4:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80016c6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80016ca:	2300      	movs	r3, #0
 80016cc:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80016d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80016d2:	e757      	b.n	8001584 <HAL_DMA_IRQHandler+0x54>
}
 80016d4:	bc70      	pop	{r4, r5, r6}
 80016d6:	4770      	bx	lr
 80016d8:	40020080 	.word	0x40020080
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020008 	.word	0x40020008
 80016e4:	40020000 	.word	0x40020000

080016e8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <FLASH_SetErrorCode+0x48>)
 80016ea:	68d3      	ldr	r3, [r2, #12]
 80016ec:	f013 0310 	ands.w	r3, r3, #16
 80016f0:	d005      	beq.n	80016fe <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016f2:	4910      	ldr	r1, [pc, #64]	; (8001734 <FLASH_SetErrorCode+0x4c>)
 80016f4:	69cb      	ldr	r3, [r1, #28]
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80016fc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80016fe:	68d2      	ldr	r2, [r2, #12]
 8001700:	0750      	lsls	r0, r2, #29
 8001702:	d506      	bpl.n	8001712 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001704:	490b      	ldr	r1, [pc, #44]	; (8001734 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001706:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800170a:	69ca      	ldr	r2, [r1, #28]
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <FLASH_SetErrorCode+0x48>)
 8001714:	69d1      	ldr	r1, [r2, #28]
 8001716:	07c9      	lsls	r1, r1, #31
 8001718:	d508      	bpl.n	800172c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <FLASH_SetErrorCode+0x4c>)
 800171c:	69c1      	ldr	r1, [r0, #28]
 800171e:	f041 0104 	orr.w	r1, r1, #4
 8001722:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001724:	69d1      	ldr	r1, [r2, #28]
 8001726:	f021 0101 	bic.w	r1, r1, #1
 800172a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800172c:	60d3      	str	r3, [r2, #12]
 800172e:	4770      	bx	lr
 8001730:	40022000 	.word	0x40022000
 8001734:	200052a0 	.word	0x200052a0

08001738 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_FLASH_Unlock+0x1c>)
 800173a:	6918      	ldr	r0, [r3, #16]
 800173c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001740:	d007      	beq.n	8001752 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_FLASH_Unlock+0x20>)
 8001744:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001746:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800174a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800174c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800174e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001752:	4770      	bx	lr
 8001754:	40022000 	.word	0x40022000
 8001758:	45670123 	.word	0x45670123

0800175c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_FLASH_Lock+0x10>)
}
 800175e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001760:	6913      	ldr	r3, [r2, #16]
 8001762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001766:	6113      	str	r3, [r2, #16]
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000

08001770 <FLASH_WaitForLastOperation>:
{
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fa34 	bl	8000be0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001778:	4c11      	ldr	r4, [pc, #68]	; (80017c0 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800177a:	4607      	mov	r7, r0
 800177c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800177e:	68e3      	ldr	r3, [r4, #12]
 8001780:	07d8      	lsls	r0, r3, #31
 8001782:	d412      	bmi.n	80017aa <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001784:	68e3      	ldr	r3, [r4, #12]
 8001786:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001788:	bf44      	itt	mi
 800178a:	2320      	movmi	r3, #32
 800178c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800178e:	68eb      	ldr	r3, [r5, #12]
 8001790:	06da      	lsls	r2, r3, #27
 8001792:	d406      	bmi.n	80017a2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001794:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001796:	07db      	lsls	r3, r3, #31
 8001798:	d403      	bmi.n	80017a2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800179a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800179c:	f010 0004 	ands.w	r0, r0, #4
 80017a0:	d002      	beq.n	80017a8 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80017a2:	f7ff ffa1 	bl	80016e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
}
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80017aa:	1c73      	adds	r3, r6, #1
 80017ac:	d0e7      	beq.n	800177e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017ae:	b90e      	cbnz	r6, 80017b4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80017b0:	2003      	movs	r0, #3
 80017b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017b4:	f7ff fa14 	bl	8000be0 <HAL_GetTick>
 80017b8:	1bc0      	subs	r0, r0, r7
 80017ba:	4286      	cmp	r6, r0
 80017bc:	d2df      	bcs.n	800177e <FLASH_WaitForLastOperation+0xe>
 80017be:	e7f7      	b.n	80017b0 <FLASH_WaitForLastOperation+0x40>
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_FLASH_Program>:
{
 80017c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80017c8:	4c1f      	ldr	r4, [pc, #124]	; (8001848 <HAL_FLASH_Program+0x84>)
{
 80017ca:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80017cc:	7e23      	ldrb	r3, [r4, #24]
{
 80017ce:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80017d0:	2b01      	cmp	r3, #1
{
 80017d2:	460f      	mov	r7, r1
 80017d4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80017d6:	d033      	beq.n	8001840 <HAL_FLASH_Program+0x7c>
 80017d8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017da:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80017de:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017e0:	f7ff ffc6 	bl	8001770 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80017e4:	bb40      	cbnz	r0, 8001838 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017e6:	2d01      	cmp	r5, #1
 80017e8:	d003      	beq.n	80017f2 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80017ea:	2d02      	cmp	r5, #2
 80017ec:	bf0c      	ite	eq
 80017ee:	2502      	moveq	r5, #2
 80017f0:	2504      	movne	r5, #4
 80017f2:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017f4:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017f6:	f8df b054 	ldr.w	fp, [pc, #84]	; 800184c <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80017fa:	0132      	lsls	r2, r6, #4
 80017fc:	4640      	mov	r0, r8
 80017fe:	4649      	mov	r1, r9
 8001800:	f7fe fd1e 	bl	8000240 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001804:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001808:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800180c:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8001816:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800181a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800181e:	f7ff ffa7 	bl	8001770 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001822:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 800182e:	b918      	cbnz	r0, 8001838 <HAL_FLASH_Program+0x74>
 8001830:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8001832:	b2f3      	uxtb	r3, r6
 8001834:	429d      	cmp	r5, r3
 8001836:	d8e0      	bhi.n	80017fa <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8001838:	2300      	movs	r3, #0
 800183a:	7623      	strb	r3, [r4, #24]
  return status;
 800183c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001840:	2002      	movs	r0, #2
}
 8001842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001846:	bf00      	nop
 8001848:	200052a0 	.word	0x200052a0
 800184c:	40022000 	.word	0x40022000

08001850 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001850:	2200      	movs	r2, #0
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <FLASH_MassErase.isra.0+0x1c>)
 8001854:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <FLASH_MassErase.isra.0+0x20>)
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	f042 0204 	orr.w	r2, r2, #4
 800185e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200052a0 	.word	0x200052a0
 8001870:	40022000 	.word	0x40022000

08001874 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001874:	2200      	movs	r2, #0
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <FLASH_PageErase+0x1c>)
 8001878:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <FLASH_PageErase+0x20>)
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	f042 0202 	orr.w	r2, r2, #2
 8001882:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001884:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4770      	bx	lr
 8001890:	200052a0 	.word	0x200052a0
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_FLASHEx_Erase>:
{
 8001898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800189c:	4d23      	ldr	r5, [pc, #140]	; (800192c <HAL_FLASHEx_Erase+0x94>)
{
 800189e:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80018a0:	7e2b      	ldrb	r3, [r5, #24]
{
 80018a2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d03d      	beq.n	8001924 <HAL_FLASHEx_Erase+0x8c>
 80018a8:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018aa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80018ac:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018ae:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018b0:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018b4:	d113      	bne.n	80018de <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018b6:	f7ff ff5b 	bl	8001770 <FLASH_WaitForLastOperation>
 80018ba:	b120      	cbz	r0, 80018c6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80018be:	2300      	movs	r3, #0
 80018c0:	762b      	strb	r3, [r5, #24]
  return status;
 80018c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80018c6:	f7ff ffc3 	bl	8001850 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ce:	f7ff ff4f 	bl	8001770 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_FLASHEx_Erase+0x98>)
 80018d4:	6913      	ldr	r3, [r2, #16]
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6113      	str	r3, [r2, #16]
 80018dc:	e7ef      	b.n	80018be <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018de:	f7ff ff47 	bl	8001770 <FLASH_WaitForLastOperation>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d1ea      	bne.n	80018bc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018ee:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80018f0:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80018f2:	4c0f      	ldr	r4, [pc, #60]	; (8001930 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 80018fc:	429e      	cmp	r6, r3
 80018fe:	d2de      	bcs.n	80018be <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff ffb7 	bl	8001874 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001906:	f24c 3050 	movw	r0, #50000	; 0xc350
 800190a:	f7ff ff31 	bl	8001770 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800190e:	6923      	ldr	r3, [r4, #16]
 8001910:	f023 0302 	bic.w	r3, r3, #2
 8001914:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001916:	b110      	cbz	r0, 800191e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001918:	f8c8 6000 	str.w	r6, [r8]
            break;
 800191c:	e7cf      	b.n	80018be <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800191e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001922:	e7e7      	b.n	80018f4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001924:	2002      	movs	r0, #2
}
 8001926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192a:	bf00      	nop
 800192c:	200052a0 	.word	0x200052a0
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001938:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800193a:	4616      	mov	r6, r2
 800193c:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001ae4 <HAL_GPIO_Init+0x1b0>
 8001942:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001ae8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001946:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800194c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001950:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001954:	45a0      	cmp	r8, r4
 8001956:	d17f      	bne.n	8001a58 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001958:	684d      	ldr	r5, [r1, #4]
 800195a:	2d12      	cmp	r5, #18
 800195c:	f000 80af 	beq.w	8001abe <HAL_GPIO_Init+0x18a>
 8001960:	f200 8088 	bhi.w	8001a74 <HAL_GPIO_Init+0x140>
 8001964:	2d02      	cmp	r5, #2
 8001966:	f000 80a7 	beq.w	8001ab8 <HAL_GPIO_Init+0x184>
 800196a:	d87c      	bhi.n	8001a66 <HAL_GPIO_Init+0x132>
 800196c:	2d00      	cmp	r5, #0
 800196e:	f000 808e 	beq.w	8001a8e <HAL_GPIO_Init+0x15a>
 8001972:	2d01      	cmp	r5, #1
 8001974:	f000 809e 	beq.w	8001ab4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001978:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	2cff      	cmp	r4, #255	; 0xff
 800197e:	bf93      	iteet	ls
 8001980:	4682      	movls	sl, r0
 8001982:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001986:	3d08      	subhi	r5, #8
 8001988:	f8d0 b000 	ldrls.w	fp, [r0]
 800198c:	bf92      	itee	ls
 800198e:	00b5      	lslls	r5, r6, #2
 8001990:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001994:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001996:	fa09 f805 	lsl.w	r8, r9, r5
 800199a:	ea2b 0808 	bic.w	r8, fp, r8
 800199e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a2:	bf88      	it	hi
 80019a4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	ea48 0505 	orr.w	r5, r8, r5
 80019ac:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80019b4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80019b8:	d04e      	beq.n	8001a58 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ba:	4d47      	ldr	r5, [pc, #284]	; (8001ad8 <HAL_GPIO_Init+0x1a4>)
 80019bc:	4f46      	ldr	r7, [pc, #280]	; (8001ad8 <HAL_GPIO_Init+0x1a4>)
 80019be:	69ad      	ldr	r5, [r5, #24]
 80019c0:	f026 0803 	bic.w	r8, r6, #3
 80019c4:	f045 0501 	orr.w	r5, r5, #1
 80019c8:	61bd      	str	r5, [r7, #24]
 80019ca:	69bd      	ldr	r5, [r7, #24]
 80019cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80019d0:	f005 0501 	and.w	r5, r5, #1
 80019d4:	9501      	str	r5, [sp, #4]
 80019d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019da:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80019e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80019ec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f0:	4d3a      	ldr	r5, [pc, #232]	; (8001adc <HAL_GPIO_Init+0x1a8>)
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	d068      	beq.n	8001ac8 <HAL_GPIO_Init+0x194>
 80019f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019fa:	42a8      	cmp	r0, r5
 80019fc:	d066      	beq.n	8001acc <HAL_GPIO_Init+0x198>
 80019fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a02:	42a8      	cmp	r0, r5
 8001a04:	d064      	beq.n	8001ad0 <HAL_GPIO_Init+0x19c>
 8001a06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0a:	42a8      	cmp	r0, r5
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2503      	moveq	r5, #3
 8001a10:	2504      	movne	r5, #4
 8001a12:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a16:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001a1a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001a24:	bf14      	ite	ne
 8001a26:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a28:	43a5      	biceq	r5, r4
 8001a2a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001a32:	bf14      	ite	ne
 8001a34:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a36:	43a5      	biceq	r5, r4
 8001a38:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a40:	bf14      	ite	ne
 8001a42:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a44:	43a5      	biceq	r5, r4
 8001a46:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a48:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a4a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4e:	bf14      	ite	ne
 8001a50:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a52:	ea25 0404 	biceq.w	r4, r5, r4
 8001a56:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001a58:	3601      	adds	r6, #1
 8001a5a:	2e10      	cmp	r6, #16
 8001a5c:	f47f af73 	bne.w	8001946 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001a60:	b003      	add	sp, #12
 8001a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001a66:	2d03      	cmp	r5, #3
 8001a68:	d022      	beq.n	8001ab0 <HAL_GPIO_Init+0x17c>
 8001a6a:	2d11      	cmp	r5, #17
 8001a6c:	d184      	bne.n	8001978 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a6e:	68ca      	ldr	r2, [r1, #12]
 8001a70:	3204      	adds	r2, #4
          break;
 8001a72:	e781      	b.n	8001978 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a74:	4f1a      	ldr	r7, [pc, #104]	; (8001ae0 <HAL_GPIO_Init+0x1ac>)
 8001a76:	42bd      	cmp	r5, r7
 8001a78:	d009      	beq.n	8001a8e <HAL_GPIO_Init+0x15a>
 8001a7a:	d812      	bhi.n	8001aa2 <HAL_GPIO_Init+0x16e>
 8001a7c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001aec <HAL_GPIO_Init+0x1b8>
 8001a80:	454d      	cmp	r5, r9
 8001a82:	d004      	beq.n	8001a8e <HAL_GPIO_Init+0x15a>
 8001a84:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a88:	454d      	cmp	r5, r9
 8001a8a:	f47f af75 	bne.w	8001978 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	688a      	ldr	r2, [r1, #8]
 8001a90:	b1c2      	cbz	r2, 8001ac4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a92:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001a94:	bf0c      	ite	eq
 8001a96:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a9a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	e76a      	b.n	8001978 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001aa2:	4575      	cmp	r5, lr
 8001aa4:	d0f3      	beq.n	8001a8e <HAL_GPIO_Init+0x15a>
 8001aa6:	4565      	cmp	r5, ip
 8001aa8:	d0f1      	beq.n	8001a8e <HAL_GPIO_Init+0x15a>
 8001aaa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001af0 <HAL_GPIO_Init+0x1bc>
 8001aae:	e7eb      	b.n	8001a88 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	e761      	b.n	8001978 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab4:	68ca      	ldr	r2, [r1, #12]
          break;
 8001ab6:	e75f      	b.n	8001978 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab8:	68ca      	ldr	r2, [r1, #12]
 8001aba:	3208      	adds	r2, #8
          break;
 8001abc:	e75c      	b.n	8001978 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abe:	68ca      	ldr	r2, [r1, #12]
 8001ac0:	320c      	adds	r2, #12
          break;
 8001ac2:	e759      	b.n	8001978 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	e757      	b.n	8001978 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac8:	2500      	movs	r5, #0
 8001aca:	e7a2      	b.n	8001a12 <HAL_GPIO_Init+0xde>
 8001acc:	2501      	movs	r5, #1
 8001ace:	e7a0      	b.n	8001a12 <HAL_GPIO_Init+0xde>
 8001ad0:	2502      	movs	r5, #2
 8001ad2:	e79e      	b.n	8001a12 <HAL_GPIO_Init+0xde>
 8001ad4:	40010400 	.word	0x40010400
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010800 	.word	0x40010800
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10320000 	.word	0x10320000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	10220000 	.word	0x10220000

08001af4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	6883      	ldr	r3, [r0, #8]
 8001af6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001af8:	bf14      	ite	ne
 8001afa:	2001      	movne	r0, #1
 8001afc:	2000      	moveq	r0, #0
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	b10a      	cbz	r2, 8001b06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b02:	6101      	str	r1, [r0, #16]
 8001b04:	4770      	bx	lr
 8001b06:	0409      	lsls	r1, r1, #16
 8001b08:	e7fb      	b.n	8001b02 <HAL_GPIO_WritePin+0x2>

08001b0a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001b0a:	68c3      	ldr	r3, [r0, #12]
 8001b0c:	4059      	eors	r1, r3
 8001b0e:	60c1      	str	r1, [r0, #12]
 8001b10:	4770      	bx	lr

08001b12 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b14:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b18:	6959      	ldr	r1, [r3, #20]
 8001b1a:	4201      	tst	r1, r0
 8001b1c:	d002      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b20:	f7ff fff7 	bl	8001b12 <HAL_GPIO_EXTI_Callback>
 8001b24:	bd08      	pop	{r3, pc}
 8001b26:	bf00      	nop
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2c:	6803      	ldr	r3, [r0, #0]
{
 8001b2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	07db      	lsls	r3, r3, #31
{
 8001b34:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	d414      	bmi.n	8001b62 <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	079f      	lsls	r7, r3, #30
 8001b3c:	d462      	bmi.n	8001c04 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	0719      	lsls	r1, r3, #28
 8001b42:	f100 8099 	bmi.w	8001c78 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	075a      	lsls	r2, r3, #29
 8001b4a:	f100 80c3 	bmi.w	8001cd4 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001b4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	f040 8131 	bne.w	8001db8 <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b56:	6a2a      	ldr	r2, [r5, #32]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	f040 8184 	bne.w	8001e66 <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b62:	4c90      	ldr	r4, [pc, #576]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001b64:	6863      	ldr	r3, [r4, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d007      	beq.n	8001b7e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x66>
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	03de      	lsls	r6, r3, #15
 8001b7c:	d509      	bpl.n	8001b92 <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	039c      	lsls	r4, r3, #14
 8001b82:	d5d9      	bpl.n	8001b38 <HAL_RCC_OscConfig+0xc>
 8001b84:	68ab      	ldr	r3, [r5, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1d6      	bne.n	8001b38 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
}
 8001b8c:	b002      	add	sp, #8
 8001b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	68ab      	ldr	r3, [r5, #8]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d110      	bne.n	8001bbc <HAL_RCC_OscConfig+0x90>
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f81d 	bl	8000be0 <HAL_GetTick>
 8001ba6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	0398      	lsls	r0, r3, #14
 8001bac:	d4c4      	bmi.n	8001b38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bae:	f7ff f817 	bl	8000be0 <HAL_GetTick>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	2864      	cmp	r0, #100	; 0x64
 8001bb6:	d9f7      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
 8001bba:	e7e7      	b.n	8001b8c <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	b99b      	cbnz	r3, 8001be6 <HAL_RCC_OscConfig+0xba>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bcc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bce:	f7ff f807 	bl	8000be0 <HAL_GetTick>
 8001bd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	0399      	lsls	r1, r3, #14
 8001bd8:	d5ae      	bpl.n	8001b38 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f801 	bl	8000be0 <HAL_GetTick>
 8001bde:	1b80      	subs	r0, r0, r6
 8001be0:	2864      	cmp	r0, #100	; 0x64
 8001be2:	d9f7      	bls.n	8001bd4 <HAL_RCC_OscConfig+0xa8>
 8001be4:	e7e8      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	d103      	bne.n	8001bf6 <HAL_RCC_OscConfig+0xca>
 8001bee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	e7d1      	b.n	8001b9a <HAL_RCC_OscConfig+0x6e>
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6023      	str	r3, [r4, #0]
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	e7cd      	b.n	8001ba0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c04:	4c67      	ldr	r4, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	f013 0f0c 	tst.w	r3, #12
 8001c0c:	d007      	beq.n	8001c1e <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d110      	bne.n	8001c3a <HAL_RCC_OscConfig+0x10e>
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	03da      	lsls	r2, r3, #15
 8001c1c:	d40d      	bmi.n	8001c3a <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	079b      	lsls	r3, r3, #30
 8001c22:	d502      	bpl.n	8001c2a <HAL_RCC_OscConfig+0xfe>
 8001c24:	696b      	ldr	r3, [r5, #20]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d1af      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	69aa      	ldr	r2, [r5, #24]
 8001c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	e781      	b.n	8001b3e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3a:	696a      	ldr	r2, [r5, #20]
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	b16a      	cbz	r2, 8001c5c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c44:	f7fe ffcc 	bl	8000be0 <HAL_GetTick>
 8001c48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	079f      	lsls	r7, r3, #30
 8001c4e:	d4ec      	bmi.n	8001c2a <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe ffc6 	bl	8000be0 <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9f7      	bls.n	8001c4a <HAL_RCC_OscConfig+0x11e>
 8001c5a:	e7ad      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001c5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c5e:	f7fe ffbf 	bl	8000be0 <HAL_GetTick>
 8001c62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	0798      	lsls	r0, r3, #30
 8001c68:	f57f af69 	bpl.w	8001b3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7fe ffb8 	bl	8000be0 <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d9f6      	bls.n	8001c64 <HAL_RCC_OscConfig+0x138>
 8001c76:	e79f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	69ea      	ldr	r2, [r5, #28]
 8001c7a:	4c4a      	ldr	r4, [pc, #296]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x280>)
 8001c7e:	b1da      	cbz	r2, 8001cb8 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c84:	f7fe ffac 	bl	8000be0 <HAL_GetTick>
 8001c88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c8c:	079b      	lsls	r3, r3, #30
 8001c8e:	d50d      	bpl.n	8001cac <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c90:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c94:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x284>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001c9e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_RCC_OscConfig+0x172>
 8001caa:	e74c      	b.n	8001b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7fe ff98 	bl	8000be0 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	d9e9      	bls.n	8001c8a <HAL_RCC_OscConfig+0x15e>
 8001cb6:	e77f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff91 	bl	8000be0 <HAL_GetTick>
 8001cbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cc2:	079f      	lsls	r7, r3, #30
 8001cc4:	f57f af3f 	bpl.w	8001b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7fe ff8a 	bl	8000be0 <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f6      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x194>
 8001cd2:	e771      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd4:	4c33      	ldr	r4, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001cd6:	69e3      	ldr	r3, [r4, #28]
 8001cd8:	00de      	lsls	r6, r3, #3
 8001cda:	d424      	bmi.n	8001d26 <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 8001cdc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	69e3      	ldr	r3, [r4, #28]
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61e3      	str	r3, [r4, #28]
 8001ce6:	69e3      	ldr	r3, [r4, #28]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4e30      	ldr	r6, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x288>)
 8001cf2:	6833      	ldr	r3, [r6, #0]
 8001cf4:	05d8      	lsls	r0, r3, #23
 8001cf6:	d518      	bpl.n	8001d2a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	692b      	ldr	r3, [r5, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d126      	bne.n	8001d4c <HAL_RCC_OscConfig+0x220>
 8001cfe:	6a23      	ldr	r3, [r4, #32]
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d06:	f7fe ff6b 	bl	8000be0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d0e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	6a23      	ldr	r3, [r4, #32]
 8001d12:	079a      	lsls	r2, r3, #30
 8001d14:	d53f      	bpl.n	8001d96 <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	f43f af19 	beq.w	8001b4e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	69e3      	ldr	r3, [r4, #28]
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	61e3      	str	r3, [r4, #28]
 8001d24:	e713      	b.n	8001b4e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2700      	movs	r7, #0
 8001d28:	e7e2      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	6833      	ldr	r3, [r6, #0]
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d32:	f7fe ff55 	bl	8000be0 <HAL_GetTick>
 8001d36:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	6833      	ldr	r3, [r6, #0]
 8001d3a:	05d9      	lsls	r1, r3, #23
 8001d3c:	d4dc      	bmi.n	8001cf8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7fe ff4f 	bl	8000be0 <HAL_GetTick>
 8001d42:	eba0 0008 	sub.w	r0, r0, r8
 8001d46:	2864      	cmp	r0, #100	; 0x64
 8001d48:	d9f6      	bls.n	8001d38 <HAL_RCC_OscConfig+0x20c>
 8001d4a:	e735      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	b9ab      	cbnz	r3, 8001d7a <HAL_RCC_OscConfig+0x24e>
 8001d4e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6223      	str	r3, [r4, #32]
 8001d5a:	6a23      	ldr	r3, [r4, #32]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d62:	f7fe ff3d 	bl	8000be0 <HAL_GetTick>
 8001d66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	6a23      	ldr	r3, [r4, #32]
 8001d6a:	079b      	lsls	r3, r3, #30
 8001d6c:	d5d3      	bpl.n	8001d16 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ff37 	bl	8000be0 <HAL_GetTick>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	4540      	cmp	r0, r8
 8001d76:	d9f7      	bls.n	8001d68 <HAL_RCC_OscConfig+0x23c>
 8001d78:	e71e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	6a23      	ldr	r3, [r4, #32]
 8001d7e:	d103      	bne.n	8001d88 <HAL_RCC_OscConfig+0x25c>
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6223      	str	r3, [r4, #32]
 8001d86:	e7ba      	b.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6223      	str	r3, [r4, #32]
 8001d8e:	6a23      	ldr	r3, [r4, #32]
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	e7b6      	b.n	8001d04 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe ff23 	bl	8000be0 <HAL_GetTick>
 8001d9a:	eba0 0008 	sub.w	r0, r0, r8
 8001d9e:	42b0      	cmp	r0, r6
 8001da0:	d9b6      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1e4>
 8001da2:	e709      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	42420000 	.word	0x42420000
 8001dac:	42420480 	.word	0x42420480
 8001db0:	2000004c 	.word	0x2000004c
 8001db4:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001db8:	4c4f      	ldr	r4, [pc, #316]	; (8001ef8 <HAL_RCC_OscConfig+0x3cc>)
 8001dba:	6863      	ldr	r3, [r4, #4]
 8001dbc:	03d8      	lsls	r0, r3, #15
 8001dbe:	d508      	bpl.n	8001dd2 <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001dc0:	6863      	ldr	r3, [r4, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d103      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001dcc:	03d9      	lsls	r1, r3, #15
 8001dce:	f53f aedc 	bmi.w	8001b8a <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001dd2:	2a02      	cmp	r2, #2
 8001dd4:	d133      	bne.n	8001e3e <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	00da      	lsls	r2, r3, #3
 8001dda:	d506      	bpl.n	8001dea <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001dde:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001de4:	4293      	cmp	r3, r2
 8001de6:	f47f aed0 	bne.w	8001b8a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	4e43      	ldr	r6, [pc, #268]	; (8001efc <HAL_RCC_OscConfig+0x3d0>)
 8001dee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001df0:	f7fe fef6 	bl	8000be0 <HAL_GetTick>
 8001df4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	d41a      	bmi.n	8001e32 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dfe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e04:	4313      	orrs	r3, r2
 8001e06:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001e08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e0a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e10:	4313      	orrs	r3, r2
 8001e12:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001e14:	2301      	movs	r3, #1
 8001e16:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e18:	f7fe fee2 	bl	8000be0 <HAL_GetTick>
 8001e1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	011f      	lsls	r7, r3, #4
 8001e22:	f53f ae98 	bmi.w	8001b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e26:	f7fe fedb 	bl	8000be0 <HAL_GetTick>
 8001e2a:	1b80      	subs	r0, r0, r6
 8001e2c:	2864      	cmp	r0, #100	; 0x64
 8001e2e:	d9f6      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2f2>
 8001e30:	e6c2      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e32:	f7fe fed5 	bl	8000be0 <HAL_GetTick>
 8001e36:	1bc0      	subs	r0, r0, r7
 8001e38:	2864      	cmp	r0, #100	; 0x64
 8001e3a:	d9dc      	bls.n	8001df6 <HAL_RCC_OscConfig+0x2ca>
 8001e3c:	e6bc      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 8001e3e:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001e40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <HAL_RCC_OscConfig+0x3d0>)
 8001e4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fec8 	bl	8000be0 <HAL_GetTick>
 8001e50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	0118      	lsls	r0, r3, #4
 8001e56:	f57f ae7e 	bpl.w	8001b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e5a:	f7fe fec1 	bl	8000be0 <HAL_GetTick>
 8001e5e:	1b80      	subs	r0, r0, r6
 8001e60:	2864      	cmp	r0, #100	; 0x64
 8001e62:	d9f6      	bls.n	8001e52 <HAL_RCC_OscConfig+0x326>
 8001e64:	e6a8      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e66:	4c24      	ldr	r4, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x3cc>)
 8001e68:	6863      	ldr	r3, [r4, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	f43f ae8b 	beq.w	8001b8a <HAL_RCC_OscConfig+0x5e>
 8001e74:	2300      	movs	r3, #0
 8001e76:	4e22      	ldr	r6, [pc, #136]	; (8001f00 <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	d12f      	bne.n	8001ede <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001e7e:	f7fe feaf 	bl	8000be0 <HAL_GetTick>
 8001e82:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	0199      	lsls	r1, r3, #6
 8001e88:	d423      	bmi.n	8001ed2 <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001e92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e94:	6869      	ldr	r1, [r5, #4]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e9c:	68e9      	ldr	r1, [r5, #12]
 8001e9e:	f022 020f 	bic.w	r2, r2, #15
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001ea8:	6862      	ldr	r2, [r4, #4]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fe92 	bl	8000be0 <HAL_GetTick>
 8001ebc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	019a      	lsls	r2, r3, #6
 8001ec2:	f53f ae4c 	bmi.w	8001b5e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fe8b 	bl	8000be0 <HAL_GetTick>
 8001eca:	1b40      	subs	r0, r0, r5
 8001ecc:	2802      	cmp	r0, #2
 8001ece:	d9f6      	bls.n	8001ebe <HAL_RCC_OscConfig+0x392>
 8001ed0:	e672      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fe85 	bl	8000be0 <HAL_GetTick>
 8001ed6:	1bc0      	subs	r0, r0, r7
 8001ed8:	2802      	cmp	r0, #2
 8001eda:	d9d3      	bls.n	8001e84 <HAL_RCC_OscConfig+0x358>
 8001edc:	e66c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001ede:	f7fe fe7f 	bl	8000be0 <HAL_GetTick>
 8001ee2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	019b      	lsls	r3, r3, #6
 8001ee8:	f57f ae39 	bpl.w	8001b5e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fe78 	bl	8000be0 <HAL_GetTick>
 8001ef0:	1b40      	subs	r0, r0, r5
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d9f6      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3b8>
 8001ef6:	e65f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8c>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420068 	.word	0x42420068
 8001f00:	42420060 	.word	0x42420060

08001f04 <HAL_RCC_GetSysClockFreq>:
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001f08:	466a      	mov	r2, sp
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f0c:	f103 0508 	add.w	r5, r3, #8
 8001f10:	4614      	mov	r4, r2
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	3308      	adds	r3, #8
 8001f18:	c403      	stmia	r4!, {r0, r1}
 8001f1a:	42ab      	cmp	r3, r5
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	d1f7      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc>
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	6020      	str	r0, [r4, #0]
 8001f26:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f2a:	ac04      	add	r4, sp, #16
 8001f2c:	f103 0510 	add.w	r5, r3, #16
 8001f30:	4622      	mov	r2, r4
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	3308      	adds	r3, #8
 8001f38:	c203      	stmia	r2!, {r0, r1}
 8001f3a:	42ab      	cmp	r3, r5
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	d1f7      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8001f40:	491e      	ldr	r1, [pc, #120]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f42:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f44:	f003 020c 	and.w	r2, r3, #12
 8001f48:	2a08      	cmp	r2, #8
 8001f4a:	d131      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001f50:	a808      	add	r0, sp, #32
 8001f52:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f54:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f56:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f5a:	d526      	bpl.n	8001faa <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001f5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4403      	add	r3, r0
 8001f64:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001f68:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f70:	d016      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001f72:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001f74:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001f76:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001f7a:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001f7c:	fba4 4506 	umull	r4, r5, r4, r6
 8001f80:	fba4 0103 	umull	r0, r1, r4, r3
 8001f84:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001f88:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001f8c:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	f7fe fc5b 	bl	800084c <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001f96:	2e0d      	cmp	r6, #13
 8001f98:	d100      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001f9a:	0840      	lsrs	r0, r0, #1
}
 8001f9c:	b009      	add	sp, #36	; 0x24
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001fa0:	fb03 f006 	mul.w	r0, r3, r6
 8001fa4:	fbb0 f0f2 	udiv	r0, r0, r2
 8001fa8:	e7f5      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001faa:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fac:	4370      	muls	r0, r6
 8001fae:	e7f5      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 8001fb2:	e7f3      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x98>
 8001fb4:	08006fc4 	.word	0x08006fc4
 8001fb8:	08006fd2 	.word	0x08006fd2
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	003d0900 	.word	0x003d0900

08001fc8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fc8:	4a54      	ldr	r2, [pc, #336]	; (800211c <HAL_RCC_ClockConfig+0x154>)
{
 8001fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fce:	6813      	ldr	r3, [r2, #0]
{
 8001fd0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	428b      	cmp	r3, r1
{
 8001fd8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fda:	d32a      	bcc.n	8002032 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	6829      	ldr	r1, [r5, #0]
 8001fde:	078c      	lsls	r4, r1, #30
 8001fe0:	d434      	bmi.n	800204c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	07ca      	lsls	r2, r1, #31
 8001fe4:	d447      	bmi.n	8002076 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fe6:	4a4d      	ldr	r2, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x154>)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	429e      	cmp	r6, r3
 8001ff0:	f0c0 8082 	bcc.w	80020f8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	682a      	ldr	r2, [r5, #0]
 8001ff6:	4c4a      	ldr	r4, [pc, #296]	; (8002120 <HAL_RCC_ClockConfig+0x158>)
 8001ff8:	f012 0f04 	tst.w	r2, #4
 8001ffc:	f040 8087 	bne.w	800210e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	0713      	lsls	r3, r2, #28
 8002002:	d506      	bpl.n	8002012 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002004:	6863      	ldr	r3, [r4, #4]
 8002006:	692a      	ldr	r2, [r5, #16]
 8002008:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800200c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002010:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002012:	f7ff ff77 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	4a42      	ldr	r2, [pc, #264]	; (8002124 <HAL_RCC_ClockConfig+0x15c>)
 800201a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	40d8      	lsrs	r0, r3
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x160>)
 8002024:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f7fe fd98 	bl	8000b5c <HAL_InitTick>
  return HAL_OK;
 800202c:	2000      	movs	r0, #0
}
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	f023 0307 	bic.w	r3, r3, #7
 8002038:	430b      	orrs	r3, r1
 800203a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	4299      	cmp	r1, r3
 8002044:	d0ca      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002046:	2001      	movs	r0, #1
 8002048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002052:	bf1e      	ittt	ne
 8002054:	685a      	ldrne	r2, [r3, #4]
 8002056:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800205a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205e:	bf42      	ittt	mi
 8002060:	685a      	ldrmi	r2, [r3, #4]
 8002062:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002066:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	68a8      	ldr	r0, [r5, #8]
 800206c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002070:	4302      	orrs	r2, r0
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	e7b5      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	686a      	ldr	r2, [r5, #4]
 8002078:	4c29      	ldr	r4, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x158>)
 800207a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	d11c      	bne.n	80020ba <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	d0df      	beq.n	8002046 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	4313      	orrs	r3, r2
 8002092:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002094:	f7fe fda4 	bl	8000be0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002098:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800209a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209c:	2b01      	cmp	r3, #1
 800209e:	d114      	bne.n	80020ca <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d09d      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7fe fd99 	bl	8000be0 <HAL_GetTick>
 80020ae:	1bc0      	subs	r0, r0, r7
 80020b0:	4540      	cmp	r0, r8
 80020b2:	d9f5      	bls.n	80020a0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80020b4:	2003      	movs	r0, #3
 80020b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	2a02      	cmp	r2, #2
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020c2:	e7df      	b.n	8002084 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	f013 0f02 	tst.w	r3, #2
 80020c8:	e7dc      	b.n	8002084 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d086      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fd82 	bl	8000be0 <HAL_GetTick>
 80020dc:	1bc0      	subs	r0, r0, r7
 80020de:	4540      	cmp	r0, r8
 80020e0:	d9f5      	bls.n	80020ce <HAL_RCC_ClockConfig+0x106>
 80020e2:	e7e7      	b.n	80020b4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fd7c 	bl	8000be0 <HAL_GetTick>
 80020e8:	1bc0      	subs	r0, r0, r7
 80020ea:	4540      	cmp	r0, r8
 80020ec:	d8e2      	bhi.n	80020b4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ee:	6863      	ldr	r3, [r4, #4]
 80020f0:	f013 0f0c 	tst.w	r3, #12
 80020f4:	d1f6      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x11c>
 80020f6:	e776      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	f023 0307 	bic.w	r3, r3, #7
 80020fe:	4333      	orrs	r3, r6
 8002100:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	429e      	cmp	r6, r3
 800210a:	d19c      	bne.n	8002046 <HAL_RCC_ClockConfig+0x7e>
 800210c:	e772      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	68e9      	ldr	r1, [r5, #12]
 8002112:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002116:	430b      	orrs	r3, r1
 8002118:	6063      	str	r3, [r4, #4]
 800211a:	e771      	b.n	8002000 <HAL_RCC_ClockConfig+0x38>
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08007380 	.word	0x08007380
 8002128:	2000004c 	.word	0x2000004c

0800212c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x14>)
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800213a:	6810      	ldr	r0, [r2, #0]
}    
 800213c:	40d8      	lsrs	r0, r3
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	08007390 	.word	0x08007390
 8002148:	2000004c 	.word	0x2000004c

0800214c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x14>)
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800215a:	6810      	ldr	r0, [r2, #0]
} 
 800215c:	40d8      	lsrs	r0, r3
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	08007390 	.word	0x08007390
 8002168:	2000004c 	.word	0x2000004c

0800216c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800216c:	6803      	ldr	r3, [r0, #0]
{
 800216e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002172:	f013 0f01 	tst.w	r3, #1
{
 8002176:	4605      	mov	r5, r0
 8002178:	4c57      	ldr	r4, [pc, #348]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800217a:	d01f      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217c:	69e3      	ldr	r3, [r4, #28]
 800217e:	00da      	lsls	r2, r3, #3
 8002180:	d447      	bmi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002182:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	69e3      	ldr	r3, [r4, #28]
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	61e3      	str	r3, [r4, #28]
 800218c:	69e3      	ldr	r3, [r4, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4e51      	ldr	r6, [pc, #324]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002198:	6833      	ldr	r3, [r6, #0]
 800219a:	05db      	lsls	r3, r3, #23
 800219c:	d53b      	bpl.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800219e:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021a4:	d14b      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021a6:	6a23      	ldr	r3, [r4, #32]
 80021a8:	686a      	ldr	r2, [r5, #4]
 80021aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ae:	4313      	orrs	r3, r2
 80021b0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b2:	b11f      	cbz	r7, 80021bc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	69e3      	ldr	r3, [r4, #28]
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021bc:	682a      	ldr	r2, [r5, #0]
 80021be:	0793      	lsls	r3, r2, #30
 80021c0:	d505      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c2:	6863      	ldr	r3, [r4, #4]
 80021c4:	68a9      	ldr	r1, [r5, #8]
 80021c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021ca:	430b      	orrs	r3, r1
 80021cc:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80021ce:	0757      	lsls	r7, r2, #29
 80021d0:	d505      	bpl.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80021d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021d4:	68e9      	ldr	r1, [r5, #12]
 80021d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80021da:	430b      	orrs	r3, r1
 80021dc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80021de:	0716      	lsls	r6, r2, #28
 80021e0:	d505      	bpl.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80021e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021e4:	692a      	ldr	r2, [r5, #16]
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	4313      	orrs	r3, r2
 80021ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80021ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f0:	0398      	lsls	r0, r3, #14
 80021f2:	d466      	bmi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80021f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f6:	0359      	lsls	r1, r3, #13
 80021f8:	d463      	bmi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021fa:	6828      	ldr	r0, [r5, #0]
 80021fc:	f010 0010 	ands.w	r0, r0, #16
 8002200:	d01a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002202:	6863      	ldr	r3, [r4, #4]
 8002204:	69ea      	ldr	r2, [r5, #28]
 8002206:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800220a:	4313      	orrs	r3, r2
 800220c:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800220e:	2000      	movs	r0, #0
 8002210:	e012      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2700      	movs	r7, #0
 8002214:	e7bf      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	6833      	ldr	r3, [r6, #0]
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800221e:	f7fe fcdf 	bl	8000be0 <HAL_GetTick>
 8002222:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	6833      	ldr	r3, [r6, #0]
 8002226:	05d8      	lsls	r0, r3, #23
 8002228:	d4b9      	bmi.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe fcd9 	bl	8000be0 <HAL_GetTick>
 800222e:	eba0 0008 	sub.w	r0, r0, r8
 8002232:	2864      	cmp	r0, #100	; 0x64
 8002234:	d9f6      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
}
 8002238:	b002      	add	sp, #8
 800223a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800223e:	686a      	ldr	r2, [r5, #4]
 8002240:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002244:	4293      	cmp	r3, r2
 8002246:	d0ae      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	2001      	movs	r0, #1
 800224a:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800224c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800224e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002250:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002256:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002258:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800225a:	07d9      	lsls	r1, r3, #31
 800225c:	d5a3      	bpl.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800225e:	f7fe fcbf 	bl	8000be0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	6a23      	ldr	r3, [r4, #32]
 800226a:	079a      	lsls	r2, r3, #30
 800226c:	d49b      	bmi.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fcb7 	bl	8000be0 <HAL_GetTick>
 8002272:	1b80      	subs	r0, r0, r6
 8002274:	4540      	cmp	r0, r8
 8002276:	d9f7      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002278:	e7dd      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	69a9      	ldr	r1, [r5, #24]
 800227e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002282:	d004      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002284:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002286:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 800228a:	428a      	cmp	r2, r1
 800228c:	d122      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800228e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002294:	430b      	orrs	r3, r1
 8002296:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002298:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800229a:	696a      	ldr	r2, [r5, #20]
 800229c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022a0:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 80022a2:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80022a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022aa:	f7fe fc99 	bl	8000be0 <HAL_GetTick>
 80022ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	009a      	lsls	r2, r3, #2
 80022b4:	d4a1      	bmi.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022b6:	f7fe fc93 	bl	8000be0 <HAL_GetTick>
 80022ba:	1b80      	subs	r0, r0, r6
 80022bc:	2864      	cmp	r0, #100	; 0x64
 80022be:	d9f7      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80022c0:	e7b9      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	d5d8      	bpl.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80022c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022ca:	696a      	ldr	r2, [r5, #20]
 80022cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d092      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e7af      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420440 	.word	0x42420440
 80022e4:	42420070 	.word	0x42420070

080022e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022e8:	6803      	ldr	r3, [r0, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022fa:	2320      	movs	r3, #32
 80022fc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002300:	4770      	bx	lr
	...

08002304 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002308:	6805      	ldr	r5, [r0, #0]
 800230a:	68c2      	ldr	r2, [r0, #12]
 800230c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800230e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002314:	4313      	orrs	r3, r2
 8002316:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002318:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800231a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231c:	430b      	orrs	r3, r1
 800231e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002320:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002324:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002328:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800232a:	4313      	orrs	r3, r2
 800232c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232e:	696b      	ldr	r3, [r5, #20]
 8002330:	6982      	ldr	r2, [r0, #24]
 8002332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002336:	4313      	orrs	r3, r2
 8002338:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <UART_SetConfig+0x138>)
{
 800233c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800233e:	429d      	cmp	r5, r3
 8002340:	f04f 0419 	mov.w	r4, #25
 8002344:	d146      	bne.n	80023d4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002346:	f7ff ff01 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 800234a:	fb04 f300 	mul.w	r3, r4, r0
 800234e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002352:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002356:	00b6      	lsls	r6, r6, #2
 8002358:	fbb3 f3f6 	udiv	r3, r3, r6
 800235c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002360:	011e      	lsls	r6, r3, #4
 8002362:	f7ff fef3 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002366:	4360      	muls	r0, r4
 8002368:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002372:	f7ff feeb 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002376:	4360      	muls	r0, r4
 8002378:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	fbb3 f3f8 	udiv	r3, r3, r8
 8002386:	fb08 7313 	mls	r3, r8, r3, r7
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	3332      	adds	r3, #50	; 0x32
 800238e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002392:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002396:	f7ff fed9 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 800239a:	4360      	muls	r0, r4
 800239c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	fbb0 faf2 	udiv	sl, r0, r2
 80023a6:	f7ff fed1 	bl	800214c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023aa:	4360      	muls	r0, r4
 80023ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ba:	fb08 a313 	mls	r3, r8, r3, sl
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	3332      	adds	r3, #50	; 0x32
 80023c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	433b      	orrs	r3, r7
 80023cc:	4433      	add	r3, r6
 80023ce:	60ab      	str	r3, [r5, #8]
 80023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d4:	f7ff feaa 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80023d8:	fb04 f300 	mul.w	r3, r4, r0
 80023dc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80023e0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80023e4:	00b6      	lsls	r6, r6, #2
 80023e6:	fbb3 f3f6 	udiv	r3, r3, r6
 80023ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ee:	011e      	lsls	r6, r3, #4
 80023f0:	f7ff fe9c 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80023f4:	4360      	muls	r0, r4
 80023f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8002400:	f7ff fe94 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002404:	4360      	muls	r0, r4
 8002406:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	fbb3 f3f8 	udiv	r3, r3, r8
 8002414:	fb08 7313 	mls	r3, r8, r3, r7
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	3332      	adds	r3, #50	; 0x32
 800241c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002420:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002424:	f7ff fe82 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002428:	4360      	muls	r0, r4
 800242a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	fbb0 faf2 	udiv	sl, r0, r2
 8002434:	f7ff fe7a 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002438:	e7b7      	b.n	80023aa <UART_SetConfig+0xa6>
 800243a:	bf00      	nop
 800243c:	40013800 	.word	0x40013800

08002440 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	4604      	mov	r4, r0
 8002444:	460e      	mov	r6, r1
 8002446:	4617      	mov	r7, r2
 8002448:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800244a:	6821      	ldr	r1, [r4, #0]
 800244c:	680b      	ldr	r3, [r1, #0]
 800244e:	ea36 0303 	bics.w	r3, r6, r3
 8002452:	d101      	bne.n	8002458 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
}
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002458:	1c6b      	adds	r3, r5, #1
 800245a:	d0f7      	beq.n	800244c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800245c:	b995      	cbnz	r5, 8002484 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002460:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002468:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002472:	2320      	movs	r3, #32
 8002474:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002478:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800247c:	2300      	movs	r3, #0
 800247e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002484:	f7fe fbac 	bl	8000be0 <HAL_GetTick>
 8002488:	1bc0      	subs	r0, r0, r7
 800248a:	4285      	cmp	r5, r0
 800248c:	d2dd      	bcs.n	800244a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800248e:	e7e6      	b.n	800245e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002490 <HAL_UART_Init>:
{
 8002490:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002492:	4604      	mov	r4, r0
 8002494:	b340      	cbz	r0, 80024e8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002496:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800249a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800249e:	b91b      	cbnz	r3, 80024a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024a4:	f003 fb60 	bl	8005b68 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80024aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024b0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80024b2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80024b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024ba:	f7ff ff23 	bl	8002304 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024be:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80024da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80024de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80024e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80024e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
}
 80024ea:	bd10      	pop	{r4, pc}

080024ec <HAL_UART_Transmit>:
{
 80024ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80024f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80024f6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80024f8:	2b20      	cmp	r3, #32
{
 80024fa:	460d      	mov	r5, r1
 80024fc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80024fe:	d14e      	bne.n	800259e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002500:	2900      	cmp	r1, #0
 8002502:	d049      	beq.n	8002598 <HAL_UART_Transmit+0xac>
 8002504:	2a00      	cmp	r2, #0
 8002506:	d047      	beq.n	8002598 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002508:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800250c:	2b01      	cmp	r3, #1
 800250e:	d046      	beq.n	800259e <HAL_UART_Transmit+0xb2>
 8002510:	2301      	movs	r3, #1
 8002512:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251a:	2321      	movs	r3, #33	; 0x21
 800251c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002520:	f7fe fb5e 	bl	8000be0 <HAL_GetTick>
 8002524:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002526:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800252a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800252e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002530:	b29b      	uxth	r3, r3
 8002532:	b96b      	cbnz	r3, 8002550 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002534:	463b      	mov	r3, r7
 8002536:	4632      	mov	r2, r6
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff ff80 	bl	8002440 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002540:	b9a8      	cbnz	r0, 800256e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002542:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002544:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002548:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002550:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002554:	3b01      	subs	r3, #1
 8002556:	b29b      	uxth	r3, r3
 8002558:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800255a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	4620      	mov	r0, r4
 8002564:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002566:	d10e      	bne.n	8002586 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002568:	f7ff ff6a 	bl	8002440 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800256c:	b110      	cbz	r0, 8002574 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800256e:	2003      	movs	r0, #3
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002574:	882b      	ldrh	r3, [r5, #0]
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800257e:	6923      	ldr	r3, [r4, #16]
 8002580:	b943      	cbnz	r3, 8002594 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002582:	3502      	adds	r5, #2
 8002584:	e7d3      	b.n	800252e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	f7ff ff5b 	bl	8002440 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800258a:	2800      	cmp	r0, #0
 800258c:	d1ef      	bne.n	800256e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	782a      	ldrb	r2, [r5, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	3501      	adds	r5, #1
 8002596:	e7ca      	b.n	800252e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002598:	2001      	movs	r0, #1
 800259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800259e:	2002      	movs	r0, #2
}
 80025a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025a4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80025a4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d120      	bne.n	80025ee <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80025ac:	b1e9      	cbz	r1, 80025ea <HAL_UART_Receive_IT+0x46>
 80025ae:	b1e2      	cbz	r2, 80025ea <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80025b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d01a      	beq.n	80025ee <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80025b8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80025ba:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025bc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025be:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025c6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80025c8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ca:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80025cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80025d4:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025d6:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80025d8:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025da:	f041 0101 	orr.w	r1, r1, #1
 80025de:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025e0:	68d1      	ldr	r1, [r2, #12]
 80025e2:	f041 0120 	orr.w	r1, r1, #32
 80025e6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80025e8:	4770      	bx	lr
      return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	4770      	bx	lr
    return HAL_BUSY;
 80025ee:	2002      	movs	r0, #2
}
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_UART_Transmit_DMA>:
{
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4604      	mov	r4, r0
 80025f8:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80025fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80025fe:	2a20      	cmp	r2, #32
 8002600:	d12a      	bne.n	8002658 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8002602:	b339      	cbz	r1, 8002654 <HAL_UART_Transmit_DMA+0x60>
 8002604:	b333      	cbz	r3, 8002654 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8002606:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800260a:	2a01      	cmp	r2, #1
 800260c:	d024      	beq.n	8002658 <HAL_UART_Transmit_DMA+0x64>
 800260e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002612:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002616:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002618:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800261a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8002624:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002626:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002628:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800262a:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 800262c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800262e:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_UART_Transmit_DMA+0x70>)
 8002632:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	3204      	adds	r2, #4
 8002638:	f7fe fece 	bl	80013d8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8002642:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002644:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002646:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002648:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800264c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002652:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
 8002656:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002658:	2002      	movs	r0, #2
}
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	0800266b 	.word	0x0800266b
 8002660:	08002699 	.word	0x08002699
 8002664:	08002721 	.word	0x08002721

08002668 <HAL_UART_TxCpltCallback>:
 8002668:	4770      	bx	lr

0800266a <UART_DMATransmitCplt>:
{
 800266a:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800266e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f013 0320 	ands.w	r3, r3, #32
 8002676:	d10a      	bne.n	800268e <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8002678:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002682:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800268e:	4610      	mov	r0, r2
 8002690:	f7ff ffea 	bl	8002668 <HAL_UART_TxCpltCallback>
 8002694:	bd08      	pop	{r3, pc}

08002696 <HAL_UART_TxHalfCpltCallback>:
 8002696:	4770      	bx	lr

08002698 <UART_DMATxHalfCplt>:
{
 8002698:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800269a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800269c:	f7ff fffb 	bl	8002696 <HAL_UART_TxHalfCpltCallback>
 80026a0:	bd08      	pop	{r3, pc}

080026a2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80026a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80026a6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80026a8:	2b22      	cmp	r3, #34	; 0x22
 80026aa:	d136      	bne.n	800271a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026ac:	6883      	ldr	r3, [r0, #8]
 80026ae:	6901      	ldr	r1, [r0, #16]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	6802      	ldr	r2, [r0, #0]
 80026b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026b8:	d123      	bne.n	8002702 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026ba:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026bc:	b9e9      	cbnz	r1, 80026fa <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80026c6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80026c8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80026ca:	3c01      	subs	r4, #1
 80026cc:	b2a4      	uxth	r4, r4
 80026ce:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80026d0:	b98c      	cbnz	r4, 80026f6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026d2:	6803      	ldr	r3, [r0, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	f022 0220 	bic.w	r2, r2, #32
 80026da:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e2:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026ec:	2320      	movs	r3, #32
 80026ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80026f2:	f002 fda9 	bl	8005248 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80026f6:	2000      	movs	r0, #0
}
 80026f8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f823 2b01 	strh.w	r2, [r3], #1
 8002700:	e7e1      	b.n	80026c6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002702:	b921      	cbnz	r1, 800270e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002704:	1c59      	adds	r1, r3, #1
 8002706:	6852      	ldr	r2, [r2, #4]
 8002708:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e7dc      	b.n	80026c8 <UART_Receive_IT+0x26>
 800270e:	6852      	ldr	r2, [r2, #4]
 8002710:	1c59      	adds	r1, r3, #1
 8002712:	6281      	str	r1, [r0, #40]	; 0x28
 8002714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002718:	e7f7      	b.n	800270a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800271a:	2002      	movs	r0, #2
 800271c:	bd10      	pop	{r4, pc}

0800271e <HAL_UART_ErrorCallback>:
 800271e:	4770      	bx	lr

08002720 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002720:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8002722:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002724:	680b      	ldr	r3, [r1, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002728:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800272c:	2821      	cmp	r0, #33	; 0x21
 800272e:	d10a      	bne.n	8002746 <UART_DMAError+0x26>
 8002730:	0612      	lsls	r2, r2, #24
 8002732:	d508      	bpl.n	8002746 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8002734:	2200      	movs	r2, #0
 8002736:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800273e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002740:	2220      	movs	r2, #32
 8002742:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002746:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002748:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800274c:	2a22      	cmp	r2, #34	; 0x22
 800274e:	d106      	bne.n	800275e <UART_DMAError+0x3e>
 8002750:	065b      	lsls	r3, r3, #25
 8002752:	d504      	bpl.n	800275e <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002754:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8002756:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002758:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800275a:	f7ff fdc5 	bl	80022e8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800275e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002760:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002768:	f7ff ffd9 	bl	800271e <HAL_UART_ErrorCallback>
 800276c:	bd08      	pop	{r3, pc}
	...

08002770 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002770:	6803      	ldr	r3, [r0, #0]
{
 8002772:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002774:	681a      	ldr	r2, [r3, #0]
{
 8002776:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002778:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800277a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800277c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800277e:	d107      	bne.n	8002790 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002780:	0696      	lsls	r6, r2, #26
 8002782:	d55a      	bpl.n	800283a <HAL_UART_IRQHandler+0xca>
 8002784:	068d      	lsls	r5, r1, #26
 8002786:	d558      	bpl.n	800283a <HAL_UART_IRQHandler+0xca>
}
 8002788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800278c:	f7ff bf89 	b.w	80026a2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002790:	f015 0501 	ands.w	r5, r5, #1
 8002794:	d102      	bne.n	800279c <HAL_UART_IRQHandler+0x2c>
 8002796:	f411 7f90 	tst.w	r1, #288	; 0x120
 800279a:	d04e      	beq.n	800283a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279c:	07d3      	lsls	r3, r2, #31
 800279e:	d505      	bpl.n	80027ac <HAL_UART_IRQHandler+0x3c>
 80027a0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a2:	bf42      	ittt	mi
 80027a4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80027a6:	f043 0301 	orrmi.w	r3, r3, #1
 80027aa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ac:	0750      	lsls	r0, r2, #29
 80027ae:	d504      	bpl.n	80027ba <HAL_UART_IRQHandler+0x4a>
 80027b0:	b11d      	cbz	r5, 80027ba <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ba:	0793      	lsls	r3, r2, #30
 80027bc:	d504      	bpl.n	80027c8 <HAL_UART_IRQHandler+0x58>
 80027be:	b11d      	cbz	r5, 80027c8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c8:	0716      	lsls	r6, r2, #28
 80027ca:	d504      	bpl.n	80027d6 <HAL_UART_IRQHandler+0x66>
 80027cc:	b11d      	cbz	r5, 80027d6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d066      	beq.n	80028aa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027dc:	0695      	lsls	r5, r2, #26
 80027de:	d504      	bpl.n	80027ea <HAL_UART_IRQHandler+0x7a>
 80027e0:	0688      	lsls	r0, r1, #26
 80027e2:	d502      	bpl.n	80027ea <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ff5c 	bl	80026a2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ea:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80027ec:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027f2:	0711      	lsls	r1, r2, #28
 80027f4:	d402      	bmi.n	80027fc <HAL_UART_IRQHandler+0x8c>
 80027f6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80027fa:	d01a      	beq.n	8002832 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80027fc:	f7ff fd74 	bl	80022e8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	0652      	lsls	r2, r2, #25
 8002806:	d510      	bpl.n	800282a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002808:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800280a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002810:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002812:	b150      	cbz	r0, 800282a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_UART_IRQHandler+0x13c>)
 8002816:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002818:	f7fe fe1c 	bl	8001454 <HAL_DMA_Abort_IT>
 800281c:	2800      	cmp	r0, #0
 800281e:	d044      	beq.n	80028aa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002820:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002826:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002828:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff ff77 	bl	800271e <HAL_UART_ErrorCallback>
 8002830:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002832:	f7ff ff74 	bl	800271e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002838:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800283a:	0616      	lsls	r6, r2, #24
 800283c:	d527      	bpl.n	800288e <HAL_UART_IRQHandler+0x11e>
 800283e:	060d      	lsls	r5, r1, #24
 8002840:	d525      	bpl.n	800288e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002842:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002846:	2a21      	cmp	r2, #33	; 0x21
 8002848:	d12f      	bne.n	80028aa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800284a:	68a2      	ldr	r2, [r4, #8]
 800284c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002850:	6a22      	ldr	r2, [r4, #32]
 8002852:	d117      	bne.n	8002884 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002854:	8811      	ldrh	r1, [r2, #0]
 8002856:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800285a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800285c:	6921      	ldr	r1, [r4, #16]
 800285e:	b979      	cbnz	r1, 8002880 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002860:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002862:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002864:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002866:	3a01      	subs	r2, #1
 8002868:	b292      	uxth	r2, r2
 800286a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800286c:	b9ea      	cbnz	r2, 80028aa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002880:	3201      	adds	r2, #1
 8002882:	e7ee      	b.n	8002862 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002884:	1c51      	adds	r1, r2, #1
 8002886:	6221      	str	r1, [r4, #32]
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	e7ea      	b.n	8002864 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800288e:	0650      	lsls	r0, r2, #25
 8002890:	d50b      	bpl.n	80028aa <HAL_UART_IRQHandler+0x13a>
 8002892:	064a      	lsls	r2, r1, #25
 8002894:	d509      	bpl.n	80028aa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002896:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002898:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028a0:	2320      	movs	r3, #32
 80028a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80028a6:	f7ff fedf 	bl	8002668 <HAL_UART_TxCpltCallback>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	080028b1 	.word	0x080028b1

080028b0 <UART_DMAAbortOnError>:
{
 80028b0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80028b2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80028b6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028b8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80028ba:	f7ff ff30 	bl	800271e <HAL_UART_ErrorCallback>
 80028be:	bd08      	pop	{r3, pc}

080028c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028c0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80028c2:	f000 fe79 	bl	80035b8 <vTaskStartScheduler>
  
  return osOK;
}
 80028c6:	2000      	movs	r0, #0
 80028c8:	bd08      	pop	{r3, pc}

080028ca <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80028ca:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028cc:	f001 f90c 	bl	8003ae8 <xTaskGetSchedulerState>
 80028d0:	2801      	cmp	r0, #1
 80028d2:	d003      	beq.n	80028dc <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80028d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80028d8:	f000 b8ec 	b.w	8002ab4 <xPortSysTickHandler>
 80028dc:	bd08      	pop	{r3, pc}

080028de <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028de:	f100 0308 	add.w	r3, r0, #8
 80028e2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ec:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ee:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f0:	6003      	str	r3, [r0, #0]
 80028f2:	4770      	bx	lr

080028f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	6103      	str	r3, [r0, #16]
 80028f8:	4770      	bx	lr

080028fa <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80028fa:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028fc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80028fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002900:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002906:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002908:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800290a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800290c:	3301      	adds	r3, #1
 800290e:	6003      	str	r3, [r0, #0]
 8002910:	4770      	bx	lr

08002912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002912:	680a      	ldr	r2, [r1, #0]
{
 8002914:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002916:	1c53      	adds	r3, r2, #1
 8002918:	d10a      	bne.n	8002930 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800291a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002920:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002922:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002924:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002926:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002928:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800292a:	3301      	adds	r3, #1
 800292c:	6003      	str	r3, [r0, #0]
 800292e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002930:	f100 0308 	add.w	r3, r0, #8
 8002934:	685c      	ldr	r4, [r3, #4]
 8002936:	6825      	ldr	r5, [r4, #0]
 8002938:	42aa      	cmp	r2, r5
 800293a:	d3ef      	bcc.n	800291c <vListInsert+0xa>
 800293c:	4623      	mov	r3, r4
 800293e:	e7f9      	b.n	8002934 <vListInsert+0x22>

08002940 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002940:	6841      	ldr	r1, [r0, #4]
 8002942:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002944:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002946:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002948:	6882      	ldr	r2, [r0, #8]
 800294a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002950:	bf08      	it	eq
 8002952:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002954:	2200      	movs	r2, #0
 8002956:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	3801      	subs	r0, #1
 800295c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800295e:	4770      	bx	lr

08002960 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <prvTaskExitError+0x2c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	d008      	beq.n	800297a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	e7fe      	b.n	8002978 <prvTaskExitError+0x18>
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	e7fe      	b.n	800298a <prvTaskExitError+0x2a>
 800298c:	20000008 	.word	0x20000008

08002990 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002990:	4806      	ldr	r0, [pc, #24]	; (80029ac <prvPortStartFirstTask+0x1c>)
 8002992:	6800      	ldr	r0, [r0, #0]
 8002994:	6800      	ldr	r0, [r0, #0]
 8002996:	f380 8808 	msr	MSP, r0
 800299a:	b662      	cpsie	i
 800299c:	b661      	cpsie	f
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	df00      	svc	0
 80029a8:	bf00      	nop
 80029aa:	0000      	.short	0x0000
 80029ac:	e000ed08 	.word	0xe000ed08

080029b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029ba:	f021 0101 	bic.w	r1, r1, #1
 80029be:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80029c6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80029ca:	3840      	subs	r0, #64	; 0x40
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	08002961 	.word	0x08002961
	...

080029e0 <SVC_Handler>:
	__asm volatile (
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <pxCurrentTCBConst2>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029ea:	f380 8809 	msr	PSP, r0
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f380 8811 	msr	BASEPRI, r0
 80029fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80029fe:	4770      	bx	lr

08002a00 <pxCurrentTCBConst2>:
 8002a00:	2000507c 	.word	0x2000507c

08002a04 <vPortEnterCritical>:
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <vPortEnterCritical+0x3c>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002a1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002a1e:	d10d      	bne.n	8002a3c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <vPortEnterCritical+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a28:	d008      	beq.n	8002a3c <vPortEnterCritical+0x38>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	e7fe      	b.n	8002a3a <vPortEnterCritical+0x36>
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000008 	.word	0x20000008
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <vPortExitCritical+0x24>)
 8002a4a:	6813      	ldr	r3, [r2, #0]
 8002a4c:	b943      	cbnz	r3, 8002a60 <vPortExitCritical+0x18>
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	e7fe      	b.n	8002a5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002a60:	3b01      	subs	r3, #1
 8002a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a64:	b90b      	cbnz	r3, 8002a6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	4770      	bx	lr
 8002a6c:	20000008 	.word	0x20000008

08002a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a70:	f3ef 8009 	mrs	r0, PSP
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <pxCurrentTCBConst>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a80:	6010      	str	r0, [r2, #0]
 8002a82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002a86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a8a:	f380 8811 	msr	BASEPRI, r0
 8002a8e:	f000 ff45 	bl	800391c <vTaskSwitchContext>
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	6808      	ldr	r0, [r1, #0]
 8002aa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aa6:	f380 8809 	msr	PSP, r0
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	4770      	bx	lr

08002ab0 <pxCurrentTCBConst>:
 8002ab0:	2000507c 	.word	0x2000507c

08002ab4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ab4:	b508      	push	{r3, lr}
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ac6:	f000 fdc1 	bl	800364c <xTaskIncrementTick>
 8002aca:	b118      	cbz	r0, 8002ad4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <xPortSysTickHandler+0x28>)
 8002ad2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	bd08      	pop	{r3, pc}
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <vPortSetupTimerInterrupt+0x1c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <vPortSetupTimerInterrupt+0x20>)
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002af2:	2207      	movs	r2, #7
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <vPortSetupTimerInterrupt+0x24>)
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	2000004c 	.word	0x2000004c
 8002b00:	e000e014 	.word	0xe000e014
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <xPortStartScheduler>:
{
 8002b08:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b0c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b18:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <xPortStartScheduler+0x88>)
 8002b30:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b32:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002b36:	1e54      	subs	r4, r2, #1
 8002b38:	0600      	lsls	r0, r0, #24
 8002b3a:	d41c      	bmi.n	8002b76 <xPortStartScheduler+0x6e>
 8002b3c:	b101      	cbz	r1, 8002b40 <xPortStartScheduler+0x38>
 8002b3e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002b48:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b4a:	9b01      	ldr	r3, [sp, #4]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <xPortStartScheduler+0x80>)
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <xPortStartScheduler+0x8c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002b62:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002b64:	f7ff ffbc 	bl	8002ae0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <xPortStartScheduler+0x90>)
 8002b6c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8002b6e:	f7ff ff0f 	bl	8002990 <prvPortStartFirstTask>
	prvTaskExitError();
 8002b72:	f7ff fef5 	bl	8002960 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b76:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	0052      	lsls	r2, r2, #1
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f88d 2003 	strb.w	r2, [sp, #3]
 8002b84:	4622      	mov	r2, r4
 8002b86:	e7d4      	b.n	8002b32 <xPortStartScheduler+0x2a>
 8002b88:	e000e400 	.word	0xe000e400
 8002b8c:	2000023c 	.word	0x2000023c
 8002b90:	20000240 	.word	0x20000240
 8002b94:	e000ed20 	.word	0xe000ed20
 8002b98:	20000008 	.word	0x20000008

08002b9c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002b9c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d90e      	bls.n	8002bc2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <vPortValidateInterruptPriority+0x4c>)
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ba8:	4a10      	ldr	r2, [pc, #64]	; (8002bec <vPortValidateInterruptPriority+0x50>)
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	e7fe      	b.n	8002bc0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <vPortValidateInterruptPriority+0x54>)
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <vPortValidateInterruptPriority+0x58>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d908      	bls.n	8002be4 <vPortValidateInterruptPriority+0x48>
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	e7fe      	b.n	8002be2 <vPortValidateInterruptPriority+0x46>
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e3f0 	.word	0xe000e3f0
 8002bec:	2000023c 	.word	0x2000023c
 8002bf0:	e000ed0c 	.word	0xe000ed0c
 8002bf4:	20000240 	.word	0x20000240

08002bf8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002bf8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <prvInsertBlockIntoFreeList+0x40>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4282      	cmp	r2, r0
 8002c00:	d318      	bcc.n	8002c34 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c02:	685c      	ldr	r4, [r3, #4]
 8002c04:	1919      	adds	r1, r3, r4
 8002c06:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c08:	bf01      	itttt	eq
 8002c0a:	6841      	ldreq	r1, [r0, #4]
 8002c0c:	4618      	moveq	r0, r3
 8002c0e:	1909      	addeq	r1, r1, r4
 8002c10:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c12:	6844      	ldr	r4, [r0, #4]
 8002c14:	1901      	adds	r1, r0, r4
 8002c16:	428a      	cmp	r2, r1
 8002c18:	d107      	bne.n	8002c2a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <prvInsertBlockIntoFreeList+0x44>)
 8002c1c:	6809      	ldr	r1, [r1, #0]
 8002c1e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c20:	bf1f      	itttt	ne
 8002c22:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c24:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c26:	1909      	addne	r1, r1, r4
 8002c28:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c2a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c2c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c2e:	bf18      	it	ne
 8002c30:	6018      	strne	r0, [r3, #0]
 8002c32:	bd10      	pop	{r4, pc}
 8002c34:	4613      	mov	r3, r2
 8002c36:	e7e1      	b.n	8002bfc <prvInsertBlockIntoFreeList+0x4>
 8002c38:	20005074 	.word	0x20005074
 8002c3c:	20000244 	.word	0x20000244

08002c40 <pvPortMalloc>:
{
 8002c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002c46:	f000 fcf3 	bl	8003630 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002c4a:	493d      	ldr	r1, [pc, #244]	; (8002d40 <pvPortMalloc+0x100>)
 8002c4c:	4d3d      	ldr	r5, [pc, #244]	; (8002d44 <pvPortMalloc+0x104>)
 8002c4e:	680b      	ldr	r3, [r1, #0]
 8002c50:	b9fb      	cbnz	r3, 8002c92 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002c52:	4a3d      	ldr	r2, [pc, #244]	; (8002d48 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002c54:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c56:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c58:	bf0f      	iteee	eq
 8002c5a:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c5e:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c60:	4b3a      	ldrne	r3, [pc, #232]	; (8002d4c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c62:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c66:	bf18      	it	ne
 8002c68:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c6a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c6c:	4e38      	ldr	r6, [pc, #224]	; (8002d50 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8002c6e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c70:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002c74:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c76:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002c78:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c7a:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002c7c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c7e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c80:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c84:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c86:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c88:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <pvPortMalloc+0x118>)
 8002c8a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c90:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c92:	682f      	ldr	r7, [r5, #0]
 8002c94:	4227      	tst	r7, r4
 8002c96:	d116      	bne.n	8002cc6 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8002c98:	2c00      	cmp	r4, #0
 8002c9a:	d040      	beq.n	8002d1e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8002c9c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ca0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ca2:	bf1c      	itt	ne
 8002ca4:	f023 0307 	bicne.w	r3, r3, #7
 8002ca8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002caa:	b163      	cbz	r3, 8002cc6 <pvPortMalloc+0x86>
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <pvPortMalloc+0x118>)
 8002cae:	6816      	ldr	r6, [r2, #0]
 8002cb0:	4690      	mov	r8, r2
 8002cb2:	42b3      	cmp	r3, r6
 8002cb4:	d807      	bhi.n	8002cc6 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <pvPortMalloc+0x110>)
 8002cb8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cba:	6868      	ldr	r0, [r5, #4]
 8002cbc:	4283      	cmp	r3, r0
 8002cbe:	d804      	bhi.n	8002cca <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8002cc0:	6809      	ldr	r1, [r1, #0]
 8002cc2:	428d      	cmp	r5, r1
 8002cc4:	d107      	bne.n	8002cd6 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8002cc6:	2400      	movs	r4, #0
 8002cc8:	e029      	b.n	8002d1e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cca:	682c      	ldr	r4, [r5, #0]
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d0f7      	beq.n	8002cc0 <pvPortMalloc+0x80>
 8002cd0:	462a      	mov	r2, r5
 8002cd2:	4625      	mov	r5, r4
 8002cd4:	e7f1      	b.n	8002cba <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cd6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cd8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cda:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cdc:	1ac2      	subs	r2, r0, r3
 8002cde:	2a10      	cmp	r2, #16
 8002ce0:	d90f      	bls.n	8002d02 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ce2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ce4:	0741      	lsls	r1, r0, #29
 8002ce6:	d008      	beq.n	8002cfa <pvPortMalloc+0xba>
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	e7fe      	b.n	8002cf8 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002cfa:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002cfc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cfe:	f7ff ff7b 	bl	8002bf8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d02:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d04:	4913      	ldr	r1, [pc, #76]	; (8002d54 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d06:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d08:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8002d0a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d0c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d0e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d12:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d14:	bf38      	it	cc
 8002d16:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d18:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d1a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d1c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002d1e:	f000 fd27 	bl	8003770 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d22:	0763      	lsls	r3, r4, #29
 8002d24:	d008      	beq.n	8002d38 <pvPortMalloc+0xf8>
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	e7fe      	b.n	8002d36 <pvPortMalloc+0xf6>
}
 8002d38:	4620      	mov	r0, r4
 8002d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000244 	.word	0x20000244
 8002d44:	20005068 	.word	0x20005068
 8002d48:	20000248 	.word	0x20000248
 8002d4c:	20005068 	.word	0x20005068
 8002d50:	20005074 	.word	0x20005074
 8002d54:	20005070 	.word	0x20005070
 8002d58:	2000506c 	.word	0x2000506c

08002d5c <vPortFree>:
{
 8002d5c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002d5e:	4604      	mov	r4, r0
 8002d60:	b370      	cbz	r0, 8002dc0 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <vPortFree+0x68>)
 8002d64:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	4213      	tst	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <vPortFree+0x24>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	e7fe      	b.n	8002d7e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d80:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002d84:	b141      	cbz	r1, 8002d98 <vPortFree+0x3c>
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	e7fe      	b.n	8002d96 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d98:	ea23 0302 	bic.w	r3, r3, r2
 8002d9c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002da0:	f000 fc46 	bl	8003630 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <vPortFree+0x6c>)
 8002da6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002daa:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dac:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002db0:	440b      	add	r3, r1
 8002db2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002db4:	f7ff ff20 	bl	8002bf8 <prvInsertBlockIntoFreeList>
}
 8002db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002dbc:	f000 bcd8 	b.w	8003770 <xTaskResumeAll>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20005068 	.word	0x20005068
 8002dc8:	2000506c 	.word	0x2000506c

08002dcc <xPortGetFreeHeapSize>:
}
 8002dcc:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <xPortGetFreeHeapSize+0x8>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000506c 	.word	0x2000506c

08002dd8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ddc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002dde:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002de2:	b942      	cbnz	r2, 8002df6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de4:	6805      	ldr	r5, [r0, #0]
 8002de6:	b99d      	cbnz	r5, 8002e10 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002de8:	6840      	ldr	r0, [r0, #4]
 8002dea:	f000 fed5 	bl	8003b98 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002dee:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002df0:	3601      	adds	r6, #1
 8002df2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002df6:	b96d      	cbnz	r5, 8002e14 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002df8:	6880      	ldr	r0, [r0, #8]
 8002dfa:	f002 ffad 	bl	8005d58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e02:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e04:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e06:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d301      	bcc.n	8002e10 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002e10:	2000      	movs	r0, #0
 8002e12:	e7ed      	b.n	8002df0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e14:	68c0      	ldr	r0, [r0, #12]
 8002e16:	f002 ff9f 	bl	8005d58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e1c:	68e2      	ldr	r2, [r4, #12]
 8002e1e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e20:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e22:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e24:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e26:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e28:	bf3e      	ittt	cc
 8002e2a:	6862      	ldrcc	r2, [r4, #4]
 8002e2c:	189b      	addcc	r3, r3, r2
 8002e2e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002e30:	2d02      	cmp	r5, #2
 8002e32:	d1ed      	bne.n	8002e10 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e34:	b10e      	cbz	r6, 8002e3a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002e36:	3e01      	subs	r6, #1
 8002e38:	e7ea      	b.n	8002e10 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	e7d8      	b.n	8002df0 <prvCopyDataToQueue+0x18>

08002e3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e3e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002e42:	b410      	push	{r4}
 8002e44:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e46:	b162      	cbz	r2, 8002e62 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e48:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e4a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e4c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e4e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e50:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e52:	bf28      	it	cs
 8002e54:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8002e56:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e58:	bf28      	it	cs
 8002e5a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	f002 bf7b 	b.w	8005d58 <memcpy>
}
 8002e62:	bc10      	pop	{r4}
 8002e64:	4770      	bx	lr

08002e66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e66:	b570      	push	{r4, r5, r6, lr}
 8002e68:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e6a:	f7ff fdcb 	bl	8002a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e72:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002e76:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	dc14      	bgt.n	8002ea6 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e7c:	23ff      	movs	r3, #255	; 0xff
 8002e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e82:	f7ff fde1 	bl	8002a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e86:	f7ff fdbd 	bl	8002a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e8a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002e92:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	dc12      	bgt.n	8002ebe <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e98:	23ff      	movs	r3, #255	; 0xff
 8002e9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002ea2:	f7ff bdd1 	b.w	8002a48 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0e7      	beq.n	8002e7c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 fd89 	bl	80039c4 <xTaskRemoveFromEventList>
 8002eb2:	b108      	cbz	r0, 8002eb8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002eb4:	f000 fe12 	bl	8003adc <vTaskMissedYield>
 8002eb8:	3d01      	subs	r5, #1
 8002eba:	b26d      	sxtb	r5, r5
 8002ebc:	e7dc      	b.n	8002e78 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0e9      	beq.n	8002e98 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 fd7d 	bl	80039c4 <xTaskRemoveFromEventList>
 8002eca:	b108      	cbz	r0, 8002ed0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002ecc:	f000 fe06 	bl	8003adc <vTaskMissedYield>
 8002ed0:	3d01      	subs	r5, #1
 8002ed2:	b26d      	sxtb	r5, r5
 8002ed4:	e7de      	b.n	8002e94 <prvUnlockQueue+0x2e>
	...

08002ed8 <xQueueGenericReset>:
{
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002edc:	4604      	mov	r4, r0
 8002ede:	b940      	cbnz	r0, 8002ef2 <xQueueGenericReset+0x1a>
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002ef2:	f7ff fd87 	bl	8002a04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ef6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	4343      	muls	r3, r0
 8002efe:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f00:	1a1b      	subs	r3, r3, r0
 8002f02:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f04:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f06:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f08:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002f0a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f0c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f0e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002f18:	b995      	cbnz	r5, 8002f40 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1a:	6923      	ldr	r3, [r4, #16]
 8002f1c:	b163      	cbz	r3, 8002f38 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f1e:	f104 0010 	add.w	r0, r4, #16
 8002f22:	f000 fd4f 	bl	80039c4 <xTaskRemoveFromEventList>
 8002f26:	b138      	cbz	r0, 8002f38 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <xQueueGenericReset+0x7c>)
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002f38:	f7ff fd86 	bl	8002a48 <vPortExitCritical>
}
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f40:	f104 0010 	add.w	r0, r4, #16
 8002f44:	f7ff fccb 	bl	80028de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f4c:	f7ff fcc7 	bl	80028de <vListInitialise>
 8002f50:	e7f2      	b.n	8002f38 <xQueueGenericReset+0x60>
 8002f52:	bf00      	nop
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <xQueueGenericCreate>:
	{
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	b940      	cbnz	r0, 8002f72 <xQueueGenericCreate+0x1a>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f72:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f74:	3048      	adds	r0, #72	; 0x48
 8002f76:	f7ff fe63 	bl	8002c40 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	b138      	cbz	r0, 8002f8e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f7e:	b945      	cbnz	r5, 8002f92 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f80:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002f82:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f84:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f86:	2101      	movs	r1, #1
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff ffa5 	bl	8002ed8 <xQueueGenericReset>
	}
 8002f8e:	4620      	mov	r0, r4
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f92:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f96:	6003      	str	r3, [r0, #0]
 8002f98:	e7f3      	b.n	8002f82 <xQueueGenericCreate+0x2a>
	...

08002f9c <xQueueGenericSend>:
{
 8002f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	9201      	str	r2, [sp, #4]
 8002fa4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	b940      	cbnz	r0, 8002fbc <xQueueGenericSend+0x20>
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	e7fe      	b.n	8002fba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fbc:	2900      	cmp	r1, #0
 8002fbe:	f040 8088 	bne.w	80030d2 <xQueueGenericSend+0x136>
 8002fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8084 	beq.w	80030d2 <xQueueGenericSend+0x136>
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	e7fe      	b.n	8002fda <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fdc:	9e01      	ldr	r6, [sp, #4]
 8002fde:	2e00      	cmp	r6, #0
 8002fe0:	f000 8082 	beq.w	80030e8 <xQueueGenericSend+0x14c>
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff6:	9d01      	ldr	r5, [sp, #4]
 8002ff8:	b91d      	cbnz	r5, 8003002 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002ffa:	f7ff fd25 	bl	8002a48 <vPortExitCritical>
			return errQUEUE_FULL;
 8002ffe:	2000      	movs	r0, #0
 8003000:	e058      	b.n	80030b4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003002:	b916      	cbnz	r6, 800300a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8003004:	a802      	add	r0, sp, #8
 8003006:	f000 fd1f 	bl	8003a48 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800300a:	f7ff fd1d 	bl	8002a48 <vPortExitCritical>
		vTaskSuspendAll();
 800300e:	f000 fb0f 	bl	8003630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003012:	f7ff fcf7 	bl	8002a04 <vPortEnterCritical>
 8003016:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	bf08      	it	eq
 800301e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003022:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003026:	2bff      	cmp	r3, #255	; 0xff
 8003028:	bf08      	it	eq
 800302a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800302e:	f7ff fd0b 	bl	8002a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003032:	a901      	add	r1, sp, #4
 8003034:	a802      	add	r0, sp, #8
 8003036:	f000 fd17 	bl	8003a68 <xTaskCheckForTimeOut>
 800303a:	2800      	cmp	r0, #0
 800303c:	d143      	bne.n	80030c6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800303e:	f7ff fce1 	bl	8002a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003042:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003044:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003046:	f7ff fcff 	bl	8002a48 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800304a:	42ae      	cmp	r6, r5
 800304c:	d135      	bne.n	80030ba <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800304e:	9901      	ldr	r1, [sp, #4]
 8003050:	f104 0010 	add.w	r0, r4, #16
 8003054:	f000 fc9c 	bl	8003990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff ff04 	bl	8002e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800305e:	f000 fb87 	bl	8003770 <xTaskResumeAll>
 8003062:	b938      	cbnz	r0, 8003074 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003068:	f8ca 3000 	str.w	r3, [sl]
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003076:	f7ff fcc5 	bl	8002a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800307c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800307e:	429a      	cmp	r2, r3
 8003080:	d301      	bcc.n	8003086 <xQueueGenericSend+0xea>
 8003082:	2f02      	cmp	r7, #2
 8003084:	d1b7      	bne.n	8002ff6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003086:	463a      	mov	r2, r7
 8003088:	4649      	mov	r1, r9
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fea4 	bl	8002dd8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003092:	b11b      	cbz	r3, 800309c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003098:	f000 fc94 	bl	80039c4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800309c:	b138      	cbz	r0, 80030ae <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <xQueueGenericSend+0x168>)
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80030ae:	f7ff fccb 	bl	8002a48 <vPortExitCritical>
				return pdPASS;
 80030b2:	2001      	movs	r0, #1
}
 80030b4:	b004      	add	sp, #16
 80030b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fed3 	bl	8002e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030c0:	f000 fb56 	bl	8003770 <xTaskResumeAll>
 80030c4:	e7d6      	b.n	8003074 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff fecd 	bl	8002e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030cc:	f000 fb50 	bl	8003770 <xTaskResumeAll>
 80030d0:	e795      	b.n	8002ffe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d2:	2f02      	cmp	r7, #2
 80030d4:	d102      	bne.n	80030dc <xQueueGenericSend+0x140>
 80030d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10a      	bne.n	80030f2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030dc:	f000 fd04 	bl	8003ae8 <xTaskGetSchedulerState>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f43f af7b 	beq.w	8002fdc <xQueueGenericSend+0x40>
 80030e6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80030e8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80030ec:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003104 <xQueueGenericSend+0x168>
 80030f0:	e7c1      	b.n	8003076 <xQueueGenericSend+0xda>
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	e7fe      	b.n	8003102 <xQueueGenericSend+0x166>
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <xQueueGenericSendFromISR>:
{
 8003108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800310c:	4688      	mov	r8, r1
 800310e:	4691      	mov	r9, r2
 8003110:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003112:	4604      	mov	r4, r0
 8003114:	b940      	cbnz	r0, 8003128 <xQueueGenericSendFromISR+0x20>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	e7fe      	b.n	8003126 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003128:	bb09      	cbnz	r1, 800316e <xQueueGenericSendFromISR+0x66>
 800312a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800312c:	b1fb      	cbz	r3, 800316e <xQueueGenericSendFromISR+0x66>
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	e7fe      	b.n	800313e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003140:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003144:	f000 fc3e 	bl	80039c4 <xTaskRemoveFromEventList>
 8003148:	2800      	cmp	r0, #0
 800314a:	d034      	beq.n	80031b6 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 800314c:	f1b9 0f00 	cmp.w	r9, #0
 8003150:	d031      	beq.n	80031b6 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003152:	2001      	movs	r0, #1
 8003154:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003158:	f386 8811 	msr	BASEPRI, r6
}
 800315c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003160:	3501      	adds	r5, #1
 8003162:	b26d      	sxtb	r5, r5
 8003164:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003168:	e025      	b.n	80031b6 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800316a:	2000      	movs	r0, #0
 800316c:	e7f4      	b.n	8003158 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800316e:	2f02      	cmp	r7, #2
 8003170:	d102      	bne.n	8003178 <xQueueGenericSendFromISR+0x70>
 8003172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d120      	bne.n	80031ba <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003178:	f7ff fd10 	bl	8002b9c <vPortValidateInterruptPriority>
	__asm volatile
 800317c:	f3ef 8611 	mrs	r6, BASEPRI
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003194:	429a      	cmp	r2, r3
 8003196:	d301      	bcc.n	800319c <xQueueGenericSendFromISR+0x94>
 8003198:	2f02      	cmp	r7, #2
 800319a:	d1e6      	bne.n	800316a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 800319c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031a0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80031a2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031a4:	4641      	mov	r1, r8
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7ff fe16 	bl	8002dd8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80031ac:	1c6b      	adds	r3, r5, #1
 80031ae:	d1d7      	bne.n	8003160 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1c4      	bne.n	8003140 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80031b6:	2001      	movs	r0, #1
 80031b8:	e7ce      	b.n	8003158 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	e7fe      	b.n	80031ca <xQueueGenericSendFromISR+0xc2>

080031cc <xQueueGenericReceive>:
{
 80031cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	4688      	mov	r8, r1
 80031d2:	9201      	str	r2, [sp, #4]
 80031d4:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80031d6:	4604      	mov	r4, r0
 80031d8:	b940      	cbnz	r0, 80031ec <xQueueGenericReceive+0x20>
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	e7fe      	b.n	80031ea <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ec:	2900      	cmp	r1, #0
 80031ee:	f040 80a5 	bne.w	800333c <xQueueGenericReceive+0x170>
 80031f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a1 	beq.w	800333c <xQueueGenericReceive+0x170>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	e7fe      	b.n	800320a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800320c:	9e01      	ldr	r6, [sp, #4]
 800320e:	2e00      	cmp	r6, #0
 8003210:	f000 809a 	beq.w	8003348 <xQueueGenericReceive+0x17c>
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	e7fe      	b.n	8003224 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003226:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003228:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06d      	beq.n	800330a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003232:	e05f      	b.n	80032f4 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003234:	9d01      	ldr	r5, [sp, #4]
 8003236:	b91d      	cbnz	r5, 8003240 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8003238:	f7ff fc06 	bl	8002a48 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800323c:	4628      	mov	r0, r5
 800323e:	e067      	b.n	8003310 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8003240:	b916      	cbnz	r6, 8003248 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8003242:	a802      	add	r0, sp, #8
 8003244:	f000 fc00 	bl	8003a48 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003248:	f7ff fbfe 	bl	8002a48 <vPortExitCritical>
		vTaskSuspendAll();
 800324c:	f000 f9f0 	bl	8003630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003250:	f7ff fbd8 	bl	8002a04 <vPortEnterCritical>
 8003254:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	bf08      	it	eq
 800325c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003260:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003264:	2bff      	cmp	r3, #255	; 0xff
 8003266:	bf08      	it	eq
 8003268:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800326c:	f7ff fbec 	bl	8002a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003270:	a901      	add	r1, sp, #4
 8003272:	a802      	add	r0, sp, #8
 8003274:	f000 fbf8 	bl	8003a68 <xTaskCheckForTimeOut>
 8003278:	2800      	cmp	r0, #0
 800327a:	d152      	bne.n	8003322 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 800327c:	f7ff fbc2 	bl	8002a04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003280:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8003282:	f7ff fbe1 	bl	8002a48 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003286:	2d00      	cmp	r5, #0
 8003288:	d145      	bne.n	8003316 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	b933      	cbnz	r3, 800329c <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800328e:	f7ff fbb9 	bl	8002a04 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003292:	6860      	ldr	r0, [r4, #4]
 8003294:	f000 fc38 	bl	8003b08 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003298:	f7ff fbd6 	bl	8002a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800329c:	9901      	ldr	r1, [sp, #4]
 800329e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032a2:	f000 fb75 	bl	8003990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fddd 	bl	8002e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032ac:	f000 fa60 	bl	8003770 <xTaskResumeAll>
 80032b0:	b938      	cbnz	r0, 80032c2 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80032b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032b6:	f8ca 3000 	str.w	r3, [sl]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80032c4:	f7ff fb9e 	bl	8002a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	d0b2      	beq.n	8003234 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ce:	4641      	mov	r1, r8
 80032d0:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80032d2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032d4:	f7ff fdb3 	bl	8002e3e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80032d8:	f1b9 0f00 	cmp.w	r9, #0
 80032dc:	d1a3      	bne.n	8003226 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032de:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80032e0:	3d01      	subs	r5, #1
 80032e2:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e4:	b913      	cbnz	r3, 80032ec <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80032e6:	f000 fca7 	bl	8003c38 <pvTaskIncrementMutexHeldCount>
 80032ea:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	b163      	cbz	r3, 800330a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f0:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f4:	f000 fb66 	bl	80039c4 <xTaskRemoveFromEventList>
 80032f8:	b138      	cbz	r0, 800330a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <xQueueGenericReceive+0x184>)
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800330a:	f7ff fb9d 	bl	8002a48 <vPortExitCritical>
				return pdPASS;
 800330e:	2001      	movs	r0, #1
}
 8003310:	b004      	add	sp, #16
 8003312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fda5 	bl	8002e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800331c:	f000 fa28 	bl	8003770 <xTaskResumeAll>
 8003320:	e7cf      	b.n	80032c2 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff fd9f 	bl	8002e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003328:	f000 fa22 	bl	8003770 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800332c:	f7ff fb6a 	bl	8002a04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003330:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8003332:	f7ff fb89 	bl	8002a48 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003336:	2d00      	cmp	r5, #0
 8003338:	d1c3      	bne.n	80032c2 <xQueueGenericReceive+0xf6>
 800333a:	e77f      	b.n	800323c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800333c:	f000 fbd4 	bl	8003ae8 <xTaskGetSchedulerState>
 8003340:	2800      	cmp	r0, #0
 8003342:	f43f af63 	beq.w	800320c <xQueueGenericReceive+0x40>
 8003346:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003348:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800334a:	f8df a004 	ldr.w	sl, [pc, #4]	; 8003350 <xQueueGenericReceive+0x184>
 800334e:	e7b9      	b.n	80032c4 <xQueueGenericReceive+0xf8>
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003354:	4a06      	ldr	r2, [pc, #24]	; (8003370 <prvResetNextTaskUnblockTime+0x1c>)
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <prvResetNextTaskUnblockTime+0x20>)
 800335c:	b919      	cbnz	r1, 8003366 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336a:	68d2      	ldr	r2, [r2, #12]
 800336c:	6852      	ldr	r2, [r2, #4]
 800336e:	e7f8      	b.n	8003362 <prvResetNextTaskUnblockTime+0xe>
 8003370:	20005080 	.word	0x20005080
 8003374:	20005158 	.word	0x20005158

08003378 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800337c:	4e1b      	ldr	r6, [pc, #108]	; (80033ec <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800337e:	681d      	ldr	r5, [r3, #0]
{
 8003380:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003382:	6830      	ldr	r0, [r6, #0]
{
 8003384:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003386:	3004      	adds	r0, #4
 8003388:	f7ff fada 	bl	8002940 <uxListRemove>
 800338c:	4633      	mov	r3, r6
 800338e:	b940      	cbnz	r0, 80033a2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003390:	2001      	movs	r0, #1
 8003392:	6831      	ldr	r1, [r6, #0]
 8003394:	4e16      	ldr	r6, [pc, #88]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x78>)
 8003396:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003398:	6832      	ldr	r2, [r6, #0]
 800339a:	4088      	lsls	r0, r1
 800339c:	ea22 0200 	bic.w	r2, r2, r0
 80033a0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033a2:	1c62      	adds	r2, r4, #1
 80033a4:	d107      	bne.n	80033b6 <prvAddCurrentTaskToDelayedList+0x3e>
 80033a6:	b137      	cbz	r7, 80033b6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	4812      	ldr	r0, [pc, #72]	; (80033f4 <prvAddCurrentTaskToDelayedList+0x7c>)
 80033ac:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b2:	f7ff baa2 	b.w	80028fa <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033b8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80033ba:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033bc:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80033be:	d907      	bls.n	80033d0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c0:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <prvAddCurrentTaskToDelayedList+0x80>)
 80033c2:	6810      	ldr	r0, [r2, #0]
 80033c4:	6819      	ldr	r1, [r3, #0]
}
 80033c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ca:	3104      	adds	r1, #4
 80033cc:	f7ff baa1 	b.w	8002912 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <prvAddCurrentTaskToDelayedList+0x84>)
 80033d2:	6810      	ldr	r0, [r2, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	3104      	adds	r1, #4
 80033d8:	f7ff fa9b 	bl	8002912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <prvAddCurrentTaskToDelayedList+0x88>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033e2:	bf38      	it	cc
 80033e4:	601c      	strcc	r4, [r3, #0]
 80033e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e8:	200051a0 	.word	0x200051a0
 80033ec:	2000507c 	.word	0x2000507c
 80033f0:	20005128 	.word	0x20005128
 80033f4:	20005178 	.word	0x20005178
 80033f8:	20005084 	.word	0x20005084
 80033fc:	20005080 	.word	0x20005080
 8003400:	20005158 	.word	0x20005158

08003404 <prvTaskIsTaskSuspended.part.0>:
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	e7fe      	b.n	8003414 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08003418 <xTaskCreate>:
	{
 8003418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003420:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003422:	4650      	mov	r0, sl
	{
 8003424:	460f      	mov	r7, r1
 8003426:	4699      	mov	r9, r3
 8003428:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	f7ff fc09 	bl	8002c40 <pvPortMalloc>
			if( pxStack != NULL )
 800342e:	4605      	mov	r5, r0
 8003430:	2800      	cmp	r0, #0
 8003432:	f000 8096 	beq.w	8003562 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003436:	2054      	movs	r0, #84	; 0x54
 8003438:	f7ff fc02 	bl	8002c40 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800343c:	4604      	mov	r4, r0
 800343e:	2800      	cmp	r0, #0
 8003440:	f000 808c 	beq.w	800355c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003444:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003448:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800344a:	4455      	add	r5, sl
 800344c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800344e:	f025 0a07 	bic.w	sl, r5, #7
 8003452:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003456:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003458:	7859      	ldrb	r1, [r3, #1]
 800345a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800345e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003462:	b109      	cbz	r1, 8003468 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003464:	42bb      	cmp	r3, r7
 8003466:	d1f7      	bne.n	8003458 <xTaskCreate+0x40>
 8003468:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800346a:	f04f 0b00 	mov.w	fp, #0
 800346e:	2d06      	cmp	r5, #6
 8003470:	bf28      	it	cs
 8003472:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003474:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003476:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003478:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800347a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800347c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003480:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003484:	f7ff fa36 	bl	80028f4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003488:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800348c:	f104 0018 	add.w	r0, r4, #24
 8003490:	f7ff fa30 	bl	80028f4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003494:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003498:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800349c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800349e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034a2:	464a      	mov	r2, r9
 80034a4:	4641      	mov	r1, r8
 80034a6:	4650      	mov	r0, sl
 80034a8:	f7ff fa82 	bl	80029b0 <pxPortInitialiseStack>
 80034ac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80034ae:	b106      	cbz	r6, 80034b2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80034b2:	f7ff faa7 	bl	8002a04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80034b6:	4b32      	ldr	r3, [pc, #200]	; (8003580 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80034b8:	4e32      	ldr	r6, [pc, #200]	; (8003584 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80035b0 <xTaskCreate+0x198>
 80034c0:	3201      	adds	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034c4:	6835      	ldr	r5, [r6, #0]
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	d14e      	bne.n	8003568 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80034ca:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d11d      	bne.n	800350e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034d2:	eb08 0005 	add.w	r0, r8, r5
 80034d6:	3514      	adds	r5, #20
 80034d8:	f7ff fa01 	bl	80028de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034dc:	2d8c      	cmp	r5, #140	; 0x8c
 80034de:	d1f8      	bne.n	80034d2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80034e0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80035b4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80034e4:	4d28      	ldr	r5, [pc, #160]	; (8003588 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80034e6:	4648      	mov	r0, r9
 80034e8:	f7ff f9f9 	bl	80028de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7ff f9f6 	bl	80028de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034f2:	4826      	ldr	r0, [pc, #152]	; (800358c <xTaskCreate+0x174>)
 80034f4:	f7ff f9f3 	bl	80028de <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80034f8:	4825      	ldr	r0, [pc, #148]	; (8003590 <xTaskCreate+0x178>)
 80034fa:	f7ff f9f0 	bl	80028de <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80034fe:	4825      	ldr	r0, [pc, #148]	; (8003594 <xTaskCreate+0x17c>)
 8003500:	f7ff f9ed 	bl	80028de <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <xTaskCreate+0x180>)
 8003506:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <xTaskCreate+0x184>)
 800350c:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800350e:	2501      	movs	r5, #1
		uxTaskNumber++;
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003512:	4924      	ldr	r1, [pc, #144]	; (80035a4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003514:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003516:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003518:	3301      	adds	r3, #1
 800351a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800351c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800351e:	fa05 f302 	lsl.w	r3, r5, r2
 8003522:	4303      	orrs	r3, r0
 8003524:	2014      	movs	r0, #20
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	fb00 8002 	mla	r0, r0, r2, r8
 800352c:	4639      	mov	r1, r7
 800352e:	f7ff f9e4 	bl	80028fa <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003532:	f7ff fa89 	bl	8002a48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <xTaskCreate+0x190>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b163      	cbz	r3, 8003556 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003542:	429a      	cmp	r2, r3
 8003544:	d207      	bcs.n	8003556 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <xTaskCreate+0x194>)
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
	}
 8003556:	4628      	mov	r0, r5
 8003558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800355c:	4628      	mov	r0, r5
 800355e:	f7ff fbfd 	bl	8002d5c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003562:	f04f 35ff 	mov.w	r5, #4294967295
 8003566:	e7f6      	b.n	8003556 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <xTaskCreate+0x190>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ce      	bne.n	800350e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003576:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003578:	bf98      	it	ls
 800357a:	6034      	strls	r4, [r6, #0]
 800357c:	e7c7      	b.n	800350e <xTaskCreate+0xf6>
 800357e:	bf00      	nop
 8003580:	20005114 	.word	0x20005114
 8003584:	2000507c 	.word	0x2000507c
 8003588:	20005140 	.word	0x20005140
 800358c:	20005160 	.word	0x20005160
 8003590:	2000518c 	.word	0x2000518c
 8003594:	20005178 	.word	0x20005178
 8003598:	20005080 	.word	0x20005080
 800359c:	20005084 	.word	0x20005084
 80035a0:	20005124 	.word	0x20005124
 80035a4:	20005128 	.word	0x20005128
 80035a8:	20005174 	.word	0x20005174
 80035ac:	e000ed04 	.word	0xe000ed04
 80035b0:	20005088 	.word	0x20005088
 80035b4:	2000512c 	.word	0x2000512c

080035b8 <vTaskStartScheduler>:
{
 80035b8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80035ba:	2400      	movs	r4, #0
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <vTaskStartScheduler+0x60>)
 80035be:	9400      	str	r4, [sp, #0]
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2280      	movs	r2, #128	; 0x80
 80035c4:	4623      	mov	r3, r4
 80035c6:	4915      	ldr	r1, [pc, #84]	; (800361c <vTaskStartScheduler+0x64>)
 80035c8:	4815      	ldr	r0, [pc, #84]	; (8003620 <vTaskStartScheduler+0x68>)
 80035ca:	f7ff ff25 	bl	8003418 <xTaskCreate>
	if( xReturn == pdPASS )
 80035ce:	2801      	cmp	r0, #1
 80035d0:	d114      	bne.n	80035fc <vTaskStartScheduler+0x44>
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80035e2:	f04f 32ff 	mov.w	r2, #4294967295
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <vTaskStartScheduler+0x6c>)
 80035e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <vTaskStartScheduler+0x70>)
 80035ec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <vTaskStartScheduler+0x74>)
 80035f0:	601c      	str	r4, [r3, #0]
}
 80035f2:	b002      	add	sp, #8
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80035f8:	f7ff ba86 	b.w	8002b08 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035fc:	3001      	adds	r0, #1
 80035fe:	d108      	bne.n	8003612 <vTaskStartScheduler+0x5a>
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	e7fe      	b.n	8003610 <vTaskStartScheduler+0x58>
}
 8003612:	b002      	add	sp, #8
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	20005154 	.word	0x20005154
 800361c:	08007028 	.word	0x08007028
 8003620:	080038a9 	.word	0x080038a9
 8003624:	20005158 	.word	0x20005158
 8003628:	20005174 	.word	0x20005174
 800362c:	200051a0 	.word	0x200051a0

08003630 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003630:	4a02      	ldr	r2, [pc, #8]	; (800363c <vTaskSuspendAll+0xc>)
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20005120 	.word	0x20005120

08003640 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <xTaskGetTickCount+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200051a0 	.word	0x200051a0

0800364c <xTaskIncrementTick>:
{
 800364c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003650:	4b3c      	ldr	r3, [pc, #240]	; (8003744 <xTaskIncrementTick+0xf8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d153      	bne.n	8003700 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <xTaskIncrementTick+0xfc>)
 800365a:	681c      	ldr	r4, [r3, #0]
 800365c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800365e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003660:	b9bc      	cbnz	r4, 8003692 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <xTaskIncrementTick+0x100>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	b142      	cbz	r2, 800367c <xTaskIncrementTick+0x30>
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	e7fe      	b.n	800367a <xTaskIncrementTick+0x2e>
 800367c:	4a34      	ldr	r2, [pc, #208]	; (8003750 <xTaskIncrementTick+0x104>)
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	6810      	ldr	r0, [r2, #0]
 8003682:	6018      	str	r0, [r3, #0]
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	4a33      	ldr	r2, [pc, #204]	; (8003754 <xTaskIncrementTick+0x108>)
 8003688:	6813      	ldr	r3, [r2, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	f7ff fe61 	bl	8003354 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003692:	4d31      	ldr	r5, [pc, #196]	; (8003758 <xTaskIncrementTick+0x10c>)
 8003694:	f04f 0b00 	mov.w	fp, #0
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	4f30      	ldr	r7, [pc, #192]	; (800375c <xTaskIncrementTick+0x110>)
 800369c:	429c      	cmp	r4, r3
 800369e:	d33e      	bcc.n	800371e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800374c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80036a4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800376c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a8:	f8d8 2000 	ldr.w	r2, [r8]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	bb72      	cbnz	r2, 800370e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	602a      	str	r2, [r5, #0]
					break;
 80036b6:	e032      	b.n	800371e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b8:	f106 0a04 	add.w	sl, r6, #4
 80036bc:	4650      	mov	r0, sl
 80036be:	f7ff f93f 	bl	8002940 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80036c4:	b119      	cbz	r1, 80036ce <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c6:	f106 0018 	add.w	r0, r6, #24
 80036ca:	f7ff f939 	bl	8002940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036ce:	2201      	movs	r2, #1
 80036d0:	f04f 0e14 	mov.w	lr, #20
 80036d4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80036d6:	f8d9 3000 	ldr.w	r3, [r9]
 80036da:	fa02 f100 	lsl.w	r1, r2, r0
 80036de:	4319      	orrs	r1, r3
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <xTaskIncrementTick+0x114>)
 80036e2:	f8c9 1000 	str.w	r1, [r9]
 80036e6:	fb0e 3000 	mla	r0, lr, r0, r3
 80036ea:	4651      	mov	r1, sl
 80036ec:	f7ff f905 	bl	80028fa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036f0:	6838      	ldr	r0, [r7, #0]
 80036f2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80036f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80036f6:	4291      	cmp	r1, r2
 80036f8:	bf28      	it	cs
 80036fa:	f04f 0b01 	movcs.w	fp, #1
 80036fe:	e7d3      	b.n	80036a8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003702:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e011      	b.n	8003732 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800370e:	f8d8 2000 	ldr.w	r2, [r8]
 8003712:	68d2      	ldr	r2, [r2, #12]
 8003714:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003716:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003718:	428c      	cmp	r4, r1
 800371a:	d2cd      	bcs.n	80036b8 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800371c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <xTaskIncrementTick+0x114>)
 8003722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003724:	2214      	movs	r2, #20
 8003726:	434a      	muls	r2, r1
 8003728:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800372a:	2a02      	cmp	r2, #2
 800372c:	bf28      	it	cs
 800372e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <xTaskIncrementTick+0x11c>)
 8003734:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003736:	2a00      	cmp	r2, #0
 8003738:	bf18      	it	ne
 800373a:	f04f 0b01 	movne.w	fp, #1
}
 800373e:	4658      	mov	r0, fp
 8003740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003744:	20005120 	.word	0x20005120
 8003748:	200051a0 	.word	0x200051a0
 800374c:	20005080 	.word	0x20005080
 8003750:	20005084 	.word	0x20005084
 8003754:	2000515c 	.word	0x2000515c
 8003758:	20005158 	.word	0x20005158
 800375c:	2000507c 	.word	0x2000507c
 8003760:	20005088 	.word	0x20005088
 8003764:	2000511c 	.word	0x2000511c
 8003768:	200051a4 	.word	0x200051a4
 800376c:	20005128 	.word	0x20005128

08003770 <xTaskResumeAll>:
{
 8003770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003774:	4c31      	ldr	r4, [pc, #196]	; (800383c <xTaskResumeAll+0xcc>)
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	b943      	cbnz	r3, 800378c <xTaskResumeAll+0x1c>
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	e7fe      	b.n	800378a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800378c:	f7ff f93a 	bl	8002a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	3b01      	subs	r3, #1
 8003794:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003796:	6824      	ldr	r4, [r4, #0]
 8003798:	b12c      	cbz	r4, 80037a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800379a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800379c:	f7ff f954 	bl	8002a48 <vPortExitCritical>
}
 80037a0:	4620      	mov	r0, r4
 80037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <xTaskResumeAll+0xd0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f5      	beq.n	800379a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ae:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003858 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80037b2:	4f24      	ldr	r7, [pc, #144]	; (8003844 <xTaskResumeAll+0xd4>)
 80037b4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800385c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037b8:	f8d9 3000 	ldr.w	r3, [r9]
 80037bc:	b9e3      	cbnz	r3, 80037f8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80037be:	b10c      	cbz	r4, 80037c4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80037c0:	f7ff fdc8 	bl	8003354 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037c4:	4d20      	ldr	r5, [pc, #128]	; (8003848 <xTaskResumeAll+0xd8>)
 80037c6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037c8:	b144      	cbz	r4, 80037dc <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80037ca:	2701      	movs	r7, #1
 80037cc:	4e1f      	ldr	r6, [pc, #124]	; (800384c <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80037ce:	f7ff ff3d 	bl	800364c <xTaskIncrementTick>
 80037d2:	b100      	cbz	r0, 80037d6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80037d4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037d6:	3c01      	subs	r4, #1
 80037d8:	d1f9      	bne.n	80037ce <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80037da:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xTaskResumeAll+0xdc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0da      	beq.n	800379a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <xTaskResumeAll+0xe0>)
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80037f4:	2401      	movs	r4, #1
 80037f6:	e7d1      	b.n	800379c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80037fc:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037fe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003800:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003802:	f104 0018 	add.w	r0, r4, #24
 8003806:	f7ff f89b 	bl	8002940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff f898 	bl	8002940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003810:	2014      	movs	r0, #20
 8003812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	fa05 f302 	lsl.w	r3, r5, r2
 800381a:	430b      	orrs	r3, r1
 800381c:	fb00 8002 	mla	r0, r0, r2, r8
 8003820:	4631      	mov	r1, r6
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	f7ff f869 	bl	80028fa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <xTaskResumeAll+0xe4>)
 800382a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003832:	bf24      	itt	cs
 8003834:	4b05      	ldrcs	r3, [pc, #20]	; (800384c <xTaskResumeAll+0xdc>)
 8003836:	601d      	strcs	r5, [r3, #0]
 8003838:	e7be      	b.n	80037b8 <xTaskResumeAll+0x48>
 800383a:	bf00      	nop
 800383c:	20005120 	.word	0x20005120
 8003840:	20005114 	.word	0x20005114
 8003844:	20005128 	.word	0x20005128
 8003848:	2000511c 	.word	0x2000511c
 800384c:	200051a4 	.word	0x200051a4
 8003850:	e000ed04 	.word	0xe000ed04
 8003854:	2000507c 	.word	0x2000507c
 8003858:	20005160 	.word	0x20005160
 800385c:	20005088 	.word	0x20005088

08003860 <vTaskDelay>:
	{
 8003860:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003862:	b940      	cbnz	r0, 8003876 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <vTaskDelay+0x40>)
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <vTaskDelay+0x44>)
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	b141      	cbz	r1, 800388e <vTaskDelay+0x2e>
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	e7fe      	b.n	800388c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800388e:	f7ff fecf 	bl	8003630 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003892:	f7ff fd71 	bl	8003378 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003896:	f7ff ff6b 	bl	8003770 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800389a:	2800      	cmp	r0, #0
 800389c:	d0e2      	beq.n	8003864 <vTaskDelay+0x4>
 800389e:	bd08      	pop	{r3, pc}
 80038a0:	e000ed04 	.word	0xe000ed04
 80038a4:	20005120 	.word	0x20005120

080038a8 <prvIdleTask>:
{
 80038a8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80038aa:	4e17      	ldr	r6, [pc, #92]	; (8003908 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ac:	4c17      	ldr	r4, [pc, #92]	; (800390c <prvIdleTask+0x64>)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	b963      	cbnz	r3, 80038cc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <prvIdleTask+0x68>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d9f8      	bls.n	80038ac <prvIdleTask+0x4>
				taskYIELD();
 80038ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <prvIdleTask+0x6c>)
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	e7ef      	b.n	80038ac <prvIdleTask+0x4>
			vTaskSuspendAll();
 80038cc:	f7ff feb0 	bl	8003630 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80038d0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80038d2:	f7ff ff4d 	bl	8003770 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	d0e9      	beq.n	80038ae <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80038da:	f7ff f893 	bl	8002a04 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038de:	68f3      	ldr	r3, [r6, #12]
 80038e0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e2:	1d28      	adds	r0, r5, #4
 80038e4:	f7ff f82c 	bl	8002940 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80038e8:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <prvIdleTask+0x70>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80038f6:	f7ff f8a7 	bl	8002a48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80038fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80038fc:	f7ff fa2e 	bl	8002d5c <vPortFree>
			vPortFree( pxTCB );
 8003900:	4628      	mov	r0, r5
 8003902:	f7ff fa2b 	bl	8002d5c <vPortFree>
 8003906:	e7d2      	b.n	80038ae <prvIdleTask+0x6>
 8003908:	2000518c 	.word	0x2000518c
 800390c:	20005118 	.word	0x20005118
 8003910:	20005088 	.word	0x20005088
 8003914:	e000ed04 	.word	0xe000ed04
 8003918:	20005114 	.word	0x20005114

0800391c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <vTaskSwitchContext+0x60>)
{
 800391e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <vTaskSwitchContext+0x64>)
 8003924:	b112      	cbz	r2, 800392c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003926:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800392c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <vTaskSwitchContext+0x68>)
 8003930:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	2214      	movs	r2, #20
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f1c3 031f 	rsb	r3, r3, #31
 800393e:	435a      	muls	r2, r3
 8003940:	4911      	ldr	r1, [pc, #68]	; (8003988 <vTaskSwitchContext+0x6c>)
 8003942:	588c      	ldr	r4, [r1, r2]
 8003944:	1888      	adds	r0, r1, r2
 8003946:	b944      	cbnz	r4, 800395a <vTaskSwitchContext+0x3e>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	e7fe      	b.n	8003958 <vTaskSwitchContext+0x3c>
 800395a:	6844      	ldr	r4, [r0, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	6864      	ldr	r4, [r4, #4]
 8003960:	440a      	add	r2, r1
 8003962:	4294      	cmp	r4, r2
 8003964:	bf08      	it	eq
 8003966:	6862      	ldreq	r2, [r4, #4]
 8003968:	6044      	str	r4, [r0, #4]
 800396a:	bf08      	it	eq
 800396c:	6042      	streq	r2, [r0, #4]
 800396e:	2214      	movs	r2, #20
 8003970:	fb02 1303 	mla	r3, r2, r3, r1
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <vTaskSwitchContext+0x70>)
 800397a:	e7d5      	b.n	8003928 <vTaskSwitchContext+0xc>
 800397c:	20005120 	.word	0x20005120
 8003980:	200051a4 	.word	0x200051a4
 8003984:	20005128 	.word	0x20005128
 8003988:	20005088 	.word	0x20005088
 800398c:	2000507c 	.word	0x2000507c

08003990 <vTaskPlaceOnEventList>:
{
 8003990:	b510      	push	{r4, lr}
 8003992:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003994:	b940      	cbnz	r0, 80039a8 <vTaskPlaceOnEventList+0x18>
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	e7fe      	b.n	80039a6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <vTaskPlaceOnEventList+0x30>)
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	3118      	adds	r1, #24
 80039ae:	f7fe ffb0 	bl	8002912 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039b2:	4620      	mov	r0, r4
}
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039b8:	2101      	movs	r1, #1
 80039ba:	f7ff bcdd 	b.w	8003378 <prvAddCurrentTaskToDelayedList>
 80039be:	bf00      	nop
 80039c0:	2000507c 	.word	0x2000507c

080039c4 <xTaskRemoveFromEventList>:
{
 80039c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039c6:	68c3      	ldr	r3, [r0, #12]
 80039c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80039ca:	b944      	cbnz	r4, 80039de <xTaskRemoveFromEventList+0x1a>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	e7fe      	b.n	80039dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039de:	f104 0518 	add.w	r5, r4, #24
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7fe ffac 	bl	8002940 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <xTaskRemoveFromEventList+0x6c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b9e3      	cbnz	r3, 8003a28 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039ee:	1d25      	adds	r5, r4, #4
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7fe ffa5 	bl	8002940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039f6:	2301      	movs	r3, #1
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <xTaskRemoveFromEventList+0x70>)
 80039fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039fc:	6808      	ldr	r0, [r1, #0]
 80039fe:	4093      	lsls	r3, r2
 8003a00:	4303      	orrs	r3, r0
 8003a02:	2014      	movs	r0, #20
 8003a04:	600b      	str	r3, [r1, #0]
 8003a06:	4629      	mov	r1, r5
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <xTaskRemoveFromEventList+0x74>)
 8003a0a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a0e:	f7fe ff74 	bl	80028fa <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <xTaskRemoveFromEventList+0x78>)
 8003a14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003a1c:	bf85      	ittet	hi
 8003a1e:	2001      	movhi	r0, #1
 8003a20:	4b07      	ldrhi	r3, [pc, #28]	; (8003a40 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8003a22:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003a24:	6018      	strhi	r0, [r3, #0]
}
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <xTaskRemoveFromEventList+0x80>)
 8003a2c:	e7ef      	b.n	8003a0e <xTaskRemoveFromEventList+0x4a>
 8003a2e:	bf00      	nop
 8003a30:	20005120 	.word	0x20005120
 8003a34:	20005128 	.word	0x20005128
 8003a38:	20005088 	.word	0x20005088
 8003a3c:	2000507c 	.word	0x2000507c
 8003a40:	200051a4 	.word	0x200051a4
 8003a44:	20005160 	.word	0x20005160

08003a48 <vTaskSetTimeOutState>:
{
 8003a48:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003a4a:	b908      	cbnz	r0, 8003a50 <vTaskSetTimeOutState+0x8>
 8003a4c:	f7ff fcda 	bl	8003404 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <vTaskSetTimeOutState+0x18>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a56:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <vTaskSetTimeOutState+0x1c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6043      	str	r3, [r0, #4]
 8003a5c:	bd08      	pop	{r3, pc}
 8003a5e:	bf00      	nop
 8003a60:	2000515c 	.word	0x2000515c
 8003a64:	200051a0 	.word	0x200051a0

08003a68 <xTaskCheckForTimeOut>:
{
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	b940      	cbnz	r0, 8003a82 <xTaskCheckForTimeOut+0x1a>
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	e7fe      	b.n	8003a80 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003a82:	b941      	cbnz	r1, 8003a96 <xTaskCheckForTimeOut+0x2e>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	e7fe      	b.n	8003a94 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003a96:	f7fe ffb5 	bl	8002a04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <xTaskCheckForTimeOut+0x6c>)
 8003a9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	d010      	beq.n	8003ac6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <xTaskCheckForTimeOut+0x70>)
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	d001      	beq.n	8003ab4 <xTaskCheckForTimeOut+0x4c>
 8003ab0:	4291      	cmp	r1, r2
 8003ab2:	d20d      	bcs.n	8003ad0 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ab4:	1a88      	subs	r0, r1, r2
 8003ab6:	4283      	cmp	r3, r0
 8003ab8:	d90a      	bls.n	8003ad0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003aba:	1a5b      	subs	r3, r3, r1
 8003abc:	4413      	add	r3, r2
 8003abe:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ffc1 	bl	8003a48 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003ac6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003ac8:	f7fe ffbe 	bl	8002a48 <vPortExitCritical>
}
 8003acc:	4620      	mov	r0, r4
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003ad0:	2401      	movs	r4, #1
 8003ad2:	e7f9      	b.n	8003ac8 <xTaskCheckForTimeOut+0x60>
 8003ad4:	200051a0 	.word	0x200051a0
 8003ad8:	2000515c 	.word	0x2000515c

08003adc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003adc:	2201      	movs	r2, #1
 8003ade:	4b01      	ldr	r3, [pc, #4]	; (8003ae4 <vTaskMissedYield+0x8>)
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	4770      	bx	lr
 8003ae4:	200051a4 	.word	0x200051a4

08003ae8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <xTaskGetSchedulerState+0x18>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b133      	cbz	r3, 8003afc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <xTaskGetSchedulerState+0x1c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003af4:	bf0c      	ite	eq
 8003af6:	2002      	moveq	r0, #2
 8003af8:	2000      	movne	r0, #0
 8003afa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003afc:	2001      	movs	r0, #1
	}
 8003afe:	4770      	bx	lr
 8003b00:	20005174 	.word	0x20005174
 8003b04:	20005120 	.word	0x20005120

08003b08 <vTaskPriorityInherit>:
	{
 8003b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d039      	beq.n	8003b86 <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b12:	4d1e      	ldr	r5, [pc, #120]	; (8003b8c <vTaskPriorityInherit+0x84>)
 8003b14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b16:	682a      	ldr	r2, [r5, #0]
 8003b18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d233      	bcs.n	8003b86 <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b1e:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b20:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b22:	4e1b      	ldr	r6, [pc, #108]	; (8003b90 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b24:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b26:	bfa8      	it	ge
 8003b28:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b2a:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2e:	bfa2      	ittt	ge
 8003b30:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003b32:	f1c2 0207 	rsbge	r2, r2, #7
 8003b36:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b38:	6942      	ldr	r2, [r0, #20]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d120      	bne.n	8003b80 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b3e:	f100 0804 	add.w	r8, r0, #4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7fe fefc 	bl	8002940 <uxListRemove>
 8003b48:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <vTaskPriorityInherit+0x8c>)
 8003b4a:	b948      	cbnz	r0, 8003b60 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003b4e:	4347      	muls	r7, r0
 8003b50:	59f3      	ldr	r3, [r6, r7]
 8003b52:	b92b      	cbnz	r3, 8003b60 <vTaskPriorityInherit+0x58>
 8003b54:	2101      	movs	r1, #1
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	4081      	lsls	r1, r0
 8003b5a:	ea23 0301 	bic.w	r3, r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b60:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003b62:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b66:	2301      	movs	r3, #1
 8003b68:	4083      	lsls	r3, r0
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b70:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b72:	4641      	mov	r1, r8
 8003b74:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003b7c:	f7fe bebd 	b.w	80028fa <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000507c 	.word	0x2000507c
 8003b90:	20005088 	.word	0x20005088
 8003b94:	20005128 	.word	0x20005128

08003b98 <xTaskPriorityDisinherit>:
	{
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	b908      	cbnz	r0, 8003ba2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <xTaskPriorityDisinherit+0x94>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4298      	cmp	r0, r3
 8003ba8:	d008      	beq.n	8003bbc <xTaskPriorityDisinherit+0x24>
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	e7fe      	b.n	8003bba <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bbc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003bbe:	b943      	cbnz	r3, 8003bd2 <xTaskPriorityDisinherit+0x3a>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003bd6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bd8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003bda:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bdc:	d0df      	beq.n	8003b9e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1dd      	bne.n	8003b9e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003be2:	1d05      	adds	r5, r0, #4
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7fe feab 	bl	8002940 <uxListRemove>
 8003bea:	4e11      	ldr	r6, [pc, #68]	; (8003c30 <xTaskPriorityDisinherit+0x98>)
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <xTaskPriorityDisinherit+0x9c>)
 8003bee:	b950      	cbnz	r0, 8003c06 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bf0:	2114      	movs	r1, #20
 8003bf2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bf4:	4379      	muls	r1, r7
 8003bf6:	5873      	ldr	r3, [r6, r1]
 8003bf8:	b92b      	cbnz	r3, 8003c06 <xTaskPriorityDisinherit+0x6e>
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	40b8      	lsls	r0, r7
 8003c00:	ea23 0300 	bic.w	r3, r3, r0
 8003c04:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c06:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c08:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c10:	2401      	movs	r4, #1
 8003c12:	6811      	ldr	r1, [r2, #0]
 8003c14:	fa04 f003 	lsl.w	r0, r4, r3
 8003c18:	4308      	orrs	r0, r1
 8003c1a:	6010      	str	r0, [r2, #0]
 8003c1c:	2014      	movs	r0, #20
 8003c1e:	4629      	mov	r1, r5
 8003c20:	fb00 6003 	mla	r0, r0, r3, r6
 8003c24:	f7fe fe69 	bl	80028fa <vListInsertEnd>
					xReturn = pdTRUE;
 8003c28:	4620      	mov	r0, r4
	}
 8003c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2c:	2000507c 	.word	0x2000507c
 8003c30:	20005088 	.word	0x20005088
 8003c34:	20005128 	.word	0x20005128

08003c38 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <pvTaskIncrementMutexHeldCount+0x14>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	b11a      	cbz	r2, 8003c46 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003c42:	3201      	adds	r2, #1
 8003c44:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003c46:	6818      	ldr	r0, [r3, #0]
	}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000507c 	.word	0x2000507c

08003c50 <fir_filter>:

extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint8_t p_recCommandBuffer;

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 8003c54:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c56:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8003c58:	4d0f      	ldr	r5, [pc, #60]	; (8003c98 <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c5a:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8003c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c68:	e884 0003 	stmia.w	r4, {r0, r1}
 8003c6c:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8003c70:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 8003c74:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 8003c76:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 8003c78:	d1fa      	bne.n	8003c70 <fir_filter+0x20>
	}

	signal[0] = sample;
 8003c7a:	2300      	movs	r3, #0
	filteredSample = 0;
 8003c7c:	4618      	mov	r0, r3
	signal[0] = sample;
 8003c7e:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003c80:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8003c84:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 8003c88:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 8003c8a:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003c8c:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 8003c90:	d1f6      	bne.n	8003c80 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 8003c92:	0c00      	lsrs	r0, r0, #16
 8003c94:	b00b      	add	sp, #44	; 0x2c
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c98:	08006fe4 	.word	0x08006fe4

08003c9c <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 8003ca0:	2214      	movs	r2, #20
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4668      	mov	r0, sp
 8003ca6:	f002 f862 	bl	8005d6e <memset>
	uint16_t sens2_array[10] = {2};
 8003caa:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 8003cac:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 8003cae:	2100      	movs	r1, #0
 8003cb0:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 8003cb4:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 8003cb8:	f002 f859 	bl	8005d6e <memset>
 8003cbc:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 8003cbe:	2214      	movs	r2, #20
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 8003cc4:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 8003cc8:	f002 f851 	bl	8005d6e <memset>
 8003ccc:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 8003cce:	2214      	movs	r2, #20
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (controllerState.lastTimeCommand > 50){
 8003cd4:	4e69      	ldr	r6, [pc, #420]	; (8003e7c <xStoreADCDataTask+0x1e0>)
	uint16_t sens3_array[10] = {3};
 8003cd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8003cda:	f002 f848 	bl	8005d6e <memset>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	4634      	mov	r4, r6
			}
			else{
				controllerState.lastTimeCommand++;
				if (controllerState.lastTimeCommand > 600){

					CMD_RF_ON;
 8003ce2:	4f67      	ldr	r7, [pc, #412]	; (8003e80 <xStoreADCDataTask+0x1e4>)
	uint16_t sens4_array[10] = {4};
 8003ce4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (controllerState.lastTimeCommand > 50){
 8003ce8:	8bf3      	ldrh	r3, [r6, #30]
 8003cea:	2b32      	cmp	r3, #50	; 0x32
 8003cec:	f240 808d 	bls.w	8003e0a <xStoreADCDataTask+0x16e>
			if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8003cf0:	7875      	ldrb	r5, [r6, #1]
 8003cf2:	bb6d      	cbnz	r5, 8003d50 <xStoreADCDataTask+0xb4>
				C1_UP_OFF;
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cfa:	4862      	ldr	r0, [pc, #392]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003cfc:	f7fd ff00 	bl	8001b00 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8003d00:	462a      	mov	r2, r5
 8003d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d06:	485f      	ldr	r0, [pc, #380]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003d08:	f7fd fefa 	bl	8001b00 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8003d0c:	462a      	mov	r2, r5
 8003d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d12:	485c      	ldr	r0, [pc, #368]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003d14:	f7fd fef4 	bl	8001b00 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8003d18:	462a      	mov	r2, r5
 8003d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d1e:	4859      	ldr	r0, [pc, #356]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003d20:	f7fd feee 	bl	8001b00 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8003d24:	462a      	mov	r2, r5
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	4857      	ldr	r0, [pc, #348]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003d2a:	f7fd fee9 	bl	8001b00 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8003d2e:	462a      	mov	r2, r5
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	4855      	ldr	r0, [pc, #340]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003d34:	f7fd fee4 	bl	8001b00 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8003d38:	462a      	mov	r2, r5
 8003d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d3e:	4852      	ldr	r0, [pc, #328]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003d40:	f7fd fede 	bl	8001b00 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8003d44:	462a      	mov	r2, r5
 8003d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d4a:	484f      	ldr	r0, [pc, #316]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003d4c:	f7fd fed8 	bl	8001b00 <HAL_GPIO_WritePin>
			if (controllerState.soundIndicationState != SEARCH_INDICATION){
 8003d50:	78e5      	ldrb	r5, [r4, #3]
 8003d52:	2d01      	cmp	r5, #1
 8003d54:	d032      	beq.n	8003dbc <xStoreADCDataTask+0x120>
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

					vTaskDelay(50 / portTICK_RATE_MS);
					CMD_RF_OFF;

					controllerState.soundIndicationState = NORMAL_INDICATION;
 8003d56:	2300      	movs	r3, #0
 8003d58:	70e3      	strb	r3, [r4, #3]
					controllerState.lastTimeCommand = 0;
 8003d5a:	83e3      	strh	r3, [r4, #30]
		}
		else{
			controllerState.lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <xStoreADCDataTask+0x1f0>)
 8003d5e:	4d4c      	ldr	r5, [pc, #304]	; (8003e90 <xStoreADCDataTask+0x1f4>)
 8003d60:	881a      	ldrh	r2, [r3, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
		sensorValue[SENS_3] = ADCRawData[SENS_3];
		sensorValue[SENS_4] = ADCRawData[SENS_4];

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003d62:	484c      	ldr	r0, [pc, #304]	; (8003e94 <xStoreADCDataTask+0x1f8>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003d64:	802a      	strh	r2, [r5, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8003d66:	885a      	ldrh	r2, [r3, #2]
 8003d68:	806a      	strh	r2, [r5, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003d6a:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003d6c:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003d6e:	80aa      	strh	r2, [r5, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003d70:	80eb      	strh	r3, [r5, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003d72:	f7fd f933 	bl	8000fdc <HAL_ADCEx_InjectedStart_IT>
		//HAL_ADCEx_InjectedStart_IT(&hadc2);


		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003d76:	8829      	ldrh	r1, [r5, #0]
 8003d78:	4668      	mov	r0, sp
 8003d7a:	f7ff ff69 	bl	8003c50 <fir_filter>
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d7e:	8869      	ldrh	r1, [r5, #2]
		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003d80:	81e0      	strh	r0, [r4, #14]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d82:	a805      	add	r0, sp, #20
 8003d84:	f7ff ff64 	bl	8003c50 <fir_filter>
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003d88:	88a9      	ldrh	r1, [r5, #4]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d8a:	8220      	strh	r0, [r4, #16]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003d8c:	a80a      	add	r0, sp, #40	; 0x28
 8003d8e:	f7ff ff5f 	bl	8003c50 <fir_filter>
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003d92:	88e9      	ldrh	r1, [r5, #6]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003d94:	8260      	strh	r0, [r4, #18]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003d96:	a80f      	add	r0, sp, #60	; 0x3c
 8003d98:	f7ff ff5a 	bl	8003c50 <fir_filter>


		if (controllerState.pressureCompensation == COMPENSATION_ON){
 8003d9c:	7863      	ldrb	r3, [r4, #1]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003d9e:	82a0      	strh	r0, [r4, #20]
		if (controllerState.pressureCompensation == COMPENSATION_ON){
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d135      	bne.n	8003e10 <xStoreADCDataTask+0x174>
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003da4:	2300      	movs	r3, #0
			xSemaphoreGive(xPressureCompensationSemaphore);
 8003da6:	483c      	ldr	r0, [pc, #240]	; (8003e98 <xStoreADCDataTask+0x1fc>)
 8003da8:	461a      	mov	r2, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	6800      	ldr	r0, [r0, #0]
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003dae:	70a3      	strb	r3, [r4, #2]
			xSemaphoreGive(xPressureCompensationSemaphore);
 8003db0:	f7ff f8f4 	bl	8002f9c <xQueueGenericSend>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 8003db4:	2032      	movs	r0, #50	; 0x32
 8003db6:	f7ff fd53 	bl	8003860 <vTaskDelay>
		if (controllerState.lastTimeCommand > 50){
 8003dba:	e795      	b.n	8003ce8 <xStoreADCDataTask+0x4c>
				controllerState.lastTimeCommand++;
 8003dbc:	8be3      	ldrh	r3, [r4, #30]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	b29b      	uxth	r3, r3
				if (controllerState.lastTimeCommand > 600){
 8003dc2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				controllerState.lastTimeCommand++;
 8003dc6:	83e3      	strh	r3, [r4, #30]
				if (controllerState.lastTimeCommand > 600){
 8003dc8:	d9c8      	bls.n	8003d5c <xStoreADCDataTask+0xc0>
					CMD_RF_ON;
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7fd fe95 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8003dd6:	2032      	movs	r0, #50	; 0x32
 8003dd8:	f7ff fd42 	bl	8003860 <vTaskDelay>
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8003ddc:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <xStoreADCDataTask+0x200>)
 8003dde:	4930      	ldr	r1, [pc, #192]	; (8003ea0 <xStoreADCDataTask+0x204>)
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	4830      	ldr	r0, [pc, #192]	; (8003ea4 <xStoreADCDataTask+0x208>)
 8003de4:	f001 ffcc 	bl	8005d80 <siprintf>
 8003de8:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <xStoreADCDataTask+0x20c>)
 8003dea:	b2c2      	uxtb	r2, r0
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8003dec:	492d      	ldr	r1, [pc, #180]	; (8003ea4 <xStoreADCDataTask+0x208>)
 8003dee:	482f      	ldr	r0, [pc, #188]	; (8003eac <xStoreADCDataTask+0x210>)
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8003df0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8003df2:	f7fe fbff 	bl	80025f4 <HAL_UART_Transmit_DMA>
					vTaskDelay(50 / portTICK_RATE_MS);
 8003df6:	2032      	movs	r0, #50	; 0x32
 8003df8:	f7ff fd32 	bl	8003860 <vTaskDelay>
					CMD_RF_OFF;
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e02:	4638      	mov	r0, r7
 8003e04:	f7fd fe7c 	bl	8001b00 <HAL_GPIO_WritePin>
 8003e08:	e7a5      	b.n	8003d56 <xStoreADCDataTask+0xba>
			controllerState.lastTimeCommand++;
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	83f3      	strh	r3, [r6, #30]
 8003e0e:	e7a5      	b.n	8003d5c <xStoreADCDataTask+0xc0>
			if (controllerState.prevPressureCompensation == COMPENSATION_ON){
 8003e10:	78a3      	ldrb	r3, [r4, #2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d1ce      	bne.n	8003db4 <xStoreADCDataTask+0x118>
				controllerState.numberOfTries = 0;
 8003e16:	2500      	movs	r5, #0
				C1_UP_OFF;
 8003e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	4819      	ldr	r0, [pc, #100]	; (8003e84 <xStoreADCDataTask+0x1e8>)
				controllerState.numberOfTries = 0;
 8003e20:	7765      	strb	r5, [r4, #29]
				C1_UP_OFF;
 8003e22:	f7fd fe6d 	bl	8001b00 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8003e26:	462a      	mov	r2, r5
 8003e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e2c:	4815      	ldr	r0, [pc, #84]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003e2e:	f7fd fe67 	bl	8001b00 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8003e32:	462a      	mov	r2, r5
 8003e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e38:	4812      	ldr	r0, [pc, #72]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003e3a:	f7fd fe61 	bl	8001b00 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8003e3e:	462a      	mov	r2, r5
 8003e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e44:	480f      	ldr	r0, [pc, #60]	; (8003e84 <xStoreADCDataTask+0x1e8>)
 8003e46:	f7fd fe5b 	bl	8001b00 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	480e      	ldr	r0, [pc, #56]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003e50:	f7fd fe56 	bl	8001b00 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8003e54:	462a      	mov	r2, r5
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003e5a:	f7fd fe51 	bl	8001b00 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8003e5e:	462a      	mov	r2, r5
 8003e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003e66:	f7fd fe4b 	bl	8001b00 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8003e6a:	462a      	mov	r2, r5
 8003e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <xStoreADCDataTask+0x1ec>)
 8003e72:	f7fd fe45 	bl	8001b00 <HAL_GPIO_WritePin>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
 8003e76:	70a5      	strb	r5, [r4, #2]
 8003e78:	e79c      	b.n	8003db4 <xStoreADCDataTask+0x118>
 8003e7a:	bf00      	nop
 8003e7c:	20005268 	.word	0x20005268
 8003e80:	40010800 	.word	0x40010800
 8003e84:	40010c00 	.word	0x40010c00
 8003e88:	40011000 	.word	0x40011000
 8003e8c:	20005344 	.word	0x20005344
 8003e90:	20005436 	.word	0x20005436
 8003e94:	200053c4 	.word	0x200053c4
 8003e98:	2000537c 	.word	0x2000537c
 8003e9c:	2000523c 	.word	0x2000523c
 8003ea0:	0800702d 	.word	0x0800702d
 8003ea4:	200051b9 	.word	0x200051b9
 8003ea8:	20005239 	.word	0x20005239
 8003eac:	200053f4 	.word	0x200053f4

08003eb0 <xAnalyzeTask>:

extern char message[128];
extern uint8_t messageLength;


void xAnalyzeTask(void *arguments){
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;

	uint8_t i = 0;
	int16_t deltaPressure = 0;

	int32_t impTime[4] = {0, 1, 2, 3};
 8003eb4:	4bbe      	ldr	r3, [pc, #760]	; (80041b0 <xAnalyzeTask+0x300>)
void xAnalyzeTask(void *arguments){
 8003eb6:	b093      	sub	sp, #76	; 0x4c
	int32_t impTime[4] = {0, 1, 2, 3};
 8003eb8:	ac0e      	add	r4, sp, #56	; 0x38
 8003eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t startPressure[4];
	uint32_t dCounter = 0;
	uint8_t stopImp = 0;
	uint32_t impCounter = 0;
	uint8_t numOfAxles = 0;
	uint8_t numOfWays[2] = {0, 0};
 8003ec0:	2300      	movs	r3, #0

	int8_t goodPressCounter = 0;
	int32_t maxUpImp = 0;


	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003ec2:	48bc      	ldr	r0, [pc, #752]	; (80041b4 <xAnalyzeTask+0x304>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6800      	ldr	r0, [r0, #0]
	uint8_t numOfWays[2] = {0, 0};
 8003ecc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	int8_t pressIsLower[4] = {0};
 8003ed4:	930b      	str	r3, [sp, #44]	; 0x2c
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003ed6:	f7ff f979 	bl	80031cc <xQueueGenericReceive>
	for(;;){
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003eda:	4cb6      	ldr	r4, [pc, #728]	; (80041b4 <xAnalyzeTask+0x304>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	f7ff f971 	bl	80031cc <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8003eea:	2801      	cmp	r0, #1
 8003eec:	d1f6      	bne.n	8003edc <xAnalyzeTask+0x2c>
 8003eee:	2200      	movs	r2, #0
/*
 * ---------------------------------------------------------------------------
 * +++++++++++++++++++++++++++++++++ RECEIVER ++++++++++++++++++++++++++++++++
 * ---------------------------------------------------------------------------
 */
			if (controllerState.airSystemType == RECEIVER){
 8003ef0:	4cb1      	ldr	r4, [pc, #708]	; (80041b8 <xAnalyzeTask+0x308>)
 8003ef2:	7923      	ldrb	r3, [r4, #4]
 8003ef4:	46a3      	mov	fp, r4
 8003ef6:	2b01      	cmp	r3, #1
				//-------- check for number of tries -----------------
				controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8003ef8:	7022      	strb	r2, [r4, #0]
 8003efa:	7f63      	ldrb	r3, [r4, #29]
			if (controllerState.airSystemType == RECEIVER){
 8003efc:	f040 82b0 	bne.w	8004460 <xAnalyzeTask+0x5b0>
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d919      	bls.n	8003f38 <xAnalyzeTask+0x88>
					controllerState.numberOfTries = 0;
					controllerState.pressureCompensation = COMPENSATION_OFF;

					#if DEBUG_SERIAL
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 8003f04:	49ad      	ldr	r1, [pc, #692]	; (80041bc <xAnalyzeTask+0x30c>)
 8003f06:	48ae      	ldr	r0, [pc, #696]	; (80041c0 <xAnalyzeTask+0x310>)
					controllerState.numberOfTries = 0;
 8003f08:	7762      	strb	r2, [r4, #29]
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8003f0a:	7062      	strb	r2, [r4, #1]
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 8003f0c:	f001 ff88 	bl	8005e20 <strcpy>
 8003f10:	2215      	movs	r2, #21
 8003f12:	4bac      	ldr	r3, [pc, #688]	; (80041c4 <xAnalyzeTask+0x314>)
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8003f14:	49aa      	ldr	r1, [pc, #680]	; (80041c0 <xAnalyzeTask+0x310>)
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 8003f16:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8003f18:	48ab      	ldr	r0, [pc, #684]	; (80041c8 <xAnalyzeTask+0x318>)
 8003f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f1e:	f7fe fae5 	bl	80024ec <HAL_UART_Transmit>
				else{
					controllerState.numberOfTries += 1;
				}

				//axles calculations
				switch (controllerState.waysType){
 8003f22:	7ea3      	ldrb	r3, [r4, #26]
 8003f24:	2200      	movs	r2, #0
 8003f26:	3b01      	subs	r3, #1
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	f200 8334 	bhi.w	8004596 <xAnalyzeTask+0x6e6>
 8003f2e:	e8df f003 	tbb	[pc, r3]
 8003f32:	0c06      	.short	0x0c06
 8003f34:	49443d36 	.word	0x49443d36
					controllerState.numberOfTries += 1;
 8003f38:	3301      	adds	r3, #1
 8003f3a:	7763      	strb	r3, [r4, #29]
 8003f3c:	e7f1      	b.n	8003f22 <xAnalyzeTask+0x72>
					case 1:{ // Single Way
						numOfAxles = 1;
						numOfWays[0] = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						break;
					}
					case VIEW_2_1:{ //THREE WAYS
						numOfAxles = 2;
						numOfWays[0] = 2;
						numOfWays[1] = 1;
 8003f44:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8003f48:	e005      	b.n	8003f56 <xAnalyzeTask+0xa6>
						numOfWays[0] = 2;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfAxles = 1;
 8003f50:	2301      	movs	r3, #1
						numOfWays[1] = 0;
 8003f52:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
					}

				}

				//-------- looking at pressure delta -----------------
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003f56:	2100      	movs	r1, #0
						else
							pressIsLower[i] = 0; //if need to lower
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
					}
					else{
						pressIsLower[i] = -1; //if not need to change
 8003f58:	f04f 08ff 	mov.w	r8, #255	; 0xff
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	f04f 0901 	mov.w	r9, #1
							pressIsLower[i] = 0; //if need to lower
 8003f62:	468a      	mov	sl, r1
						numOfAxles = 2;
 8003f64:	9306      	str	r3, [sp, #24]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003f66:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8003f6a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
					if (deltaPressure > controllerState.analyzeAccuracy){
 8003f6e:	f894 c01b 	ldrb.w	ip, [r4, #27]
 8003f72:	f894 e000 	ldrb.w	lr, [r4]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8003f76:	441e      	add	r6, r3
 8003f78:	b2cb      	uxtb	r3, r1
 8003f7a:	42b3      	cmp	r3, r6
 8003f7c:	db26      	blt.n	8003fcc <xAnalyzeTask+0x11c>
 8003f7e:	b10d      	cbz	r5, 8003f84 <xAnalyzeTask+0xd4>
 8003f80:	f884 e000 	strb.w	lr, [r4]
					}
				}

				//-------- if everything is OK stop compensation -----------------
				if (controllerState.analyzeState == COMPENSATION_STATE_FREE){
 8003f84:	7823      	ldrb	r3, [r4, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d141      	bne.n	800400e <xAnalyzeTask+0x15e>
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	7063      	strb	r3, [r4, #1]
					impTime[0] = 0;
 8003f8e:	930e      	str	r3, [sp, #56]	; 0x38
					impTime[1] = 0;
 8003f90:	930f      	str	r3, [sp, #60]	; 0x3c
					impTime[2] = 0;
 8003f92:	9310      	str	r3, [sp, #64]	; 0x40
					impTime[3] = 0;
 8003f94:	9311      	str	r3, [sp, #68]	; 0x44
					controllerState.numberOfTries = 0;
 8003f96:	7763      	strb	r3, [r4, #29]

					mWrite_flash();
 8003f98:	f000 ff7c 	bl	8004e94 <mWrite_flash>
					continue;
 8003f9c:	e79d      	b.n	8003eda <xAnalyzeTask+0x2a>
						numOfWays[0] = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfWays[1] = 1;
 8003fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
						numOfAxles = 2;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e7d4      	b.n	8003f56 <xAnalyzeTask+0xa6>
						numOfWays[0] = 1;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfWays[1] = 2;
 8003fb2:	2302      	movs	r3, #2
						numOfWays[1] = 2;
 8003fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fb8:	e7cd      	b.n	8003f56 <xAnalyzeTask+0xa6>
						numOfWays[0] = 2;
 8003fba:	2302      	movs	r3, #2
						numOfWays[1] = 1;
 8003fbc:	2201      	movs	r2, #1
						numOfWays[0] = 2;
 8003fbe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003fc2:	e7bf      	b.n	8003f44 <xAnalyzeTask+0x94>
						numOfWays[0] = 2;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003fca:	e7f3      	b.n	8003fb4 <xAnalyzeTask+0x104>
					startPressure[i] = controllerState.filteredData[i];
 8003fcc:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 8003fd0:	89d0      	ldrh	r0, [r2, #14]
 8003fd2:	af12      	add	r7, sp, #72	; 0x48
 8003fd4:	005a      	lsls	r2, r3, #1
 8003fd6:	4417      	add	r7, r2
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003fd8:	445a      	add	r2, fp
					startPressure[i] = controllerState.filteredData[i];
 8003fda:	f827 0c18 	strh.w	r0, [r7, #-24]
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8003fde:	88d7      	ldrh	r7, [r2, #6]
 8003fe0:	1a3a      	subs	r2, r7, r0
					deltaPressure = abs(deltaPressure);
 8003fe2:	b212      	sxth	r2, r2
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	bfb8      	it	lt
 8003fe8:	4252      	neglt	r2, r2
					if (deltaPressure > controllerState.analyzeAccuracy){
 8003fea:	b212      	sxth	r2, r2
 8003fec:	4562      	cmp	r2, ip
 8003fee:	aa12      	add	r2, sp, #72	; 0x48
 8003ff0:	4413      	add	r3, r2
 8003ff2:	dd09      	ble.n	8004008 <xAnalyzeTask+0x158>
 8003ff4:	2501      	movs	r5, #1
						if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 8003ff6:	42b8      	cmp	r0, r7
							pressIsLower[i] = 1; //if need to lift
 8003ff8:	bf2c      	ite	cs
 8003ffa:	4652      	movcs	r2, sl
 8003ffc:	464a      	movcc	r2, r9
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
 8003ffe:	46ae      	mov	lr, r5
							pressIsLower[i] = 1; //if need to lift
 8004000:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8004004:	3101      	adds	r1, #1
 8004006:	e7b7      	b.n	8003f78 <xAnalyzeTask+0xc8>
						pressIsLower[i] = -1; //if not need to change
 8004008:	f803 8c1c 	strb.w	r8, [r3, #-28]
 800400c:	e7fa      	b.n	8004004 <xAnalyzeTask+0x154>
				}

				//calculate impulse
				#if DEBUG_SERIAL
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
 800400e:	496f      	ldr	r1, [pc, #444]	; (80041cc <xAnalyzeTask+0x31c>)
 8004010:	486b      	ldr	r0, [pc, #428]	; (80041c0 <xAnalyzeTask+0x310>)
 8004012:	f001 ff05 	bl	8005e20 <strcpy>
 8004016:	2216      	movs	r2, #22
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004018:	f04f 0a00 	mov.w	sl, #0
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
 800401c:	4d69      	ldr	r5, [pc, #420]	; (80041c4 <xAnalyzeTask+0x314>)
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800401e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004022:	4967      	ldr	r1, [pc, #412]	; (80041c0 <xAnalyzeTask+0x310>)
 8004024:	4868      	ldr	r0, [pc, #416]	; (80041c8 <xAnalyzeTask+0x318>)
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
 8004026:	702a      	strb	r2, [r5, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004028:	f7fe fa60 	bl	80024ec <HAL_UART_Transmit>
 800402c:	9508      	str	r5, [sp, #32]
 800402e:	fa5f f38a 	uxtb.w	r3, sl
 8004032:	9307      	str	r3, [sp, #28]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8004034:	f04f 0900 	mov.w	r9, #0
						}
						else if (pressIsLower[i] == 0){
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);

							#if DEBUG_SERIAL
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 8004038:	4e61      	ldr	r6, [pc, #388]	; (80041c0 <xAnalyzeTask+0x310>)
 800403a:	e068      	b.n	800410e <xAnalyzeTask+0x25e>
						i = axleCounter*numOfWays[0] + wayCounter;
 800403c:	9907      	ldr	r1, [sp, #28]
 800403e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8004042:	fb02 3201 	mla	r2, r2, r1, r3
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	1d17      	adds	r7, r2, #4
 800404a:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
 800404e:	eb0b 0347 	add.w	r3, fp, r7, lsl #1
 8004052:	88db      	ldrh	r3, [r3, #6]
 8004054:	88c8      	ldrh	r0, [r1, #6]
 8004056:	0095      	lsls	r5, r2, #2
 8004058:	1ac0      	subs	r0, r0, r3
						if (pressIsLower[i] == 1){
 800405a:	ab12      	add	r3, sp, #72	; 0x48
 800405c:	4413      	add	r3, r2
 800405e:	f913 8c1c 	ldrsb.w	r8, [r3, #-28]
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8004062:	b200      	sxth	r0, r0
						if (pressIsLower[i] == 1){
 8004064:	f1b8 0f01 	cmp.w	r8, #1
 8004068:	d128      	bne.n	80040bc <xAnalyzeTask+0x20c>
							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 800406a:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <xAnalyzeTask+0x320>)
 800406c:	9209      	str	r2, [sp, #36]	; 0x24
 800406e:	195f      	adds	r7, r3, r5
 8004070:	f7fc f9ac 	bl	80003cc <__aeabi_i2f>
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	f7fc f9fd 	bl	8000474 <__aeabi_fmul>
 800407a:	f7fc fbc1 	bl	8000800 <__aeabi_f2iz>
 800407e:	ab12      	add	r3, sp, #72	; 0x48
 8004080:	441d      	add	r5, r3
 8004082:	4607      	mov	r7, r0
								messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
 8004084:	4603      	mov	r3, r0
							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 8004086:	f845 0c10 	str.w	r0, [r5, #-16]
								messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
 800408a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800408c:	4951      	ldr	r1, [pc, #324]	; (80041d4 <xAnalyzeTask+0x324>)
 800408e:	4630      	mov	r0, r6
 8004090:	f001 fe76 	bl	8005d80 <siprintf>
 8004094:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <xAnalyzeTask+0x314>)
 8004096:	b2c2      	uxtb	r2, r0
 8004098:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800409a:	4631      	mov	r1, r6
 800409c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a0:	4849      	ldr	r0, [pc, #292]	; (80041c8 <xAnalyzeTask+0x318>)
 80040a2:	f7fe fa23 	bl	80024ec <HAL_UART_Transmit>
							if (impTime[i] < 0) impTime[i] = 0;
 80040a6:	2f00      	cmp	r7, #0
 80040a8:	da01      	bge.n	80040ae <xAnalyzeTask+0x1fe>
							else if (impTime[i] == 0) impTime[i] = 500;
							else if (impTime[i] > 10000) impTime[i] = 10000;
							else if (impTime[i] > 30000) impTime[i] = 500;
						}
						else{
							impTime[i] = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e003      	b.n	80040b6 <xAnalyzeTask+0x206>
							else if (impTime[i] == 0) impTime[i] = 1000;
 80040ae:	f040 809f 	bne.w	80041f0 <xAnalyzeTask+0x340>
 80040b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
							impTime[i] = 0;
 80040b6:	f845 3c10 	str.w	r3, [r5, #-16]
 80040ba:	e026      	b.n	800410a <xAnalyzeTask+0x25a>
						else if (pressIsLower[i] == 0){
 80040bc:	f1b8 0f00 	cmp.w	r8, #0
 80040c0:	f040 809b 	bne.w	80041fa <xAnalyzeTask+0x34a>
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 80040c4:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <xAnalyzeTask+0x320>)
 80040c6:	9209      	str	r2, [sp, #36]	; 0x24
 80040c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80040cc:	f7fc f97e 	bl	80003cc <__aeabi_i2f>
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	f7fc f9cf 	bl	8000474 <__aeabi_fmul>
 80040d6:	f7fc fb93 	bl	8000800 <__aeabi_f2iz>
 80040da:	ab12      	add	r3, sp, #72	; 0x48
 80040dc:	441d      	add	r5, r3
 80040de:	4607      	mov	r7, r0
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 80040e0:	4603      	mov	r3, r0
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 80040e2:	f845 0c10 	str.w	r0, [r5, #-16]
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 80040e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040e8:	493b      	ldr	r1, [pc, #236]	; (80041d8 <xAnalyzeTask+0x328>)
 80040ea:	4630      	mov	r0, r6
 80040ec:	f001 fe48 	bl	8005d80 <siprintf>
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <xAnalyzeTask+0x314>)
 80040f2:	b2c2      	uxtb	r2, r0
 80040f4:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80040f6:	4631      	mov	r1, r6
 80040f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040fc:	4832      	ldr	r0, [pc, #200]	; (80041c8 <xAnalyzeTask+0x318>)
 80040fe:	f7fe f9f5 	bl	80024ec <HAL_UART_Transmit>
							if (impTime[i] < 0) impTime[i] = 0;
 8004102:	2f00      	cmp	r7, #0
 8004104:	da70      	bge.n	80041e8 <xAnalyzeTask+0x338>
 8004106:	f845 8c10 	str.w	r8, [r5, #-16]
 800410a:	f109 0901 	add.w	r9, r9, #1
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 800410e:	aa0a      	add	r2, sp, #40	; 0x28
 8004110:	f81a 7002 	ldrb.w	r7, [sl, r2]
 8004114:	fa5f f389 	uxtb.w	r3, r9
 8004118:	42bb      	cmp	r3, r7
 800411a:	d38f      	bcc.n	800403c <xAnalyzeTask+0x18c>
						}
					}

					if (controllerState.pressureCompensation == COMPENSATION_OFF){
 800411c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8004120:	2d00      	cmp	r5, #0
 8004122:	d06d      	beq.n	8004200 <xAnalyzeTask+0x350>
 8004124:	f04f 0900 	mov.w	r9, #0
						if (impTime[i] > 0){
							if (pressIsLower[i] == 1){
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
							}
							else if (pressIsLower[i] == 0){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004128:	4e2c      	ldr	r6, [pc, #176]	; (80041dc <xAnalyzeTask+0x32c>)
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800412a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80041e4 <xAnalyzeTask+0x334>
 800412e:	fa5f f389 	uxtb.w	r3, r9
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004132:	42bb      	cmp	r3, r7
 8004134:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8004138:	f0c0 809f 	bcc.w	800427a <xAnalyzeTask+0x3ca>
							}
						}
					}

					#if DEBUG_SERIAL
						messageLength = sprintf(message, "[INFO] ac %d, nw0 %d, nw1 %d\n", axleCounter, numOfWays[0], numOfWays[1]);
 800413c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8004140:	4652      	mov	r2, sl
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4926      	ldr	r1, [pc, #152]	; (80041e0 <xAnalyzeTask+0x330>)
 8004146:	462b      	mov	r3, r5
 8004148:	481d      	ldr	r0, [pc, #116]	; (80041c0 <xAnalyzeTask+0x310>)
 800414a:	f001 fe19 	bl	8005d80 <siprintf>
 800414e:	9b08      	ldr	r3, [sp, #32]
 8004150:	b2c2      	uxtb	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004154:	491a      	ldr	r1, [pc, #104]	; (80041c0 <xAnalyzeTask+0x310>)
 8004156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415a:	481b      	ldr	r0, [pc, #108]	; (80041c8 <xAnalyzeTask+0x318>)
 800415c:	f7fe f9c6 	bl	80024ec <HAL_UART_Transmit>
					#endif

					impCounter = xTaskGetTickCount();
 8004160:	f7ff fa6e 	bl	8003640 <xTaskGetTickCount>
 8004164:	4681      	mov	r9, r0
							break;
						}

						stopImp = 0;
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
							i = axleCounter*numOfWays[0] + wayCounter;
 8004166:	9b07      	ldr	r3, [sp, #28]
 8004168:	436b      	muls	r3, r5
 800416a:	b2db      	uxtb	r3, r3
 800416c:	9307      	str	r3, [sp, #28]
						vTaskDelay(20);
 800416e:	2014      	movs	r0, #20
 8004170:	f7ff fb76 	bl	8003860 <vTaskDelay>
						dCounter = xTaskGetTickCount() - impCounter;
 8004174:	f7ff fa64 	bl	8003640 <xTaskGetTickCount>
						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004178:	f89b 2001 	ldrb.w	r2, [fp, #1]
						dCounter = xTaskGetTickCount() - impCounter;
 800417c:	eba0 0309 	sub.w	r3, r0, r9
						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004180:	b14a      	cbz	r2, 8004196 <xAnalyzeTask+0x2e6>
 8004182:	f04f 0800 	mov.w	r8, #0
 8004186:	4646      	mov	r6, r8
 8004188:	fa5f f588 	uxtb.w	r5, r8
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 800418c:	42af      	cmp	r7, r5
 800418e:	f200 8098 	bhi.w	80042c2 <xAnalyzeTask+0x412>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
								stopImp++;
							}
						}
						if (stopImp >= numOfWays[axleCounter]){
 8004192:	42be      	cmp	r6, r7
 8004194:	d3eb      	bcc.n	800416e <xAnalyzeTask+0x2be>
							break;
						}
					}
					vTaskDelay(3000);
 8004196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800419a:	f7ff fb61 	bl	8003860 <vTaskDelay>
 800419e:	f10a 0a01 	add.w	sl, sl, #1
				for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
 80041a2:	9a06      	ldr	r2, [sp, #24]
 80041a4:	fa5f f38a 	uxtb.w	r3, sl
 80041a8:	429a      	cmp	r2, r3
 80041aa:	f63f af40 	bhi.w	800402e <xAnalyzeTask+0x17e>
 80041ae:	e042      	b.n	8004236 <xAnalyzeTask+0x386>
 80041b0:	0800700c 	.word	0x0800700c
 80041b4:	2000537c 	.word	0x2000537c
 80041b8:	20005268 	.word	0x20005268
 80041bc:	08007037 	.word	0x08007037
 80041c0:	200051b9 	.word	0x200051b9
 80041c4:	20005239 	.word	0x20005239
 80041c8:	200053f4 	.word	0x200053f4
 80041cc:	0800704d 	.word	0x0800704d
 80041d0:	2000523c 	.word	0x2000523c
 80041d4:	08007064 	.word	0x08007064
 80041d8:	08007077 	.word	0x08007077
 80041dc:	2000001c 	.word	0x2000001c
 80041e0:	0800708c 	.word	0x0800708c
 80041e4:	2000002c 	.word	0x2000002c
							else if (impTime[i] == 0) impTime[i] = 500;
 80041e8:	d102      	bne.n	80041f0 <xAnalyzeTask+0x340>
 80041ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80041ee:	e762      	b.n	80040b6 <xAnalyzeTask+0x206>
							else if (impTime[i] > 10000) impTime[i] = 10000;
 80041f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80041f4:	429f      	cmp	r7, r3
 80041f6:	dd88      	ble.n	800410a <xAnalyzeTask+0x25a>
 80041f8:	e75d      	b.n	80040b6 <xAnalyzeTask+0x206>
							impTime[i] = 0;
 80041fa:	ab12      	add	r3, sp, #72	; 0x48
 80041fc:	441d      	add	r5, r3
 80041fe:	e754      	b.n	80040aa <xAnalyzeTask+0x1fa>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004200:	4eaa      	ldr	r6, [pc, #680]	; (80044ac <xAnalyzeTask+0x5fc>)
 8004202:	4bab      	ldr	r3, [pc, #684]	; (80044b0 <xAnalyzeTask+0x600>)
 8004204:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8004208:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 800420c:	2200      	movs	r2, #0
 800420e:	f7fd fc77 	bl	8001b00 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004212:	4ba8      	ldr	r3, [pc, #672]	; (80044b4 <xAnalyzeTask+0x604>)
 8004214:	2200      	movs	r2, #0
 8004216:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 800421a:	4ba7      	ldr	r3, [pc, #668]	; (80044b8 <xAnalyzeTask+0x608>)
 800421c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004220:	3501      	adds	r5, #1
 8004222:	f7fd fc6d 	bl	8001b00 <HAL_GPIO_WritePin>
						for (i = 0; i < 4; i++){
 8004226:	2d04      	cmp	r5, #4
 8004228:	d1eb      	bne.n	8004202 <xAnalyzeTask+0x352>
						impTime[0] = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	930e      	str	r3, [sp, #56]	; 0x38
						impTime[1] = 0;
 800422e:	930f      	str	r3, [sp, #60]	; 0x3c
						impTime[2] = 0;
 8004230:	9310      	str	r3, [sp, #64]	; 0x40
						impTime[3] = 0;
 8004232:	9311      	str	r3, [sp, #68]	; 0x44
						controllerState.numberOfTries = 0;
 8004234:	7763      	strb	r3, [r4, #29]
				} //stepCounter

				if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004236:	7863      	ldrb	r3, [r4, #1]
 8004238:	2200      	movs	r2, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d164      	bne.n	8004308 <xAnalyzeTask+0x458>
 800423e:	461c      	mov	r4, r3
					for (i = 0; i < 4; i++){
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004240:	4d9a      	ldr	r5, [pc, #616]	; (80044ac <xAnalyzeTask+0x5fc>)
 8004242:	4b9b      	ldr	r3, [pc, #620]	; (80044b0 <xAnalyzeTask+0x600>)
 8004244:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004248:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800424c:	2200      	movs	r2, #0
 800424e:	f7fd fc57 	bl	8001b00 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004252:	4b98      	ldr	r3, [pc, #608]	; (80044b4 <xAnalyzeTask+0x604>)
 8004254:	2200      	movs	r2, #0
 8004256:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800425a:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <xAnalyzeTask+0x608>)
 800425c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004260:	3401      	adds	r4, #1
 8004262:	f7fd fc4d 	bl	8001b00 <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004266:	2c04      	cmp	r4, #4
 8004268:	d1eb      	bne.n	8004242 <xAnalyzeTask+0x392>
					}
					impTime[0] = 0;
 800426a:	2300      	movs	r3, #0
					impTime[1] = 0;
					impTime[2] = 0;
					impTime[3] = 0;
					controllerState.numberOfTries = 0;
 800426c:	4a93      	ldr	r2, [pc, #588]	; (80044bc <xAnalyzeTask+0x60c>)
					impTime[0] = 0;
 800426e:	930e      	str	r3, [sp, #56]	; 0x38
					impTime[1] = 0;
 8004270:	930f      	str	r3, [sp, #60]	; 0x3c
					impTime[2] = 0;
 8004272:	9310      	str	r3, [sp, #64]	; 0x40
					impTime[3] = 0;
 8004274:	9311      	str	r3, [sp, #68]	; 0x44
					controllerState.numberOfTries = 0;
 8004276:	7753      	strb	r3, [r2, #29]
					continue;
 8004278:	e62f      	b.n	8003eda <xAnalyzeTask+0x2a>
						i = axleCounter*numOfWays[0] + wayCounter;
 800427a:	9a07      	ldr	r2, [sp, #28]
 800427c:	fb05 3502 	mla	r5, r5, r2, r3
						if (impTime[i] > 0){
 8004280:	ab12      	add	r3, sp, #72	; 0x48
 8004282:	b2ed      	uxtb	r5, r5
 8004284:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004288:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	dd0c      	ble.n	80042aa <xAnalyzeTask+0x3fa>
							if (pressIsLower[i] == 1){
 8004290:	ab12      	add	r3, sp, #72	; 0x48
 8004292:	442b      	add	r3, r5
 8004294:	f913 2c1c 	ldrsb.w	r2, [r3, #-28]
 8004298:	2a01      	cmp	r2, #1
 800429a:	d109      	bne.n	80042b0 <xAnalyzeTask+0x400>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800429c:	4b86      	ldr	r3, [pc, #536]	; (80044b8 <xAnalyzeTask+0x608>)
 800429e:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 80042a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80042a6:	f7fd fc2b 	bl	8001b00 <HAL_GPIO_WritePin>
 80042aa:	f109 0901 	add.w	r9, r9, #1
 80042ae:	e73e      	b.n	800412e <xAnalyzeTask+0x27e>
							else if (pressIsLower[i] == 0){
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	d1fa      	bne.n	80042aa <xAnalyzeTask+0x3fa>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80042b4:	4b7e      	ldr	r3, [pc, #504]	; (80044b0 <xAnalyzeTask+0x600>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 80042bc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80042c0:	e7f1      	b.n	80042a6 <xAnalyzeTask+0x3f6>
							if(dCounter > impTime[i]){
 80042c2:	9a07      	ldr	r2, [sp, #28]
 80042c4:	4415      	add	r5, r2
 80042c6:	b2ed      	uxtb	r5, r5
 80042c8:	aa12      	add	r2, sp, #72	; 0x48
 80042ca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80042ce:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d915      	bls.n	8004302 <xAnalyzeTask+0x452>
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80042d8:	4b75      	ldr	r3, [pc, #468]	; (80044b0 <xAnalyzeTask+0x600>)
 80042da:	2200      	movs	r2, #0
 80042dc:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 80042e0:	4b72      	ldr	r3, [pc, #456]	; (80044ac <xAnalyzeTask+0x5fc>)
								stopImp++;
 80042e2:	3601      	adds	r6, #1
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80042e4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80042e8:	f7fd fc0a 	bl	8001b00 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80042ec:	4b71      	ldr	r3, [pc, #452]	; (80044b4 <xAnalyzeTask+0x604>)
 80042ee:	4872      	ldr	r0, [pc, #456]	; (80044b8 <xAnalyzeTask+0x608>)
 80042f0:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80042fa:	f7fd fc01 	bl	8001b00 <HAL_GPIO_WritePin>
								stopImp++;
 80042fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004300:	b2f6      	uxtb	r6, r6
 8004302:	f108 0801 	add.w	r8, r8, #1
 8004306:	e73f      	b.n	8004188 <xAnalyzeTask+0x2d8>
 8004308:	4e6d      	ldr	r6, [pc, #436]	; (80044c0 <xAnalyzeTask+0x610>)
				}
//here starts common code

				controllerState.errorMeaningByte = 0;
 800430a:	7662      	strb	r2, [r4, #25]
 800430c:	4635      	mov	r5, r6
 800430e:	4614      	mov	r4, r2
						deltaPressure = abs(deltaPressure);
						if (deltaPressure < 10){
							pressIsLower[i] = -1;

							#if DEBUG_SERIAL
								messageLength = sprintf(message, "[ERROR] %d valve %d\t%d\t%d\t%ld\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i]);
 8004310:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80044e0 <xAnalyzeTask+0x630>
 8004314:	4f6b      	ldr	r7, [pc, #428]	; (80044c4 <xAnalyzeTask+0x614>)
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004316:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80044d0 <xAnalyzeTask+0x620>
					if (impTime[i] > 500){
 800431a:	ab0e      	add	r3, sp, #56	; 0x38
 800431c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004320:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004324:	dd30      	ble.n	8004388 <xAnalyzeTask+0x4d8>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004326:	ab0c      	add	r3, sp, #48	; 0x30
 8004328:	8929      	ldrh	r1, [r5, #8]
 800432a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800432e:	1a8b      	subs	r3, r1, r2
						deltaPressure = abs(deltaPressure);
 8004330:	b21b      	sxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfb8      	it	lt
 8004336:	425b      	neglt	r3, r3
						if (deltaPressure < 10){
 8004338:	b21b      	sxth	r3, r3
 800433a:	2b09      	cmp	r3, #9
 800433c:	dc24      	bgt.n	8004388 <xAnalyzeTask+0x4d8>
							pressIsLower[i] = -1;
 800433e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8004342:	ab0b      	add	r3, sp, #44	; 0x2c
 8004344:	f804 e003 	strb.w	lr, [r4, r3]
								messageLength = sprintf(message, "[ERROR] %d valve %d\t%d\t%d\t%ld\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i]);
 8004348:	882b      	ldrh	r3, [r5, #0]
 800434a:	9002      	str	r0, [sp, #8]
 800434c:	9101      	str	r1, [sp, #4]
 800434e:	9200      	str	r2, [sp, #0]
 8004350:	4641      	mov	r1, r8
 8004352:	4622      	mov	r2, r4
 8004354:	4638      	mov	r0, r7
 8004356:	f001 fd13 	bl	8005d80 <siprintf>
 800435a:	9b08      	ldr	r3, [sp, #32]
 800435c:	b2c2      	uxtb	r2, r0
 800435e:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004360:	4639      	mov	r1, r7
 8004362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004366:	4648      	mov	r0, r9
 8004368:	f7fe f8c0 	bl	80024ec <HAL_UART_Transmit>
							#endif

								//TODO: error valve
								controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
 800436c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	f88b 3005 	strb.w	r3, [fp, #5]
								controllerState.errorByte |= (1 << i);
 8004378:	2301      	movs	r3, #1
 800437a:	fa03 f204 	lsl.w	r2, r3, r4
 800437e:	f89b 3018 	ldrb.w	r3, [fp, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	f88b 3018 	strb.w	r3, [fp, #24]
 8004388:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 800438a:	2c04      	cmp	r4, #4
 800438c:	f105 0502 	add.w	r5, r5, #2
 8004390:	d1c3      	bne.n	800431a <xAnalyzeTask+0x46a>
						}
					}
				}

				#if DEBUG_SERIAL
					messageLength = sprintf(message, "[INFO] Results\n");
 8004392:	494d      	ldr	r1, [pc, #308]	; (80044c8 <xAnalyzeTask+0x618>)
 8004394:	484b      	ldr	r0, [pc, #300]	; (80044c4 <xAnalyzeTask+0x614>)
 8004396:	f001 fd43 	bl	8005e20 <strcpy>
 800439a:	220f      	movs	r2, #15
 800439c:	4f4b      	ldr	r7, [pc, #300]	; (80044cc <xAnalyzeTask+0x61c>)
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800439e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043a2:	4948      	ldr	r1, [pc, #288]	; (80044c4 <xAnalyzeTask+0x614>)
 80043a4:	484a      	ldr	r0, [pc, #296]	; (80044d0 <xAnalyzeTask+0x620>)
					messageLength = sprintf(message, "[INFO] Results\n");
 80043a6:	703a      	strb	r2, [r7, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80043a8:	2400      	movs	r4, #0
 80043aa:	f7fe f89f 	bl	80024ec <HAL_UART_Transmit>
 80043ae:	9707      	str	r7, [sp, #28]
						if (pressIsLower[i] == 1){
							if (impCoeff[i] >= 0.0)
								controllerData.impUpCoeff[i] = impCoeff[i];
						}
						else if (pressIsLower[i] == 0){
							if (impCoeff[i] <= 0.0)
 80043b0:	2700      	movs	r7, #0
 80043b2:	4d48      	ldr	r5, [pc, #288]	; (80044d4 <xAnalyzeTask+0x624>)
								controllerData.impDownCoeff[i] = impCoeff[i];
						}

						#if DEBUG_SERIAL
							messageLength = sprintf(message, "\t%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i],(int)controllerData.impUpCoeff[i],(int)controllerData.impDownCoeff[i]);
 80043b4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80044c4 <xAnalyzeTask+0x614>
					if (pressIsLower[i] >=0){
 80043b8:	ab0b      	add	r3, sp, #44	; 0x2c
 80043ba:	56e3      	ldrsb	r3, [r4, r3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	9308      	str	r3, [sp, #32]
 80043c0:	db3c      	blt.n	800443c <xAnalyzeTask+0x58c>
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043c2:	ab0e      	add	r3, sp, #56	; 0x38
 80043c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80043c8:	aa0c      	add	r2, sp, #48	; 0x30
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043ca:	4618      	mov	r0, r3
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80043cc:	f832 8014 	ldrh.w	r8, [r2, r4, lsl #1]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043d0:	9306      	str	r3, [sp, #24]
 80043d2:	f7fb fffb 	bl	80003cc <__aeabi_i2f>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80043d6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043da:	4683      	mov	fp, r0
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 80043dc:	eba9 0008 	sub.w	r0, r9, r8
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043e0:	b200      	sxth	r0, r0
 80043e2:	f7fb fff3 	bl	80003cc <__aeabi_i2f>
 80043e6:	4601      	mov	r1, r0
 80043e8:	4658      	mov	r0, fp
 80043ea:	f7fc f8f7 	bl	80005dc <__aeabi_fdiv>
						if (pressIsLower[i] == 1){
 80043ee:	9b08      	ldr	r3, [sp, #32]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80043f0:	4683      	mov	fp, r0
						if (pressIsLower[i] == 1){
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12a      	bne.n	800444c <xAnalyzeTask+0x59c>
							if (impCoeff[i] >= 0.0)
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc f9ee 	bl	80007d8 <__aeabi_fcmpge>
 80043fc:	b108      	cbz	r0, 8004402 <xAnalyzeTask+0x552>
								controllerData.impUpCoeff[i] = impCoeff[i];
 80043fe:	f8c5 b000 	str.w	fp, [r5]
							messageLength = sprintf(message, "\t%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i],(int)controllerData.impUpCoeff[i],(int)controllerData.impDownCoeff[i]);
 8004402:	6928      	ldr	r0, [r5, #16]
 8004404:	f7fc f9fc 	bl	8000800 <__aeabi_f2iz>
 8004408:	f8b6 b000 	ldrh.w	fp, [r6]
 800440c:	9004      	str	r0, [sp, #16]
 800440e:	6828      	ldr	r0, [r5, #0]
 8004410:	f7fc f9f6 	bl	8000800 <__aeabi_f2iz>
 8004414:	9b06      	ldr	r3, [sp, #24]
 8004416:	9003      	str	r0, [sp, #12]
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	4622      	mov	r2, r4
 800441c:	465b      	mov	r3, fp
 800441e:	492e      	ldr	r1, [pc, #184]	; (80044d8 <xAnalyzeTask+0x628>)
 8004420:	e88d 0300 	stmia.w	sp, {r8, r9}
 8004424:	4650      	mov	r0, sl
 8004426:	f001 fcab 	bl	8005d80 <siprintf>
 800442a:	9b07      	ldr	r3, [sp, #28]
 800442c:	b2c2      	uxtb	r2, r0
 800442e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004430:	4651      	mov	r1, sl
 8004432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004436:	4826      	ldr	r0, [pc, #152]	; (80044d0 <xAnalyzeTask+0x620>)
 8004438:	f7fe f858 	bl	80024ec <HAL_UART_Transmit>
 800443c:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 800443e:	2c04      	cmp	r4, #4
 8004440:	f106 0602 	add.w	r6, r6, #2
 8004444:	f105 0504 	add.w	r5, r5, #4
 8004448:	d1b6      	bne.n	80043b8 <xAnalyzeTask+0x508>
 800444a:	e546      	b.n	8003eda <xAnalyzeTask+0x2a>
						else if (pressIsLower[i] == 0){
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1d8      	bne.n	8004402 <xAnalyzeTask+0x552>
							if (impCoeff[i] <= 0.0)
 8004450:	4639      	mov	r1, r7
 8004452:	f7fc f9b7 	bl	80007c4 <__aeabi_fcmple>
 8004456:	2800      	cmp	r0, #0
 8004458:	d0d3      	beq.n	8004402 <xAnalyzeTask+0x552>
								controllerData.impDownCoeff[i] = impCoeff[i];
 800445a:	f8c5 b010 	str.w	fp, [r5, #16]
 800445e:	e7d0      	b.n	8004402 <xAnalyzeTask+0x552>
* ---------------------------------------------------------------------------
*/
			else{

				controllerState.analyzeState = COMPENSATION_STATE_FREE;
				if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8004460:	2b06      	cmp	r3, #6
 8004462:	d919      	bls.n	8004498 <xAnalyzeTask+0x5e8>
					controllerState.numberOfTries = 0;
					controllerState.pressureCompensation = COMPENSATION_OFF;

					#if DEBUG_SERIAL
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 8004464:	491d      	ldr	r1, [pc, #116]	; (80044dc <xAnalyzeTask+0x62c>)
 8004466:	4817      	ldr	r0, [pc, #92]	; (80044c4 <xAnalyzeTask+0x614>)
					controllerState.numberOfTries = 0;
 8004468:	7762      	strb	r2, [r4, #29]
					controllerState.pressureCompensation = COMPENSATION_OFF;
 800446a:	7062      	strb	r2, [r4, #1]
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 800446c:	f001 fcd8 	bl	8005e20 <strcpy>
 8004470:	2215      	movs	r2, #21
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <xAnalyzeTask+0x61c>)
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004474:	4913      	ldr	r1, [pc, #76]	; (80044c4 <xAnalyzeTask+0x614>)
						messageLength = sprintf(message, "[INFO] exit by tries\n");
 8004476:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004478:	4815      	ldr	r0, [pc, #84]	; (80044d0 <xAnalyzeTask+0x620>)
 800447a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800447e:	f7fe f835 	bl	80024ec <HAL_UART_Transmit>
				}
				else{
					controllerState.numberOfTries += 1;
				}

				switch (controllerState.waysType){
 8004482:	7ea3      	ldrb	r3, [r4, #26]
 8004484:	2200      	movs	r2, #0
 8004486:	3b01      	subs	r3, #1
 8004488:	2b05      	cmp	r3, #5
 800448a:	f200 8084 	bhi.w	8004596 <xAnalyzeTask+0x6e6>
 800448e:	e8df f003 	tbb	[pc, r3]
 8004492:	2906      	.short	0x2906
 8004494:	7e79726b 	.word	0x7e79726b
					controllerState.numberOfTries += 1;
 8004498:	3301      	adds	r3, #1
 800449a:	7763      	strb	r3, [r4, #29]
 800449c:	e7f1      	b.n	8004482 <xAnalyzeTask+0x5d2>
					case 1:{ // Single Way
						numOfAxles = 1;
						numOfWays[0] = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						break;
					}
					case VIEW_2_1:{ //THREE WAYS
						numOfAxles = 2;
						numOfWays[0] = 2;
						numOfWays[1] = 1;
 80044a4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 80044a8:	e022      	b.n	80044f0 <xAnalyzeTask+0x640>
 80044aa:	bf00      	nop
 80044ac:	2000001c 	.word	0x2000001c
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	2000002c 	.word	0x2000002c
 80044b8:	2000003c 	.word	0x2000003c
 80044bc:	20005268 	.word	0x20005268
 80044c0:	2000526e 	.word	0x2000526e
 80044c4:	200051b9 	.word	0x200051b9
 80044c8:	080070c9 	.word	0x080070c9
 80044cc:	20005239 	.word	0x20005239
 80044d0:	200053f4 	.word	0x200053f4
 80044d4:	20005240 	.word	0x20005240
 80044d8:	080070d9 	.word	0x080070d9
 80044dc:	08007037 	.word	0x08007037
 80044e0:	080070aa 	.word	0x080070aa
						numOfWays[0] = 2;
 80044e4:	2302      	movs	r3, #2
 80044e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfAxles = 1;
 80044ea:	2301      	movs	r3, #1
						numOfWays[1] = 0;
 80044ec:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
						continue;
					}
				}

#if DEBUG_SERIAL
	messageLength = sprintf(message, "[INFO] compressor type selected\n");
 80044f0:	49b2      	ldr	r1, [pc, #712]	; (80047bc <xAnalyzeTask+0x90c>)
 80044f2:	48b3      	ldr	r0, [pc, #716]	; (80047c0 <xAnalyzeTask+0x910>)
						numOfAxles = 2;
 80044f4:	9306      	str	r3, [sp, #24]
	messageLength = sprintf(message, "[INFO] compressor type selected\n");
 80044f6:	f001 fc93 	bl	8005e20 <strcpy>
 80044fa:	2220      	movs	r2, #32
 80044fc:	4db1      	ldr	r5, [pc, #708]	; (80047c4 <xAnalyzeTask+0x914>)
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80044fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004502:	49af      	ldr	r1, [pc, #700]	; (80047c0 <xAnalyzeTask+0x910>)
 8004504:	48b0      	ldr	r0, [pc, #704]	; (80047c8 <xAnalyzeTask+0x918>)
	messageLength = sprintf(message, "[INFO] compressor type selected\n");
 8004506:	702a      	strb	r2, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004508:	f7fd fff0 	bl	80024ec <HAL_UART_Transmit>
#endif

				//-------- looking at pressure delta -----------------
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 800450c:	2100      	movs	r1, #0
						else
							pressIsLower[i] = 0; //if need to lower
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
					}
					else{
						pressIsLower[i] = -1; //if not need to change
 800450e:	f04f 09ff 	mov.w	r9, #255	; 0xff
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8004512:	460e      	mov	r6, r1
 8004514:	f04f 0a01 	mov.w	sl, #1
 8004518:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800451c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
					if (deltaPressure > controllerState.analyzeAccuracy){
 8004520:	f894 801b 	ldrb.w	r8, [r4, #27]
 8004524:	f894 c000 	ldrb.w	ip, [r4]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 8004528:	441f      	add	r7, r3
 800452a:	b2cb      	uxtb	r3, r1
 800452c:	42bb      	cmp	r3, r7
 800452e:	db34      	blt.n	800459a <xAnalyzeTask+0x6ea>
 8004530:	b10e      	cbz	r6, 8004536 <xAnalyzeTask+0x686>
 8004532:	f884 c000 	strb.w	ip, [r4]
					}
				}

				//-------- if everything is OK stop compensation -----------------
				if (controllerState.analyzeState == COMPENSATION_STATE_FREE){
 8004536:	7823      	ldrb	r3, [r4, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f43f ad26 	beq.w	8003f8a <xAnalyzeTask+0xda>
					continue;
				}

				//calculate impulse
				#if DEBUG_SERIAL
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
 800453e:	49a3      	ldr	r1, [pc, #652]	; (80047cc <xAnalyzeTask+0x91c>)
 8004540:	489f      	ldr	r0, [pc, #636]	; (80047c0 <xAnalyzeTask+0x910>)
 8004542:	f001 fc6d 	bl	8005e20 <strcpy>
 8004546:	2216      	movs	r2, #22
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800454c:	499c      	ldr	r1, [pc, #624]	; (80047c0 <xAnalyzeTask+0x910>)
 800454e:	489e      	ldr	r0, [pc, #632]	; (80047c8 <xAnalyzeTask+0x918>)
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
 8004550:	702a      	strb	r2, [r5, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004552:	f7fd ffcb 	bl	80024ec <HAL_UART_Transmit>
 8004556:	2300      	movs	r3, #0
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f89d 901c 	ldrb.w	r9, [sp, #28]
				for (i = 0; i < numOfWays[0]+numOfWays[1]; i++){
 800455e:	2700      	movs	r7, #0
							else if (impTime[i] == 0) impTime[i] = 5000;
							else if (impTime[i] > 20000) impTime[i] = 20000;
							else if (impTime[i] > 60000) impTime[i] = 20000;
						}
						else if (pressIsLower[i] == 0){
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8004560:	f8df a290 	ldr.w	sl, [pc, #656]	; 80047f4 <xAnalyzeTask+0x944>

							#if DEBUG_SERIAL
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 8004564:	4c96      	ldr	r4, [pc, #600]	; (80047c0 <xAnalyzeTask+0x910>)
 8004566:	e0cb      	b.n	8004700 <xAnalyzeTask+0x850>
						numOfWays[0] = 1;
 8004568:	2301      	movs	r3, #1
 800456a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfWays[1] = 1;
 800456e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
						numOfAxles = 2;
 8004572:	2302      	movs	r3, #2
 8004574:	e7bc      	b.n	80044f0 <xAnalyzeTask+0x640>
						numOfWays[0] = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
						numOfWays[1] = 2;
 800457c:	2302      	movs	r3, #2
						numOfWays[1] = 2;
 800457e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004582:	e7b5      	b.n	80044f0 <xAnalyzeTask+0x640>
						numOfWays[0] = 2;
 8004584:	2302      	movs	r3, #2
						numOfWays[1] = 1;
 8004586:	2201      	movs	r2, #1
						numOfWays[0] = 2;
 8004588:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800458c:	e78a      	b.n	80044a4 <xAnalyzeTask+0x5f4>
						numOfWays[0] = 2;
 800458e:	2302      	movs	r3, #2
 8004590:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004594:	e7f3      	b.n	800457e <xAnalyzeTask+0x6ce>
						controllerState.pressureCompensation = COMPENSATION_OFF;
 8004596:	7062      	strb	r2, [r4, #1]
						continue;
 8004598:	e49f      	b.n	8003eda <xAnalyzeTask+0x2a>
					startPressure[i] = controllerState.filteredData[i];
 800459a:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 800459e:	89d0      	ldrh	r0, [r2, #14]
 80045a0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 80045a4:	005a      	lsls	r2, r3, #1
 80045a6:	4496      	add	lr, r2
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045a8:	445a      	add	r2, fp
					startPressure[i] = controllerState.filteredData[i];
 80045aa:	f82e 0c18 	strh.w	r0, [lr, #-24]
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045ae:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 80045b2:	ebae 0200 	sub.w	r2, lr, r0
					deltaPressure = abs(deltaPressure);
 80045b6:	b212      	sxth	r2, r2
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	bfb8      	it	lt
 80045bc:	4252      	neglt	r2, r2
					if (deltaPressure > controllerState.analyzeAccuracy){
 80045be:	b212      	sxth	r2, r2
 80045c0:	4542      	cmp	r2, r8
 80045c2:	aa12      	add	r2, sp, #72	; 0x48
 80045c4:	4413      	add	r3, r2
 80045c6:	dd09      	ble.n	80045dc <xAnalyzeTask+0x72c>
 80045c8:	2601      	movs	r6, #1
						if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 80045ca:	4570      	cmp	r0, lr
							pressIsLower[i] = 1; //if need to lift
 80045cc:	bf2c      	ite	cs
 80045ce:	2200      	movcs	r2, #0
 80045d0:	4652      	movcc	r2, sl
						controllerState.analyzeState = COMPENSATION_STATE_WORKING;
 80045d2:	46b4      	mov	ip, r6
							pressIsLower[i] = 1; //if need to lift
 80045d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80045d8:	3101      	adds	r1, #1
 80045da:	e7a6      	b.n	800452a <xAnalyzeTask+0x67a>
						pressIsLower[i] = -1; //if not need to change
 80045dc:	f803 9c1c 	strb.w	r9, [r3, #-28]
 80045e0:	e7fa      	b.n	80045d8 <xAnalyzeTask+0x728>
						i = axleCounter*numOfWays[0] + wayCounter;
 80045e2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
						if (pressIsLower[i] >= 0){
 80045e6:	ad12      	add	r5, sp, #72	; 0x48
						i = axleCounter*numOfWays[0] + wayCounter;
 80045e8:	fb02 3209 	mla	r2, r2, r9, r3
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
						if (pressIsLower[i] >= 0){
 80045f2:	18ae      	adds	r6, r5, r2
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045f4:	88d9      	ldrh	r1, [r3, #6]
						if (pressIsLower[i] >= 0){
 80045f6:	f916 5c1c 	ldrsb.w	r5, [r6, #-28]
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045fa:	89db      	ldrh	r3, [r3, #14]
						if (pressIsLower[i] >= 0){
 80045fc:	2d00      	cmp	r5, #0
						deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80045fe:	eba1 0003 	sub.w	r0, r1, r3
 8004602:	b200      	sxth	r0, r0
 8004604:	ea4f 0582 	mov.w	r5, r2, lsl #2
						if (pressIsLower[i] >= 0){
 8004608:	db0d      	blt.n	8004626 <xAnalyzeTask+0x776>
							if ((abs(deltaPressure)) > controllerState.analyzeAccuracy){
 800460a:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 800460e:	f89b e01b 	ldrb.w	lr, [fp, #27]
 8004612:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 8004616:	45f4      	cmp	ip, lr
 8004618:	dd2c      	ble.n	8004674 <xAnalyzeTask+0x7c4>
								if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 800461a:	4299      	cmp	r1, r3
									pressIsLower[i] = 1; //if need to lift
 800461c:	bf8c      	ite	hi
 800461e:	2301      	movhi	r3, #1
									pressIsLower[i] = 0; //if need to lower
 8004620:	2300      	movls	r3, #0
 8004622:	f806 3c1c 	strb.w	r3, [r6, #-28]
						if (pressIsLower[i] == 1){
 8004626:	f916 8c1c 	ldrsb.w	r8, [r6, #-28]
 800462a:	f1b8 0f01 	cmp.w	r8, #1
 800462e:	d13f      	bne.n	80046b0 <xAnalyzeTask+0x800>
							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 8004630:	eb0a 0605 	add.w	r6, sl, r5
 8004634:	9208      	str	r2, [sp, #32]
 8004636:	f7fb fec9 	bl	80003cc <__aeabi_i2f>
 800463a:	6871      	ldr	r1, [r6, #4]
 800463c:	f7fb ff1a 	bl	8000474 <__aeabi_fmul>
 8004640:	f7fc f8de 	bl	8000800 <__aeabi_f2iz>
 8004644:	ab12      	add	r3, sp, #72	; 0x48
 8004646:	441d      	add	r5, r3
 8004648:	4606      	mov	r6, r0
								messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
 800464a:	4603      	mov	r3, r0
							impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 800464c:	f845 0c10 	str.w	r0, [r5, #-16]
								messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
 8004650:	9a08      	ldr	r2, [sp, #32]
 8004652:	495f      	ldr	r1, [pc, #380]	; (80047d0 <xAnalyzeTask+0x920>)
 8004654:	4620      	mov	r0, r4
 8004656:	f001 fb93 	bl	8005d80 <siprintf>
 800465a:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <xAnalyzeTask+0x914>)
 800465c:	b2c2      	uxtb	r2, r0
 800465e:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004660:	4621      	mov	r1, r4
 8004662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004666:	4858      	ldr	r0, [pc, #352]	; (80047c8 <xAnalyzeTask+0x918>)
 8004668:	f7fd ff40 	bl	80024ec <HAL_UART_Transmit>
							if (impTime[i] < 0) impTime[i] = 0;
 800466c:	2e00      	cmp	r6, #0
 800466e:	da14      	bge.n	800469a <xAnalyzeTask+0x7ea>
							else if (impTime[i] == 0) impTime[i] = 500;
							else if (impTime[i] > 10000) impTime[i] = 10000;
							else if (impTime[i] > 30000) impTime[i] = 500;
						}
						else{
							impTime[i] = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	e015      	b.n	80046a0 <xAnalyzeTask+0x7f0>
									messageLength = sprintf(message, "[INFO] %d: got error delta\n", i);
 8004674:	4957      	ldr	r1, [pc, #348]	; (80047d4 <xAnalyzeTask+0x924>)
 8004676:	4620      	mov	r0, r4
 8004678:	f001 fb82 	bl	8005d80 <siprintf>
 800467c:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <xAnalyzeTask+0x914>)
 800467e:	b2c2      	uxtb	r2, r0
 8004680:	701a      	strb	r2, [r3, #0]
									HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004682:	4621      	mov	r1, r4
 8004684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004688:	484f      	ldr	r0, [pc, #316]	; (80047c8 <xAnalyzeTask+0x918>)
 800468a:	f7fd ff2f 	bl	80024ec <HAL_UART_Transmit>
								pressIsLower[i] = -1;
 800468e:	23ff      	movs	r3, #255	; 0xff
 8004690:	f806 3c1c 	strb.w	r3, [r6, #-28]
							impTime[i] = 0;
 8004694:	ab12      	add	r3, sp, #72	; 0x48
 8004696:	441d      	add	r5, r3
 8004698:	e7ea      	b.n	8004670 <xAnalyzeTask+0x7c0>
							else if (impTime[i] == 0) impTime[i] = 5000;
 800469a:	d104      	bne.n	80046a6 <xAnalyzeTask+0x7f6>
 800469c:	f241 3388 	movw	r3, #5000	; 0x1388
							impTime[i] = 0;
 80046a0:	f845 3c10 	str.w	r3, [r5, #-16]
 80046a4:	e02b      	b.n	80046fe <xAnalyzeTask+0x84e>
							else if (impTime[i] > 20000) impTime[i] = 20000;
 80046a6:	f644 6320 	movw	r3, #20000	; 0x4e20
							else if (impTime[i] > 10000) impTime[i] = 10000;
 80046aa:	429e      	cmp	r6, r3
 80046ac:	dd27      	ble.n	80046fe <xAnalyzeTask+0x84e>
 80046ae:	e7f7      	b.n	80046a0 <xAnalyzeTask+0x7f0>
						else if (pressIsLower[i] == 0){
 80046b0:	f1b8 0f00 	cmp.w	r8, #0
 80046b4:	d1ee      	bne.n	8004694 <xAnalyzeTask+0x7e4>
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 80046b6:	1d15      	adds	r5, r2, #4
 80046b8:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 80046bc:	9208      	str	r2, [sp, #32]
 80046be:	f7fb fe85 	bl	80003cc <__aeabi_i2f>
 80046c2:	6869      	ldr	r1, [r5, #4]
 80046c4:	f7fb fed6 	bl	8000474 <__aeabi_fmul>
 80046c8:	f7fc f89a 	bl	8000800 <__aeabi_f2iz>
 80046cc:	9a08      	ldr	r2, [sp, #32]
 80046ce:	ab12      	add	r3, sp, #72	; 0x48
 80046d0:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80046d4:	4606      	mov	r6, r0
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 80046d6:	4603      	mov	r3, r0
							impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 80046d8:	f845 0c10 	str.w	r0, [r5, #-16]
								messageLength = sprintf(message, "[INFO] %d: down %ld\n", i,  impTime[i]);
 80046dc:	493e      	ldr	r1, [pc, #248]	; (80047d8 <xAnalyzeTask+0x928>)
 80046de:	4620      	mov	r0, r4
 80046e0:	f001 fb4e 	bl	8005d80 <siprintf>
 80046e4:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <xAnalyzeTask+0x914>)
 80046e6:	b2c2      	uxtb	r2, r0
 80046e8:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80046ea:	4621      	mov	r1, r4
 80046ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f0:	4835      	ldr	r0, [pc, #212]	; (80047c8 <xAnalyzeTask+0x918>)
 80046f2:	f7fd fefb 	bl	80024ec <HAL_UART_Transmit>
							if (impTime[i] < 0) impTime[i] = 0;
 80046f6:	2e00      	cmp	r6, #0
 80046f8:	da58      	bge.n	80047ac <xAnalyzeTask+0x8fc>
 80046fa:	f845 8c10 	str.w	r8, [r5, #-16]
 80046fe:	3701      	adds	r7, #1
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004700:	9907      	ldr	r1, [sp, #28]
 8004702:	aa0a      	add	r2, sp, #40	; 0x28
 8004704:	5c8e      	ldrb	r6, [r1, r2]
 8004706:	b2fb      	uxtb	r3, r7
 8004708:	42b3      	cmp	r3, r6
 800470a:	f4ff af6a 	bcc.w	80045e2 <xAnalyzeTask+0x732>
						}
					}

					if (controllerState.pressureCompensation == COMPENSATION_OFF){
 800470e:	4c33      	ldr	r4, [pc, #204]	; (80047dc <xAnalyzeTask+0x92c>)
 8004710:	7863      	ldrb	r3, [r4, #1]
 8004712:	4625      	mov	r5, r4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d06f      	beq.n	80047f8 <xAnalyzeTask+0x948>
 8004718:	f04f 0a00 	mov.w	sl, #0
						if (impTime[i] > 0){
							if (pressIsLower[i] == 1){
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
							}
							else if (pressIsLower[i] == 0){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 800471c:	4f30      	ldr	r7, [pc, #192]	; (80047e0 <xAnalyzeTask+0x930>)
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800471e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047f0 <xAnalyzeTask+0x940>
 8004722:	fa5f f38a 	uxtb.w	r3, sl
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004726:	42b3      	cmp	r3, r6
 8004728:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800472c:	f0c0 809e 	bcc.w	800486c <xAnalyzeTask+0x9bc>
							}
						}
					}

					#if DEBUG_SERIAL
						messageLength = sprintf(message, "[INFO] ac %d, nw0 %d, nw1 %d\n", axleCounter, numOfWays[0], numOfWays[1]);
 8004730:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8004734:	9a07      	ldr	r2, [sp, #28]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	492a      	ldr	r1, [pc, #168]	; (80047e4 <xAnalyzeTask+0x934>)
 800473a:	462b      	mov	r3, r5
 800473c:	4820      	ldr	r0, [pc, #128]	; (80047c0 <xAnalyzeTask+0x910>)
 800473e:	f001 fb1f 	bl	8005d80 <siprintf>
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <xAnalyzeTask+0x914>)
 8004744:	b2c2      	uxtb	r2, r0
 8004746:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004748:	491d      	ldr	r1, [pc, #116]	; (80047c0 <xAnalyzeTask+0x910>)
 800474a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474e:	481e      	ldr	r0, [pc, #120]	; (80047c8 <xAnalyzeTask+0x918>)
 8004750:	f7fd fecc 	bl	80024ec <HAL_UART_Transmit>
					#endif

					maxUpImp = 0;

					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004754:	2200      	movs	r2, #0
						i = axleCounter*numOfWays[0] + wayCounter;
 8004756:	fb09 f505 	mul.w	r5, r9, r5
					maxUpImp = 0;
 800475a:	4691      	mov	r9, r2
						i = axleCounter*numOfWays[0] + wayCounter;
 800475c:	b2ed      	uxtb	r5, r5
 800475e:	b2d3      	uxtb	r3, r2
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004760:	429e      	cmp	r6, r3
 8004762:	f200 80a6 	bhi.w	80048b2 <xAnalyzeTask+0xa02>
								maxUpImp = impTime[i];
							}
						}
					}

					if(controllerState.compressorWorkTime > 300000){
 8004766:	6a22      	ldr	r2, [r4, #32]
 8004768:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <xAnalyzeTask+0x938>)
 800476a:	429a      	cmp	r2, r3
 800476c:	f240 80b3 	bls.w	80048d6 <xAnalyzeTask+0xa26>
						#if DEBUG_SERIAL
							messageLength = sprintf(message, "[ERROR] compressor is overheated\n");
 8004770:	491e      	ldr	r1, [pc, #120]	; (80047ec <xAnalyzeTask+0x93c>)
 8004772:	4813      	ldr	r0, [pc, #76]	; (80047c0 <xAnalyzeTask+0x910>)
 8004774:	f001 fb54 	bl	8005e20 <strcpy>
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <xAnalyzeTask+0x914>)
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800477c:	4910      	ldr	r1, [pc, #64]	; (80047c0 <xAnalyzeTask+0x910>)
							messageLength = sprintf(message, "[ERROR] compressor is overheated\n");
 800477e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004780:	4811      	ldr	r0, [pc, #68]	; (80047c8 <xAnalyzeTask+0x918>)
 8004782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004786:	f7fd feb1 	bl	80024ec <HAL_UART_Transmit>
						#endif

						controllerState.pressureCompensation = COMPENSATION_OFF;
 800478a:	2300      	movs	r3, #0
 800478c:	7063      	strb	r3, [r4, #1]
						impTime[0] = 0;
 800478e:	930e      	str	r3, [sp, #56]	; 0x38
						impTime[1] = 0;
 8004790:	930f      	str	r3, [sp, #60]	; 0x3c
						impTime[2] = 0;
 8004792:	9310      	str	r3, [sp, #64]	; 0x40
						impTime[3] = 0;
 8004794:	9311      	str	r3, [sp, #68]	; 0x44
						controllerState.numberOfTries = 0;
 8004796:	7763      	strb	r3, [r4, #29]
 8004798:	9b07      	ldr	r3, [sp, #28]
				for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
 800479a:	9a06      	ldr	r2, [sp, #24]
 800479c:	3301      	adds	r3, #1
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f63f aed8 	bhi.w	800455a <xAnalyzeTask+0x6aa>
 80047aa:	e041      	b.n	8004830 <xAnalyzeTask+0x980>
							else if (impTime[i] == 0) impTime[i] = 500;
 80047ac:	d102      	bne.n	80047b4 <xAnalyzeTask+0x904>
 80047ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80047b2:	e775      	b.n	80046a0 <xAnalyzeTask+0x7f0>
							else if (impTime[i] > 10000) impTime[i] = 10000;
 80047b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80047b8:	e777      	b.n	80046aa <xAnalyzeTask+0x7fa>
 80047ba:	bf00      	nop
 80047bc:	080070f2 	.word	0x080070f2
 80047c0:	200051b9 	.word	0x200051b9
 80047c4:	20005239 	.word	0x20005239
 80047c8:	200053f4 	.word	0x200053f4
 80047cc:	0800704d 	.word	0x0800704d
 80047d0:	08007064 	.word	0x08007064
 80047d4:	08007113 	.word	0x08007113
 80047d8:	08007077 	.word	0x08007077
 80047dc:	20005268 	.word	0x20005268
 80047e0:	2000001c 	.word	0x2000001c
 80047e4:	0800708c 	.word	0x0800708c
 80047e8:	000493e0 	.word	0x000493e0
 80047ec:	0800712f 	.word	0x0800712f
 80047f0:	2000002c 	.word	0x2000002c
 80047f4:	2000523c 	.word	0x2000523c
 80047f8:	461c      	mov	r4, r3
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80047fa:	4eac      	ldr	r6, [pc, #688]	; (8004aac <xAnalyzeTask+0xbfc>)
 80047fc:	4bac      	ldr	r3, [pc, #688]	; (8004ab0 <xAnalyzeTask+0xc00>)
 80047fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004802:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004806:	2200      	movs	r2, #0
 8004808:	f7fd f97a 	bl	8001b00 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800480c:	4ba9      	ldr	r3, [pc, #676]	; (8004ab4 <xAnalyzeTask+0xc04>)
 800480e:	2200      	movs	r2, #0
 8004810:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004814:	4ba8      	ldr	r3, [pc, #672]	; (8004ab8 <xAnalyzeTask+0xc08>)
 8004816:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800481a:	3401      	adds	r4, #1
 800481c:	f7fd f970 	bl	8001b00 <HAL_GPIO_WritePin>
						for (i = 0; i < 4; i++){
 8004820:	2c04      	cmp	r4, #4
 8004822:	d1eb      	bne.n	80047fc <xAnalyzeTask+0x94c>
						impTime[0] = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	930e      	str	r3, [sp, #56]	; 0x38
						impTime[1] = 0;
 8004828:	930f      	str	r3, [sp, #60]	; 0x3c
						impTime[2] = 0;
 800482a:	9310      	str	r3, [sp, #64]	; 0x40
						impTime[3] = 0;
 800482c:	9311      	str	r3, [sp, #68]	; 0x44
						controllerState.numberOfTries = 0;
 800482e:	776b      	strb	r3, [r5, #29]
					vTaskDelay(3000);

					controllerState.compressorWorkTime += maxUpImp;
				} //stepCounter

				if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004830:	4aa2      	ldr	r2, [pc, #648]	; (8004abc <xAnalyzeTask+0xc0c>)
 8004832:	2400      	movs	r4, #0
 8004834:	7853      	ldrb	r3, [r2, #1]
 8004836:	4615      	mov	r5, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 808d 	bne.w	8004958 <xAnalyzeTask+0xaa8>
 800483e:	461c      	mov	r4, r3
					for (i = 0; i < 4; i++){
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004840:	4d9a      	ldr	r5, [pc, #616]	; (8004aac <xAnalyzeTask+0xbfc>)
 8004842:	4b9b      	ldr	r3, [pc, #620]	; (8004ab0 <xAnalyzeTask+0xc00>)
 8004844:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004848:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800484c:	2200      	movs	r2, #0
 800484e:	f7fd f957 	bl	8001b00 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004852:	4b98      	ldr	r3, [pc, #608]	; (8004ab4 <xAnalyzeTask+0xc04>)
 8004854:	2200      	movs	r2, #0
 8004856:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800485a:	4b97      	ldr	r3, [pc, #604]	; (8004ab8 <xAnalyzeTask+0xc08>)
 800485c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004860:	3401      	adds	r4, #1
 8004862:	f7fd f94d 	bl	8001b00 <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004866:	2c04      	cmp	r4, #4
 8004868:	d1eb      	bne.n	8004842 <xAnalyzeTask+0x992>
 800486a:	e4fe      	b.n	800426a <xAnalyzeTask+0x3ba>
						i = axleCounter*numOfWays[0] + wayCounter;
 800486c:	fb05 3509 	mla	r5, r5, r9, r3
						if (impTime[i] > 0){
 8004870:	ab12      	add	r3, sp, #72	; 0x48
 8004872:	b2ed      	uxtb	r5, r5
 8004874:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004878:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	dd0c      	ble.n	800489a <xAnalyzeTask+0x9ea>
							if (pressIsLower[i] == 1){
 8004880:	ab12      	add	r3, sp, #72	; 0x48
 8004882:	442b      	add	r3, r5
 8004884:	f913 2c1c 	ldrsb.w	r2, [r3, #-28]
 8004888:	2a01      	cmp	r2, #1
 800488a:	d109      	bne.n	80048a0 <xAnalyzeTask+0x9f0>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800488c:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <xAnalyzeTask+0xc08>)
 800488e:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 8004892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004896:	f7fd f933 	bl	8001b00 <HAL_GPIO_WritePin>
 800489a:	f10a 0a01 	add.w	sl, sl, #1
 800489e:	e740      	b.n	8004722 <xAnalyzeTask+0x872>
							else if (pressIsLower[i] == 0){
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	d1fa      	bne.n	800489a <xAnalyzeTask+0x9ea>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80048a4:	4b82      	ldr	r3, [pc, #520]	; (8004ab0 <xAnalyzeTask+0xc00>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 80048ac:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80048b0:	e7f1      	b.n	8004896 <xAnalyzeTask+0x9e6>
						if (pressIsLower[i] > 0){
 80048b2:	442b      	add	r3, r5
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	a912      	add	r1, sp, #72	; 0x48
 80048b8:	4419      	add	r1, r3
 80048ba:	f911 1c1c 	ldrsb.w	r1, [r1, #-28]
 80048be:	2900      	cmp	r1, #0
 80048c0:	dd07      	ble.n	80048d2 <xAnalyzeTask+0xa22>
							if (impTime[i] > maxUpImp){
 80048c2:	a912      	add	r1, sp, #72	; 0x48
 80048c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80048c8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80048cc:	4599      	cmp	r9, r3
 80048ce:	bfb8      	it	lt
 80048d0:	4699      	movlt	r9, r3
 80048d2:	3201      	adds	r2, #1
 80048d4:	e743      	b.n	800475e <xAnalyzeTask+0x8ae>
					impCounter = xTaskGetTickCount();
 80048d6:	f7fe feb3 	bl	8003640 <xTaskGetTickCount>
 80048da:	4682      	mov	sl, r0
						vTaskDelay(20);
 80048dc:	2014      	movs	r0, #20
 80048de:	f7fe ffbf 	bl	8003860 <vTaskDelay>
						dCounter = xTaskGetTickCount() - impCounter;
 80048e2:	f7fe fead 	bl	8003640 <xTaskGetTickCount>
						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 80048e6:	4a75      	ldr	r2, [pc, #468]	; (8004abc <xAnalyzeTask+0xc0c>)
						dCounter = xTaskGetTickCount() - impCounter;
 80048e8:	eba0 030a 	sub.w	r3, r0, sl
						if (controllerState.pressureCompensation == COMPENSATION_OFF){
 80048ec:	7852      	ldrb	r2, [r2, #1]
 80048ee:	b142      	cbz	r2, 8004902 <xAnalyzeTask+0xa52>
 80048f0:	f04f 0800 	mov.w	r8, #0
 80048f4:	4647      	mov	r7, r8
 80048f6:	fa5f f488 	uxtb.w	r4, r8
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 80048fa:	42a6      	cmp	r6, r4
 80048fc:	d80a      	bhi.n	8004914 <xAnalyzeTask+0xa64>
						if (stopImp >= numOfWays[axleCounter]){
 80048fe:	42b7      	cmp	r7, r6
 8004900:	d3ec      	bcc.n	80048dc <xAnalyzeTask+0xa2c>
					vTaskDelay(3000);
 8004902:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004906:	f7fe ffab 	bl	8003860 <vTaskDelay>
					controllerState.compressorWorkTime += maxUpImp;
 800490a:	4a6c      	ldr	r2, [pc, #432]	; (8004abc <xAnalyzeTask+0xc0c>)
 800490c:	6a13      	ldr	r3, [r2, #32]
 800490e:	444b      	add	r3, r9
 8004910:	6213      	str	r3, [r2, #32]
 8004912:	e741      	b.n	8004798 <xAnalyzeTask+0x8e8>
							if(dCounter > impTime[i]){
 8004914:	442c      	add	r4, r5
 8004916:	b2e4      	uxtb	r4, r4
 8004918:	aa12      	add	r2, sp, #72	; 0x48
 800491a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800491e:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8004922:	4293      	cmp	r3, r2
 8004924:	d915      	bls.n	8004952 <xAnalyzeTask+0xaa2>
 8004926:	9308      	str	r3, [sp, #32]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004928:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <xAnalyzeTask+0xc00>)
 800492a:	2200      	movs	r2, #0
 800492c:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004930:	4b5e      	ldr	r3, [pc, #376]	; (8004aac <xAnalyzeTask+0xbfc>)
								stopImp++;
 8004932:	3701      	adds	r7, #1
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004934:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004938:	f7fd f8e2 	bl	8001b00 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800493c:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <xAnalyzeTask+0xc04>)
 800493e:	485e      	ldr	r0, [pc, #376]	; (8004ab8 <xAnalyzeTask+0xc08>)
 8004940:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004944:	2200      	movs	r2, #0
 8004946:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800494a:	f7fd f8d9 	bl	8001b00 <HAL_GPIO_WritePin>
								stopImp++;
 800494e:	9b08      	ldr	r3, [sp, #32]
 8004950:	b2ff      	uxtb	r7, r7
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	e7ce      	b.n	80048f6 <xAnalyzeTask+0xa46>
 8004958:	1d96      	adds	r6, r2, #6
					controllerState.numberOfTries = 0;
					continue;
				}
//here starts common code

				controllerState.errorMeaningByte = 0;
 800495a:	4637      	mov	r7, r6
						deltaPressure = abs(deltaPressure);
						if (deltaPressure < 10){
							pressIsLower[i] = -1;

							#if DEBUG_SERIAL
								messageLength = sprintf(message, "[ERROR] %d valve %d\t%d\t%d\t%ld\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i]);
 800495c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ad8 <xAnalyzeTask+0xc28>
 8004960:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004ac8 <xAnalyzeTask+0xc18>
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004964:	f8df a164 	ldr.w	sl, [pc, #356]	; 8004acc <xAnalyzeTask+0xc1c>
				controllerState.errorMeaningByte = 0;
 8004968:	7654      	strb	r4, [r2, #25]
					if (impTime[i] > 1500){
 800496a:	ab0e      	add	r3, sp, #56	; 0x38
 800496c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004970:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004974:	4298      	cmp	r0, r3
 8004976:	dd2c      	ble.n	80049d2 <xAnalyzeTask+0xb22>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004978:	ab0c      	add	r3, sp, #48	; 0x30
 800497a:	8939      	ldrh	r1, [r7, #8]
 800497c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8004980:	1a8b      	subs	r3, r1, r2
						deltaPressure = abs(deltaPressure);
 8004982:	b21b      	sxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bfb8      	it	lt
 8004988:	425b      	neglt	r3, r3
						if (deltaPressure < 10){
 800498a:	b21b      	sxth	r3, r3
 800498c:	2b09      	cmp	r3, #9
 800498e:	dc20      	bgt.n	80049d2 <xAnalyzeTask+0xb22>
							pressIsLower[i] = -1;
 8004990:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8004994:	ab0b      	add	r3, sp, #44	; 0x2c
 8004996:	f804 e003 	strb.w	lr, [r4, r3]
								messageLength = sprintf(message, "[ERROR] %d valve %d\t%d\t%d\t%ld\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i]);
 800499a:	883b      	ldrh	r3, [r7, #0]
 800499c:	9002      	str	r0, [sp, #8]
 800499e:	9101      	str	r1, [sp, #4]
 80049a0:	9200      	str	r2, [sp, #0]
 80049a2:	4649      	mov	r1, r9
 80049a4:	4622      	mov	r2, r4
 80049a6:	4640      	mov	r0, r8
 80049a8:	f001 f9ea 	bl	8005d80 <siprintf>
 80049ac:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <xAnalyzeTask+0xc10>)
 80049ae:	b2c2      	uxtb	r2, r0
 80049b0:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80049b2:	4641      	mov	r1, r8
 80049b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049b8:	4650      	mov	r0, sl
 80049ba:	f7fd fd97 	bl	80024ec <HAL_UART_Transmit>
							#endif

								//TODO: error valve
								controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
 80049be:	796b      	ldrb	r3, [r5, #5]
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	716b      	strb	r3, [r5, #5]
								controllerState.errorByte |= (1 << i);
 80049c6:	2301      	movs	r3, #1
 80049c8:	fa03 f204 	lsl.w	r2, r3, r4
 80049cc:	7e2b      	ldrb	r3, [r5, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	762b      	strb	r3, [r5, #24]
 80049d2:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 80049d4:	2c04      	cmp	r4, #4
 80049d6:	f107 0702 	add.w	r7, r7, #2
 80049da:	d1c6      	bne.n	800496a <xAnalyzeTask+0xaba>
						}
					}
				}

				#if DEBUG_SERIAL
					messageLength = sprintf(message, "[INFO] Results\n");
 80049dc:	4939      	ldr	r1, [pc, #228]	; (8004ac4 <xAnalyzeTask+0xc14>)
 80049de:	483a      	ldr	r0, [pc, #232]	; (8004ac8 <xAnalyzeTask+0xc18>)
 80049e0:	f001 fa1e 	bl	8005e20 <strcpy>
 80049e4:	220f      	movs	r2, #15
 80049e6:	4f36      	ldr	r7, [pc, #216]	; (8004ac0 <xAnalyzeTask+0xc10>)
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80049e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ec:	4936      	ldr	r1, [pc, #216]	; (8004ac8 <xAnalyzeTask+0xc18>)
 80049ee:	4837      	ldr	r0, [pc, #220]	; (8004acc <xAnalyzeTask+0xc1c>)
					messageLength = sprintf(message, "[INFO] Results\n");
 80049f0:	703a      	strb	r2, [r7, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80049f2:	2400      	movs	r4, #0
 80049f4:	f7fd fd7a 	bl	80024ec <HAL_UART_Transmit>
 80049f8:	9707      	str	r7, [sp, #28]
						if (pressIsLower[i] == 1){
							if (impCoeff[i] >= 0.0)
								controllerData.impUpCoeff[i] = impCoeff[i];
						}
						else if (pressIsLower[i] == 0){
							if (impCoeff[i] <= 0.0)
 80049fa:	2700      	movs	r7, #0
 80049fc:	4d34      	ldr	r5, [pc, #208]	; (8004ad0 <xAnalyzeTask+0xc20>)
								controllerData.impDownCoeff[i] = impCoeff[i];
						}

						#if DEBUG_SERIAL
							messageLength = sprintf(message, "\t%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i],(int)controllerData.impUpCoeff[i],(int)controllerData.impDownCoeff[i]);
 80049fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ac8 <xAnalyzeTask+0xc18>
					if (pressIsLower[i] >=0){
 8004a02:	ab0b      	add	r3, sp, #44	; 0x2c
 8004a04:	56e3      	ldrsb	r3, [r4, r3]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	9308      	str	r3, [sp, #32]
 8004a0a:	db3c      	blt.n	8004a86 <xAnalyzeTask+0xbd6>
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a0c:	ab0e      	add	r3, sp, #56	; 0x38
 8004a0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a12:	aa0c      	add	r2, sp, #48	; 0x30
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a14:	4618      	mov	r0, r3
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a16:	f832 8014 	ldrh.w	r8, [r2, r4, lsl #1]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a1a:	9306      	str	r3, [sp, #24]
 8004a1c:	f7fb fcd6 	bl	80003cc <__aeabi_i2f>
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a20:	f8b6 9008 	ldrh.w	r9, [r6, #8]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a24:	4683      	mov	fp, r0
						deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a26:	eba9 0008 	sub.w	r0, r9, r8
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a2a:	b200      	sxth	r0, r0
 8004a2c:	f7fb fcce 	bl	80003cc <__aeabi_i2f>
 8004a30:	4601      	mov	r1, r0
 8004a32:	4658      	mov	r0, fp
 8004a34:	f7fb fdd2 	bl	80005dc <__aeabi_fdiv>
						if (pressIsLower[i] == 1){
 8004a38:	9b08      	ldr	r3, [sp, #32]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004a3a:	4683      	mov	fp, r0
						if (pressIsLower[i] == 1){
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d12b      	bne.n	8004a98 <xAnalyzeTask+0xbe8>
							if (impCoeff[i] >= 0.0)
 8004a40:	4639      	mov	r1, r7
 8004a42:	f7fb fec9 	bl	80007d8 <__aeabi_fcmpge>
 8004a46:	b108      	cbz	r0, 8004a4c <xAnalyzeTask+0xb9c>
								controllerData.impUpCoeff[i] = impCoeff[i];
 8004a48:	f8c5 b000 	str.w	fp, [r5]
							messageLength = sprintf(message, "\t%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, controllerState.nessPressure[i], startPressure[i], controllerState.filteredData[i], impTime[i],(int)controllerData.impUpCoeff[i],(int)controllerData.impDownCoeff[i]);
 8004a4c:	6928      	ldr	r0, [r5, #16]
 8004a4e:	f7fb fed7 	bl	8000800 <__aeabi_f2iz>
 8004a52:	f8b6 b000 	ldrh.w	fp, [r6]
 8004a56:	9004      	str	r0, [sp, #16]
 8004a58:	6828      	ldr	r0, [r5, #0]
 8004a5a:	f7fb fed1 	bl	8000800 <__aeabi_f2iz>
 8004a5e:	9b06      	ldr	r3, [sp, #24]
 8004a60:	9003      	str	r0, [sp, #12]
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	4622      	mov	r2, r4
 8004a66:	465b      	mov	r3, fp
 8004a68:	491a      	ldr	r1, [pc, #104]	; (8004ad4 <xAnalyzeTask+0xc24>)
 8004a6a:	e88d 0300 	stmia.w	sp, {r8, r9}
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f001 f986 	bl	8005d80 <siprintf>
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	b2c2      	uxtb	r2, r0
 8004a78:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a80:	4812      	ldr	r0, [pc, #72]	; (8004acc <xAnalyzeTask+0xc1c>)
 8004a82:	f7fd fd33 	bl	80024ec <HAL_UART_Transmit>
 8004a86:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 8004a88:	2c04      	cmp	r4, #4
 8004a8a:	f106 0602 	add.w	r6, r6, #2
 8004a8e:	f105 0504 	add.w	r5, r5, #4
 8004a92:	d1b6      	bne.n	8004a02 <xAnalyzeTask+0xb52>
 8004a94:	f7ff ba21 	b.w	8003eda <xAnalyzeTask+0x2a>
						else if (pressIsLower[i] == 0){
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1d7      	bne.n	8004a4c <xAnalyzeTask+0xb9c>
							if (impCoeff[i] <= 0.0)
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f7fb fe91 	bl	80007c4 <__aeabi_fcmple>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d0d2      	beq.n	8004a4c <xAnalyzeTask+0xb9c>
								controllerData.impDownCoeff[i] = impCoeff[i];
 8004aa6:	f8c5 b010 	str.w	fp, [r5, #16]
 8004aaa:	e7cf      	b.n	8004a4c <xAnalyzeTask+0xb9c>
 8004aac:	2000001c 	.word	0x2000001c
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	2000002c 	.word	0x2000002c
 8004ab8:	2000003c 	.word	0x2000003c
 8004abc:	20005268 	.word	0x20005268
 8004ac0:	20005239 	.word	0x20005239
 8004ac4:	080070c9 	.word	0x080070c9
 8004ac8:	200051b9 	.word	0x200051b9
 8004acc:	200053f4 	.word	0x200053f4
 8004ad0:	20005240 	.word	0x20005240
 8004ad4:	080070d9 	.word	0x080070d9
 8004ad8:	080070aa 	.word	0x080070aa

08004adc <xBlynkTask>:

extern char message[128];
extern uint8_t recCommandByte;


void xBlynkTask(void* arguments){
 8004adc:	b508      	push	{r3, lr}
	for(;;){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004ade:	4e0c      	ldr	r6, [pc, #48]	; (8004b10 <xBlynkTask+0x34>)
		switch(controllerState.soundIndicationState){
 8004ae0:	4d0c      	ldr	r5, [pc, #48]	; (8004b14 <xBlynkTask+0x38>)
		case SEARCH_INDICATION:
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
			break;
		case NORMAL_INDICATION:
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004ae2:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <xBlynkTask+0x3c>)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7fd f80f 	bl	8001b0a <HAL_GPIO_TogglePin>
		switch(controllerState.soundIndicationState){
 8004aec:	78ea      	ldrb	r2, [r5, #3]
 8004aee:	b152      	cbz	r2, 8004b06 <xBlynkTask+0x2a>
 8004af0:	2a01      	cmp	r2, #1
 8004af2:	d103      	bne.n	8004afc <xBlynkTask+0x20>
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8004af4:	4611      	mov	r1, r2
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7fd f807 	bl	8001b0a <HAL_GPIO_TogglePin>
			break;
		default:
			break;
		}
		vTaskDelay(500 / portTICK_RATE_MS);
 8004afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b00:	f7fe feae 	bl	8003860 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004b04:	e7ee      	b.n	8004ae4 <xBlynkTask+0x8>
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004b06:	2101      	movs	r1, #1
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7fc fff9 	bl	8001b00 <HAL_GPIO_WritePin>
			break;
 8004b0e:	e7f5      	b.n	8004afc <xBlynkTask+0x20>
 8004b10:	40010800 	.word	0x40010800
 8004b14:	20005268 	.word	0x20005268
 8004b18:	40011000 	.word	0x40011000

08004b1c <controller_init>:

	vTaskDelete(NULL);
}

void controller_init(){
	uint32_t unique_ID[3] = {0};
 8004b1c:	2300      	movs	r3, #0
void controller_init(){
 8004b1e:	b530      	push	{r4, r5, lr}

	init_structures();

	mRead_flash();
	if(controllerData.rfChannel > 120){
 8004b20:	4c7c      	ldr	r4, [pc, #496]	; (8004d14 <controller_init+0x1f8>)
void controller_init(){
 8004b22:	b087      	sub	sp, #28
	uint32_t unique_ID[3] = {0};
 8004b24:	9303      	str	r3, [sp, #12]
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	9305      	str	r3, [sp, #20]
	init_structures();
 8004b2a:	f000 f995 	bl	8004e58 <init_structures>
	mRead_flash();
 8004b2e:	f000 f9eb 	bl	8004f08 <mRead_flash>
	if(controllerData.rfChannel > 120){
 8004b32:	7823      	ldrb	r3, [r4, #0]
		controllerData.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 8004b34:	a803      	add	r0, sp, #12
	if(controllerData.rfChannel > 120){
 8004b36:	2b78      	cmp	r3, #120	; 0x78
		controllerData.rfChannel = 1;
 8004b38:	bf84      	itt	hi
 8004b3a:	2301      	movhi	r3, #1
 8004b3c:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 8004b3e:	f7fc f867 	bl	8000c10 <HAL_GetUID>
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 8004b42:	9a04      	ldr	r2, [sp, #16]
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	4d74      	ldr	r5, [pc, #464]	; (8004d18 <controller_init+0x1fc>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	9a05      	ldr	r2, [sp, #20]

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004b4c:	4873      	ldr	r0, [pc, #460]	; (8004d1c <controller_init+0x200>)
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 8004b4e:	4413      	add	r3, r2
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004b50:	2201      	movs	r2, #1
 8004b52:	4611      	mov	r1, r2
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 8004b54:	82eb      	strh	r3, [r5, #22]
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004b56:	f7fc ffd3 	bl	8001b00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004b5a:	2064      	movs	r0, #100	; 0x64
 8004b5c:	f7fc f846 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004b60:	2200      	movs	r2, #0
 8004b62:	2101      	movs	r1, #1
 8004b64:	486d      	ldr	r0, [pc, #436]	; (8004d1c <controller_init+0x200>)
 8004b66:	f7fc ffcb 	bl	8001b00 <HAL_GPIO_WritePin>


	init_rf433(controllerData.rfChannel); //TODO: change to more common
 8004b6a:	7820      	ldrb	r0, [r4, #0]
 8004b6c:	f000 f922 	bl	8004db4 <init_rf433>



	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 8004b70:	2203      	movs	r2, #3
 8004b72:	2100      	movs	r1, #0
 8004b74:	2001      	movs	r0, #1
 8004b76:	f7fe f9ef 	bl	8002f58 <xQueueGenericCreate>
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <controller_init+0x204>)
 8004b7c:	6010      	str	r0, [r2, #0]
 8004b7e:	b120      	cbz	r0, 8004b8a <controller_init+0x6e>
 8004b80:	2300      	movs	r3, #0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	f7fe fa09 	bl	8002f9c <xQueueGenericSend>

	#if DEBUG_SERIAL
		sprintf(message, "\n Server ID: %hu\r\n", controllerState.serverUID);
 8004b8a:	8aea      	ldrh	r2, [r5, #22]
 8004b8c:	4965      	ldr	r1, [pc, #404]	; (8004d24 <controller_init+0x208>)
 8004b8e:	4866      	ldr	r0, [pc, #408]	; (8004d28 <controller_init+0x20c>)
 8004b90:	f001 f8f6 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004b94:	4864      	ldr	r0, [pc, #400]	; (8004d28 <controller_init+0x20c>)
 8004b96:	f7fb fb4b 	bl	8000230 <strlen>
 8004b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b9e:	b282      	uxth	r2, r0
 8004ba0:	4961      	ldr	r1, [pc, #388]	; (8004d28 <controller_init+0x20c>)
 8004ba2:	4862      	ldr	r0, [pc, #392]	; (8004d2c <controller_init+0x210>)
 8004ba4:	f7fd fca2 	bl	80024ec <HAL_UART_Transmit>
		uint32_t fre=xPortGetFreeHeapSize();
 8004ba8:	f7fe f910 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "Free heap: %ld\r\n", fre);
 8004bac:	4960      	ldr	r1, [pc, #384]	; (8004d30 <controller_init+0x214>)
 8004bae:	4602      	mov	r2, r0
 8004bb0:	485d      	ldr	r0, [pc, #372]	; (8004d28 <controller_init+0x20c>)
 8004bb2:	f001 f8e5 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004bb6:	485c      	ldr	r0, [pc, #368]	; (8004d28 <controller_init+0x20c>)
 8004bb8:	f7fb fb3a 	bl	8000230 <strlen>
	#endif

	xTaskCreate(xBlynkTask,
 8004bbc:	2400      	movs	r4, #0
 8004bbe:	2501      	movs	r5, #1
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004bc0:	b282      	uxth	r2, r0
 8004bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bc6:	4958      	ldr	r1, [pc, #352]	; (8004d28 <controller_init+0x20c>)
 8004bc8:	4858      	ldr	r0, [pc, #352]	; (8004d2c <controller_init+0x210>)
 8004bca:	f7fd fc8f 	bl	80024ec <HAL_UART_Transmit>
	xTaskCreate(xBlynkTask,
 8004bce:	4623      	mov	r3, r4
 8004bd0:	22c8      	movs	r2, #200	; 0xc8
 8004bd2:	4958      	ldr	r1, [pc, #352]	; (8004d34 <controller_init+0x218>)
 8004bd4:	9401      	str	r4, [sp, #4]
 8004bd6:	9500      	str	r5, [sp, #0]
 8004bd8:	4857      	ldr	r0, [pc, #348]	; (8004d38 <controller_init+0x21c>)
 8004bda:	f7fe fc1d 	bl	8003418 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004bde:	f7fe f8f5 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
 8004be2:	4956      	ldr	r1, [pc, #344]	; (8004d3c <controller_init+0x220>)
 8004be4:	4602      	mov	r2, r0
 8004be6:	4850      	ldr	r0, [pc, #320]	; (8004d28 <controller_init+0x20c>)
 8004be8:	f001 f8ca 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004bec:	484e      	ldr	r0, [pc, #312]	; (8004d28 <controller_init+0x20c>)
 8004bee:	f7fb fb1f 	bl	8000230 <strlen>
 8004bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf6:	b282      	uxth	r2, r0
 8004bf8:	494b      	ldr	r1, [pc, #300]	; (8004d28 <controller_init+0x20c>)
 8004bfa:	484c      	ldr	r0, [pc, #304]	; (8004d2c <controller_init+0x210>)
 8004bfc:	f7fd fc76 	bl	80024ec <HAL_UART_Transmit>
	#endif

	xTaskCreate(xScanInputTask,
 8004c00:	4623      	mov	r3, r4
 8004c02:	22c8      	movs	r2, #200	; 0xc8
 8004c04:	494e      	ldr	r1, [pc, #312]	; (8004d40 <controller_init+0x224>)
 8004c06:	9401      	str	r4, [sp, #4]
 8004c08:	9500      	str	r5, [sp, #0]
 8004c0a:	484e      	ldr	r0, [pc, #312]	; (8004d44 <controller_init+0x228>)
 8004c0c:	f7fe fc04 	bl	8003418 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004c10:	f7fe f8dc 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after Scan: %ld\r\n", fre);
 8004c14:	494c      	ldr	r1, [pc, #304]	; (8004d48 <controller_init+0x22c>)
 8004c16:	4602      	mov	r2, r0
 8004c18:	4843      	ldr	r0, [pc, #268]	; (8004d28 <controller_init+0x20c>)
 8004c1a:	f001 f8b1 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004c1e:	4842      	ldr	r0, [pc, #264]	; (8004d28 <controller_init+0x20c>)
 8004c20:	f7fb fb06 	bl	8000230 <strlen>
 8004c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c28:	b282      	uxth	r2, r0
 8004c2a:	493f      	ldr	r1, [pc, #252]	; (8004d28 <controller_init+0x20c>)
 8004c2c:	483f      	ldr	r0, [pc, #252]	; (8004d2c <controller_init+0x210>)
 8004c2e:	f7fd fc5d 	bl	80024ec <HAL_UART_Transmit>
	#endif

	xTaskCreate(xStoreADCDataTask,
 8004c32:	4623      	mov	r3, r4
 8004c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c38:	4944      	ldr	r1, [pc, #272]	; (8004d4c <controller_init+0x230>)
 8004c3a:	9401      	str	r4, [sp, #4]
 8004c3c:	9500      	str	r5, [sp, #0]
 8004c3e:	4844      	ldr	r0, [pc, #272]	; (8004d50 <controller_init+0x234>)
 8004c40:	f7fe fbea 	bl	8003418 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004c44:	f7fe f8c2 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
 8004c48:	4942      	ldr	r1, [pc, #264]	; (8004d54 <controller_init+0x238>)
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4836      	ldr	r0, [pc, #216]	; (8004d28 <controller_init+0x20c>)
 8004c4e:	f001 f897 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004c52:	4835      	ldr	r0, [pc, #212]	; (8004d28 <controller_init+0x20c>)
 8004c54:	f7fb faec 	bl	8000230 <strlen>
 8004c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5c:	b282      	uxth	r2, r0
 8004c5e:	4932      	ldr	r1, [pc, #200]	; (8004d28 <controller_init+0x20c>)
 8004c60:	4832      	ldr	r0, [pc, #200]	; (8004d2c <controller_init+0x210>)
 8004c62:	f7fd fc43 	bl	80024ec <HAL_UART_Transmit>
	#endif

	xTaskCreate(xProcessCommandTask,
 8004c66:	2303      	movs	r3, #3
 8004c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	493a      	ldr	r1, [pc, #232]	; (8004d58 <controller_init+0x23c>)
 8004c70:	4623      	mov	r3, r4
 8004c72:	9401      	str	r4, [sp, #4]
 8004c74:	4839      	ldr	r0, [pc, #228]	; (8004d5c <controller_init+0x240>)
 8004c76:	f7fe fbcf 	bl	8003418 <xTaskCreate>
				NULL,
				3,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004c7a:	f7fe f8a7 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
 8004c7e:	4938      	ldr	r1, [pc, #224]	; (8004d60 <controller_init+0x244>)
 8004c80:	4602      	mov	r2, r0
 8004c82:	4829      	ldr	r0, [pc, #164]	; (8004d28 <controller_init+0x20c>)
 8004c84:	f001 f87c 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004c88:	4827      	ldr	r0, [pc, #156]	; (8004d28 <controller_init+0x20c>)
 8004c8a:	f7fb fad1 	bl	8000230 <strlen>
 8004c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c92:	b282      	uxth	r2, r0
 8004c94:	4924      	ldr	r1, [pc, #144]	; (8004d28 <controller_init+0x20c>)
 8004c96:	4825      	ldr	r0, [pc, #148]	; (8004d2c <controller_init+0x210>)
 8004c98:	f7fd fc28 	bl	80024ec <HAL_UART_Transmit>
	#endif

	xTaskCreate(xAnalyzeTask,
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004ca2:	4930      	ldr	r1, [pc, #192]	; (8004d64 <controller_init+0x248>)
 8004ca4:	9401      	str	r4, [sp, #4]
 8004ca6:	9500      	str	r5, [sp, #0]
 8004ca8:	482f      	ldr	r0, [pc, #188]	; (8004d68 <controller_init+0x24c>)
 8004caa:	f7fe fbb5 	bl	8003418 <xTaskCreate>
				800,
				NULL,
				1,
				NULL);
	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004cae:	f7fe f88d 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
 8004cb2:	492e      	ldr	r1, [pc, #184]	; (8004d6c <controller_init+0x250>)
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	481c      	ldr	r0, [pc, #112]	; (8004d28 <controller_init+0x20c>)
 8004cb8:	f001 f862 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
 8004cbc:	481a      	ldr	r0, [pc, #104]	; (8004d28 <controller_init+0x20c>)
 8004cbe:	f7fb fab7 	bl	8000230 <strlen>
 8004cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cc6:	b282      	uxth	r2, r0
 8004cc8:	4917      	ldr	r1, [pc, #92]	; (8004d28 <controller_init+0x20c>)
 8004cca:	4818      	ldr	r0, [pc, #96]	; (8004d2c <controller_init+0x210>)
 8004ccc:	f7fd fc0e 	bl	80024ec <HAL_UART_Transmit>
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	2140      	movs	r1, #64	; 0x40
 8004cd4:	2002      	movs	r0, #2
 8004cd6:	f7fe f93f 	bl	8002f58 <xQueueGenericCreate>
 8004cda:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <controller_init+0x254>)
 8004cdc:	6018      	str	r0, [r3, #0]

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004cde:	f7fe f875 	bl	8002dcc <xPortGetFreeHeapSize>
		sprintf(message, "heap after queue: %ld\r\n", fre);
 8004ce2:	4924      	ldr	r1, [pc, #144]	; (8004d74 <controller_init+0x258>)
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4810      	ldr	r0, [pc, #64]	; (8004d28 <controller_init+0x20c>)
 8004ce8:	f001 f84a 	bl	8005d80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004cec:	480e      	ldr	r0, [pc, #56]	; (8004d28 <controller_init+0x20c>)
 8004cee:	f7fb fa9f 	bl	8000230 <strlen>
 8004cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cf6:	b282      	uxth	r2, r0
 8004cf8:	490b      	ldr	r1, [pc, #44]	; (8004d28 <controller_init+0x20c>)
 8004cfa:	480c      	ldr	r0, [pc, #48]	; (8004d2c <controller_init+0x210>)
 8004cfc:	f7fd fbf6 	bl	80024ec <HAL_UART_Transmit>
	#endif

	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8004d00:	462a      	mov	r2, r5
 8004d02:	491d      	ldr	r1, [pc, #116]	; (8004d78 <controller_init+0x25c>)
 8004d04:	4809      	ldr	r0, [pc, #36]	; (8004d2c <controller_init+0x210>)
 8004d06:	f7fd fc4d 	bl	80025a4 <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004d0a:	481c      	ldr	r0, [pc, #112]	; (8004d7c <controller_init+0x260>)
 8004d0c:	f7fc f966 	bl	8000fdc <HAL_ADCEx_InjectedStart_IT>
}
 8004d10:	b007      	add	sp, #28
 8004d12:	bd30      	pop	{r4, r5, pc}
 8004d14:	2000523c 	.word	0x2000523c
 8004d18:	20005268 	.word	0x20005268
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	2000537c 	.word	0x2000537c
 8004d24:	08007151 	.word	0x08007151
 8004d28:	200051b9 	.word	0x200051b9
 8004d2c:	200053f4 	.word	0x200053f4
 8004d30:	08007164 	.word	0x08007164
 8004d34:	08007175 	.word	0x08007175
 8004d38:	08004add 	.word	0x08004add
 8004d3c:	0800717b 	.word	0x0800717b
 8004d40:	08007193 	.word	0x08007193
 8004d44:	08005805 	.word	0x08005805
 8004d48:	08007198 	.word	0x08007198
 8004d4c:	080071af 	.word	0x080071af
 8004d50:	08003c9d 	.word	0x08003c9d
 8004d54:	080071b8 	.word	0x080071b8
 8004d58:	080071d3 	.word	0x080071d3
 8004d5c:	080052fd 	.word	0x080052fd
 8004d60:	080071db 	.word	0x080071db
 8004d64:	080071f5 	.word	0x080071f5
 8004d68:	08003eb1 	.word	0x08003eb1
 8004d6c:	080071fb 	.word	0x080071fb
 8004d70:	20005440 	.word	0x20005440
 8004d74:	08007214 	.word	0x08007214
 8004d78:	20005444 	.word	0x20005444
 8004d7c:	200053c4 	.word	0x200053c4

08004d80 <print_debug>:
extern UART_HandleTypeDef huart1;

char debugMessage[16] = {};
uint8_t debugMessageLength = 0;

void print_debug(char* msg){
 8004d80:	b510      	push	{r4, lr}
	#if DEBUG_SERIAL
		debugMessageLength = sprintf(debugMessage, "%s", msg);
 8004d82:	4c08      	ldr	r4, [pc, #32]	; (8004da4 <print_debug+0x24>)
 8004d84:	4602      	mov	r2, r0
 8004d86:	4908      	ldr	r1, [pc, #32]	; (8004da8 <print_debug+0x28>)
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 fff9 	bl	8005d80 <siprintf>
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <print_debug+0x2c>)
 8004d90:	b2c2      	uxtb	r2, r0
 8004d92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004d94:	4621      	mov	r1, r4
	#endif
}
 8004d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d9e:	4804      	ldr	r0, [pc, #16]	; (8004db0 <print_debug+0x30>)
 8004da0:	f7fd bba4 	b.w	80024ec <HAL_UART_Transmit>
 8004da4:	200051a8 	.word	0x200051a8
 8004da8:	0800723f 	.word	0x0800723f
 8004dac:	200051b8 	.word	0x200051b8
 8004db0:	200053f4 	.word	0x200053f4

08004db4 <init_rf433>:

void init_rf433(uint8_t channel){
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	4607      	mov	r7, r0
	CMD_RF_ON;
 8004db8:	4d20      	ldr	r5, [pc, #128]	; (8004e3c <init_rf433+0x88>)
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004dba:	4c21      	ldr	r4, [pc, #132]	; (8004e40 <init_rf433+0x8c>)
	CMD_RF_ON;
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f7fc fe9c 	bl	8001b00 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004dc8:	2032      	movs	r0, #50	; 0x32
 8004dca:	f7fb ff0f 	bl	8000bec <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd2:	2207      	movs	r2, #7
 8004dd4:	491b      	ldr	r1, [pc, #108]	; (8004e44 <init_rf433+0x90>)
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7fd fb88 	bl	80024ec <HAL_UART_Transmit>
	HAL_Delay(200);
 8004ddc:	20c8      	movs	r0, #200	; 0xc8
 8004dde:	f7fb ff05 	bl	8000bec <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
	HAL_Delay(200);
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 8004de2:	4e19      	ldr	r6, [pc, #100]	; (8004e48 <init_rf433+0x94>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
 8004de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de8:	2207      	movs	r2, #7
 8004dea:	4918      	ldr	r1, [pc, #96]	; (8004e4c <init_rf433+0x98>)
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7fd fb7d 	bl	80024ec <HAL_UART_Transmit>
	HAL_Delay(200);
 8004df2:	20c8      	movs	r0, #200	; 0xc8
 8004df4:	f7fb fefa 	bl	8000bec <HAL_Delay>
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 8004df8:	463a      	mov	r2, r7
 8004dfa:	4915      	ldr	r1, [pc, #84]	; (8004e50 <init_rf433+0x9c>)
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 ffbf 	bl	8005d80 <siprintf>
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <init_rf433+0xa0>)
 8004e04:	b2c2      	uxtb	r2, r0
 8004e06:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004e08:	4631      	mov	r1, r6
 8004e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7fd fb6c 	bl	80024ec <HAL_UART_Transmit>
	HAL_Delay(200);
 8004e14:	20c8      	movs	r0, #200	; 0xc8
 8004e16:	f7fb fee9 	bl	8000bec <HAL_Delay>

	CMD_RF_OFF;
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e22:	f7fc fe6d 	bl	8001b00 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004e26:	2032      	movs	r0, #50	; 0x32
 8004e28:	f7fb fee0 	bl	8000bec <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 8004e2c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8004e30:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 19200;
 8004e32:	6063      	str	r3, [r4, #4]
		//Error_Handler();
	}
}
 8004e34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8004e38:	f7fd bb2a 	b.w	8002490 <HAL_UART_Init>
 8004e3c:	40010800 	.word	0x40010800
 8004e40:	200053f4 	.word	0x200053f4
 8004e44:	0800722c 	.word	0x0800722c
 8004e48:	200051a8 	.word	0x200051a8
 8004e4c:	08007234 	.word	0x08007234
 8004e50:	0800702d 	.word	0x0800702d
 8004e54:	200051b8 	.word	0x200051b8

08004e58 <init_structures>:
void init_structures(){

	controllerState.analyzeState = COMPENSATION_STATE_FREE;
	controllerState.pressureCompensation = COMPENSATION_OFF;
	controllerState.soundIndicationState = NORMAL_INDICATION;
	controllerState.airSystemType = RECEIVER;
 8004e58:	2101      	movs	r1, #1
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <init_structures+0x38>)
 8004e5c:	2200      	movs	r2, #0
	controllerState.airSystemType = RECEIVER;
 8004e5e:	7119      	strb	r1, [r3, #4]
	controllerState.filteredData[3] = 0;

	controllerState.serverUID = 0;
	controllerState.errorByte = 0;
	controllerState.errorMeaningByte = 0;
	controllerState.waysType = 6;
 8004e60:	2106      	movs	r1, #6
 8004e62:	7699      	strb	r1, [r3, #26]
	controllerState.analyzeAccuracy = 40;
 8004e64:	2128      	movs	r1, #40	; 0x28
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004e66:	701a      	strb	r2, [r3, #0]
	controllerState.pressureCompensation = COMPENSATION_OFF;
 8004e68:	705a      	strb	r2, [r3, #1]
	controllerState.soundIndicationState = NORMAL_INDICATION;
 8004e6a:	70da      	strb	r2, [r3, #3]
	controllerState.errorStatus = STATUS_NORMAL;
 8004e6c:	715a      	strb	r2, [r3, #5]
	controllerState.nessPressure[0] = 0;
 8004e6e:	80da      	strh	r2, [r3, #6]
	controllerState.nessPressure[1] = 0;
 8004e70:	811a      	strh	r2, [r3, #8]
	controllerState.nessPressure[2] = 0;
 8004e72:	815a      	strh	r2, [r3, #10]
	controllerState.nessPressure[3] = 0;
 8004e74:	819a      	strh	r2, [r3, #12]
	controllerState.filteredData[0] = 0;
 8004e76:	81da      	strh	r2, [r3, #14]
	controllerState.filteredData[1] = 0;
 8004e78:	821a      	strh	r2, [r3, #16]
	controllerState.filteredData[2] = 0;
 8004e7a:	825a      	strh	r2, [r3, #18]
	controllerState.filteredData[3] = 0;
 8004e7c:	829a      	strh	r2, [r3, #20]
	controllerState.serverUID = 0;
 8004e7e:	82da      	strh	r2, [r3, #22]
	controllerState.errorByte = 0;
 8004e80:	761a      	strb	r2, [r3, #24]
	controllerState.errorMeaningByte = 0;
 8004e82:	765a      	strb	r2, [r3, #25]
	controllerState.analyzeAccuracy = 40;
 8004e84:	76d9      	strb	r1, [r3, #27]
	controllerState.status = 0;
 8004e86:	771a      	strb	r2, [r3, #28]
	controllerState.numberOfTries = 0;
 8004e88:	775a      	strb	r2, [r3, #29]
	controllerState.lastTimeCommand = 0;
 8004e8a:	83da      	strh	r2, [r3, #30]
	controllerState.compressorWorkTime = 0;
 8004e8c:	621a      	str	r2, [r3, #32]
 8004e8e:	4770      	bx	lr
 8004e90:	20005268 	.word	0x20005268

08004e94 <mWrite_flash>:
#include "flashFunctions.h"
#include "controllerUtils.h"

#define CONTROLLER_LENGTH_WORDS		(sizeof(controllerData)	/ 4)

void mWrite_flash(void){
 8004e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e96:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 8004e98:	f7fc fc4e 	bl	8001738 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <mWrite_flash+0x5c>)
	EraseInitStruct.NbPages = 1;

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8004ea2:	a901      	add	r1, sp, #4
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8004ea4:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 8004ea6:	2301      	movs	r3, #1
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8004ea8:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = 1;
 8004eaa:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8004eac:	f7fc fcf4 	bl	8001898 <HAL_FLASHEx_Erase>
 8004eb0:	b110      	cbz	r0, 8004eb8 <mWrite_flash+0x24>
		print_debug("Erase Flash Error\n");
 8004eb2:	4810      	ldr	r0, [pc, #64]	; (8004ef4 <mWrite_flash+0x60>)
 8004eb4:	f7ff ff64 	bl	8004d80 <print_debug>
void mWrite_flash(void){
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ef0 <mWrite_flash+0x5c>)
	}

	uint32_t *source_addr = (void *)&controllerData;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 8004eba:	4e0f      	ldr	r6, [pc, #60]	; (8004ef8 <mWrite_flash+0x64>)
			print_debug("Write Flash Error\n");
 8004ebc:	4f0f      	ldr	r7, [pc, #60]	; (8004efc <mWrite_flash+0x68>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004ebe:	4d10      	ldr	r5, [pc, #64]	; (8004f00 <mWrite_flash+0x6c>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 8004ec0:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8004ec4:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 8004ec8:	599a      	ldr	r2, [r3, r6]
 8004eca:	4621      	mov	r1, r4
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2002      	movs	r0, #2
 8004ed0:	f7fc fc78 	bl	80017c4 <HAL_FLASH_Program>
 8004ed4:	b110      	cbz	r0, 8004edc <mWrite_flash+0x48>
			print_debug("Write Flash Error\n");
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ff52 	bl	8004d80 <print_debug>
		}
		source_addr++;
		dest_addr++;
 8004edc:	3404      	adds	r4, #4
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004ede:	42ac      	cmp	r4, r5
 8004ee0:	d1ee      	bne.n	8004ec0 <mWrite_flash+0x2c>
	}

	HAL_FLASH_Lock();
 8004ee2:	f7fc fc3b 	bl	800175c <HAL_FLASH_Lock>
	print_debug("Flash ok\n");
 8004ee6:	4807      	ldr	r0, [pc, #28]	; (8004f04 <mWrite_flash+0x70>)
 8004ee8:	f7ff ff4a 	bl	8004d80 <print_debug>
}
 8004eec:	b007      	add	sp, #28
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	0801f800 	.word	0x0801f800
 8004ef4:	0800725d 	.word	0x0800725d
 8004ef8:	2000523c 	.word	0x2000523c
 8004efc:	08007270 	.word	0x08007270
 8004f00:	0801f82c 	.word	0x0801f82c
 8004f04:	08007283 	.word	0x08007283

08004f08 <mRead_flash>:

void mRead_flash(void){
	print_debug("reading flash\n");
 8004f08:	480a      	ldr	r0, [pc, #40]	; (8004f34 <mRead_flash+0x2c>)
void mRead_flash(void){
 8004f0a:	b510      	push	{r4, lr}
	print_debug("reading flash\n");
 8004f0c:	f7ff ff38 	bl	8004d80 <print_debug>

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <mRead_flash+0x30>)
    uint32_t *dest_addr = (void*)&controllerData;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004f12:	480a      	ldr	r0, [pc, #40]	; (8004f3c <mRead_flash+0x34>)
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004f14:	490a      	ldr	r1, [pc, #40]	; (8004f40 <mRead_flash+0x38>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004f16:	681c      	ldr	r4, [r3, #0]
 8004f18:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
        source_addr++;
 8004f1c:	3304      	adds	r3, #4
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004f1e:	f5a2 32fc 	sub.w	r2, r2, #129024	; 0x1f800
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004f22:	428b      	cmp	r3, r1
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004f24:	5014      	str	r4, [r2, r0]
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004f26:	d1f6      	bne.n	8004f16 <mRead_flash+0xe>
        dest_addr++;
    }

    print_debug("Flash read\n");
 8004f28:	4806      	ldr	r0, [pc, #24]	; (8004f44 <mRead_flash+0x3c>)
}
 8004f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    print_debug("Flash read\n");
 8004f2e:	f7ff bf27 	b.w	8004d80 <print_debug>
 8004f32:	bf00      	nop
 8004f34:	08007242 	.word	0x08007242
 8004f38:	0801f800 	.word	0x0801f800
 8004f3c:	2000523c 	.word	0x2000523c
 8004f40:	0801f82c 	.word	0x0801f82c
 8004f44:	08007251 	.word	0x08007251

08004f48 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f48:	2238      	movs	r2, #56	; 0x38
{
 8004f4a:	b530      	push	{r4, r5, lr}
 8004f4c:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f4e:	eb0d 0002 	add.w	r0, sp, r2
 8004f52:	2100      	movs	r1, #0
 8004f54:	f000 ff0b 	bl	8005d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f58:	2214      	movs	r2, #20
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	a801      	add	r0, sp, #4
 8004f5e:	f000 ff06 	bl	8005d6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f62:	2220      	movs	r2, #32
 8004f64:	2100      	movs	r1, #0
 8004f66:	a806      	add	r0, sp, #24
 8004f68:	f000 ff01 	bl	8005d6e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f70:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f72:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f74:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f76:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f7c:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f7e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f80:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f82:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f84:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f86:	f7fc fdd1 	bl	8001b2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f8a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f90:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f92:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f94:	4621      	mov	r1, r4
 8004f96:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f98:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f9a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f9c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f9e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004fa0:	f7fd f812 	bl	8001fc8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fa8:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004faa:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004fac:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fae:	f7fd f8dd 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8004fb2:	4b02      	ldr	r3, [pc, #8]	; (8004fbc <SystemClock_Config+0x74>)
 8004fb4:	601d      	str	r5, [r3, #0]
}
 8004fb6:	b01d      	add	sp, #116	; 0x74
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	bf00      	nop
 8004fbc:	42420070 	.word	0x42420070

08004fc0 <main>:
{
 8004fc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fc4:	4d95      	ldr	r5, [pc, #596]	; (800521c <main+0x25c>)
{
 8004fc6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8004fc8:	f7fb fdec 	bl	8000ba4 <HAL_Init>
  SystemClock_Config();
 8004fcc:	f7ff ffbc 	bl	8004f48 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	a808      	add	r0, sp, #32
 8004fd6:	f000 feca 	bl	8005d6e <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fda:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004fdc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fde:	f043 0320 	orr.w	r3, r3, #32
 8004fe2:	61ab      	str	r3, [r5, #24]
 8004fe4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004fe6:	f240 31c1 	movw	r1, #961	; 0x3c1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004ff4:	488a      	ldr	r0, [pc, #552]	; (8005220 <main+0x260>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff6:	f043 0310 	orr.w	r3, r3, #16
 8004ffa:	61ab      	str	r3, [r5, #24]
 8004ffc:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : PC0 PC6 PC7 PC8 
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005008:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800500a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800500c:	f043 0304 	orr.w	r3, r3, #4
 8005010:	61ab      	str	r3, [r5, #24]
 8005012:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005014:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005020:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005022:	f44f 2b60 	mov.w	fp, #917504	; 0xe0000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005026:	f043 0308 	orr.w	r3, r3, #8
 800502a:	61ab      	str	r3, [r5, #24]
 800502c:	69ab      	ldr	r3, [r5, #24]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800502e:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8005038:	f7fc fd62 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005042:	4878      	ldr	r0, [pc, #480]	; (8005224 <main+0x264>)
 8005044:	f7fc fd5c 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005048:	2201      	movs	r2, #1
 800504a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800504e:	4876      	ldr	r0, [pc, #472]	; (8005228 <main+0x268>)
 8005050:	f7fc fd56 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005054:	2200      	movs	r2, #0
 8005056:	2120      	movs	r1, #32
 8005058:	4873      	ldr	r0, [pc, #460]	; (8005228 <main+0x268>)
 800505a:	f7fc fd51 	bl	8001b00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800505e:	f240 33c1 	movw	r3, #961	; 0x3c1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005062:	a908      	add	r1, sp, #32
 8005064:	486e      	ldr	r0, [pc, #440]	; (8005220 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8005066:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005068:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800506c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506e:	f7fc fc61 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005072:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005076:	a908      	add	r1, sp, #32
 8005078:	486a      	ldr	r0, [pc, #424]	; (8005224 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800507a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800507c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005080:	f7fc fc58 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005088:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800508a:	4b68      	ldr	r3, [pc, #416]	; (800522c <main+0x26c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508c:	a908      	add	r1, sp, #32
 800508e:	4865      	ldr	r0, [pc, #404]	; (8005224 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005092:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005096:	f7fc fc4d 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800509a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509e:	a908      	add	r1, sp, #32
 80050a0:	4860      	ldr	r0, [pc, #384]	; (8005224 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80050a2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050a4:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80050a8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	f7fc fc43 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5;
 80050ae:	f44f 6302 	mov.w	r3, #2080	; 0x820
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	a908      	add	r1, sp, #32
 80050b4:	485c      	ldr	r0, [pc, #368]	; (8005228 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5;
 80050b6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80050bc:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050be:	f7fc fc39 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c6:	a908      	add	r1, sp, #32
 80050c8:	4857      	ldr	r0, [pc, #348]	; (8005228 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050ca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d0:	f7fc fc30 	bl	8001934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050d4:	4622      	mov	r2, r4
 80050d6:	4621      	mov	r1, r4
 80050d8:	2028      	movs	r0, #40	; 0x28
 80050da:	f7fc f8e7 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050de:	2028      	movs	r0, #40	; 0x28
 80050e0:	f7fc f918 	bl	8001314 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050e4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80050e6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050e8:	4333      	orrs	r3, r6
 80050ea:	616b      	str	r3, [r5, #20]
 80050ec:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80050ee:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050f0:	4033      	ands	r3, r6
 80050f2:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80050f4:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050f6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80050f8:	f7fc f8d8 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80050fc:	200e      	movs	r0, #14
 80050fe:	f7fc f909 	bl	8001314 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005102:	2220      	movs	r2, #32
 8005104:	4621      	mov	r1, r4
 8005106:	eb0d 0002 	add.w	r0, sp, r2
  hadc1.Instance = ADC1;
 800510a:	4d49      	ldr	r5, [pc, #292]	; (8005230 <main+0x270>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800510c:	9405      	str	r4, [sp, #20]
 800510e:	9406      	str	r4, [sp, #24]
 8005110:	9407      	str	r4, [sp, #28]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005112:	f000 fe2c 	bl	8005d6e <memset>
  hadc1.Instance = ADC1;
 8005116:	4b47      	ldr	r3, [pc, #284]	; (8005234 <main+0x274>)
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005118:	f04f 0a07 	mov.w	sl, #7
  hadc1.Instance = ADC1;
 800511c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800511e:	f44f 7380 	mov.w	r3, #256	; 0x100
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005122:	f44f 49e0 	mov.w	r9, #28672	; 0x7000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005126:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005128:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800512a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800512c:	616c      	str	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800512e:	f8c5 b01c 	str.w	fp, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005132:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005134:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005136:	f7fb fed1 	bl	8000edc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800513a:	a905      	add	r1, sp, #20
 800513c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 800513e:	9405      	str	r4, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005140:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005142:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005144:	f7fb fdec 	bl	8000d20 <HAL_ADC_ConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005148:	a908      	add	r1, sp, #32
 800514a:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800514c:	9408      	str	r4, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800514e:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigInjected.InjectedNbrOfConversion = 4;
 8005150:	970c      	str	r7, [sp, #48]	; 0x30
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005152:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005156:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 800515a:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800515c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffset = 0;
 800515e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005160:	f7fb ffa6 	bl	80010b0 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005164:	a908      	add	r1, sp, #32
 8005166:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8005168:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800516c:	9608      	str	r6, [sp, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800516e:	f7fb ff9f 	bl	80010b0 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005172:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8005176:	f04f 0803 	mov.w	r8, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800517a:	a908      	add	r1, sp, #32
 800517c:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800517e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005182:	f7fb ff95 	bl	80010b0 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005186:	a908      	add	r1, sp, #32
 8005188:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800518a:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 800518e:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005190:	f7fb ff8e 	bl	80010b0 <HAL_ADCEx_InjectedConfigChannel>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005194:	2220      	movs	r2, #32
  hadc2.Instance = ADC2;
 8005196:	4d28      	ldr	r5, [pc, #160]	; (8005238 <main+0x278>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005198:	eb0d 0002 	add.w	r0, sp, r2
 800519c:	4621      	mov	r1, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 800519e:	9405      	str	r4, [sp, #20]
 80051a0:	9406      	str	r4, [sp, #24]
 80051a2:	9407      	str	r4, [sp, #28]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80051a4:	f000 fde3 	bl	8005d6e <memset>
  hadc2.Instance = ADC2;
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <main+0x27c>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80051aa:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 80051ac:	602b      	str	r3, [r5, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80051ae:	60ac      	str	r4, [r5, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80051b0:	60ec      	str	r4, [r5, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80051b2:	616c      	str	r4, [r5, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051b4:	f8c5 b01c 	str.w	fp, [r5, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051b8:	606c      	str	r4, [r5, #4]
  hadc2.Init.NbrOfConversion = 1;
 80051ba:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80051bc:	f7fb fe8e 	bl	8000edc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051c0:	a905      	add	r1, sp, #20
 80051c2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 80051c4:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80051c6:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80051c8:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051ca:	f7fb fda9 	bl	8000d20 <HAL_ADC_ConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80051ce:	a908      	add	r1, sp, #32
 80051d0:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80051d2:	9708      	str	r7, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80051d4:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigInjected.InjectedNbrOfConversion = 1;
 80051d6:	960c      	str	r6, [sp, #48]	; 0x30
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80051d8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80051dc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 80051e0:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80051e2:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffset = 0;
 80051e4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80051e6:	f7fb ff63 	bl	80010b0 <HAL_ADCEx_InjectedConfigChannel>
  huart1.Init.BaudRate = 9600;
 80051ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 80051ee:	4814      	ldr	r0, [pc, #80]	; (8005240 <main+0x280>)
  huart1.Init.BaudRate = 9600;
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <main+0x284>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051f2:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80051f4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051f8:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051fa:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051fc:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051fe:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005200:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005202:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005204:	f7fd f944 	bl	8002490 <HAL_UART_Init>
  HAL_Delay(2000);
 8005208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800520c:	f7fb fcee 	bl	8000bec <HAL_Delay>
  controller_init();
 8005210:	f7ff fc84 	bl	8004b1c <controller_init>
  osKernelStart();
 8005214:	f7fd fb54 	bl	80028c0 <osKernelStart>
 8005218:	e7fe      	b.n	8005218 <main+0x258>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	40011000 	.word	0x40011000
 8005224:	40010c00 	.word	0x40010c00
 8005228:	40010800 	.word	0x40010800
 800522c:	10110000 	.word	0x10110000
 8005230:	200053c4 	.word	0x200053c4
 8005234:	40012400 	.word	0x40012400
 8005238:	2000534c 	.word	0x2000534c
 800523c:	40012800 	.word	0x40012800
 8005240:	200053f4 	.word	0x200053f4
 8005244:	40013800 	.word	0x40013800

08005248 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
 8005248:	6802      	ldr	r2, [r0, #0]
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <HAL_UART_RxCpltCallback+0x54>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800524c:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 800524e:	429a      	cmp	r2, r3
 8005250:	d122      	bne.n	8005298 <HAL_UART_RxCpltCallback+0x50>
		if (recCommandByte != '\r'){
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_UART_RxCpltCallback+0x58>)
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	2a0d      	cmp	r2, #13
 8005258:	d019      	beq.n	800528e <HAL_UART_RxCpltCallback+0x46>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 800525a:	4c12      	ldr	r4, [pc, #72]	; (80052a4 <HAL_UART_RxCpltCallback+0x5c>)
 800525c:	4912      	ldr	r1, [pc, #72]	; (80052a8 <HAL_UART_RxCpltCallback+0x60>)
 800525e:	7823      	ldrb	r3, [r4, #0]
 8005260:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 8005262:	3301      	adds	r3, #1
 8005264:	b2db      	uxtb	r3, r3

			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	bf08      	it	eq
 800526a:	2300      	moveq	r3, #0

			if(recCommandByte == '\n'){
 800526c:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800526e:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 8005270:	d10d      	bne.n	800528e <HAL_UART_RxCpltCallback+0x46>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 8005272:	7822      	ldrb	r2, [r4, #0]
 8005274:	490c      	ldr	r1, [pc, #48]	; (80052a8 <HAL_UART_RxCpltCallback+0x60>)
 8005276:	480d      	ldr	r0, [pc, #52]	; (80052ac <HAL_UART_RxCpltCallback+0x64>)
 8005278:	f000 fd6e 	bl	8005d58 <memcpy>
				portBASE_TYPE r1;
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 800527c:	480c      	ldr	r0, [pc, #48]	; (80052b0 <HAL_UART_RxCpltCallback+0x68>)
 800527e:	2300      	movs	r3, #0
 8005280:	aa01      	add	r2, sp, #4
 8005282:	490a      	ldr	r1, [pc, #40]	; (80052ac <HAL_UART_RxCpltCallback+0x64>)
 8005284:	6800      	ldr	r0, [r0, #0]
 8005286:	f7fd ff3f 	bl	8003108 <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	7023      	strb	r3, [r4, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 800528e:	2201      	movs	r2, #1
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_UART_RxCpltCallback+0x58>)
 8005292:	4808      	ldr	r0, [pc, #32]	; (80052b4 <HAL_UART_RxCpltCallback+0x6c>)
 8005294:	f7fd f986 	bl	80025a4 <HAL_UART_Receive_IT>
	}
}
 8005298:	b002      	add	sp, #8
 800529a:	bd10      	pop	{r4, pc}
 800529c:	40013800 	.word	0x40013800
 80052a0:	20005444 	.word	0x20005444
 80052a4:	2000523a 	.word	0x2000523a
 80052a8:	200052c0 	.word	0x200052c0
 80052ac:	20005300 	.word	0x20005300
 80052b0:	20005440 	.word	0x20005440
 80052b4:	200053f4 	.word	0x200053f4

080052b8 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80052b8:	b538      	push	{r3, r4, r5, lr}
	if (hadc1->Instance == ADC1){
 80052ba:	6802      	ldr	r2, [r0, #0]
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80052be:	4605      	mov	r5, r0
	if (hadc1->Instance == ADC1){
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d113      	bne.n	80052ec <HAL_ADCEx_InjectedConvCpltCallback+0x34>
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80052c4:	2101      	movs	r1, #1
 80052c6:	f7fb fee3 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
 80052ca:	4c0a      	ldr	r4, [pc, #40]	; (80052f4 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80052cc:	2102      	movs	r1, #2
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80052ce:	8020      	strh	r0, [r4, #0]
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80052d0:	4628      	mov	r0, r5
 80052d2:	f7fb fedd 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80052d6:	2103      	movs	r1, #3
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80052d8:	8060      	strh	r0, [r4, #2]
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80052da:	4628      	mov	r0, r5
 80052dc:	f7fb fed8 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 80052e0:	2104      	movs	r1, #4
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80052e2:	80a0      	strh	r0, [r4, #4]
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 80052e4:	4628      	mov	r0, r5
 80052e6:	f7fb fed3 	bl	8001090 <HAL_ADCEx_InjectedGetValue>
 80052ea:	80e0      	strh	r0, [r4, #6]
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	bf00      	nop
 80052f0:	40012400 	.word	0x40012400
 80052f4:	20005344 	.word	0x20005344

080052f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052f8:	4770      	bx	lr
	...

080052fc <xProcessCommandTask>:
extern xQueueHandle xRecCommandQueue;

extern char message[128];
extern uint8_t messageLength;

void xProcessCommandTask(void* arguments){
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	for(;;){
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
		if (xStatus == pdPASS){

			controllerState.lastTimeCommand = 0;
 8005300:	4fa2      	ldr	r7, [pc, #648]	; (800558c <xProcessCommandTask+0x290>)
	uint16_t id = 0;
 8005302:	2500      	movs	r5, #0
 8005304:	463c      	mov	r4, r7
void xProcessCommandTask(void* arguments){
 8005306:	b09a      	sub	sp, #104	; 0x68
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8005308:	2240      	movs	r2, #64	; 0x40
 800530a:	2100      	movs	r1, #0
 800530c:	a80a      	add	r0, sp, #40	; 0x28
								mWrite_flash();
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 800530e:	4ea0      	ldr	r6, [pc, #640]	; (8005590 <xProcessCommandTask+0x294>)
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8005310:	f000 fd2d 	bl	8005d6e <memset>
	uint16_t id = 0;
 8005314:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	char co = 0;
 8005318:	f88d 501f 	strb.w	r5, [sp, #31]
	char outputState = 0;
 800531c:	f88d 5020 	strb.w	r5, [sp, #32]
	uint16_t channel = 0;
 8005320:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	char systemType = 0;
 8005324:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 8005328:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80055c8 <xProcessCommandTask+0x2cc>
 800532c:	2300      	movs	r3, #0
 800532e:	f04f 32ff 	mov.w	r2, #4294967295
 8005332:	a90a      	add	r1, sp, #40	; 0x28
 8005334:	f8d8 0000 	ldr.w	r0, [r8]
 8005338:	f7fd ff48 	bl	80031cc <xQueueGenericReceive>
		if (xStatus == pdPASS){
 800533c:	2801      	cmp	r0, #1
 800533e:	d1f5      	bne.n	800532c <xProcessCommandTask+0x30>
			controllerState.lastTimeCommand = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	83fb      	strh	r3, [r7, #30]
			switch(command[0]){
 8005344:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005348:	3b6d      	subs	r3, #109	; 0x6d
 800534a:	2b0b      	cmp	r3, #11
 800534c:	d8ec      	bhi.n	8005328 <xProcessCommandTask+0x2c>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <xProcessCommandTask+0x58>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053f1 	.word	0x080053f1
 8005358:	08005329 	.word	0x08005329
 800535c:	08005385 	.word	0x08005385
 8005360:	08005329 	.word	0x08005329
 8005364:	08005329 	.word	0x08005329
 8005368:	08005329 	.word	0x08005329
 800536c:	08005567 	.word	0x08005567
 8005370:	08005329 	.word	0x08005329
 8005374:	08005329 	.word	0x08005329
 8005378:	08005329 	.word	0x08005329
 800537c:	08005329 	.word	0x08005329
 8005380:	08005701 	.word	0x08005701
				sscanf((char*)command, "o,%hu,\n", &id);
 8005384:	aa09      	add	r2, sp, #36	; 0x24
 8005386:	4983      	ldr	r1, [pc, #524]	; (8005594 <xProcessCommandTask+0x298>)
 8005388:	a80a      	add	r0, sp, #40	; 0x28
 800538a:	f000 fd1d 	bl	8005dc8 <siscanf>
				if (id == controllerState.serverUID){
 800538e:	8ae2      	ldrh	r2, [r4, #22]
 8005390:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005394:	429a      	cmp	r2, r3
 8005396:	d1c7      	bne.n	8005328 <xProcessCommandTask+0x2c>
					controllerState.status = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	7723      	strb	r3, [r4, #28]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 800539c:	7863      	ldrb	r3, [r4, #1]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 800539e:	7962      	ldrb	r2, [r4, #5]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 80053a0:	2b01      	cmp	r3, #1
						controllerState.status = 0x01;
 80053a2:	bf08      	it	eq
 80053a4:	7723      	strbeq	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 80053a6:	0791      	lsls	r1, r2, #30
						controllerState.status |= 0x02;
 80053a8:	bf48      	it	mi
 80053aa:	7f23      	ldrbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerData.clientID,
 80053ac:	487a      	ldr	r0, [pc, #488]	; (8005598 <xProcessCommandTask+0x29c>)
						controllerState.status |= 0x02;
 80053ae:	bf44      	itt	mi
 80053b0:	f043 0302 	orrmi.w	r3, r3, #2
 80053b4:	7723      	strbmi	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 80053b6:	0753      	lsls	r3, r2, #29
						controllerState.status |= 0x03;
 80053b8:	bf48      	it	mi
 80053ba:	7f23      	ldrbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerData.clientID,
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <xProcessCommandTask+0x2a0>)
						controllerState.status |= 0x03;
 80053be:	bf44      	itt	mi
 80053c0:	f043 0303 	orrmi.w	r3, r3, #3
 80053c4:	7723      	strbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerData.clientID,
 80053c6:	7f21      	ldrb	r1, [r4, #28]
 80053c8:	89e3      	ldrh	r3, [r4, #14]
 80053ca:	8852      	ldrh	r2, [r2, #2]
 80053cc:	9103      	str	r1, [sp, #12]
 80053ce:	8aa1      	ldrh	r1, [r4, #20]
 80053d0:	9102      	str	r1, [sp, #8]
 80053d2:	8a61      	ldrh	r1, [r4, #18]
 80053d4:	9101      	str	r1, [sp, #4]
 80053d6:	8a21      	ldrh	r1, [r4, #16]
 80053d8:	9100      	str	r1, [sp, #0]
 80053da:	4971      	ldr	r1, [pc, #452]	; (80055a0 <xProcessCommandTask+0x2a4>)
 80053dc:	f000 fcd0 	bl	8005d80 <siprintf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 80053e0:	4b70      	ldr	r3, [pc, #448]	; (80055a4 <xProcessCommandTask+0x2a8>)
 80053e2:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80053e4:	496c      	ldr	r1, [pc, #432]	; (8005598 <xProcessCommandTask+0x29c>)
 80053e6:	4870      	ldr	r0, [pc, #448]	; (80055a8 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 80053e8:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80053ea:	f7fd f903 	bl	80025f4 <HAL_UART_Transmit_DMA>
 80053ee:	e79b      	b.n	8005328 <xProcessCommandTask+0x2c>
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 80053f0:	ab08      	add	r3, sp, #32
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	aa09      	add	r2, sp, #36	; 0x24
 80053f6:	f10d 031f 	add.w	r3, sp, #31
 80053fa:	496c      	ldr	r1, [pc, #432]	; (80055ac <xProcessCommandTask+0x2b0>)
 80053fc:	a80a      	add	r0, sp, #40	; 0x28
 80053fe:	f000 fce3 	bl	8005dc8 <siscanf>
					outputState = command[10];
 8005402:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
					if (id == controllerState.serverUID){
 8005406:	8ae2      	ldrh	r2, [r4, #22]
					outputState = command[10];
 8005408:	f88d 3020 	strb.w	r3, [sp, #32]
					if (id == controllerState.serverUID){
 800540c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005410:	429a      	cmp	r2, r3
 8005412:	d189      	bne.n	8005328 <xProcessCommandTask+0x2c>
						controllerState.status = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	7723      	strb	r3, [r4, #28]
						if (controllerState.pressureCompensation == COMPENSATION_ON){
 8005418:	7863      	ldrb	r3, [r4, #1]
 800541a:	4a60      	ldr	r2, [pc, #384]	; (800559c <xProcessCommandTask+0x2a0>)
 800541c:	2b01      	cmp	r3, #1
							controllerState.status = 0x01;
 800541e:	bf08      	it	eq
 8005420:	7723      	strbeq	r3, [r4, #28]
						if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 8005422:	7963      	ldrb	r3, [r4, #5]
 8005424:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80055a4 <xProcessCommandTask+0x2a8>
 8005428:	f013 0a02 	ands.w	sl, r3, #2
 800542c:	d00e      	beq.n	800544c <xProcessCommandTask+0x150>
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 800542e:	8852      	ldrh	r2, [r2, #2]
 8005430:	495f      	ldr	r1, [pc, #380]	; (80055b0 <xProcessCommandTask+0x2b4>)
 8005432:	4859      	ldr	r0, [pc, #356]	; (8005598 <xProcessCommandTask+0x29c>)
 8005434:	f000 fca4 	bl	8005d80 <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005438:	4957      	ldr	r1, [pc, #348]	; (8005598 <xProcessCommandTask+0x29c>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 800543a:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800543c:	485a      	ldr	r0, [pc, #360]	; (80055a8 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 800543e:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005442:	f7fd f8d7 	bl	80025f4 <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	7163      	strb	r3, [r4, #5]
							break;
 800544a:	e76d      	b.n	8005328 <xProcessCommandTask+0x2c>
						if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 800544c:	f013 0804 	ands.w	r8, r3, #4
 8005450:	d00e      	beq.n	8005470 <xProcessCommandTask+0x174>
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8005452:	8852      	ldrh	r2, [r2, #2]
 8005454:	4957      	ldr	r1, [pc, #348]	; (80055b4 <xProcessCommandTask+0x2b8>)
 8005456:	4850      	ldr	r0, [pc, #320]	; (8005598 <xProcessCommandTask+0x29c>)
 8005458:	f000 fc92 	bl	8005d80 <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800545c:	494e      	ldr	r1, [pc, #312]	; (8005598 <xProcessCommandTask+0x29c>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 800545e:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005460:	4851      	ldr	r0, [pc, #324]	; (80055a8 <xProcessCommandTask+0x2ac>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8005462:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005466:	f7fd f8c5 	bl	80025f4 <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 800546a:	f884 a005 	strb.w	sl, [r4, #5]
							break;
 800546e:	e75b      	b.n	8005328 <xProcessCommandTask+0x2c>
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8005470:	7e61      	ldrb	r1, [r4, #25]
 8005472:	89e3      	ldrh	r3, [r4, #14]
 8005474:	8852      	ldrh	r2, [r2, #2]
 8005476:	9105      	str	r1, [sp, #20]
 8005478:	7e21      	ldrb	r1, [r4, #24]
 800547a:	4847      	ldr	r0, [pc, #284]	; (8005598 <xProcessCommandTask+0x29c>)
 800547c:	9104      	str	r1, [sp, #16]
 800547e:	7f21      	ldrb	r1, [r4, #28]
 8005480:	9103      	str	r1, [sp, #12]
 8005482:	8aa1      	ldrh	r1, [r4, #20]
 8005484:	9102      	str	r1, [sp, #8]
 8005486:	8a61      	ldrh	r1, [r4, #18]
 8005488:	9101      	str	r1, [sp, #4]
 800548a:	8a21      	ldrh	r1, [r4, #16]
 800548c:	9100      	str	r1, [sp, #0]
 800548e:	494a      	ldr	r1, [pc, #296]	; (80055b8 <xProcessCommandTask+0x2bc>)
 8005490:	f000 fc76 	bl	8005d80 <siprintf>
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005494:	4940      	ldr	r1, [pc, #256]	; (8005598 <xProcessCommandTask+0x29c>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8005496:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005498:	4843      	ldr	r0, [pc, #268]	; (80055a8 <xProcessCommandTask+0x2ac>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 800549a:	f889 2000 	strb.w	r2, [r9]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800549e:	f7fd f8a9 	bl	80025f4 <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState && controllerState.errorStatus != STATUS_ERROR_OVERCURRENT){
 80054a2:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80054a6:	4295      	cmp	r5, r2
 80054a8:	f43f af3e 	beq.w	8005328 <xProcessCommandTask+0x2c>
 80054ac:	7963      	ldrb	r3, [r4, #5]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f43f af3a 	beq.w	8005328 <xProcessCommandTask+0x2c>
							if (outputState & 0b00000001) 	C1_UP_ON;
 80054b4:	f012 0201 	ands.w	r2, r2, #1
 80054b8:	bf18      	it	ne
 80054ba:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 80054bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054c0:	483e      	ldr	r0, [pc, #248]	; (80055bc <xProcessCommandTask+0x2c0>)
							controllerState.pressureCompensation = COMPENSATION_OFF;
 80054c2:	f884 8001 	strb.w	r8, [r4, #1]
							else 				   			C1_UP_OFF;
 80054c6:	f7fc fb1b 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 80054ca:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C1_DOWN_OFF;
 80054ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 80054d2:	f012 0202 	ands.w	r2, r2, #2
 80054d6:	bf18      	it	ne
 80054d8:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 80054da:	4838      	ldr	r0, [pc, #224]	; (80055bc <xProcessCommandTask+0x2c0>)
 80054dc:	f7fc fb10 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 80054e0:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C2_UP_OFF;
 80054e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
							if (outputState & 0b00000100) 	C2_UP_ON;
 80054e8:	f012 0204 	ands.w	r2, r2, #4
 80054ec:	bf18      	it	ne
 80054ee:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 80054f0:	4832      	ldr	r0, [pc, #200]	; (80055bc <xProcessCommandTask+0x2c0>)
 80054f2:	f7fc fb05 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80054f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C2_DOWN_OFF;
 80054fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80054fe:	f012 0208 	ands.w	r2, r2, #8
 8005502:	bf18      	it	ne
 8005504:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 8005506:	482d      	ldr	r0, [pc, #180]	; (80055bc <xProcessCommandTask+0x2c0>)
 8005508:	f7fc fafa 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 800550c:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C3_UP_OFF;
 8005510:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00010000) 	C3_UP_ON;
 8005512:	f012 0210 	ands.w	r2, r2, #16
 8005516:	bf18      	it	ne
 8005518:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 800551a:	4829      	ldr	r0, [pc, #164]	; (80055c0 <xProcessCommandTask+0x2c4>)
 800551c:	f7fc faf0 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8005520:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C3_DOWN_OFF;
 8005524:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8005526:	f012 0220 	ands.w	r2, r2, #32
 800552a:	bf18      	it	ne
 800552c:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 800552e:	4824      	ldr	r0, [pc, #144]	; (80055c0 <xProcessCommandTask+0x2c4>)
 8005530:	f7fc fae6 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 8005534:	f89d 2020 	ldrb.w	r2, [sp, #32]
							else 				   			C4_UP_OFF;
 8005538:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b01000000) 	C4_UP_ON;
 800553c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005540:	bf18      	it	ne
 8005542:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 8005544:	481e      	ldr	r0, [pc, #120]	; (80055c0 <xProcessCommandTask+0x2c4>)
 8005546:	f7fc fadb 	bl	8001b00 <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 800554a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
							else 				   			C4_DOWN_OFF;
 800554e:	f44f 7100 	mov.w	r1, #512	; 0x200
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfb4      	ite	lt
 8005556:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8005558:	2200      	movge	r2, #0
 800555a:	4819      	ldr	r0, [pc, #100]	; (80055c0 <xProcessCommandTask+0x2c4>)
 800555c:	f7fc fad0 	bl	8001b00 <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 8005560:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8005564:	e6e0      	b.n	8005328 <xProcessCommandTask+0x2c>
					if (command[1] == 'x'){
 8005566:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800556a:	2b78      	cmp	r3, #120	; 0x78
 800556c:	d12e      	bne.n	80055cc <xProcessCommandTask+0x2d0>
						sscanf((char*)command, "sx,%hu,\n", &id);
 800556e:	aa09      	add	r2, sp, #36	; 0x24
 8005570:	4914      	ldr	r1, [pc, #80]	; (80055c4 <xProcessCommandTask+0x2c8>)
 8005572:	a80a      	add	r0, sp, #40	; 0x28
 8005574:	f000 fc28 	bl	8005dc8 <siscanf>
						if (id == controllerState.serverUID){
 8005578:	8ae2      	ldrh	r2, [r4, #22]
 800557a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800557e:	429a      	cmp	r2, r3
 8005580:	f47f aed2 	bne.w	8005328 <xProcessCommandTask+0x2c>
							controllerState.pressureCompensation = COMPENSATION_OFF;
 8005584:	2300      	movs	r3, #0
							controllerState.pressureCompensation = COMPENSATION_ON;
 8005586:	7063      	strb	r3, [r4, #1]
 8005588:	e6ce      	b.n	8005328 <xProcessCommandTask+0x2c>
 800558a:	bf00      	nop
 800558c:	20005268 	.word	0x20005268
 8005590:	40010800 	.word	0x40010800
 8005594:	0800728d 	.word	0x0800728d
 8005598:	200051b9 	.word	0x200051b9
 800559c:	2000523c 	.word	0x2000523c
 80055a0:	08007295 	.word	0x08007295
 80055a4:	20005239 	.word	0x20005239
 80055a8:	200053f4 	.word	0x200053f4
 80055ac:	080072b0 	.word	0x080072b0
 80055b0:	080072be 	.word	0x080072be
 80055b4:	080072c6 	.word	0x080072c6
 80055b8:	080072d0 	.word	0x080072d0
 80055bc:	40010c00 	.word	0x40010c00
 80055c0:	40011000 	.word	0x40011000
 80055c4:	080072f1 	.word	0x080072f1
 80055c8:	20005440 	.word	0x20005440
					else if (command[1] == ','){
 80055cc:	2b2c      	cmp	r3, #44	; 0x2c
 80055ce:	f47f aeab 	bne.w	8005328 <xProcessCommandTask+0x2c>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", &id, 	&controllerState.nessPressure[0],
 80055d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055d6:	9305      	str	r3, [sp, #20]
 80055d8:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	4b78      	ldr	r3, [pc, #480]	; (80057c8 <xProcessCommandTask+0x4cc>)
 80055e6:	4979      	ldr	r1, [pc, #484]	; (80057cc <xProcessCommandTask+0x4d0>)
 80055e8:	1e9a      	subs	r2, r3, #2
 80055ea:	9201      	str	r2, [sp, #4]
 80055ec:	1f1a      	subs	r2, r3, #4
 80055ee:	9302      	str	r3, [sp, #8]
 80055f0:	9200      	str	r2, [sp, #0]
 80055f2:	3b06      	subs	r3, #6
 80055f4:	aa09      	add	r2, sp, #36	; 0x24
 80055f6:	a80a      	add	r0, sp, #40	; 0x28
 80055f8:	f000 fbe6 	bl	8005dc8 <siscanf>
						if (id == controllerState.serverUID && controllerState.errorStatus == STATUS_NORMAL){
 80055fc:	8ae2      	ldrh	r2, [r4, #22]
 80055fe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005602:	429a      	cmp	r2, r3
 8005604:	f47f ae90 	bne.w	8005328 <xProcessCommandTask+0x2c>
 8005608:	7963      	ldrb	r3, [r4, #5]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f47f ae8c 	bne.w	8005328 <xProcessCommandTask+0x2c>
							if (systemType == '1'){ // air system choice
 8005610:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8005614:	2a31      	cmp	r2, #49	; 0x31
								controllerState.airSystemType = RECEIVER;
 8005616:	bf1c      	itt	ne
 8005618:	2201      	movne	r2, #1
 800561a:	7122      	strbne	r2, [r4, #4]
 800561c:	4a6c      	ldr	r2, [pc, #432]	; (80057d0 <xProcessCommandTask+0x4d4>)
								controllerState.airSystemType = COMPRESSOR; // for compressor
 800561e:	bf04      	itt	eq
 8005620:	7123      	strbeq	r3, [r4, #4]
								controllerState.compressorWorkTime = 0;
 8005622:	6223      	streq	r3, [r4, #32]
 8005624:	f102 0108 	add.w	r1, r2, #8
								if (controllerState.nessPressure[i] > 4000) controllerState.nessPressure[i] = controllerState.filteredData[i];
 8005628:	8810      	ldrh	r0, [r2, #0]
 800562a:	3202      	adds	r2, #2
 800562c:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8005630:	bf84      	itt	hi
 8005632:	88d0      	ldrhhi	r0, [r2, #6]
 8005634:	f822 0c02 	strhhi.w	r0, [r2, #-2]
							for(i = 0; i < 4; i++){
 8005638:	428a      	cmp	r2, r1
 800563a:	d1f5      	bne.n	8005628 <xProcessCommandTask+0x32c>
							controllerState.waysType = waysType - '0';
 800563c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
							if (accuracy == '1'){
 8005640:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
							controllerState.waysType = waysType - '0';
 8005644:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8005648:	b2c0      	uxtb	r0, r0
							if (accuracy == '1'){
 800564a:	2931      	cmp	r1, #49	; 0x31
							controllerState.waysType = waysType - '0';
 800564c:	76a0      	strb	r0, [r4, #26]
							if (accuracy == '1'){
 800564e:	d114      	bne.n	800567a <xProcessCommandTask+0x37e>
								controllerState.analyzeAccuracy = 30;
 8005650:	211e      	movs	r1, #30
								controllerState.analyzeAccuracy = 25;
 8005652:	76e1      	strb	r1, [r4, #27]
							if (controllerState.waysType > 6 || controllerState.waysType < 2){
 8005654:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 8005658:	b2c9      	uxtb	r1, r1
 800565a:	2904      	cmp	r1, #4
 800565c:	d916      	bls.n	800568c <xProcessCommandTask+0x390>
									messageLength = sprintf(message, "[ERROR] wrong waystype\n");
 800565e:	495d      	ldr	r1, [pc, #372]	; (80057d4 <xProcessCommandTask+0x4d8>)
 8005660:	485d      	ldr	r0, [pc, #372]	; (80057d8 <xProcessCommandTask+0x4dc>)
 8005662:	f000 fbdd 	bl	8005e20 <strcpy>
 8005666:	2217      	movs	r2, #23
										messageLength = sprintf(message, "[ERROR] wrong sens\n");
 8005668:	4b5c      	ldr	r3, [pc, #368]	; (80057dc <xProcessCommandTask+0x4e0>)
										HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800566a:	495b      	ldr	r1, [pc, #364]	; (80057d8 <xProcessCommandTask+0x4dc>)
										messageLength = sprintf(message, "[ERROR] wrong sens\n");
 800566c:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 800566e:	485c      	ldr	r0, [pc, #368]	; (80057e0 <xProcessCommandTask+0x4e4>)
 8005670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005674:	f7fc ff3a 	bl	80024ec <HAL_UART_Transmit>
									continue;
 8005678:	e656      	b.n	8005328 <xProcessCommandTask+0x2c>
							else if (accuracy == '2'){
 800567a:	2932      	cmp	r1, #50	; 0x32
 800567c:	d101      	bne.n	8005682 <xProcessCommandTask+0x386>
								controllerState.analyzeAccuracy = 60;
 800567e:	213c      	movs	r1, #60	; 0x3c
 8005680:	e7e7      	b.n	8005652 <xProcessCommandTask+0x356>
							else if (accuracy == '3'){
 8005682:	2933      	cmp	r1, #51	; 0x33
								controllerState.analyzeAccuracy = 90;
 8005684:	bf0c      	ite	eq
 8005686:	215a      	moveq	r1, #90	; 0x5a
								controllerState.analyzeAccuracy = 25;
 8005688:	2119      	movne	r1, #25
 800568a:	e7e2      	b.n	8005652 <xProcessCommandTask+0x356>
							if(controllerState.waysType == VIEW_2_2){
 800568c:	2806      	cmp	r0, #6
 800568e:	d114      	bne.n	80056ba <xProcessCommandTask+0x3be>
 8005690:	4a4d      	ldr	r2, [pc, #308]	; (80057c8 <xProcessCommandTask+0x4cc>)
 8005692:	f102 0108 	add.w	r1, r2, #8
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8005696:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800569a:	b120      	cbz	r0, 80056a6 <xProcessCommandTask+0x3aa>
 800569c:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 80056a0:	b108      	cbz	r0, 80056a6 <xProcessCommandTask+0x3aa>
									successCounter += 1;
 80056a2:	3301      	adds	r3, #1
 80056a4:	b2db      	uxtb	r3, r3
								for(i = 0; i < 4; i++){
 80056a6:	4291      	cmp	r1, r2
 80056a8:	d1f5      	bne.n	8005696 <xProcessCommandTask+0x39a>
								if (successCounter != 4){
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d026      	beq.n	80056fc <xProcessCommandTask+0x400>
										messageLength = sprintf(message, "[ERROR] wrong sens\n");
 80056ae:	494d      	ldr	r1, [pc, #308]	; (80057e4 <xProcessCommandTask+0x4e8>)
 80056b0:	4849      	ldr	r0, [pc, #292]	; (80057d8 <xProcessCommandTask+0x4dc>)
 80056b2:	f000 fbb5 	bl	8005e20 <strcpy>
 80056b6:	2213      	movs	r2, #19
 80056b8:	e7d6      	b.n	8005668 <xProcessCommandTask+0x36c>
							else if(controllerState.waysType == VIEW_2_1 || controllerState.waysType == VIEW_1_2){
 80056ba:	3a34      	subs	r2, #52	; 0x34
 80056bc:	2a01      	cmp	r2, #1
 80056be:	d80d      	bhi.n	80056dc <xProcessCommandTask+0x3e0>
 80056c0:	4a41      	ldr	r2, [pc, #260]	; (80057c8 <xProcessCommandTask+0x4cc>)
 80056c2:	1d91      	adds	r1, r2, #6
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 80056c4:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80056c8:	b120      	cbz	r0, 80056d4 <xProcessCommandTask+0x3d8>
 80056ca:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 80056ce:	b108      	cbz	r0, 80056d4 <xProcessCommandTask+0x3d8>
									successCounter += 1;
 80056d0:	3301      	adds	r3, #1
 80056d2:	b2db      	uxtb	r3, r3
								for(i = 0; i < 3; i++){
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d1f5      	bne.n	80056c4 <xProcessCommandTask+0x3c8>
								if (successCounter != 3){
 80056d8:	2b03      	cmp	r3, #3
 80056da:	e7e7      	b.n	80056ac <xProcessCommandTask+0x3b0>
							else if(controllerState.waysType == VIEW_1_1 || controllerState.waysType == VIEW_0_2){
 80056dc:	2901      	cmp	r1, #1
 80056de:	d80d      	bhi.n	80056fc <xProcessCommandTask+0x400>
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 80056e0:	89e3      	ldrh	r3, [r4, #14]
 80056e2:	b11b      	cbz	r3, 80056ec <xProcessCommandTask+0x3f0>
 80056e4:	88e3      	ldrh	r3, [r4, #6]
 80056e6:	3300      	adds	r3, #0
 80056e8:	bf18      	it	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	8a22      	ldrh	r2, [r4, #16]
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d0dd      	beq.n	80056ae <xProcessCommandTask+0x3b2>
 80056f2:	8922      	ldrh	r2, [r4, #8]
 80056f4:	2a00      	cmp	r2, #0
 80056f6:	d0da      	beq.n	80056ae <xProcessCommandTask+0x3b2>
								if (successCounter != 2){
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0d8      	beq.n	80056ae <xProcessCommandTask+0x3b2>
							controllerState.pressureCompensation = COMPENSATION_ON;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e742      	b.n	8005586 <xProcessCommandTask+0x28a>
					if (controllerState.soundIndicationState == SEARCH_INDICATION){
 8005700:	f894 8003 	ldrb.w	r8, [r4, #3]
 8005704:	f1b8 0f01 	cmp.w	r8, #1
 8005708:	f47f ae0e 	bne.w	8005328 <xProcessCommandTask+0x2c>
						if (command[1] == '?'){
 800570c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8005710:	2b3f      	cmp	r3, #63	; 0x3f
 8005712:	d10c      	bne.n	800572e <xProcessCommandTask+0x432>
							sscanf((char*)command, "x?%hu,\n", &controllerData.clientID);
 8005714:	4a34      	ldr	r2, [pc, #208]	; (80057e8 <xProcessCommandTask+0x4ec>)
 8005716:	4935      	ldr	r1, [pc, #212]	; (80057ec <xProcessCommandTask+0x4f0>)
 8005718:	a80a      	add	r0, sp, #40	; 0x28
 800571a:	f000 fb55 	bl	8005dc8 <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 800571e:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <xProcessCommandTask+0x4f4>)
 8005720:	8ae3      	ldrh	r3, [r4, #22]
 8005722:	8852      	ldrh	r2, [r2, #2]
 8005724:	4933      	ldr	r1, [pc, #204]	; (80057f4 <xProcessCommandTask+0x4f8>)
 8005726:	482c      	ldr	r0, [pc, #176]	; (80057d8 <xProcessCommandTask+0x4dc>)
 8005728:	f000 fb2a 	bl	8005d80 <siprintf>
 800572c:	e658      	b.n	80053e0 <xProcessCommandTask+0xe4>
						else if (command[1] == 'c'){
 800572e:	2b63      	cmp	r3, #99	; 0x63
 8005730:	f47f adfa 	bne.w	8005328 <xProcessCommandTask+0x2c>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 8005734:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005738:	aa09      	add	r2, sp, #36	; 0x24
 800573a:	492f      	ldr	r1, [pc, #188]	; (80057f8 <xProcessCommandTask+0x4fc>)
 800573c:	a80a      	add	r0, sp, #40	; 0x28
 800573e:	f000 fb43 	bl	8005dc8 <siscanf>
							if (id == controllerState.serverUID){
 8005742:	8ae2      	ldrh	r2, [r4, #22]
 8005744:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	f47f aded 	bne.w	8005328 <xProcessCommandTask+0x2c>
								controllerData.rfChannel = channel;
 800574e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8005752:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80057f0 <xProcessCommandTask+0x4f4>
 8005756:	f889 3000 	strb.w	r3, [r9]
								mWrite_flash();
 800575a:	f7ff fb9b 	bl	8004e94 <mWrite_flash>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 800575e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8005762:	4926      	ldr	r1, [pc, #152]	; (80057fc <xProcessCommandTask+0x500>)
 8005764:	481c      	ldr	r0, [pc, #112]	; (80057d8 <xProcessCommandTask+0x4dc>)
 8005766:	f000 fb0b 	bl	8005d80 <siprintf>
 800576a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80057dc <xProcessCommandTask+0x4e0>
 800576e:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005770:	4919      	ldr	r1, [pc, #100]	; (80057d8 <xProcessCommandTask+0x4dc>)
 8005772:	481b      	ldr	r0, [pc, #108]	; (80057e0 <xProcessCommandTask+0x4e4>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 8005774:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005778:	f7fc ff3c 	bl	80025f4 <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 800577c:	20c8      	movs	r0, #200	; 0xc8
 800577e:	f7fe f86f 	bl	8003860 <vTaskDelay>
								CMD_RF_ON;
 8005782:	2200      	movs	r2, #0
 8005784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005788:	4630      	mov	r0, r6
 800578a:	f7fc f9b9 	bl	8001b00 <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 800578e:	2032      	movs	r0, #50	; 0x32
 8005790:	f7fe f866 	bl	8003860 <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005794:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8005798:	4919      	ldr	r1, [pc, #100]	; (8005800 <xProcessCommandTask+0x504>)
 800579a:	480f      	ldr	r0, [pc, #60]	; (80057d8 <xProcessCommandTask+0x4dc>)
 800579c:	f000 faf0 	bl	8005d80 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80057a0:	490d      	ldr	r1, [pc, #52]	; (80057d8 <xProcessCommandTask+0x4dc>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 80057a2:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80057a4:	480e      	ldr	r0, [pc, #56]	; (80057e0 <xProcessCommandTask+0x4e4>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 80057a6:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80057aa:	f7fc ff23 	bl	80025f4 <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 80057ae:	2032      	movs	r0, #50	; 0x32
 80057b0:	f7fe f856 	bl	8003860 <vTaskDelay>
								CMD_RF_OFF;
 80057b4:	4642      	mov	r2, r8
 80057b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fc f9a0 	bl	8001b00 <HAL_GPIO_WritePin>

								controllerState.soundIndicationState = NORMAL_INDICATION;
 80057c0:	2300      	movs	r3, #0
 80057c2:	70e3      	strb	r3, [r4, #3]
 80057c4:	e5b0      	b.n	8005328 <xProcessCommandTask+0x2c>
 80057c6:	bf00      	nop
 80057c8:	20005274 	.word	0x20005274
 80057cc:	080072fa 	.word	0x080072fa
 80057d0:	2000526e 	.word	0x2000526e
 80057d4:	0800731b 	.word	0x0800731b
 80057d8:	200051b9 	.word	0x200051b9
 80057dc:	20005239 	.word	0x20005239
 80057e0:	200053f4 	.word	0x200053f4
 80057e4:	08007333 	.word	0x08007333
 80057e8:	2000523e 	.word	0x2000523e
 80057ec:	08007347 	.word	0x08007347
 80057f0:	2000523c 	.word	0x2000523c
 80057f4:	0800734f 	.word	0x0800734f
 80057f8:	0800735d 	.word	0x0800735d
 80057fc:	0800736a 	.word	0x0800736a
 8005800:	0800702d 	.word	0x0800702d

08005804 <xScanInputTask>:
#include "flashFunctions.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 8005804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t prevInputHallState = 1;
	uint8_t curInputHallState = 1;
	uint8_t curInputWireState = 1;
	uint8_t prevInputWireState = 1;
 8005808:	2501      	movs	r5, #1

	uint8_t prevOverrcurrentState = 0;
 800580a:	f04f 0b00 	mov.w	fp, #0
	uint8_t prevInputHallState = 1;
 800580e:	46a9      	mov	r9, r5
	uint8_t curOvercurrentState = 0;

	for(;;){
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005810:	f8df a250 	ldr.w	sl, [pc, #592]	; 8005a64 <xScanInputTask+0x260>
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005814:	4e8d      	ldr	r6, [pc, #564]	; (8005a4c <xScanInputTask+0x248>)
				if (prevOverrcurrentState){
					C1_UP_OFF;
					C1_DOWN_OFF;
					C2_UP_OFF;
					C2_DOWN_OFF;
					C3_UP_OFF;
 8005816:	4c8e      	ldr	r4, [pc, #568]	; (8005a50 <xScanInputTask+0x24c>)
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800581c:	4650      	mov	r0, sl
 800581e:	f7fc f969 	bl	8001af4 <HAL_GPIO_ReadPin>
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005822:	f44f 6180 	mov.w	r1, #1024	; 0x400
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005826:	4680      	mov	r8, r0
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005828:	4630      	mov	r0, r6
 800582a:	f7fc f963 	bl	8001af4 <HAL_GPIO_ReadPin>
		if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 800582e:	45c1      	cmp	r9, r8
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005830:	4607      	mov	r7, r0
		if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8005832:	d101      	bne.n	8005838 <xScanInputTask+0x34>
 8005834:	4285      	cmp	r5, r0
 8005836:	d040      	beq.n	80058ba <xScanInputTask+0xb6>
			vTaskDelay(1 / portTICK_RATE_MS);
 8005838:	2001      	movs	r0, #1
 800583a:	f7fe f811 	bl	8003860 <vTaskDelay>
			curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 800583e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005842:	4650      	mov	r0, sl
 8005844:	f7fc f956 	bl	8001af4 <HAL_GPIO_ReadPin>
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005848:	f44f 6180 	mov.w	r1, #1024	; 0x400
			curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 800584c:	4680      	mov	r8, r0
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 800584e:	4630      	mov	r0, r6
 8005850:	f7fc f950 	bl	8001af4 <HAL_GPIO_ReadPin>
			if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8005854:	45c1      	cmp	r9, r8
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005856:	4607      	mov	r7, r0
			if ((curInputHallState != prevInputHallState) || (curInputWireState != prevInputWireState)){
 8005858:	d101      	bne.n	800585e <xScanInputTask+0x5a>
 800585a:	4285      	cmp	r5, r0
 800585c:	d02d      	beq.n	80058ba <xScanInputTask+0xb6>
				if ((!prevInputHallState) || (!prevInputWireState)){
 800585e:	f1b8 0f00 	cmp.w	r8, #0
 8005862:	d000      	beq.n	8005866 <xScanInputTask+0x62>
 8005864:	bb47      	cbnz	r7, 80058b8 <xScanInputTask+0xb4>
					controllerState.soundIndicationState = SEARCH_INDICATION;
 8005866:	f04f 0901 	mov.w	r9, #1
					controllerData.offsetPressure[0] = controllerState.filteredData[0];
 800586a:	4d7a      	ldr	r5, [pc, #488]	; (8005a54 <xScanInputTask+0x250>)
 800586c:	4b7a      	ldr	r3, [pc, #488]	; (8005a58 <xScanInputTask+0x254>)
 800586e:	89ea      	ldrh	r2, [r5, #14]
 8005870:	849a      	strh	r2, [r3, #36]	; 0x24
					controllerData.offsetPressure[1] = controllerState.filteredData[1];
 8005872:	8a2a      	ldrh	r2, [r5, #16]
 8005874:	84da      	strh	r2, [r3, #38]	; 0x26
					controllerData.offsetPressure[2] = controllerState.filteredData[2];
 8005876:	8a6a      	ldrh	r2, [r5, #18]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
					controllerData.offsetPressure[3] = controllerState.filteredData[3];
 800587a:	8aaa      	ldrh	r2, [r5, #20]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a
					mWrite_flash();
 800587e:	f7ff fb09 	bl	8004e94 <mWrite_flash>
					CMD_RF_ON;
 8005882:	2200      	movs	r2, #0
 8005884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005888:	4650      	mov	r0, sl
					controllerState.soundIndicationState = SEARCH_INDICATION;
 800588a:	f885 9003 	strb.w	r9, [r5, #3]
					CMD_RF_ON;
 800588e:	f7fc f937 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8005892:	2032      	movs	r0, #50	; 0x32
 8005894:	f7fd ffe4 	bl	8003860 <vTaskDelay>
					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005898:	2208      	movs	r2, #8
 800589a:	4970      	ldr	r1, [pc, #448]	; (8005a5c <xScanInputTask+0x258>)
 800589c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058a0:	486f      	ldr	r0, [pc, #444]	; (8005a60 <xScanInputTask+0x25c>)
 80058a2:	f7fc fe23 	bl	80024ec <HAL_UART_Transmit>
					vTaskDelay(50 / portTICK_RATE_MS);
 80058a6:	2032      	movs	r0, #50	; 0x32
 80058a8:	f7fd ffda 	bl	8003860 <vTaskDelay>
					CMD_RF_OFF;
 80058ac:	464a      	mov	r2, r9
 80058ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7fc f924 	bl	8001b00 <HAL_GPIO_WritePin>
 80058b8:	46c1      	mov	r9, r8
		curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 80058ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058be:	4630      	mov	r0, r6
 80058c0:	f7fc f918 	bl	8001af4 <HAL_GPIO_ReadPin>
		if (curOvercurrentState != prevOverrcurrentState){
 80058c4:	4583      	cmp	fp, r0
		curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 80058c6:	4680      	mov	r8, r0
		if (curOvercurrentState != prevOverrcurrentState){
 80058c8:	f000 80ba 	beq.w	8005a40 <xScanInputTask+0x23c>
			vTaskDelay(1 / portTICK_RATE_MS);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7fd ffc7 	bl	8003860 <vTaskDelay>
			curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 80058d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058d6:	4630      	mov	r0, r6
 80058d8:	f7fc f90c 	bl	8001af4 <HAL_GPIO_ReadPin>
			if (curOvercurrentState != prevOverrcurrentState){
 80058dc:	4583      	cmp	fp, r0
			curOvercurrentState = HAL_GPIO_ReadPin(OVERCURRENT_PORT, OVERCURRENT_PIN);
 80058de:	4680      	mov	r8, r0
			if (curOvercurrentState != prevOverrcurrentState){
 80058e0:	f000 80ae 	beq.w	8005a40 <xScanInputTask+0x23c>
				if (prevOverrcurrentState){
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f000 80ab 	beq.w	8005a40 <xScanInputTask+0x23c>
					C1_UP_OFF;
 80058ea:	2200      	movs	r2, #0
 80058ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7fc f905 	bl	8001b00 <HAL_GPIO_WritePin>
					C1_DOWN_OFF;
 80058f6:	2200      	movs	r2, #0
 80058f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7fc f8ff 	bl	8001b00 <HAL_GPIO_WritePin>
					C2_UP_OFF;
 8005902:	2200      	movs	r2, #0
 8005904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005908:	4630      	mov	r0, r6
 800590a:	f7fc f8f9 	bl	8001b00 <HAL_GPIO_WritePin>
					C2_DOWN_OFF;
 800590e:	2200      	movs	r2, #0
 8005910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005914:	4630      	mov	r0, r6
 8005916:	f7fc f8f3 	bl	8001b00 <HAL_GPIO_WritePin>
					C3_UP_OFF;
 800591a:	2200      	movs	r2, #0
 800591c:	2140      	movs	r1, #64	; 0x40
 800591e:	4620      	mov	r0, r4
 8005920:	f7fc f8ee 	bl	8001b00 <HAL_GPIO_WritePin>
					C3_DOWN_OFF;
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	4620      	mov	r0, r4
 800592a:	f7fc f8e9 	bl	8001b00 <HAL_GPIO_WritePin>
					C4_UP_OFF;
 800592e:	2200      	movs	r2, #0
 8005930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005934:	4620      	mov	r0, r4
 8005936:	f7fc f8e3 	bl	8001b00 <HAL_GPIO_WritePin>
					C4_DOWN_OFF;
 800593a:	2200      	movs	r2, #0
 800593c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005940:	4620      	mov	r0, r4
 8005942:	f7fc f8dd 	bl	8001b00 <HAL_GPIO_WritePin>

					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 8005946:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <xScanInputTask+0x250>)
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8005948:	2500      	movs	r5, #0
					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 800594a:	795a      	ldrb	r2, [r3, #5]

					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 800594c:	4620      	mov	r0, r4
					controllerState.errorStatus |= (1 << STATUS_ERROR_OVERCURRENT);
 800594e:	f042 0202 	orr.w	r2, r2, #2
 8005952:	715a      	strb	r2, [r3, #5]
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8005954:	2201      	movs	r2, #1
 8005956:	4611      	mov	r1, r2
					controllerState.pressureCompensation = COMPENSATION_OFF;
 8005958:	705d      	strb	r5, [r3, #1]
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 800595a:	f7fc f8d1 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(100);
 800595e:	2064      	movs	r0, #100	; 0x64
 8005960:	f7fd ff7e 	bl	8003860 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8005964:	2101      	movs	r1, #1
 8005966:	4620      	mov	r0, r4
 8005968:	f7fc f8cf 	bl	8001b0a <HAL_GPIO_TogglePin>
					vTaskDelay(200);
 800596c:	20c8      	movs	r0, #200	; 0xc8
 800596e:	f7fd ff77 	bl	8003860 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8005972:	2101      	movs	r1, #1
 8005974:	4620      	mov	r0, r4
 8005976:	f7fc f8c8 	bl	8001b0a <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 800597a:	2064      	movs	r0, #100	; 0x64
 800597c:	f7fd ff70 	bl	8003860 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8005980:	462a      	mov	r2, r5
 8005982:	2101      	movs	r1, #1
 8005984:	4620      	mov	r0, r4
 8005986:	f7fc f8bb 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 800598a:	20c8      	movs	r0, #200	; 0xc8
 800598c:	f7fd ff68 	bl	8003860 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8005990:	2101      	movs	r1, #1
 8005992:	4620      	mov	r0, r4
 8005994:	f7fc f8b9 	bl	8001b0a <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 8005998:	2064      	movs	r0, #100	; 0x64
 800599a:	f7fd ff61 	bl	8003860 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 800599e:	462a      	mov	r2, r5
 80059a0:	2101      	movs	r1, #1
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fc f8ac 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 80059a8:	20c8      	movs	r0, #200	; 0xc8
 80059aa:	f7fd ff59 	bl	8003860 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 80059ae:	2101      	movs	r1, #1
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fc f8aa 	bl	8001b0a <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 80059b6:	2064      	movs	r0, #100	; 0x64
 80059b8:	f7fd ff52 	bl	8003860 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80059bc:	462a      	mov	r2, r5
 80059be:	2101      	movs	r1, #1
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7fc f89d 	bl	8001b00 <HAL_GPIO_WritePin>
					vTaskDelay(200);
 80059c6:	20c8      	movs	r0, #200	; 0xc8
 80059c8:	f7fd ff4a 	bl	8003860 <vTaskDelay>
					HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 80059cc:	2101      	movs	r1, #1
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7fc f89b 	bl	8001b0a <HAL_GPIO_TogglePin>
					vTaskDelay(100);
 80059d4:	2064      	movs	r0, #100	; 0x64
 80059d6:	f7fd ff43 	bl	8003860 <vTaskDelay>
					HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80059da:	462a      	mov	r2, r5
 80059dc:	2101      	movs	r1, #1
 80059de:	4620      	mov	r0, r4
 80059e0:	f7fc f88e 	bl	8001b00 <HAL_GPIO_WritePin>



					C1_UP_OFF;
 80059e4:	462a      	mov	r2, r5
 80059e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fc f888 	bl	8001b00 <HAL_GPIO_WritePin>
					C1_DOWN_OFF;
 80059f0:	462a      	mov	r2, r5
 80059f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7fc f882 	bl	8001b00 <HAL_GPIO_WritePin>
					C2_UP_OFF;
 80059fc:	462a      	mov	r2, r5
 80059fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fc f87c 	bl	8001b00 <HAL_GPIO_WritePin>
					C2_DOWN_OFF;
 8005a08:	462a      	mov	r2, r5
 8005a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7fc f876 	bl	8001b00 <HAL_GPIO_WritePin>
					C3_UP_OFF;
 8005a14:	462a      	mov	r2, r5
 8005a16:	2140      	movs	r1, #64	; 0x40
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7fc f871 	bl	8001b00 <HAL_GPIO_WritePin>
					C3_DOWN_OFF;
 8005a1e:	462a      	mov	r2, r5
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fc f86c 	bl	8001b00 <HAL_GPIO_WritePin>
					C4_UP_OFF;
 8005a28:	462a      	mov	r2, r5
 8005a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7fc f866 	bl	8001b00 <HAL_GPIO_WritePin>
					C4_DOWN_OFF;
 8005a34:	462a      	mov	r2, r5
 8005a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7fc f860 	bl	8001b00 <HAL_GPIO_WritePin>
				}
			}
		}
		vTaskDelay(5 / portTICK_RATE_MS);
 8005a40:	2005      	movs	r0, #5
 8005a42:	f7fd ff0d 	bl	8003860 <vTaskDelay>
		curInputHallState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005a46:	46c3      	mov	fp, r8
 8005a48:	463d      	mov	r5, r7
 8005a4a:	e6e5      	b.n	8005818 <xScanInputTask+0x14>
 8005a4c:	40010c00 	.word	0x40010c00
 8005a50:	40011000 	.word	0x40011000
 8005a54:	20005268 	.word	0x20005268
 8005a58:	2000523c 	.word	0x2000523c
 8005a5c:	08007377 	.word	0x08007377
 8005a60:	200053f4 	.word	0x200053f4
 8005a64:	40010800 	.word	0x40010800

08005a68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a68:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <HAL_MspInit+0x48>)
{
 8005a6a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a6c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a6e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	619a      	str	r2, [r3, #24]
 8005a76:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a78:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a7c:	f002 0201 	and.w	r2, r2, #1
 8005a80:	9200      	str	r2, [sp, #0]
 8005a82:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a8a:	61da      	str	r2, [r3, #28]
 8005a8c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a8e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a98:	f7fb fc08 	bl	80012ac <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a9c:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <HAL_MspInit+0x4c>)
 8005a9e:	6853      	ldr	r3, [r2, #4]
 8005aa0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aaa:	b003      	add	sp, #12
 8005aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40010000 	.word	0x40010000

08005ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ab8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aba:	2410      	movs	r4, #16
{
 8005abc:	4605      	mov	r5, r0
 8005abe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	eb0d 0004 	add.w	r0, sp, r4
 8005ac8:	f000 f951 	bl	8005d6e <memset>
  if(hadc->Instance==ADC1)
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <HAL_ADC_MspInit+0xa0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d125      	bne.n	8005b20 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ad4:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_ADC_MspInit+0xa4>)
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad6:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae0:	619a      	str	r2, [r3, #24]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005ae8:	9200      	str	r2, [sp, #0]
 8005aea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	f042 0204 	orr.w	r2, r2, #4
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005afe:	230f      	movs	r3, #15
 8005b00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b02:	2303      	movs	r3, #3
 8005b04:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b06:	4816      	ldr	r0, [pc, #88]	; (8005b60 <HAL_ADC_MspInit+0xa8>)
 8005b08:	f7fb ff14 	bl	8001934 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8005b0c:	2012      	movs	r0, #18
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2105      	movs	r1, #5
 8005b12:	f7fb fbcb 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005b16:	2012      	movs	r0, #18
 8005b18:	f7fb fbfc 	bl	8001314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005b1c:	b009      	add	sp, #36	; 0x24
 8005b1e:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8005b20:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <HAL_ADC_MspInit+0xac>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d1fa      	bne.n	8005b1c <HAL_ADC_MspInit+0x64>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b28:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005b38:	9202      	str	r2, [sp, #8]
 8005b3a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	f042 0204 	orr.w	r2, r2, #4
 8005b42:	619a      	str	r2, [r3, #24]
 8005b44:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b46:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b50:	2303      	movs	r3, #3
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	e7d7      	b.n	8005b06 <HAL_ADC_MspInit+0x4e>
 8005b56:	bf00      	nop
 8005b58:	40012400 	.word	0x40012400
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40010800 	.word	0x40010800
 8005b64:	40012800 	.word	0x40012800

08005b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6a:	2710      	movs	r7, #16
{
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b70:	463a      	mov	r2, r7
 8005b72:	2100      	movs	r1, #0
 8005b74:	a802      	add	r0, sp, #8
 8005b76:	f000 f8fa 	bl	8005d6e <memset>
  if(huart->Instance==USART1)
 8005b7a:	6832      	ldr	r2, [r6, #0]
 8005b7c:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_UART_MspInit+0xa8>)
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d143      	bne.n	8005c0a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b82:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005b86:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b88:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b8e:	619a      	str	r2, [r3, #24]
 8005b90:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b92:	4820      	ldr	r0, [pc, #128]	; (8005c14 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005b98:	9200      	str	r2, [sp, #0]
 8005b9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b9e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba0:	f042 0204 	orr.w	r2, r2, #4
 8005ba4:	619a      	str	r2, [r3, #24]
 8005ba6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005ba8:	4c1b      	ldr	r4, [pc, #108]	; (8005c18 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc0:	f7fb feb8 	bl	8001934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc8:	4812      	ldr	r0, [pc, #72]	; (8005c14 <HAL_UART_MspInit+0xac>)
 8005bca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bcc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bce:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd2:	f7fb feaf 	bl	8001934 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bd8:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bda:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bde:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be0:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005be2:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005be4:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005be6:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005be8:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005bea:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005bec:	f7fb fbb4 	bl	8001358 <HAL_DMA_Init>
 8005bf0:	b108      	cbz	r0, 8005bf6 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8005bf2:	f7ff fb81 	bl	80052f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005bf6:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005bf8:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005bfe:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c00:	f7fb fb54 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c04:	2025      	movs	r0, #37	; 0x25
 8005c06:	f7fb fb85 	bl	8001314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c0a:	b007      	add	sp, #28
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40013800 	.word	0x40013800
 8005c14:	40010800 	.word	0x40010800
 8005c18:	20005380 	.word	0x20005380
 8005c1c:	40020044 	.word	0x40020044

08005c20 <NMI_Handler>:
 8005c20:	4770      	bx	lr

08005c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c22:	e7fe      	b.n	8005c22 <HardFault_Handler>

08005c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c24:	e7fe      	b.n	8005c24 <MemManage_Handler>

08005c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c26:	e7fe      	b.n	8005c26 <BusFault_Handler>

08005c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c28:	e7fe      	b.n	8005c28 <UsageFault_Handler>

08005c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c2a:	4770      	bx	lr

08005c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c2e:	f7fa ffcb 	bl	8000bc8 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8005c36:	f7fc be48 	b.w	80028ca <osSystickHandler>
	...

08005c3c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <DMA1_Channel4_IRQHandler+0x8>)
 8005c3e:	f7fb bc77 	b.w	8001530 <HAL_DMA_IRQHandler>
 8005c42:	bf00      	nop
 8005c44:	20005380 	.word	0x20005380

08005c48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005c4a:	4804      	ldr	r0, [pc, #16]	; (8005c5c <ADC1_2_IRQHandler+0x14>)
 8005c4c:	f7fa fff2 	bl	8000c34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8005c54:	4802      	ldr	r0, [pc, #8]	; (8005c60 <ADC1_2_IRQHandler+0x18>)
 8005c56:	f7fa bfed 	b.w	8000c34 <HAL_ADC_IRQHandler>
 8005c5a:	bf00      	nop
 8005c5c:	200053c4 	.word	0x200053c4
 8005c60:	2000534c 	.word	0x2000534c

08005c64 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c64:	4801      	ldr	r0, [pc, #4]	; (8005c6c <USART1_IRQHandler+0x8>)
 8005c66:	f7fc bd83 	b.w	8002770 <HAL_UART_IRQHandler>
 8005c6a:	bf00      	nop
 8005c6c:	200053f4 	.word	0x200053f4

08005c70 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005c70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c74:	f7fb bf4e 	b.w	8001b14 <HAL_GPIO_EXTI_IRQHandler>

08005c78 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005c78:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <_sbrk+0x2c>)
{
 8005c7c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	b909      	cbnz	r1, 8005c86 <_sbrk+0xe>
		heap_end = &end;
 8005c82:	4909      	ldr	r1, [pc, #36]	; (8005ca8 <_sbrk+0x30>)
 8005c84:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005c86:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005c88:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005c8a:	4402      	add	r2, r0
 8005c8c:	428a      	cmp	r2, r1
 8005c8e:	d906      	bls.n	8005c9e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005c90:	f000 f85c 	bl	8005d4c <__errno>
 8005c94:	230c      	movs	r3, #12
 8005c96:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005c9e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005ca0:	bd08      	pop	{r3, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20005290 	.word	0x20005290
 8005ca8:	2000544c 	.word	0x2000544c

08005cac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <SystemInit+0x4c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <SystemInit+0x50>)
 8005cba:	400a      	ands	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005cd8:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005ce2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005ce6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005ce8:	2200      	movs	r2, #0
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <SystemInit+0x54>)
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	f0ff0000 	.word	0xf0ff0000
 8005d00:	e000ed00 	.word	0xe000ed00

08005d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005d04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005d06:	e003      	b.n	8005d10 <LoopCopyDataInit>

08005d08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8005d0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005d0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005d0e:	3104      	adds	r1, #4

08005d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005d10:	4809      	ldr	r0, [pc, #36]	; (8005d38 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8005d14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005d16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005d18:	d3f6      	bcc.n	8005d08 <CopyDataInit>
  ldr r2, =_sbss
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8005d1c:	e002      	b.n	8005d24 <LoopFillZerobss>

08005d1e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005d1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005d20:	f842 3b04 	str.w	r3, [r2], #4

08005d24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8005d26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005d28:	d3f9      	bcc.n	8005d1e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d2a:	f7ff ffbf 	bl	8005cac <SystemInit>
/* Call the application's entry point.*/
  bl main
 8005d2e:	f7ff f947 	bl	8004fc0 <main>
  bx lr
 8005d32:	4770      	bx	lr
  ldr r3, =_sidata
 8005d34:	08007564 	.word	0x08007564
  ldr r0, =_sdata
 8005d38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d3c:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8005d40:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8005d44:	2000544c 	.word	0x2000544c

08005d48 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d48:	e7fe      	b.n	8005d48 <CAN1_RX0_IRQHandler>
	...

08005d4c <__errno>:
 8005d4c:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <__errno+0x8>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000050 	.word	0x20000050

08005d58 <memcpy>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	1e43      	subs	r3, r0, #1
 8005d5c:	440a      	add	r2, r1
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	d100      	bne.n	8005d64 <memcpy+0xc>
 8005d62:	bd10      	pop	{r4, pc}
 8005d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6c:	e7f7      	b.n	8005d5e <memcpy+0x6>

08005d6e <memset>:
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4402      	add	r2, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d100      	bne.n	8005d78 <memset+0xa>
 8005d76:	4770      	bx	lr
 8005d78:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7c:	e7f9      	b.n	8005d72 <memset+0x4>
	...

08005d80 <siprintf>:
 8005d80:	b40e      	push	{r1, r2, r3}
 8005d82:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005d86:	b500      	push	{lr}
 8005d88:	b09c      	sub	sp, #112	; 0x70
 8005d8a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005d8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d92:	9104      	str	r1, [sp, #16]
 8005d94:	9107      	str	r1, [sp, #28]
 8005d96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <siprintf+0x44>)
 8005da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	a902      	add	r1, sp, #8
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	f000 f89a 	bl	8005ee8 <_svfiprintf_r>
 8005db4:	2200      	movs	r2, #0
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	b01c      	add	sp, #112	; 0x70
 8005dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc0:	b003      	add	sp, #12
 8005dc2:	4770      	bx	lr
 8005dc4:	20000050 	.word	0x20000050

08005dc8 <siscanf>:
 8005dc8:	b40e      	push	{r1, r2, r3}
 8005dca:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005dce:	b530      	push	{r4, r5, lr}
 8005dd0:	b09c      	sub	sp, #112	; 0x70
 8005dd2:	ac1f      	add	r4, sp, #124	; 0x7c
 8005dd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8005dd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ddc:	9002      	str	r0, [sp, #8]
 8005dde:	9006      	str	r0, [sp, #24]
 8005de0:	f7fa fa26 	bl	8000230 <strlen>
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <siscanf+0x4c>)
 8005de6:	9003      	str	r0, [sp, #12]
 8005de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dea:	2300      	movs	r3, #0
 8005dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dee:	9314      	str	r3, [sp, #80]	; 0x50
 8005df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005df4:	9007      	str	r0, [sp, #28]
 8005df6:	4808      	ldr	r0, [pc, #32]	; (8005e18 <siscanf+0x50>)
 8005df8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4623      	mov	r3, r4
 8005e00:	a902      	add	r1, sp, #8
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	9401      	str	r4, [sp, #4]
 8005e06:	f000 f9bd 	bl	8006184 <__ssvfiscanf_r>
 8005e0a:	b01c      	add	sp, #112	; 0x70
 8005e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e10:	b003      	add	sp, #12
 8005e12:	4770      	bx	lr
 8005e14:	08005e1d 	.word	0x08005e1d
 8005e18:	20000050 	.word	0x20000050

08005e1c <__seofread>:
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr

08005e20 <strcpy>:
 8005e20:	4603      	mov	r3, r0
 8005e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e26:	f803 2b01 	strb.w	r2, [r3], #1
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d1f9      	bne.n	8005e22 <strcpy+0x2>
 8005e2e:	4770      	bx	lr

08005e30 <__ssputs_r>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	688e      	ldr	r6, [r1, #8]
 8005e36:	4682      	mov	sl, r0
 8005e38:	429e      	cmp	r6, r3
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	4698      	mov	r8, r3
 8005e40:	d835      	bhi.n	8005eae <__ssputs_r+0x7e>
 8005e42:	898a      	ldrh	r2, [r1, #12]
 8005e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e48:	d031      	beq.n	8005eae <__ssputs_r+0x7e>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	6909      	ldr	r1, [r1, #16]
 8005e50:	1a6f      	subs	r7, r5, r1
 8005e52:	6965      	ldr	r5, [r4, #20]
 8005e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e58:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e5c:	f108 0301 	add.w	r3, r8, #1
 8005e60:	443b      	add	r3, r7
 8005e62:	429d      	cmp	r5, r3
 8005e64:	bf38      	it	cc
 8005e66:	461d      	movcc	r5, r3
 8005e68:	0553      	lsls	r3, r2, #21
 8005e6a:	d531      	bpl.n	8005ed0 <__ssputs_r+0xa0>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f000 fff1 	bl	8006e54 <_malloc_r>
 8005e72:	4606      	mov	r6, r0
 8005e74:	b950      	cbnz	r0, 8005e8c <__ssputs_r+0x5c>
 8005e76:	230c      	movs	r3, #12
 8005e78:	f8ca 3000 	str.w	r3, [sl]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	f7ff ff62 	bl	8005d58 <memcpy>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	6126      	str	r6, [r4, #16]
 8005ea2:	443e      	add	r6, r7
 8005ea4:	6026      	str	r6, [r4, #0]
 8005ea6:	4646      	mov	r6, r8
 8005ea8:	6165      	str	r5, [r4, #20]
 8005eaa:	1bed      	subs	r5, r5, r7
 8005eac:	60a5      	str	r5, [r4, #8]
 8005eae:	4546      	cmp	r6, r8
 8005eb0:	bf28      	it	cs
 8005eb2:	4646      	movcs	r6, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	f000 ff65 	bl	8006d88 <memmove>
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	1b9b      	subs	r3, r3, r6
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	441e      	add	r6, r3
 8005eca:	6026      	str	r6, [r4, #0]
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	f001 f81d 	bl	8006f10 <_realloc_r>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1e1      	bne.n	8005ea0 <__ssputs_r+0x70>
 8005edc:	6921      	ldr	r1, [r4, #16]
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f000 ff6c 	bl	8006dbc <_free_r>
 8005ee4:	e7c7      	b.n	8005e76 <__ssputs_r+0x46>
	...

08005ee8 <_svfiprintf_r>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	b09d      	sub	sp, #116	; 0x74
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	061c      	lsls	r4, r3, #24
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	4616      	mov	r6, r2
 8005efa:	d50f      	bpl.n	8005f1c <_svfiprintf_r+0x34>
 8005efc:	690b      	ldr	r3, [r1, #16]
 8005efe:	b96b      	cbnz	r3, 8005f1c <_svfiprintf_r+0x34>
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	f000 ffa7 	bl	8006e54 <_malloc_r>
 8005f06:	6028      	str	r0, [r5, #0]
 8005f08:	6128      	str	r0, [r5, #16]
 8005f0a:	b928      	cbnz	r0, 8005f18 <_svfiprintf_r+0x30>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	f8c8 3000 	str.w	r3, [r8]
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	e0c4      	b.n	80060a2 <_svfiprintf_r+0x1ba>
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	616b      	str	r3, [r5, #20]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	2320      	movs	r3, #32
 8005f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f26:	2330      	movs	r3, #48	; 0x30
 8005f28:	f04f 0b01 	mov.w	fp, #1
 8005f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f30:	4637      	mov	r7, r6
 8005f32:	463c      	mov	r4, r7
 8005f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d13c      	bne.n	8005fb6 <_svfiprintf_r+0xce>
 8005f3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f40:	d00b      	beq.n	8005f5a <_svfiprintf_r+0x72>
 8005f42:	4653      	mov	r3, sl
 8005f44:	4632      	mov	r2, r6
 8005f46:	4629      	mov	r1, r5
 8005f48:	4640      	mov	r0, r8
 8005f4a:	f7ff ff71 	bl	8005e30 <__ssputs_r>
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f000 80a2 	beq.w	8006098 <_svfiprintf_r+0x1b0>
 8005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f56:	4453      	add	r3, sl
 8005f58:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5a:	783b      	ldrb	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 809b 	beq.w	8006098 <_svfiprintf_r+0x1b0>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	9304      	str	r3, [sp, #16]
 8005f6a:	9307      	str	r3, [sp, #28]
 8005f6c:	9205      	str	r2, [sp, #20]
 8005f6e:	9306      	str	r3, [sp, #24]
 8005f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f74:	931a      	str	r3, [sp, #104]	; 0x68
 8005f76:	2205      	movs	r2, #5
 8005f78:	7821      	ldrb	r1, [r4, #0]
 8005f7a:	4850      	ldr	r0, [pc, #320]	; (80060bc <_svfiprintf_r+0x1d4>)
 8005f7c:	f000 fef6 	bl	8006d6c <memchr>
 8005f80:	1c67      	adds	r7, r4, #1
 8005f82:	9b04      	ldr	r3, [sp, #16]
 8005f84:	b9d8      	cbnz	r0, 8005fbe <_svfiprintf_r+0xd6>
 8005f86:	06d9      	lsls	r1, r3, #27
 8005f88:	bf44      	itt	mi
 8005f8a:	2220      	movmi	r2, #32
 8005f8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f90:	071a      	lsls	r2, r3, #28
 8005f92:	bf44      	itt	mi
 8005f94:	222b      	movmi	r2, #43	; 0x2b
 8005f96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f9a:	7822      	ldrb	r2, [r4, #0]
 8005f9c:	2a2a      	cmp	r2, #42	; 0x2a
 8005f9e:	d016      	beq.n	8005fce <_svfiprintf_r+0xe6>
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	200a      	movs	r0, #10
 8005fa4:	9a07      	ldr	r2, [sp, #28]
 8005fa6:	4627      	mov	r7, r4
 8005fa8:	783b      	ldrb	r3, [r7, #0]
 8005faa:	3401      	adds	r4, #1
 8005fac:	3b30      	subs	r3, #48	; 0x30
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d950      	bls.n	8006054 <_svfiprintf_r+0x16c>
 8005fb2:	b1c9      	cbz	r1, 8005fe8 <_svfiprintf_r+0x100>
 8005fb4:	e011      	b.n	8005fda <_svfiprintf_r+0xf2>
 8005fb6:	2b25      	cmp	r3, #37	; 0x25
 8005fb8:	d0c0      	beq.n	8005f3c <_svfiprintf_r+0x54>
 8005fba:	4627      	mov	r7, r4
 8005fbc:	e7b9      	b.n	8005f32 <_svfiprintf_r+0x4a>
 8005fbe:	4a3f      	ldr	r2, [pc, #252]	; (80060bc <_svfiprintf_r+0x1d4>)
 8005fc0:	463c      	mov	r4, r7
 8005fc2:	1a80      	subs	r0, r0, r2
 8005fc4:	fa0b f000 	lsl.w	r0, fp, r0
 8005fc8:	4318      	orrs	r0, r3
 8005fca:	9004      	str	r0, [sp, #16]
 8005fcc:	e7d3      	b.n	8005f76 <_svfiprintf_r+0x8e>
 8005fce:	9a03      	ldr	r2, [sp, #12]
 8005fd0:	1d11      	adds	r1, r2, #4
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	9103      	str	r1, [sp, #12]
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	db01      	blt.n	8005fde <_svfiprintf_r+0xf6>
 8005fda:	9207      	str	r2, [sp, #28]
 8005fdc:	e004      	b.n	8005fe8 <_svfiprintf_r+0x100>
 8005fde:	4252      	negs	r2, r2
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	9207      	str	r2, [sp, #28]
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	783b      	ldrb	r3, [r7, #0]
 8005fea:	2b2e      	cmp	r3, #46	; 0x2e
 8005fec:	d10d      	bne.n	800600a <_svfiprintf_r+0x122>
 8005fee:	787b      	ldrb	r3, [r7, #1]
 8005ff0:	1c79      	adds	r1, r7, #1
 8005ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff4:	d132      	bne.n	800605c <_svfiprintf_r+0x174>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	3702      	adds	r7, #2
 8005ffa:	1d1a      	adds	r2, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	9203      	str	r2, [sp, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	bfb8      	it	lt
 8006004:	f04f 33ff 	movlt.w	r3, #4294967295
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	4c2d      	ldr	r4, [pc, #180]	; (80060c0 <_svfiprintf_r+0x1d8>)
 800600c:	2203      	movs	r2, #3
 800600e:	7839      	ldrb	r1, [r7, #0]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 feab 	bl	8006d6c <memchr>
 8006016:	b138      	cbz	r0, 8006028 <_svfiprintf_r+0x140>
 8006018:	2340      	movs	r3, #64	; 0x40
 800601a:	1b00      	subs	r0, r0, r4
 800601c:	fa03 f000 	lsl.w	r0, r3, r0
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	3701      	adds	r7, #1
 8006024:	4303      	orrs	r3, r0
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	7839      	ldrb	r1, [r7, #0]
 800602a:	2206      	movs	r2, #6
 800602c:	4825      	ldr	r0, [pc, #148]	; (80060c4 <_svfiprintf_r+0x1dc>)
 800602e:	1c7e      	adds	r6, r7, #1
 8006030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006034:	f000 fe9a 	bl	8006d6c <memchr>
 8006038:	2800      	cmp	r0, #0
 800603a:	d035      	beq.n	80060a8 <_svfiprintf_r+0x1c0>
 800603c:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <_svfiprintf_r+0x1e0>)
 800603e:	b9fb      	cbnz	r3, 8006080 <_svfiprintf_r+0x198>
 8006040:	9b03      	ldr	r3, [sp, #12]
 8006042:	3307      	adds	r3, #7
 8006044:	f023 0307 	bic.w	r3, r3, #7
 8006048:	3308      	adds	r3, #8
 800604a:	9303      	str	r3, [sp, #12]
 800604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604e:	444b      	add	r3, r9
 8006050:	9309      	str	r3, [sp, #36]	; 0x24
 8006052:	e76d      	b.n	8005f30 <_svfiprintf_r+0x48>
 8006054:	fb00 3202 	mla	r2, r0, r2, r3
 8006058:	2101      	movs	r1, #1
 800605a:	e7a4      	b.n	8005fa6 <_svfiprintf_r+0xbe>
 800605c:	2300      	movs	r3, #0
 800605e:	240a      	movs	r4, #10
 8006060:	4618      	mov	r0, r3
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	460f      	mov	r7, r1
 8006066:	783a      	ldrb	r2, [r7, #0]
 8006068:	3101      	adds	r1, #1
 800606a:	3a30      	subs	r2, #48	; 0x30
 800606c:	2a09      	cmp	r2, #9
 800606e:	d903      	bls.n	8006078 <_svfiprintf_r+0x190>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ca      	beq.n	800600a <_svfiprintf_r+0x122>
 8006074:	9005      	str	r0, [sp, #20]
 8006076:	e7c8      	b.n	800600a <_svfiprintf_r+0x122>
 8006078:	fb04 2000 	mla	r0, r4, r0, r2
 800607c:	2301      	movs	r3, #1
 800607e:	e7f1      	b.n	8006064 <_svfiprintf_r+0x17c>
 8006080:	ab03      	add	r3, sp, #12
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	462a      	mov	r2, r5
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <_svfiprintf_r+0x1e4>)
 8006088:	a904      	add	r1, sp, #16
 800608a:	4640      	mov	r0, r8
 800608c:	f3af 8000 	nop.w
 8006090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006094:	4681      	mov	r9, r0
 8006096:	d1d9      	bne.n	800604c <_svfiprintf_r+0x164>
 8006098:	89ab      	ldrh	r3, [r5, #12]
 800609a:	065b      	lsls	r3, r3, #25
 800609c:	f53f af39 	bmi.w	8005f12 <_svfiprintf_r+0x2a>
 80060a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a2:	b01d      	add	sp, #116	; 0x74
 80060a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	462a      	mov	r2, r5
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <_svfiprintf_r+0x1e4>)
 80060b0:	a904      	add	r1, sp, #16
 80060b2:	4640      	mov	r0, r8
 80060b4:	f000 fa32 	bl	800651c <_printf_i>
 80060b8:	e7ea      	b.n	8006090 <_svfiprintf_r+0x1a8>
 80060ba:	bf00      	nop
 80060bc:	08007398 	.word	0x08007398
 80060c0:	0800739e 	.word	0x0800739e
 80060c4:	080073a2 	.word	0x080073a2
 80060c8:	00000000 	.word	0x00000000
 80060cc:	08005e31 	.word	0x08005e31

080060d0 <_sungetc_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	1c4b      	adds	r3, r1, #1
 80060d4:	4614      	mov	r4, r2
 80060d6:	d103      	bne.n	80060e0 <_sungetc_r+0x10>
 80060d8:	f04f 35ff 	mov.w	r5, #4294967295
 80060dc:	4628      	mov	r0, r5
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	8993      	ldrh	r3, [r2, #12]
 80060e2:	b2cd      	uxtb	r5, r1
 80060e4:	f023 0320 	bic.w	r3, r3, #32
 80060e8:	8193      	strh	r3, [r2, #12]
 80060ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80060ec:	6852      	ldr	r2, [r2, #4]
 80060ee:	b18b      	cbz	r3, 8006114 <_sungetc_r+0x44>
 80060f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060f2:	429a      	cmp	r2, r3
 80060f4:	da08      	bge.n	8006108 <_sungetc_r+0x38>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	3301      	adds	r3, #1
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	e7e9      	b.n	80060dc <_sungetc_r+0xc>
 8006108:	4621      	mov	r1, r4
 800610a:	f000 fdd3 	bl	8006cb4 <__submore>
 800610e:	2800      	cmp	r0, #0
 8006110:	d0f1      	beq.n	80060f6 <_sungetc_r+0x26>
 8006112:	e7e1      	b.n	80060d8 <_sungetc_r+0x8>
 8006114:	6921      	ldr	r1, [r4, #16]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	b151      	cbz	r1, 8006130 <_sungetc_r+0x60>
 800611a:	4299      	cmp	r1, r3
 800611c:	d208      	bcs.n	8006130 <_sungetc_r+0x60>
 800611e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006122:	428d      	cmp	r5, r1
 8006124:	d104      	bne.n	8006130 <_sungetc_r+0x60>
 8006126:	3b01      	subs	r3, #1
 8006128:	3201      	adds	r2, #1
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	6062      	str	r2, [r4, #4]
 800612e:	e7d5      	b.n	80060dc <_sungetc_r+0xc>
 8006130:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006136:	6363      	str	r3, [r4, #52]	; 0x34
 8006138:	2303      	movs	r3, #3
 800613a:	63a3      	str	r3, [r4, #56]	; 0x38
 800613c:	4623      	mov	r3, r4
 800613e:	6422      	str	r2, [r4, #64]	; 0x40
 8006140:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	2301      	movs	r3, #1
 8006148:	e7dc      	b.n	8006104 <_sungetc_r+0x34>

0800614a <__ssrefill_r>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006150:	b169      	cbz	r1, 800616e <__ssrefill_r+0x24>
 8006152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006156:	4299      	cmp	r1, r3
 8006158:	d001      	beq.n	800615e <__ssrefill_r+0x14>
 800615a:	f000 fe2f 	bl	8006dbc <_free_r>
 800615e:	2000      	movs	r0, #0
 8006160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006162:	6360      	str	r0, [r4, #52]	; 0x34
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	b113      	cbz	r3, 800616e <__ssrefill_r+0x24>
 8006168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	bd10      	pop	{r4, pc}
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2300      	movs	r3, #0
 8006178:	6063      	str	r3, [r4, #4]
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f043 0320 	orr.w	r3, r3, #32
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	bd10      	pop	{r4, pc}

08006184 <__ssvfiscanf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	2300      	movs	r3, #0
 8006190:	4606      	mov	r6, r0
 8006192:	460c      	mov	r4, r1
 8006194:	4692      	mov	sl, r2
 8006196:	270a      	movs	r7, #10
 8006198:	9346      	str	r3, [sp, #280]	; 0x118
 800619a:	9347      	str	r3, [sp, #284]	; 0x11c
 800619c:	4b9f      	ldr	r3, [pc, #636]	; (800641c <__ssvfiscanf_r+0x298>)
 800619e:	f10d 080c 	add.w	r8, sp, #12
 80061a2:	93a2      	str	r3, [sp, #648]	; 0x288
 80061a4:	4b9e      	ldr	r3, [pc, #632]	; (8006420 <__ssvfiscanf_r+0x29c>)
 80061a6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006424 <__ssvfiscanf_r+0x2a0>
 80061aa:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80061ae:	93a3      	str	r3, [sp, #652]	; 0x28c
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 812f 	beq.w	8006418 <__ssvfiscanf_r+0x294>
 80061ba:	f000 fdb7 	bl	8006d2c <__locale_ctype_ptr>
 80061be:	f89a b000 	ldrb.w	fp, [sl]
 80061c2:	4458      	add	r0, fp
 80061c4:	7843      	ldrb	r3, [r0, #1]
 80061c6:	f013 0308 	ands.w	r3, r3, #8
 80061ca:	d143      	bne.n	8006254 <__ssvfiscanf_r+0xd0>
 80061cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80061d0:	f10a 0501 	add.w	r5, sl, #1
 80061d4:	f040 8099 	bne.w	800630a <__ssvfiscanf_r+0x186>
 80061d8:	9345      	str	r3, [sp, #276]	; 0x114
 80061da:	9343      	str	r3, [sp, #268]	; 0x10c
 80061dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80061e0:	2b2a      	cmp	r3, #42	; 0x2a
 80061e2:	d103      	bne.n	80061ec <__ssvfiscanf_r+0x68>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f10a 0502 	add.w	r5, sl, #2
 80061ea:	9343      	str	r3, [sp, #268]	; 0x10c
 80061ec:	7829      	ldrb	r1, [r5, #0]
 80061ee:	46aa      	mov	sl, r5
 80061f0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80061f4:	2a09      	cmp	r2, #9
 80061f6:	f105 0501 	add.w	r5, r5, #1
 80061fa:	d941      	bls.n	8006280 <__ssvfiscanf_r+0xfc>
 80061fc:	2203      	movs	r2, #3
 80061fe:	4889      	ldr	r0, [pc, #548]	; (8006424 <__ssvfiscanf_r+0x2a0>)
 8006200:	f000 fdb4 	bl	8006d6c <memchr>
 8006204:	b138      	cbz	r0, 8006216 <__ssvfiscanf_r+0x92>
 8006206:	eba0 0309 	sub.w	r3, r0, r9
 800620a:	2001      	movs	r0, #1
 800620c:	46aa      	mov	sl, r5
 800620e:	4098      	lsls	r0, r3
 8006210:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006212:	4318      	orrs	r0, r3
 8006214:	9043      	str	r0, [sp, #268]	; 0x10c
 8006216:	f89a 3000 	ldrb.w	r3, [sl]
 800621a:	f10a 0501 	add.w	r5, sl, #1
 800621e:	2b67      	cmp	r3, #103	; 0x67
 8006220:	d84a      	bhi.n	80062b8 <__ssvfiscanf_r+0x134>
 8006222:	2b65      	cmp	r3, #101	; 0x65
 8006224:	f080 80b7 	bcs.w	8006396 <__ssvfiscanf_r+0x212>
 8006228:	2b47      	cmp	r3, #71	; 0x47
 800622a:	d82f      	bhi.n	800628c <__ssvfiscanf_r+0x108>
 800622c:	2b45      	cmp	r3, #69	; 0x45
 800622e:	f080 80b2 	bcs.w	8006396 <__ssvfiscanf_r+0x212>
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8082 	beq.w	800633c <__ssvfiscanf_r+0x1b8>
 8006238:	2b25      	cmp	r3, #37	; 0x25
 800623a:	d066      	beq.n	800630a <__ssvfiscanf_r+0x186>
 800623c:	2303      	movs	r3, #3
 800623e:	9744      	str	r7, [sp, #272]	; 0x110
 8006240:	9349      	str	r3, [sp, #292]	; 0x124
 8006242:	e045      	b.n	80062d0 <__ssvfiscanf_r+0x14c>
 8006244:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8006246:	3301      	adds	r3, #1
 8006248:	3101      	adds	r1, #1
 800624a:	9147      	str	r1, [sp, #284]	; 0x11c
 800624c:	6861      	ldr	r1, [r4, #4]
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	3901      	subs	r1, #1
 8006252:	6061      	str	r1, [r4, #4]
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	dd0b      	ble.n	8006272 <__ssvfiscanf_r+0xee>
 800625a:	f000 fd67 	bl	8006d2c <__locale_ctype_ptr>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	7819      	ldrb	r1, [r3, #0]
 8006262:	4408      	add	r0, r1
 8006264:	7841      	ldrb	r1, [r0, #1]
 8006266:	070d      	lsls	r5, r1, #28
 8006268:	d4ec      	bmi.n	8006244 <__ssvfiscanf_r+0xc0>
 800626a:	f10a 0501 	add.w	r5, sl, #1
 800626e:	46aa      	mov	sl, r5
 8006270:	e79e      	b.n	80061b0 <__ssvfiscanf_r+0x2c>
 8006272:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006274:	4621      	mov	r1, r4
 8006276:	4630      	mov	r0, r6
 8006278:	4798      	blx	r3
 800627a:	2800      	cmp	r0, #0
 800627c:	d0ed      	beq.n	800625a <__ssvfiscanf_r+0xd6>
 800627e:	e7f4      	b.n	800626a <__ssvfiscanf_r+0xe6>
 8006280:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006282:	fb07 1303 	mla	r3, r7, r3, r1
 8006286:	3b30      	subs	r3, #48	; 0x30
 8006288:	9345      	str	r3, [sp, #276]	; 0x114
 800628a:	e7af      	b.n	80061ec <__ssvfiscanf_r+0x68>
 800628c:	2b5b      	cmp	r3, #91	; 0x5b
 800628e:	d061      	beq.n	8006354 <__ssvfiscanf_r+0x1d0>
 8006290:	d80c      	bhi.n	80062ac <__ssvfiscanf_r+0x128>
 8006292:	2b58      	cmp	r3, #88	; 0x58
 8006294:	d1d2      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 8006296:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629c:	9243      	str	r2, [sp, #268]	; 0x10c
 800629e:	2210      	movs	r2, #16
 80062a0:	9244      	str	r2, [sp, #272]	; 0x110
 80062a2:	2b6f      	cmp	r3, #111	; 0x6f
 80062a4:	bfb4      	ite	lt
 80062a6:	2303      	movlt	r3, #3
 80062a8:	2304      	movge	r3, #4
 80062aa:	e010      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 80062ac:	2b63      	cmp	r3, #99	; 0x63
 80062ae:	d05c      	beq.n	800636a <__ssvfiscanf_r+0x1e6>
 80062b0:	2b64      	cmp	r3, #100	; 0x64
 80062b2:	d1c3      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 80062b4:	9744      	str	r7, [sp, #272]	; 0x110
 80062b6:	e7f4      	b.n	80062a2 <__ssvfiscanf_r+0x11e>
 80062b8:	2b70      	cmp	r3, #112	; 0x70
 80062ba:	d042      	beq.n	8006342 <__ssvfiscanf_r+0x1be>
 80062bc:	d81d      	bhi.n	80062fa <__ssvfiscanf_r+0x176>
 80062be:	2b6e      	cmp	r3, #110	; 0x6e
 80062c0:	d059      	beq.n	8006376 <__ssvfiscanf_r+0x1f2>
 80062c2:	d843      	bhi.n	800634c <__ssvfiscanf_r+0x1c8>
 80062c4:	2b69      	cmp	r3, #105	; 0x69
 80062c6:	d1b9      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 80062c8:	2300      	movs	r3, #0
 80062ca:	9344      	str	r3, [sp, #272]	; 0x110
 80062cc:	2303      	movs	r3, #3
 80062ce:	9349      	str	r3, [sp, #292]	; 0x124
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd61      	ble.n	800639a <__ssvfiscanf_r+0x216>
 80062d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80062d8:	0659      	lsls	r1, r3, #25
 80062da:	d56f      	bpl.n	80063bc <__ssvfiscanf_r+0x238>
 80062dc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dc7c      	bgt.n	80063dc <__ssvfiscanf_r+0x258>
 80062e2:	ab01      	add	r3, sp, #4
 80062e4:	4622      	mov	r2, r4
 80062e6:	a943      	add	r1, sp, #268	; 0x10c
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 fa37 	bl	800675c <_scanf_chars>
 80062ee:	2801      	cmp	r0, #1
 80062f0:	f000 8092 	beq.w	8006418 <__ssvfiscanf_r+0x294>
 80062f4:	2802      	cmp	r0, #2
 80062f6:	d1ba      	bne.n	800626e <__ssvfiscanf_r+0xea>
 80062f8:	e01d      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80062fa:	2b75      	cmp	r3, #117	; 0x75
 80062fc:	d0da      	beq.n	80062b4 <__ssvfiscanf_r+0x130>
 80062fe:	2b78      	cmp	r3, #120	; 0x78
 8006300:	d0c9      	beq.n	8006296 <__ssvfiscanf_r+0x112>
 8006302:	2b73      	cmp	r3, #115	; 0x73
 8006304:	d19a      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 8006306:	2302      	movs	r3, #2
 8006308:	e7e1      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800630a:	6863      	ldr	r3, [r4, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd0c      	ble.n	800632a <__ssvfiscanf_r+0x1a6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	4593      	cmp	fp, r2
 8006316:	d17f      	bne.n	8006418 <__ssvfiscanf_r+0x294>
 8006318:	3301      	adds	r3, #1
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006320:	3a01      	subs	r2, #1
 8006322:	3301      	adds	r3, #1
 8006324:	6062      	str	r2, [r4, #4]
 8006326:	9347      	str	r3, [sp, #284]	; 0x11c
 8006328:	e7a1      	b.n	800626e <__ssvfiscanf_r+0xea>
 800632a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800632c:	4621      	mov	r1, r4
 800632e:	4630      	mov	r0, r6
 8006330:	4798      	blx	r3
 8006332:	2800      	cmp	r0, #0
 8006334:	d0ec      	beq.n	8006310 <__ssvfiscanf_r+0x18c>
 8006336:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006338:	2800      	cmp	r0, #0
 800633a:	d163      	bne.n	8006404 <__ssvfiscanf_r+0x280>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e066      	b.n	8006410 <__ssvfiscanf_r+0x28c>
 8006342:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006344:	f042 0220 	orr.w	r2, r2, #32
 8006348:	9243      	str	r2, [sp, #268]	; 0x10c
 800634a:	e7a4      	b.n	8006296 <__ssvfiscanf_r+0x112>
 800634c:	2308      	movs	r3, #8
 800634e:	9344      	str	r3, [sp, #272]	; 0x110
 8006350:	2304      	movs	r3, #4
 8006352:	e7bc      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 8006354:	4629      	mov	r1, r5
 8006356:	4640      	mov	r0, r8
 8006358:	f000 fb5a 	bl	8006a10 <__sccl>
 800635c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800635e:	4605      	mov	r5, r0
 8006360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006364:	9343      	str	r3, [sp, #268]	; 0x10c
 8006366:	2301      	movs	r3, #1
 8006368:	e7b1      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800636a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	9343      	str	r3, [sp, #268]	; 0x10c
 8006372:	2300      	movs	r3, #0
 8006374:	e7ab      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 8006376:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006378:	06d0      	lsls	r0, r2, #27
 800637a:	f53f af78 	bmi.w	800626e <__ssvfiscanf_r+0xea>
 800637e:	f012 0f01 	tst.w	r2, #1
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006386:	f102 0104 	add.w	r1, r2, #4
 800638a:	9101      	str	r1, [sp, #4]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	bf14      	ite	ne
 8006390:	8013      	strhne	r3, [r2, #0]
 8006392:	6013      	streq	r3, [r2, #0]
 8006394:	e76b      	b.n	800626e <__ssvfiscanf_r+0xea>
 8006396:	2305      	movs	r3, #5
 8006398:	e799      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800639a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	4798      	blx	r3
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d097      	beq.n	80062d6 <__ssvfiscanf_r+0x152>
 80063a6:	e7c6      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80063a8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80063aa:	3201      	adds	r2, #1
 80063ac:	9247      	str	r2, [sp, #284]	; 0x11c
 80063ae:	6862      	ldr	r2, [r4, #4]
 80063b0:	3a01      	subs	r2, #1
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	6062      	str	r2, [r4, #4]
 80063b6:	dd0a      	ble.n	80063ce <__ssvfiscanf_r+0x24a>
 80063b8:	3301      	adds	r3, #1
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	f000 fcb6 	bl	8006d2c <__locale_ctype_ptr>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	4410      	add	r0, r2
 80063c6:	7842      	ldrb	r2, [r0, #1]
 80063c8:	0712      	lsls	r2, r2, #28
 80063ca:	d4ed      	bmi.n	80063a8 <__ssvfiscanf_r+0x224>
 80063cc:	e786      	b.n	80062dc <__ssvfiscanf_r+0x158>
 80063ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063d0:	4621      	mov	r1, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	4798      	blx	r3
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0f0      	beq.n	80063bc <__ssvfiscanf_r+0x238>
 80063da:	e7ac      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80063dc:	2b04      	cmp	r3, #4
 80063de:	dc06      	bgt.n	80063ee <__ssvfiscanf_r+0x26a>
 80063e0:	ab01      	add	r3, sp, #4
 80063e2:	4622      	mov	r2, r4
 80063e4:	a943      	add	r1, sp, #268	; 0x10c
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 fa1c 	bl	8006824 <_scanf_i>
 80063ec:	e77f      	b.n	80062ee <__ssvfiscanf_r+0x16a>
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <__ssvfiscanf_r+0x2a4>)
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f43f af3c 	beq.w	800626e <__ssvfiscanf_r+0xea>
 80063f6:	ab01      	add	r3, sp, #4
 80063f8:	4622      	mov	r2, r4
 80063fa:	a943      	add	r1, sp, #268	; 0x10c
 80063fc:	4630      	mov	r0, r6
 80063fe:	f3af 8000 	nop.w
 8006402:	e774      	b.n	80062ee <__ssvfiscanf_r+0x16a>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f013 0f40 	tst.w	r3, #64	; 0x40
 800640a:	bf18      	it	ne
 800640c:	f04f 30ff 	movne.w	r0, #4294967295
 8006410:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	9846      	ldr	r0, [sp, #280]	; 0x118
 800641a:	e7f9      	b.n	8006410 <__ssvfiscanf_r+0x28c>
 800641c:	080060d1 	.word	0x080060d1
 8006420:	0800614b 	.word	0x0800614b
 8006424:	0800739e 	.word	0x0800739e
 8006428:	00000000 	.word	0x00000000

0800642c <_printf_common>:
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	4691      	mov	r9, r2
 8006432:	461f      	mov	r7, r3
 8006434:	688a      	ldr	r2, [r1, #8]
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4606      	mov	r6, r0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfb8      	it	lt
 800643e:	4613      	movlt	r3, r2
 8006440:	f8c9 3000 	str.w	r3, [r9]
 8006444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006448:	460c      	mov	r4, r1
 800644a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800644e:	b112      	cbz	r2, 8006456 <_printf_common+0x2a>
 8006450:	3301      	adds	r3, #1
 8006452:	f8c9 3000 	str.w	r3, [r9]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	0699      	lsls	r1, r3, #26
 800645a:	bf42      	ittt	mi
 800645c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006460:	3302      	addmi	r3, #2
 8006462:	f8c9 3000 	strmi.w	r3, [r9]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d107      	bne.n	800647e <_printf_common+0x52>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	f8d9 2000 	ldr.w	r2, [r9]
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	429d      	cmp	r5, r3
 800647c:	db2a      	blt.n	80064d4 <_printf_common+0xa8>
 800647e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	3300      	adds	r3, #0
 8006486:	bf18      	it	ne
 8006488:	2301      	movne	r3, #1
 800648a:	0692      	lsls	r2, r2, #26
 800648c:	d42f      	bmi.n	80064ee <_printf_common+0xc2>
 800648e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006492:	4639      	mov	r1, r7
 8006494:	4630      	mov	r0, r6
 8006496:	47c0      	blx	r8
 8006498:	3001      	adds	r0, #1
 800649a:	d022      	beq.n	80064e2 <_printf_common+0xb6>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	68e5      	ldr	r5, [r4, #12]
 80064a0:	f003 0306 	and.w	r3, r3, #6
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf18      	it	ne
 80064a8:	2500      	movne	r5, #0
 80064aa:	f8d9 2000 	ldr.w	r2, [r9]
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	bf08      	it	eq
 80064b4:	1aad      	subeq	r5, r5, r2
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	bf08      	it	eq
 80064bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bfc4      	itt	gt
 80064c4:	1a9b      	subgt	r3, r3, r2
 80064c6:	18ed      	addgt	r5, r5, r3
 80064c8:	341a      	adds	r4, #26
 80064ca:	454d      	cmp	r5, r9
 80064cc:	d11b      	bne.n	8006506 <_printf_common+0xda>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	2301      	movs	r3, #1
 80064d6:	4652      	mov	r2, sl
 80064d8:	4639      	mov	r1, r7
 80064da:	4630      	mov	r0, r6
 80064dc:	47c0      	blx	r8
 80064de:	3001      	adds	r0, #1
 80064e0:	d103      	bne.n	80064ea <_printf_common+0xbe>
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	3501      	adds	r5, #1
 80064ec:	e7c1      	b.n	8006472 <_printf_common+0x46>
 80064ee:	2030      	movs	r0, #48	; 0x30
 80064f0:	18e1      	adds	r1, r4, r3
 80064f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064fc:	4422      	add	r2, r4
 80064fe:	3302      	adds	r3, #2
 8006500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006504:	e7c3      	b.n	800648e <_printf_common+0x62>
 8006506:	2301      	movs	r3, #1
 8006508:	4622      	mov	r2, r4
 800650a:	4639      	mov	r1, r7
 800650c:	4630      	mov	r0, r6
 800650e:	47c0      	blx	r8
 8006510:	3001      	adds	r0, #1
 8006512:	d0e6      	beq.n	80064e2 <_printf_common+0xb6>
 8006514:	f109 0901 	add.w	r9, r9, #1
 8006518:	e7d7      	b.n	80064ca <_printf_common+0x9e>
	...

0800651c <_printf_i>:
 800651c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006520:	4617      	mov	r7, r2
 8006522:	7e0a      	ldrb	r2, [r1, #24]
 8006524:	b085      	sub	sp, #20
 8006526:	2a6e      	cmp	r2, #110	; 0x6e
 8006528:	4698      	mov	r8, r3
 800652a:	4606      	mov	r6, r0
 800652c:	460c      	mov	r4, r1
 800652e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006530:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006534:	f000 80bc 	beq.w	80066b0 <_printf_i+0x194>
 8006538:	d81a      	bhi.n	8006570 <_printf_i+0x54>
 800653a:	2a63      	cmp	r2, #99	; 0x63
 800653c:	d02e      	beq.n	800659c <_printf_i+0x80>
 800653e:	d80a      	bhi.n	8006556 <_printf_i+0x3a>
 8006540:	2a00      	cmp	r2, #0
 8006542:	f000 80c8 	beq.w	80066d6 <_printf_i+0x1ba>
 8006546:	2a58      	cmp	r2, #88	; 0x58
 8006548:	f000 808a 	beq.w	8006660 <_printf_i+0x144>
 800654c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006550:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006554:	e02a      	b.n	80065ac <_printf_i+0x90>
 8006556:	2a64      	cmp	r2, #100	; 0x64
 8006558:	d001      	beq.n	800655e <_printf_i+0x42>
 800655a:	2a69      	cmp	r2, #105	; 0x69
 800655c:	d1f6      	bne.n	800654c <_printf_i+0x30>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006566:	d023      	beq.n	80065b0 <_printf_i+0x94>
 8006568:	1d11      	adds	r1, r2, #4
 800656a:	6019      	str	r1, [r3, #0]
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	e027      	b.n	80065c0 <_printf_i+0xa4>
 8006570:	2a73      	cmp	r2, #115	; 0x73
 8006572:	f000 80b4 	beq.w	80066de <_printf_i+0x1c2>
 8006576:	d808      	bhi.n	800658a <_printf_i+0x6e>
 8006578:	2a6f      	cmp	r2, #111	; 0x6f
 800657a:	d02a      	beq.n	80065d2 <_printf_i+0xb6>
 800657c:	2a70      	cmp	r2, #112	; 0x70
 800657e:	d1e5      	bne.n	800654c <_printf_i+0x30>
 8006580:	680a      	ldr	r2, [r1, #0]
 8006582:	f042 0220 	orr.w	r2, r2, #32
 8006586:	600a      	str	r2, [r1, #0]
 8006588:	e003      	b.n	8006592 <_printf_i+0x76>
 800658a:	2a75      	cmp	r2, #117	; 0x75
 800658c:	d021      	beq.n	80065d2 <_printf_i+0xb6>
 800658e:	2a78      	cmp	r2, #120	; 0x78
 8006590:	d1dc      	bne.n	800654c <_printf_i+0x30>
 8006592:	2278      	movs	r2, #120	; 0x78
 8006594:	496f      	ldr	r1, [pc, #444]	; (8006754 <_printf_i+0x238>)
 8006596:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800659a:	e064      	b.n	8006666 <_printf_i+0x14a>
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80065a2:	1d11      	adds	r1, r2, #4
 80065a4:	6019      	str	r1, [r3, #0]
 80065a6:	6813      	ldr	r3, [r2, #0]
 80065a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0a3      	b.n	80066f8 <_printf_i+0x1dc>
 80065b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80065b4:	f102 0104 	add.w	r1, r2, #4
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	d0d7      	beq.n	800656c <_printf_i+0x50>
 80065bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da03      	bge.n	80065cc <_printf_i+0xb0>
 80065c4:	222d      	movs	r2, #45	; 0x2d
 80065c6:	425b      	negs	r3, r3
 80065c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065cc:	4962      	ldr	r1, [pc, #392]	; (8006758 <_printf_i+0x23c>)
 80065ce:	220a      	movs	r2, #10
 80065d0:	e017      	b.n	8006602 <_printf_i+0xe6>
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80065da:	d003      	beq.n	80065e4 <_printf_i+0xc8>
 80065dc:	1d08      	adds	r0, r1, #4
 80065de:	6018      	str	r0, [r3, #0]
 80065e0:	680b      	ldr	r3, [r1, #0]
 80065e2:	e006      	b.n	80065f2 <_printf_i+0xd6>
 80065e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e8:	f101 0004 	add.w	r0, r1, #4
 80065ec:	6018      	str	r0, [r3, #0]
 80065ee:	d0f7      	beq.n	80065e0 <_printf_i+0xc4>
 80065f0:	880b      	ldrh	r3, [r1, #0]
 80065f2:	2a6f      	cmp	r2, #111	; 0x6f
 80065f4:	bf14      	ite	ne
 80065f6:	220a      	movne	r2, #10
 80065f8:	2208      	moveq	r2, #8
 80065fa:	4957      	ldr	r1, [pc, #348]	; (8006758 <_printf_i+0x23c>)
 80065fc:	2000      	movs	r0, #0
 80065fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006602:	6865      	ldr	r5, [r4, #4]
 8006604:	2d00      	cmp	r5, #0
 8006606:	60a5      	str	r5, [r4, #8]
 8006608:	f2c0 809c 	blt.w	8006744 <_printf_i+0x228>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	f020 0004 	bic.w	r0, r0, #4
 8006612:	6020      	str	r0, [r4, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13f      	bne.n	8006698 <_printf_i+0x17c>
 8006618:	2d00      	cmp	r5, #0
 800661a:	f040 8095 	bne.w	8006748 <_printf_i+0x22c>
 800661e:	4675      	mov	r5, lr
 8006620:	2a08      	cmp	r2, #8
 8006622:	d10b      	bne.n	800663c <_printf_i+0x120>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d508      	bpl.n	800663c <_printf_i+0x120>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	6862      	ldr	r2, [r4, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	bfde      	ittt	le
 8006632:	2330      	movle	r3, #48	; 0x30
 8006634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006638:	f105 35ff 	addle.w	r5, r5, #4294967295
 800663c:	ebae 0305 	sub.w	r3, lr, r5
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	f8cd 8000 	str.w	r8, [sp]
 8006646:	463b      	mov	r3, r7
 8006648:	aa03      	add	r2, sp, #12
 800664a:	4621      	mov	r1, r4
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff feed 	bl	800642c <_printf_common>
 8006652:	3001      	adds	r0, #1
 8006654:	d155      	bne.n	8006702 <_printf_i+0x1e6>
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	b005      	add	sp, #20
 800665c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006660:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006664:	493c      	ldr	r1, [pc, #240]	; (8006758 <_printf_i+0x23c>)
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800666e:	f100 0504 	add.w	r5, r0, #4
 8006672:	601d      	str	r5, [r3, #0]
 8006674:	d001      	beq.n	800667a <_printf_i+0x15e>
 8006676:	6803      	ldr	r3, [r0, #0]
 8006678:	e002      	b.n	8006680 <_printf_i+0x164>
 800667a:	0655      	lsls	r5, r2, #25
 800667c:	d5fb      	bpl.n	8006676 <_printf_i+0x15a>
 800667e:	8803      	ldrh	r3, [r0, #0]
 8006680:	07d0      	lsls	r0, r2, #31
 8006682:	bf44      	itt	mi
 8006684:	f042 0220 	orrmi.w	r2, r2, #32
 8006688:	6022      	strmi	r2, [r4, #0]
 800668a:	b91b      	cbnz	r3, 8006694 <_printf_i+0x178>
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	f022 0220 	bic.w	r2, r2, #32
 8006692:	6022      	str	r2, [r4, #0]
 8006694:	2210      	movs	r2, #16
 8006696:	e7b1      	b.n	80065fc <_printf_i+0xe0>
 8006698:	4675      	mov	r5, lr
 800669a:	fbb3 f0f2 	udiv	r0, r3, r2
 800669e:	fb02 3310 	mls	r3, r2, r0, r3
 80066a2:	5ccb      	ldrb	r3, [r1, r3]
 80066a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066a8:	4603      	mov	r3, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d1f5      	bne.n	800669a <_printf_i+0x17e>
 80066ae:	e7b7      	b.n	8006620 <_printf_i+0x104>
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80066b8:	6949      	ldr	r1, [r1, #20]
 80066ba:	d004      	beq.n	80066c6 <_printf_i+0x1aa>
 80066bc:	1d10      	adds	r0, r2, #4
 80066be:	6018      	str	r0, [r3, #0]
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	6019      	str	r1, [r3, #0]
 80066c4:	e007      	b.n	80066d6 <_printf_i+0x1ba>
 80066c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066ca:	f102 0004 	add.w	r0, r2, #4
 80066ce:	6018      	str	r0, [r3, #0]
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	d0f6      	beq.n	80066c2 <_printf_i+0x1a6>
 80066d4:	8019      	strh	r1, [r3, #0]
 80066d6:	2300      	movs	r3, #0
 80066d8:	4675      	mov	r5, lr
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	e7b1      	b.n	8006642 <_printf_i+0x126>
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	1d11      	adds	r1, r2, #4
 80066e2:	6019      	str	r1, [r3, #0]
 80066e4:	6815      	ldr	r5, [r2, #0]
 80066e6:	2100      	movs	r1, #0
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 fb3e 	bl	8006d6c <memchr>
 80066f0:	b108      	cbz	r0, 80066f6 <_printf_i+0x1da>
 80066f2:	1b40      	subs	r0, r0, r5
 80066f4:	6060      	str	r0, [r4, #4]
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	2300      	movs	r3, #0
 80066fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006700:	e79f      	b.n	8006642 <_printf_i+0x126>
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	462a      	mov	r2, r5
 8006706:	4639      	mov	r1, r7
 8006708:	4630      	mov	r0, r6
 800670a:	47c0      	blx	r8
 800670c:	3001      	adds	r0, #1
 800670e:	d0a2      	beq.n	8006656 <_printf_i+0x13a>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	079b      	lsls	r3, r3, #30
 8006714:	d507      	bpl.n	8006726 <_printf_i+0x20a>
 8006716:	2500      	movs	r5, #0
 8006718:	f104 0919 	add.w	r9, r4, #25
 800671c:	68e3      	ldr	r3, [r4, #12]
 800671e:	9a03      	ldr	r2, [sp, #12]
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	429d      	cmp	r5, r3
 8006724:	db05      	blt.n	8006732 <_printf_i+0x216>
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	bfb8      	it	lt
 800672e:	4618      	movlt	r0, r3
 8006730:	e793      	b.n	800665a <_printf_i+0x13e>
 8006732:	2301      	movs	r3, #1
 8006734:	464a      	mov	r2, r9
 8006736:	4639      	mov	r1, r7
 8006738:	4630      	mov	r0, r6
 800673a:	47c0      	blx	r8
 800673c:	3001      	adds	r0, #1
 800673e:	d08a      	beq.n	8006656 <_printf_i+0x13a>
 8006740:	3501      	adds	r5, #1
 8006742:	e7eb      	b.n	800671c <_printf_i+0x200>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1a7      	bne.n	8006698 <_printf_i+0x17c>
 8006748:	780b      	ldrb	r3, [r1, #0]
 800674a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800674e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006752:	e765      	b.n	8006620 <_printf_i+0x104>
 8006754:	080073ba 	.word	0x080073ba
 8006758:	080073a9 	.word	0x080073a9

0800675c <_scanf_chars>:
 800675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006760:	4615      	mov	r5, r2
 8006762:	688a      	ldr	r2, [r1, #8]
 8006764:	4680      	mov	r8, r0
 8006766:	460c      	mov	r4, r1
 8006768:	b932      	cbnz	r2, 8006778 <_scanf_chars+0x1c>
 800676a:	698a      	ldr	r2, [r1, #24]
 800676c:	2a00      	cmp	r2, #0
 800676e:	bf0c      	ite	eq
 8006770:	2201      	moveq	r2, #1
 8006772:	f04f 32ff 	movne.w	r2, #4294967295
 8006776:	608a      	str	r2, [r1, #8]
 8006778:	2600      	movs	r6, #0
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	06d1      	lsls	r1, r2, #27
 800677e:	bf5f      	itttt	pl
 8006780:	681a      	ldrpl	r2, [r3, #0]
 8006782:	1d11      	addpl	r1, r2, #4
 8006784:	6019      	strpl	r1, [r3, #0]
 8006786:	6817      	ldrpl	r7, [r2, #0]
 8006788:	69a3      	ldr	r3, [r4, #24]
 800678a:	b1db      	cbz	r3, 80067c4 <_scanf_chars+0x68>
 800678c:	2b01      	cmp	r3, #1
 800678e:	d107      	bne.n	80067a0 <_scanf_chars+0x44>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	6962      	ldr	r2, [r4, #20]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	5cd3      	ldrb	r3, [r2, r3]
 8006798:	b9a3      	cbnz	r3, 80067c4 <_scanf_chars+0x68>
 800679a:	2e00      	cmp	r6, #0
 800679c:	d131      	bne.n	8006802 <_scanf_chars+0xa6>
 800679e:	e006      	b.n	80067ae <_scanf_chars+0x52>
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d007      	beq.n	80067b4 <_scanf_chars+0x58>
 80067a4:	2e00      	cmp	r6, #0
 80067a6:	d12c      	bne.n	8006802 <_scanf_chars+0xa6>
 80067a8:	69a3      	ldr	r3, [r4, #24]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d129      	bne.n	8006802 <_scanf_chars+0xa6>
 80067ae:	2001      	movs	r0, #1
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	f000 faba 	bl	8006d2c <__locale_ctype_ptr>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4418      	add	r0, r3
 80067be:	7843      	ldrb	r3, [r0, #1]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	d4ef      	bmi.n	80067a4 <_scanf_chars+0x48>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	3601      	adds	r6, #1
 80067c8:	06da      	lsls	r2, r3, #27
 80067ca:	bf5e      	ittt	pl
 80067cc:	682b      	ldrpl	r3, [r5, #0]
 80067ce:	781b      	ldrbpl	r3, [r3, #0]
 80067d0:	703b      	strbpl	r3, [r7, #0]
 80067d2:	682a      	ldr	r2, [r5, #0]
 80067d4:	686b      	ldr	r3, [r5, #4]
 80067d6:	f102 0201 	add.w	r2, r2, #1
 80067da:	602a      	str	r2, [r5, #0]
 80067dc:	68a2      	ldr	r2, [r4, #8]
 80067de:	f103 33ff 	add.w	r3, r3, #4294967295
 80067e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80067e6:	606b      	str	r3, [r5, #4]
 80067e8:	bf58      	it	pl
 80067ea:	3701      	addpl	r7, #1
 80067ec:	60a2      	str	r2, [r4, #8]
 80067ee:	b142      	cbz	r2, 8006802 <_scanf_chars+0xa6>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dcc9      	bgt.n	8006788 <_scanf_chars+0x2c>
 80067f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067f8:	4629      	mov	r1, r5
 80067fa:	4640      	mov	r0, r8
 80067fc:	4798      	blx	r3
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0c2      	beq.n	8006788 <_scanf_chars+0x2c>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f013 0310 	ands.w	r3, r3, #16
 8006808:	d105      	bne.n	8006816 <_scanf_chars+0xba>
 800680a:	68e2      	ldr	r2, [r4, #12]
 800680c:	3201      	adds	r2, #1
 800680e:	60e2      	str	r2, [r4, #12]
 8006810:	69a2      	ldr	r2, [r4, #24]
 8006812:	b102      	cbz	r2, 8006816 <_scanf_chars+0xba>
 8006814:	703b      	strb	r3, [r7, #0]
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	2000      	movs	r0, #0
 800681a:	441e      	add	r6, r3
 800681c:	6126      	str	r6, [r4, #16]
 800681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006824 <_scanf_i>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	469a      	mov	sl, r3
 800682c:	4b74      	ldr	r3, [pc, #464]	; (8006a00 <_scanf_i+0x1dc>)
 800682e:	b087      	sub	sp, #28
 8006830:	4683      	mov	fp, r0
 8006832:	4616      	mov	r6, r2
 8006834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006838:	ab03      	add	r3, sp, #12
 800683a:	68a7      	ldr	r7, [r4, #8]
 800683c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006840:	4b70      	ldr	r3, [pc, #448]	; (8006a04 <_scanf_i+0x1e0>)
 8006842:	69a1      	ldr	r1, [r4, #24]
 8006844:	4a70      	ldr	r2, [pc, #448]	; (8006a08 <_scanf_i+0x1e4>)
 8006846:	f104 091c 	add.w	r9, r4, #28
 800684a:	2903      	cmp	r1, #3
 800684c:	bf18      	it	ne
 800684e:	461a      	movne	r2, r3
 8006850:	1e7b      	subs	r3, r7, #1
 8006852:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006856:	bf84      	itt	hi
 8006858:	f240 135d 	movwhi	r3, #349	; 0x15d
 800685c:	60a3      	strhi	r3, [r4, #8]
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	bf88      	it	hi
 8006862:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006866:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	bf98      	it	ls
 800686e:	2700      	movls	r7, #0
 8006870:	464b      	mov	r3, r9
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	9200      	str	r2, [sp, #0]
 8006878:	bf88      	it	hi
 800687a:	197f      	addhi	r7, r7, r5
 800687c:	6831      	ldr	r1, [r6, #0]
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	ab03      	add	r3, sp, #12
 8006882:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006886:	2202      	movs	r2, #2
 8006888:	7809      	ldrb	r1, [r1, #0]
 800688a:	f000 fa6f 	bl	8006d6c <memchr>
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	b328      	cbz	r0, 80068de <_scanf_i+0xba>
 8006892:	f1b8 0f01 	cmp.w	r8, #1
 8006896:	d156      	bne.n	8006946 <_scanf_i+0x122>
 8006898:	6862      	ldr	r2, [r4, #4]
 800689a:	b92a      	cbnz	r2, 80068a8 <_scanf_i+0x84>
 800689c:	2208      	movs	r2, #8
 800689e:	6062      	str	r2, [r4, #4]
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80068ae:	6022      	str	r2, [r4, #0]
 80068b0:	68a2      	ldr	r2, [r4, #8]
 80068b2:	1e51      	subs	r1, r2, #1
 80068b4:	60a1      	str	r1, [r4, #8]
 80068b6:	b192      	cbz	r2, 80068de <_scanf_i+0xba>
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1c5d      	adds	r5, r3, #1
 80068bc:	1c51      	adds	r1, r2, #1
 80068be:	6031      	str	r1, [r6, #0]
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	6873      	ldr	r3, [r6, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	6073      	str	r3, [r6, #4]
 80068cc:	dc06      	bgt.n	80068dc <_scanf_i+0xb8>
 80068ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068d2:	4631      	mov	r1, r6
 80068d4:	4658      	mov	r0, fp
 80068d6:	4798      	blx	r3
 80068d8:	2800      	cmp	r0, #0
 80068da:	d177      	bne.n	80069cc <_scanf_i+0x1a8>
 80068dc:	462b      	mov	r3, r5
 80068de:	f108 0801 	add.w	r8, r8, #1
 80068e2:	f1b8 0f03 	cmp.w	r8, #3
 80068e6:	d1c9      	bne.n	800687c <_scanf_i+0x58>
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	b90a      	cbnz	r2, 80068f0 <_scanf_i+0xcc>
 80068ec:	220a      	movs	r2, #10
 80068ee:	6062      	str	r2, [r4, #4]
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	4946      	ldr	r1, [pc, #280]	; (8006a0c <_scanf_i+0x1e8>)
 80068f4:	6960      	ldr	r0, [r4, #20]
 80068f6:	1a89      	subs	r1, r1, r2
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	f000 f889 	bl	8006a10 <__sccl>
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	f04f 0800 	mov.w	r8, #0
 8006904:	461d      	mov	r5, r3
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d039      	beq.n	8006980 <_scanf_i+0x15c>
 800690c:	6831      	ldr	r1, [r6, #0]
 800690e:	6960      	ldr	r0, [r4, #20]
 8006910:	780a      	ldrb	r2, [r1, #0]
 8006912:	5c80      	ldrb	r0, [r0, r2]
 8006914:	2800      	cmp	r0, #0
 8006916:	d033      	beq.n	8006980 <_scanf_i+0x15c>
 8006918:	2a30      	cmp	r2, #48	; 0x30
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	d121      	bne.n	8006962 <_scanf_i+0x13e>
 800691e:	0510      	lsls	r0, r2, #20
 8006920:	d51f      	bpl.n	8006962 <_scanf_i+0x13e>
 8006922:	f108 0801 	add.w	r8, r8, #1
 8006926:	b117      	cbz	r7, 800692e <_scanf_i+0x10a>
 8006928:	3301      	adds	r3, #1
 800692a:	3f01      	subs	r7, #1
 800692c:	60a3      	str	r3, [r4, #8]
 800692e:	6873      	ldr	r3, [r6, #4]
 8006930:	3b01      	subs	r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	6073      	str	r3, [r6, #4]
 8006936:	dd1c      	ble.n	8006972 <_scanf_i+0x14e>
 8006938:	6833      	ldr	r3, [r6, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	3b01      	subs	r3, #1
 8006942:	60a3      	str	r3, [r4, #8]
 8006944:	e7df      	b.n	8006906 <_scanf_i+0xe2>
 8006946:	f1b8 0f02 	cmp.w	r8, #2
 800694a:	d1b1      	bne.n	80068b0 <_scanf_i+0x8c>
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006952:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006956:	d1c2      	bne.n	80068de <_scanf_i+0xba>
 8006958:	2110      	movs	r1, #16
 800695a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800695e:	6061      	str	r1, [r4, #4]
 8006960:	e7a5      	b.n	80068ae <_scanf_i+0x8a>
 8006962:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	780b      	ldrb	r3, [r1, #0]
 800696a:	3501      	adds	r5, #1
 800696c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006970:	e7dd      	b.n	800692e <_scanf_i+0x10a>
 8006972:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006976:	4631      	mov	r1, r6
 8006978:	4658      	mov	r0, fp
 800697a:	4798      	blx	r3
 800697c:	2800      	cmp	r0, #0
 800697e:	d0de      	beq.n	800693e <_scanf_i+0x11a>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	05d9      	lsls	r1, r3, #23
 8006984:	d50c      	bpl.n	80069a0 <_scanf_i+0x17c>
 8006986:	454d      	cmp	r5, r9
 8006988:	d908      	bls.n	800699c <_scanf_i+0x178>
 800698a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800698e:	1e6f      	subs	r7, r5, #1
 8006990:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006994:	4632      	mov	r2, r6
 8006996:	4658      	mov	r0, fp
 8006998:	4798      	blx	r3
 800699a:	463d      	mov	r5, r7
 800699c:	454d      	cmp	r5, r9
 800699e:	d02c      	beq.n	80069fa <_scanf_i+0x1d6>
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	f012 0210 	ands.w	r2, r2, #16
 80069a6:	d11e      	bne.n	80069e6 <_scanf_i+0x1c2>
 80069a8:	702a      	strb	r2, [r5, #0]
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	4649      	mov	r1, r9
 80069ae:	4658      	mov	r0, fp
 80069b0:	9e00      	ldr	r6, [sp, #0]
 80069b2:	47b0      	blx	r6
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	f8da 3000 	ldr.w	r3, [sl]
 80069ba:	f012 0f20 	tst.w	r2, #32
 80069be:	d008      	beq.n	80069d2 <_scanf_i+0x1ae>
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	f8ca 2000 	str.w	r2, [sl]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6018      	str	r0, [r3, #0]
 80069ca:	e009      	b.n	80069e0 <_scanf_i+0x1bc>
 80069cc:	f04f 0800 	mov.w	r8, #0
 80069d0:	e7d6      	b.n	8006980 <_scanf_i+0x15c>
 80069d2:	07d2      	lsls	r2, r2, #31
 80069d4:	d5f4      	bpl.n	80069c0 <_scanf_i+0x19c>
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	f8ca 2000 	str.w	r2, [sl]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	8018      	strh	r0, [r3, #0]
 80069e0:	68e3      	ldr	r3, [r4, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60e3      	str	r3, [r4, #12]
 80069e6:	2000      	movs	r0, #0
 80069e8:	eba5 0509 	sub.w	r5, r5, r9
 80069ec:	44a8      	add	r8, r5
 80069ee:	6925      	ldr	r5, [r4, #16]
 80069f0:	4445      	add	r5, r8
 80069f2:	6125      	str	r5, [r4, #16]
 80069f4:	b007      	add	sp, #28
 80069f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fa:	2001      	movs	r0, #1
 80069fc:	e7fa      	b.n	80069f4 <_scanf_i+0x1d0>
 80069fe:	bf00      	nop
 8006a00:	0800701c 	.word	0x0800701c
 8006a04:	08006c91 	.word	0x08006c91
 8006a08:	08006b71 	.word	0x08006b71
 8006a0c:	080073db 	.word	0x080073db

08006a10 <__sccl>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	780b      	ldrb	r3, [r1, #0]
 8006a14:	1e44      	subs	r4, r0, #1
 8006a16:	2b5e      	cmp	r3, #94	; 0x5e
 8006a18:	bf13      	iteet	ne
 8006a1a:	1c4a      	addne	r2, r1, #1
 8006a1c:	1c8a      	addeq	r2, r1, #2
 8006a1e:	784b      	ldrbeq	r3, [r1, #1]
 8006a20:	2100      	movne	r1, #0
 8006a22:	bf08      	it	eq
 8006a24:	2101      	moveq	r1, #1
 8006a26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006a2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006a2e:	42a5      	cmp	r5, r4
 8006a30:	d1fb      	bne.n	8006a2a <__sccl+0x1a>
 8006a32:	b913      	cbnz	r3, 8006a3a <__sccl+0x2a>
 8006a34:	3a01      	subs	r2, #1
 8006a36:	4610      	mov	r0, r2
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	f081 0401 	eor.w	r4, r1, #1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	54c4      	strb	r4, [r0, r3]
 8006a42:	780d      	ldrb	r5, [r1, #0]
 8006a44:	1c4a      	adds	r2, r1, #1
 8006a46:	2d2d      	cmp	r5, #45	; 0x2d
 8006a48:	d006      	beq.n	8006a58 <__sccl+0x48>
 8006a4a:	2d5d      	cmp	r5, #93	; 0x5d
 8006a4c:	d0f3      	beq.n	8006a36 <__sccl+0x26>
 8006a4e:	b90d      	cbnz	r5, 8006a54 <__sccl+0x44>
 8006a50:	460a      	mov	r2, r1
 8006a52:	e7f0      	b.n	8006a36 <__sccl+0x26>
 8006a54:	462b      	mov	r3, r5
 8006a56:	e7f2      	b.n	8006a3e <__sccl+0x2e>
 8006a58:	784e      	ldrb	r6, [r1, #1]
 8006a5a:	2e5d      	cmp	r6, #93	; 0x5d
 8006a5c:	d0fa      	beq.n	8006a54 <__sccl+0x44>
 8006a5e:	42b3      	cmp	r3, r6
 8006a60:	dcf8      	bgt.n	8006a54 <__sccl+0x44>
 8006a62:	3102      	adds	r1, #2
 8006a64:	3301      	adds	r3, #1
 8006a66:	429e      	cmp	r6, r3
 8006a68:	54c4      	strb	r4, [r0, r3]
 8006a6a:	dcfb      	bgt.n	8006a64 <__sccl+0x54>
 8006a6c:	e7e9      	b.n	8006a42 <__sccl+0x32>

08006a6e <_strtol_l.isra.0>:
 8006a6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a72:	4680      	mov	r8, r0
 8006a74:	4689      	mov	r9, r1
 8006a76:	4692      	mov	sl, r2
 8006a78:	461f      	mov	r7, r3
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	465d      	mov	r5, fp
 8006a7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a84:	f000 f94f 	bl	8006d26 <__locale_ctype_ptr_l>
 8006a88:	4420      	add	r0, r4
 8006a8a:	7846      	ldrb	r6, [r0, #1]
 8006a8c:	f016 0608 	ands.w	r6, r6, #8
 8006a90:	d10b      	bne.n	8006aaa <_strtol_l.isra.0+0x3c>
 8006a92:	2c2d      	cmp	r4, #45	; 0x2d
 8006a94:	d10b      	bne.n	8006aae <_strtol_l.isra.0+0x40>
 8006a96:	2601      	movs	r6, #1
 8006a98:	782c      	ldrb	r4, [r5, #0]
 8006a9a:	f10b 0502 	add.w	r5, fp, #2
 8006a9e:	b167      	cbz	r7, 8006aba <_strtol_l.isra.0+0x4c>
 8006aa0:	2f10      	cmp	r7, #16
 8006aa2:	d114      	bne.n	8006ace <_strtol_l.isra.0+0x60>
 8006aa4:	2c30      	cmp	r4, #48	; 0x30
 8006aa6:	d00a      	beq.n	8006abe <_strtol_l.isra.0+0x50>
 8006aa8:	e011      	b.n	8006ace <_strtol_l.isra.0+0x60>
 8006aaa:	46ab      	mov	fp, r5
 8006aac:	e7e6      	b.n	8006a7c <_strtol_l.isra.0+0xe>
 8006aae:	2c2b      	cmp	r4, #43	; 0x2b
 8006ab0:	bf04      	itt	eq
 8006ab2:	782c      	ldrbeq	r4, [r5, #0]
 8006ab4:	f10b 0502 	addeq.w	r5, fp, #2
 8006ab8:	e7f1      	b.n	8006a9e <_strtol_l.isra.0+0x30>
 8006aba:	2c30      	cmp	r4, #48	; 0x30
 8006abc:	d127      	bne.n	8006b0e <_strtol_l.isra.0+0xa0>
 8006abe:	782b      	ldrb	r3, [r5, #0]
 8006ac0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ac4:	2b58      	cmp	r3, #88	; 0x58
 8006ac6:	d14b      	bne.n	8006b60 <_strtol_l.isra.0+0xf2>
 8006ac8:	2710      	movs	r7, #16
 8006aca:	786c      	ldrb	r4, [r5, #1]
 8006acc:	3502      	adds	r5, #2
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	bf0c      	ite	eq
 8006ad2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006ad6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006ada:	2200      	movs	r2, #0
 8006adc:	fbb1 fef7 	udiv	lr, r1, r7
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006ae6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d811      	bhi.n	8006b12 <_strtol_l.isra.0+0xa4>
 8006aee:	461c      	mov	r4, r3
 8006af0:	42a7      	cmp	r7, r4
 8006af2:	dd1d      	ble.n	8006b30 <_strtol_l.isra.0+0xc2>
 8006af4:	1c53      	adds	r3, r2, #1
 8006af6:	d007      	beq.n	8006b08 <_strtol_l.isra.0+0x9a>
 8006af8:	4586      	cmp	lr, r0
 8006afa:	d316      	bcc.n	8006b2a <_strtol_l.isra.0+0xbc>
 8006afc:	d101      	bne.n	8006b02 <_strtol_l.isra.0+0x94>
 8006afe:	45a4      	cmp	ip, r4
 8006b00:	db13      	blt.n	8006b2a <_strtol_l.isra.0+0xbc>
 8006b02:	2201      	movs	r2, #1
 8006b04:	fb00 4007 	mla	r0, r0, r7, r4
 8006b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b0c:	e7eb      	b.n	8006ae6 <_strtol_l.isra.0+0x78>
 8006b0e:	270a      	movs	r7, #10
 8006b10:	e7dd      	b.n	8006ace <_strtol_l.isra.0+0x60>
 8006b12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006b16:	2b19      	cmp	r3, #25
 8006b18:	d801      	bhi.n	8006b1e <_strtol_l.isra.0+0xb0>
 8006b1a:	3c37      	subs	r4, #55	; 0x37
 8006b1c:	e7e8      	b.n	8006af0 <_strtol_l.isra.0+0x82>
 8006b1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006b22:	2b19      	cmp	r3, #25
 8006b24:	d804      	bhi.n	8006b30 <_strtol_l.isra.0+0xc2>
 8006b26:	3c57      	subs	r4, #87	; 0x57
 8006b28:	e7e2      	b.n	8006af0 <_strtol_l.isra.0+0x82>
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	e7eb      	b.n	8006b08 <_strtol_l.isra.0+0x9a>
 8006b30:	1c53      	adds	r3, r2, #1
 8006b32:	d108      	bne.n	8006b46 <_strtol_l.isra.0+0xd8>
 8006b34:	2322      	movs	r3, #34	; 0x22
 8006b36:	4608      	mov	r0, r1
 8006b38:	f8c8 3000 	str.w	r3, [r8]
 8006b3c:	f1ba 0f00 	cmp.w	sl, #0
 8006b40:	d107      	bne.n	8006b52 <_strtol_l.isra.0+0xe4>
 8006b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	b106      	cbz	r6, 8006b4a <_strtol_l.isra.0+0xdc>
 8006b48:	4240      	negs	r0, r0
 8006b4a:	f1ba 0f00 	cmp.w	sl, #0
 8006b4e:	d00c      	beq.n	8006b6a <_strtol_l.isra.0+0xfc>
 8006b50:	b122      	cbz	r2, 8006b5c <_strtol_l.isra.0+0xee>
 8006b52:	3d01      	subs	r5, #1
 8006b54:	f8ca 5000 	str.w	r5, [sl]
 8006b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5c:	464d      	mov	r5, r9
 8006b5e:	e7f9      	b.n	8006b54 <_strtol_l.isra.0+0xe6>
 8006b60:	2430      	movs	r4, #48	; 0x30
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	d1b3      	bne.n	8006ace <_strtol_l.isra.0+0x60>
 8006b66:	2708      	movs	r7, #8
 8006b68:	e7b1      	b.n	8006ace <_strtol_l.isra.0+0x60>
 8006b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006b70 <_strtol_r>:
 8006b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b72:	4c06      	ldr	r4, [pc, #24]	; (8006b8c <_strtol_r+0x1c>)
 8006b74:	4d06      	ldr	r5, [pc, #24]	; (8006b90 <_strtol_r+0x20>)
 8006b76:	6824      	ldr	r4, [r4, #0]
 8006b78:	6a24      	ldr	r4, [r4, #32]
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	bf08      	it	eq
 8006b7e:	462c      	moveq	r4, r5
 8006b80:	9400      	str	r4, [sp, #0]
 8006b82:	f7ff ff74 	bl	8006a6e <_strtol_l.isra.0>
 8006b86:	b003      	add	sp, #12
 8006b88:	bd30      	pop	{r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000050 	.word	0x20000050
 8006b90:	200000b4 	.word	0x200000b4

08006b94 <_strtoul_l.isra.0>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4692      	mov	sl, r2
 8006b9e:	461e      	mov	r6, r3
 8006ba0:	460f      	mov	r7, r1
 8006ba2:	463d      	mov	r5, r7
 8006ba4:	9808      	ldr	r0, [sp, #32]
 8006ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006baa:	f000 f8bc 	bl	8006d26 <__locale_ctype_ptr_l>
 8006bae:	4420      	add	r0, r4
 8006bb0:	7843      	ldrb	r3, [r0, #1]
 8006bb2:	f013 0308 	ands.w	r3, r3, #8
 8006bb6:	d10a      	bne.n	8006bce <_strtoul_l.isra.0+0x3a>
 8006bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8006bba:	d10a      	bne.n	8006bd2 <_strtoul_l.isra.0+0x3e>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	782c      	ldrb	r4, [r5, #0]
 8006bc0:	1cbd      	adds	r5, r7, #2
 8006bc2:	b15e      	cbz	r6, 8006bdc <_strtoul_l.isra.0+0x48>
 8006bc4:	2e10      	cmp	r6, #16
 8006bc6:	d113      	bne.n	8006bf0 <_strtoul_l.isra.0+0x5c>
 8006bc8:	2c30      	cmp	r4, #48	; 0x30
 8006bca:	d009      	beq.n	8006be0 <_strtoul_l.isra.0+0x4c>
 8006bcc:	e010      	b.n	8006bf0 <_strtoul_l.isra.0+0x5c>
 8006bce:	462f      	mov	r7, r5
 8006bd0:	e7e7      	b.n	8006ba2 <_strtoul_l.isra.0+0xe>
 8006bd2:	2c2b      	cmp	r4, #43	; 0x2b
 8006bd4:	bf04      	itt	eq
 8006bd6:	782c      	ldrbeq	r4, [r5, #0]
 8006bd8:	1cbd      	addeq	r5, r7, #2
 8006bda:	e7f2      	b.n	8006bc2 <_strtoul_l.isra.0+0x2e>
 8006bdc:	2c30      	cmp	r4, #48	; 0x30
 8006bde:	d125      	bne.n	8006c2c <_strtoul_l.isra.0+0x98>
 8006be0:	782a      	ldrb	r2, [r5, #0]
 8006be2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006be6:	2a58      	cmp	r2, #88	; 0x58
 8006be8:	d14a      	bne.n	8006c80 <_strtoul_l.isra.0+0xec>
 8006bea:	2610      	movs	r6, #16
 8006bec:	786c      	ldrb	r4, [r5, #1]
 8006bee:	3502      	adds	r5, #2
 8006bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8006bf4:	fbb1 f1f6 	udiv	r1, r1, r6
 8006bf8:	2700      	movs	r7, #0
 8006bfa:	fb06 fe01 	mul.w	lr, r6, r1
 8006bfe:	4638      	mov	r0, r7
 8006c00:	ea6f 0e0e 	mvn.w	lr, lr
 8006c04:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8006c08:	2a09      	cmp	r2, #9
 8006c0a:	d811      	bhi.n	8006c30 <_strtoul_l.isra.0+0x9c>
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	42a6      	cmp	r6, r4
 8006c10:	dd1d      	ble.n	8006c4e <_strtoul_l.isra.0+0xba>
 8006c12:	2f00      	cmp	r7, #0
 8006c14:	db18      	blt.n	8006c48 <_strtoul_l.isra.0+0xb4>
 8006c16:	4281      	cmp	r1, r0
 8006c18:	d316      	bcc.n	8006c48 <_strtoul_l.isra.0+0xb4>
 8006c1a:	d101      	bne.n	8006c20 <_strtoul_l.isra.0+0x8c>
 8006c1c:	45a6      	cmp	lr, r4
 8006c1e:	db13      	blt.n	8006c48 <_strtoul_l.isra.0+0xb4>
 8006c20:	2701      	movs	r7, #1
 8006c22:	fb00 4006 	mla	r0, r0, r6, r4
 8006c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c2a:	e7eb      	b.n	8006c04 <_strtoul_l.isra.0+0x70>
 8006c2c:	260a      	movs	r6, #10
 8006c2e:	e7df      	b.n	8006bf0 <_strtoul_l.isra.0+0x5c>
 8006c30:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8006c34:	2a19      	cmp	r2, #25
 8006c36:	d801      	bhi.n	8006c3c <_strtoul_l.isra.0+0xa8>
 8006c38:	3c37      	subs	r4, #55	; 0x37
 8006c3a:	e7e8      	b.n	8006c0e <_strtoul_l.isra.0+0x7a>
 8006c3c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8006c40:	2a19      	cmp	r2, #25
 8006c42:	d804      	bhi.n	8006c4e <_strtoul_l.isra.0+0xba>
 8006c44:	3c57      	subs	r4, #87	; 0x57
 8006c46:	e7e2      	b.n	8006c0e <_strtoul_l.isra.0+0x7a>
 8006c48:	f04f 37ff 	mov.w	r7, #4294967295
 8006c4c:	e7eb      	b.n	8006c26 <_strtoul_l.isra.0+0x92>
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	da09      	bge.n	8006c66 <_strtoul_l.isra.0+0xd2>
 8006c52:	2322      	movs	r3, #34	; 0x22
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	f8c8 3000 	str.w	r3, [r8]
 8006c5c:	f1ba 0f00 	cmp.w	sl, #0
 8006c60:	d107      	bne.n	8006c72 <_strtoul_l.isra.0+0xde>
 8006c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c66:	b103      	cbz	r3, 8006c6a <_strtoul_l.isra.0+0xd6>
 8006c68:	4240      	negs	r0, r0
 8006c6a:	f1ba 0f00 	cmp.w	sl, #0
 8006c6e:	d00c      	beq.n	8006c8a <_strtoul_l.isra.0+0xf6>
 8006c70:	b127      	cbz	r7, 8006c7c <_strtoul_l.isra.0+0xe8>
 8006c72:	3d01      	subs	r5, #1
 8006c74:	f8ca 5000 	str.w	r5, [sl]
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	464d      	mov	r5, r9
 8006c7e:	e7f9      	b.n	8006c74 <_strtoul_l.isra.0+0xe0>
 8006c80:	2430      	movs	r4, #48	; 0x30
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	d1b4      	bne.n	8006bf0 <_strtoul_l.isra.0+0x5c>
 8006c86:	2608      	movs	r6, #8
 8006c88:	e7b2      	b.n	8006bf0 <_strtoul_l.isra.0+0x5c>
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006c90 <_strtoul_r>:
 8006c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c92:	4c06      	ldr	r4, [pc, #24]	; (8006cac <_strtoul_r+0x1c>)
 8006c94:	4d06      	ldr	r5, [pc, #24]	; (8006cb0 <_strtoul_r+0x20>)
 8006c96:	6824      	ldr	r4, [r4, #0]
 8006c98:	6a24      	ldr	r4, [r4, #32]
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	bf08      	it	eq
 8006c9e:	462c      	moveq	r4, r5
 8006ca0:	9400      	str	r4, [sp, #0]
 8006ca2:	f7ff ff77 	bl	8006b94 <_strtoul_l.isra.0>
 8006ca6:	b003      	add	sp, #12
 8006ca8:	bd30      	pop	{r4, r5, pc}
 8006caa:	bf00      	nop
 8006cac:	20000050 	.word	0x20000050
 8006cb0:	200000b4 	.word	0x200000b4

08006cb4 <__submore>:
 8006cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb8:	460c      	mov	r4, r1
 8006cba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d11c      	bne.n	8006cfe <__submore+0x4a>
 8006cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cc8:	f000 f8c4 	bl	8006e54 <_malloc_r>
 8006ccc:	b918      	cbnz	r0, 8006cd6 <__submore+0x22>
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cda:	63a3      	str	r3, [r4, #56]	; 0x38
 8006cdc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ce2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006ce6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006cea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006cee:	7043      	strb	r3, [r0, #1]
 8006cf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006cf4:	7003      	strb	r3, [r0, #0]
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d00:	0077      	lsls	r7, r6, #1
 8006d02:	463a      	mov	r2, r7
 8006d04:	f000 f904 	bl	8006f10 <_realloc_r>
 8006d08:	4605      	mov	r5, r0
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d0df      	beq.n	8006cce <__submore+0x1a>
 8006d0e:	eb00 0806 	add.w	r8, r0, r6
 8006d12:	4601      	mov	r1, r0
 8006d14:	4632      	mov	r2, r6
 8006d16:	4640      	mov	r0, r8
 8006d18:	f7ff f81e 	bl	8005d58 <memcpy>
 8006d1c:	f8c4 8000 	str.w	r8, [r4]
 8006d20:	6365      	str	r5, [r4, #52]	; 0x34
 8006d22:	63a7      	str	r7, [r4, #56]	; 0x38
 8006d24:	e7e8      	b.n	8006cf8 <__submore+0x44>

08006d26 <__locale_ctype_ptr_l>:
 8006d26:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006d2a:	4770      	bx	lr

08006d2c <__locale_ctype_ptr>:
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <__locale_ctype_ptr+0x14>)
 8006d2e:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <__locale_ctype_ptr+0x18>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf08      	it	eq
 8006d38:	4613      	moveq	r3, r2
 8006d3a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006d3e:	4770      	bx	lr
 8006d40:	20000050 	.word	0x20000050
 8006d44:	200000b4 	.word	0x200000b4

08006d48 <__ascii_mbtowc>:
 8006d48:	b082      	sub	sp, #8
 8006d4a:	b901      	cbnz	r1, 8006d4e <__ascii_mbtowc+0x6>
 8006d4c:	a901      	add	r1, sp, #4
 8006d4e:	b142      	cbz	r2, 8006d62 <__ascii_mbtowc+0x1a>
 8006d50:	b14b      	cbz	r3, 8006d66 <__ascii_mbtowc+0x1e>
 8006d52:	7813      	ldrb	r3, [r2, #0]
 8006d54:	600b      	str	r3, [r1, #0]
 8006d56:	7812      	ldrb	r2, [r2, #0]
 8006d58:	1c10      	adds	r0, r2, #0
 8006d5a:	bf18      	it	ne
 8006d5c:	2001      	movne	r0, #1
 8006d5e:	b002      	add	sp, #8
 8006d60:	4770      	bx	lr
 8006d62:	4610      	mov	r0, r2
 8006d64:	e7fb      	b.n	8006d5e <__ascii_mbtowc+0x16>
 8006d66:	f06f 0001 	mvn.w	r0, #1
 8006d6a:	e7f8      	b.n	8006d5e <__ascii_mbtowc+0x16>

08006d6c <memchr>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	b2c9      	uxtb	r1, r1
 8006d70:	4402      	add	r2, r0
 8006d72:	4290      	cmp	r0, r2
 8006d74:	4603      	mov	r3, r0
 8006d76:	d101      	bne.n	8006d7c <memchr+0x10>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	bd10      	pop	{r4, pc}
 8006d7c:	781c      	ldrb	r4, [r3, #0]
 8006d7e:	3001      	adds	r0, #1
 8006d80:	428c      	cmp	r4, r1
 8006d82:	d1f6      	bne.n	8006d72 <memchr+0x6>
 8006d84:	4618      	mov	r0, r3
 8006d86:	bd10      	pop	{r4, pc}

08006d88 <memmove>:
 8006d88:	4288      	cmp	r0, r1
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	eb01 0302 	add.w	r3, r1, r2
 8006d90:	d803      	bhi.n	8006d9a <memmove+0x12>
 8006d92:	1e42      	subs	r2, r0, #1
 8006d94:	4299      	cmp	r1, r3
 8006d96:	d10c      	bne.n	8006db2 <memmove+0x2a>
 8006d98:	bd10      	pop	{r4, pc}
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	d2f9      	bcs.n	8006d92 <memmove+0xa>
 8006d9e:	1881      	adds	r1, r0, r2
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	42d3      	cmn	r3, r2
 8006da4:	d100      	bne.n	8006da8 <memmove+0x20>
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006db0:	e7f7      	b.n	8006da2 <memmove+0x1a>
 8006db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006dba:	e7eb      	b.n	8006d94 <memmove+0xc>

08006dbc <_free_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	d043      	beq.n	8006e4c <_free_r+0x90>
 8006dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc8:	1f0c      	subs	r4, r1, #4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bfb8      	it	lt
 8006dce:	18e4      	addlt	r4, r4, r3
 8006dd0:	f000 f8e1 	bl	8006f96 <__malloc_lock>
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <_free_r+0x94>)
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	4610      	mov	r0, r2
 8006dda:	b933      	cbnz	r3, 8006dea <_free_r+0x2e>
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6014      	str	r4, [r2, #0]
 8006de0:	4628      	mov	r0, r5
 8006de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de6:	f000 b8d7 	b.w	8006f98 <__malloc_unlock>
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	d90b      	bls.n	8006e06 <_free_r+0x4a>
 8006dee:	6821      	ldr	r1, [r4, #0]
 8006df0:	1862      	adds	r2, r4, r1
 8006df2:	4293      	cmp	r3, r2
 8006df4:	bf01      	itttt	eq
 8006df6:	681a      	ldreq	r2, [r3, #0]
 8006df8:	685b      	ldreq	r3, [r3, #4]
 8006dfa:	1852      	addeq	r2, r2, r1
 8006dfc:	6022      	streq	r2, [r4, #0]
 8006dfe:	6063      	str	r3, [r4, #4]
 8006e00:	6004      	str	r4, [r0, #0]
 8006e02:	e7ed      	b.n	8006de0 <_free_r+0x24>
 8006e04:	4613      	mov	r3, r2
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	b10a      	cbz	r2, 8006e0e <_free_r+0x52>
 8006e0a:	42a2      	cmp	r2, r4
 8006e0c:	d9fa      	bls.n	8006e04 <_free_r+0x48>
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	1858      	adds	r0, r3, r1
 8006e12:	42a0      	cmp	r0, r4
 8006e14:	d10b      	bne.n	8006e2e <_free_r+0x72>
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	4401      	add	r1, r0
 8006e1a:	1858      	adds	r0, r3, r1
 8006e1c:	4282      	cmp	r2, r0
 8006e1e:	6019      	str	r1, [r3, #0]
 8006e20:	d1de      	bne.n	8006de0 <_free_r+0x24>
 8006e22:	6810      	ldr	r0, [r2, #0]
 8006e24:	6852      	ldr	r2, [r2, #4]
 8006e26:	4401      	add	r1, r0
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	e7d8      	b.n	8006de0 <_free_r+0x24>
 8006e2e:	d902      	bls.n	8006e36 <_free_r+0x7a>
 8006e30:	230c      	movs	r3, #12
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	e7d4      	b.n	8006de0 <_free_r+0x24>
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1821      	adds	r1, r4, r0
 8006e3a:	428a      	cmp	r2, r1
 8006e3c:	bf01      	itttt	eq
 8006e3e:	6811      	ldreq	r1, [r2, #0]
 8006e40:	6852      	ldreq	r2, [r2, #4]
 8006e42:	1809      	addeq	r1, r1, r0
 8006e44:	6021      	streq	r1, [r4, #0]
 8006e46:	6062      	str	r2, [r4, #4]
 8006e48:	605c      	str	r4, [r3, #4]
 8006e4a:	e7c9      	b.n	8006de0 <_free_r+0x24>
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	20005294 	.word	0x20005294

08006e54 <_malloc_r>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	1ccd      	adds	r5, r1, #3
 8006e58:	f025 0503 	bic.w	r5, r5, #3
 8006e5c:	3508      	adds	r5, #8
 8006e5e:	2d0c      	cmp	r5, #12
 8006e60:	bf38      	it	cc
 8006e62:	250c      	movcc	r5, #12
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	4606      	mov	r6, r0
 8006e68:	db01      	blt.n	8006e6e <_malloc_r+0x1a>
 8006e6a:	42a9      	cmp	r1, r5
 8006e6c:	d903      	bls.n	8006e76 <_malloc_r+0x22>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	2000      	movs	r0, #0
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	f000 f88e 	bl	8006f96 <__malloc_lock>
 8006e7a:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <_malloc_r+0xb4>)
 8006e7c:	6814      	ldr	r4, [r2, #0]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	b991      	cbnz	r1, 8006ea8 <_malloc_r+0x54>
 8006e82:	4c22      	ldr	r4, [pc, #136]	; (8006f0c <_malloc_r+0xb8>)
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	b91b      	cbnz	r3, 8006e90 <_malloc_r+0x3c>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f867 	bl	8006f5c <_sbrk_r>
 8006e8e:	6020      	str	r0, [r4, #0]
 8006e90:	4629      	mov	r1, r5
 8006e92:	4630      	mov	r0, r6
 8006e94:	f000 f862 	bl	8006f5c <_sbrk_r>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d126      	bne.n	8006eea <_malloc_r+0x96>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	f000 f879 	bl	8006f98 <__malloc_unlock>
 8006ea6:	e7e4      	b.n	8006e72 <_malloc_r+0x1e>
 8006ea8:	680b      	ldr	r3, [r1, #0]
 8006eaa:	1b5b      	subs	r3, r3, r5
 8006eac:	d41a      	bmi.n	8006ee4 <_malloc_r+0x90>
 8006eae:	2b0b      	cmp	r3, #11
 8006eb0:	d90f      	bls.n	8006ed2 <_malloc_r+0x7e>
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	18cc      	adds	r4, r1, r3
 8006eb6:	50cd      	str	r5, [r1, r3]
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f86d 	bl	8006f98 <__malloc_unlock>
 8006ebe:	f104 000b 	add.w	r0, r4, #11
 8006ec2:	1d23      	adds	r3, r4, #4
 8006ec4:	f020 0007 	bic.w	r0, r0, #7
 8006ec8:	1ac3      	subs	r3, r0, r3
 8006eca:	d01b      	beq.n	8006f04 <_malloc_r+0xb0>
 8006ecc:	425a      	negs	r2, r3
 8006ece:	50e2      	str	r2, [r4, r3]
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	428c      	cmp	r4, r1
 8006ed4:	bf0b      	itete	eq
 8006ed6:	6863      	ldreq	r3, [r4, #4]
 8006ed8:	684b      	ldrne	r3, [r1, #4]
 8006eda:	6013      	streq	r3, [r2, #0]
 8006edc:	6063      	strne	r3, [r4, #4]
 8006ede:	bf18      	it	ne
 8006ee0:	460c      	movne	r4, r1
 8006ee2:	e7e9      	b.n	8006eb8 <_malloc_r+0x64>
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	6849      	ldr	r1, [r1, #4]
 8006ee8:	e7ca      	b.n	8006e80 <_malloc_r+0x2c>
 8006eea:	1cc4      	adds	r4, r0, #3
 8006eec:	f024 0403 	bic.w	r4, r4, #3
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d005      	beq.n	8006f00 <_malloc_r+0xac>
 8006ef4:	1a21      	subs	r1, r4, r0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f830 	bl	8006f5c <_sbrk_r>
 8006efc:	3001      	adds	r0, #1
 8006efe:	d0cd      	beq.n	8006e9c <_malloc_r+0x48>
 8006f00:	6025      	str	r5, [r4, #0]
 8006f02:	e7d9      	b.n	8006eb8 <_malloc_r+0x64>
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	bf00      	nop
 8006f08:	20005294 	.word	0x20005294
 8006f0c:	20005298 	.word	0x20005298

08006f10 <_realloc_r>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	4607      	mov	r7, r0
 8006f14:	4614      	mov	r4, r2
 8006f16:	460e      	mov	r6, r1
 8006f18:	b921      	cbnz	r1, 8006f24 <_realloc_r+0x14>
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f20:	f7ff bf98 	b.w	8006e54 <_malloc_r>
 8006f24:	b922      	cbnz	r2, 8006f30 <_realloc_r+0x20>
 8006f26:	f7ff ff49 	bl	8006dbc <_free_r>
 8006f2a:	4625      	mov	r5, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f30:	f000 f833 	bl	8006f9a <_malloc_usable_size_r>
 8006f34:	4284      	cmp	r4, r0
 8006f36:	d90f      	bls.n	8006f58 <_realloc_r+0x48>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	f7ff ff8a 	bl	8006e54 <_malloc_r>
 8006f40:	4605      	mov	r5, r0
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0f2      	beq.n	8006f2c <_realloc_r+0x1c>
 8006f46:	4631      	mov	r1, r6
 8006f48:	4622      	mov	r2, r4
 8006f4a:	f7fe ff05 	bl	8005d58 <memcpy>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ff33 	bl	8006dbc <_free_r>
 8006f56:	e7e9      	b.n	8006f2c <_realloc_r+0x1c>
 8006f58:	4635      	mov	r5, r6
 8006f5a:	e7e7      	b.n	8006f2c <_realloc_r+0x1c>

08006f5c <_sbrk_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4c05      	ldr	r4, [pc, #20]	; (8006f78 <_sbrk_r+0x1c>)
 8006f62:	4605      	mov	r5, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	f7fe fe86 	bl	8005c78 <_sbrk>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d102      	bne.n	8006f76 <_sbrk_r+0x1a>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	b103      	cbz	r3, 8006f76 <_sbrk_r+0x1a>
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	20005448 	.word	0x20005448

08006f7c <__ascii_wctomb>:
 8006f7c:	b149      	cbz	r1, 8006f92 <__ascii_wctomb+0x16>
 8006f7e:	2aff      	cmp	r2, #255	; 0xff
 8006f80:	bf8b      	itete	hi
 8006f82:	238a      	movhi	r3, #138	; 0x8a
 8006f84:	700a      	strbls	r2, [r1, #0]
 8006f86:	6003      	strhi	r3, [r0, #0]
 8006f88:	2001      	movls	r0, #1
 8006f8a:	bf88      	it	hi
 8006f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f90:	4770      	bx	lr
 8006f92:	4608      	mov	r0, r1
 8006f94:	4770      	bx	lr

08006f96 <__malloc_lock>:
 8006f96:	4770      	bx	lr

08006f98 <__malloc_unlock>:
 8006f98:	4770      	bx	lr

08006f9a <_malloc_usable_size_r>:
 8006f9a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f1a0 0004 	sub.w	r0, r0, #4
 8006fa4:	bfbc      	itt	lt
 8006fa6:	580b      	ldrlt	r3, [r1, r0]
 8006fa8:	18c0      	addlt	r0, r0, r3
 8006faa:	4770      	bx	lr

08006fac <_init>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_fini>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr
