
a_pressure_controller_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000548c  20000220  080075b8  00020220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200056ac  080075b8  000256ac  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029ad7  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005465  00000000  00000000  00049d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009eef  00000000  00000000  0004f185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ff0  00000000  00000000  00059078  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013b0  00000000  00000000  0005a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ae80  00000000  00000000  0005b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000059b6  00000000  00000000  00066298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006bc4e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003674  00000000  00000000  0006bccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000220 	.word	0x20000220
 800020c:	00000000 	.word	0x00000000
 8000210:	08006ff8 	.word	0x08006ff8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000224 	.word	0x20000224
 800022c:	08006ff8 	.word	0x08006ff8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_frsub>:
 8000240:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__addsf3>
 8000246:	bf00      	nop

08000248 <__aeabi_fsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800024c <__addsf3>:
 800024c:	0042      	lsls	r2, r0, #1
 800024e:	bf1f      	itttt	ne
 8000250:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000254:	ea92 0f03 	teqne	r2, r3
 8000258:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800025c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000260:	d06a      	beq.n	8000338 <__addsf3+0xec>
 8000262:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000266:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800026a:	bfc1      	itttt	gt
 800026c:	18d2      	addgt	r2, r2, r3
 800026e:	4041      	eorgt	r1, r0
 8000270:	4048      	eorgt	r0, r1
 8000272:	4041      	eorgt	r1, r0
 8000274:	bfb8      	it	lt
 8000276:	425b      	neglt	r3, r3
 8000278:	2b19      	cmp	r3, #25
 800027a:	bf88      	it	hi
 800027c:	4770      	bxhi	lr
 800027e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000282:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000286:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4240      	negne	r0, r0
 800028e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000292:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000296:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800029a:	bf18      	it	ne
 800029c:	4249      	negne	r1, r1
 800029e:	ea92 0f03 	teq	r2, r3
 80002a2:	d03f      	beq.n	8000324 <__addsf3+0xd8>
 80002a4:	f1a2 0201 	sub.w	r2, r2, #1
 80002a8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ac:	eb10 000c 	adds.w	r0, r0, ip
 80002b0:	f1c3 0320 	rsb	r3, r3, #32
 80002b4:	fa01 f103 	lsl.w	r1, r1, r3
 80002b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002bc:	d502      	bpl.n	80002c4 <__addsf3+0x78>
 80002be:	4249      	negs	r1, r1
 80002c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002c8:	d313      	bcc.n	80002f2 <__addsf3+0xa6>
 80002ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ce:	d306      	bcc.n	80002de <__addsf3+0x92>
 80002d0:	0840      	lsrs	r0, r0, #1
 80002d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002d6:	f102 0201 	add.w	r2, r2, #1
 80002da:	2afe      	cmp	r2, #254	; 0xfe
 80002dc:	d251      	bcs.n	8000382 <__addsf3+0x136>
 80002de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002e6:	bf08      	it	eq
 80002e8:	f020 0001 	biceq.w	r0, r0, #1
 80002ec:	ea40 0003 	orr.w	r0, r0, r3
 80002f0:	4770      	bx	lr
 80002f2:	0049      	lsls	r1, r1, #1
 80002f4:	eb40 0000 	adc.w	r0, r0, r0
 80002f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000300:	d1ed      	bne.n	80002de <__addsf3+0x92>
 8000302:	fab0 fc80 	clz	ip, r0
 8000306:	f1ac 0c08 	sub.w	ip, ip, #8
 800030a:	ebb2 020c 	subs.w	r2, r2, ip
 800030e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000312:	bfaa      	itet	ge
 8000314:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000318:	4252      	neglt	r2, r2
 800031a:	4318      	orrge	r0, r3
 800031c:	bfbc      	itt	lt
 800031e:	40d0      	lsrlt	r0, r2
 8000320:	4318      	orrlt	r0, r3
 8000322:	4770      	bx	lr
 8000324:	f092 0f00 	teq	r2, #0
 8000328:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800032c:	bf06      	itte	eq
 800032e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000332:	3201      	addeq	r2, #1
 8000334:	3b01      	subne	r3, #1
 8000336:	e7b5      	b.n	80002a4 <__addsf3+0x58>
 8000338:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800033c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000340:	bf18      	it	ne
 8000342:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000346:	d021      	beq.n	800038c <__addsf3+0x140>
 8000348:	ea92 0f03 	teq	r2, r3
 800034c:	d004      	beq.n	8000358 <__addsf3+0x10c>
 800034e:	f092 0f00 	teq	r2, #0
 8000352:	bf08      	it	eq
 8000354:	4608      	moveq	r0, r1
 8000356:	4770      	bx	lr
 8000358:	ea90 0f01 	teq	r0, r1
 800035c:	bf1c      	itt	ne
 800035e:	2000      	movne	r0, #0
 8000360:	4770      	bxne	lr
 8000362:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000366:	d104      	bne.n	8000372 <__addsf3+0x126>
 8000368:	0040      	lsls	r0, r0, #1
 800036a:	bf28      	it	cs
 800036c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000370:	4770      	bx	lr
 8000372:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000376:	bf3c      	itt	cc
 8000378:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800037c:	4770      	bxcc	lr
 800037e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000382:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000386:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800038a:	4770      	bx	lr
 800038c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000390:	bf16      	itet	ne
 8000392:	4608      	movne	r0, r1
 8000394:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000398:	4601      	movne	r1, r0
 800039a:	0242      	lsls	r2, r0, #9
 800039c:	bf06      	itte	eq
 800039e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003a2:	ea90 0f01 	teqeq	r0, r1
 80003a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003aa:	4770      	bx	lr

080003ac <__aeabi_ui2f>:
 80003ac:	f04f 0300 	mov.w	r3, #0
 80003b0:	e004      	b.n	80003bc <__aeabi_i2f+0x8>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2f>:
 80003b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003b8:	bf48      	it	mi
 80003ba:	4240      	negmi	r0, r0
 80003bc:	ea5f 0c00 	movs.w	ip, r0
 80003c0:	bf08      	it	eq
 80003c2:	4770      	bxeq	lr
 80003c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003c8:	4601      	mov	r1, r0
 80003ca:	f04f 0000 	mov.w	r0, #0
 80003ce:	e01c      	b.n	800040a <__aeabi_l2f+0x2a>

080003d0 <__aeabi_ul2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f04f 0300 	mov.w	r3, #0
 80003dc:	e00a      	b.n	80003f4 <__aeabi_l2f+0x14>
 80003de:	bf00      	nop

080003e0 <__aeabi_l2f>:
 80003e0:	ea50 0201 	orrs.w	r2, r0, r1
 80003e4:	bf08      	it	eq
 80003e6:	4770      	bxeq	lr
 80003e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003ec:	d502      	bpl.n	80003f4 <__aeabi_l2f+0x14>
 80003ee:	4240      	negs	r0, r0
 80003f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f4:	ea5f 0c01 	movs.w	ip, r1
 80003f8:	bf02      	ittt	eq
 80003fa:	4684      	moveq	ip, r0
 80003fc:	4601      	moveq	r1, r0
 80003fe:	2000      	moveq	r0, #0
 8000400:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000404:	bf08      	it	eq
 8000406:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800040a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800040e:	fabc f28c 	clz	r2, ip
 8000412:	3a08      	subs	r2, #8
 8000414:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000418:	db10      	blt.n	800043c <__aeabi_l2f+0x5c>
 800041a:	fa01 fc02 	lsl.w	ip, r1, r2
 800041e:	4463      	add	r3, ip
 8000420:	fa00 fc02 	lsl.w	ip, r0, r2
 8000424:	f1c2 0220 	rsb	r2, r2, #32
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	fa20 f202 	lsr.w	r2, r0, r2
 8000430:	eb43 0002 	adc.w	r0, r3, r2
 8000434:	bf08      	it	eq
 8000436:	f020 0001 	biceq.w	r0, r0, #1
 800043a:	4770      	bx	lr
 800043c:	f102 0220 	add.w	r2, r2, #32
 8000440:	fa01 fc02 	lsl.w	ip, r1, r2
 8000444:	f1c2 0220 	rsb	r2, r2, #32
 8000448:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800044c:	fa21 f202 	lsr.w	r2, r1, r2
 8000450:	eb43 0002 	adc.w	r0, r3, r2
 8000454:	bf08      	it	eq
 8000456:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045a:	4770      	bx	lr

0800045c <__aeabi_fmul>:
 800045c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000460:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000464:	bf1e      	ittt	ne
 8000466:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800046a:	ea92 0f0c 	teqne	r2, ip
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d06f      	beq.n	8000554 <__aeabi_fmul+0xf8>
 8000474:	441a      	add	r2, r3
 8000476:	ea80 0c01 	eor.w	ip, r0, r1
 800047a:	0240      	lsls	r0, r0, #9
 800047c:	bf18      	it	ne
 800047e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000482:	d01e      	beq.n	80004c2 <__aeabi_fmul+0x66>
 8000484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000488:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800048c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000490:	fba0 3101 	umull	r3, r1, r0, r1
 8000494:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000498:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800049c:	bf3e      	ittt	cc
 800049e:	0049      	lslcc	r1, r1, #1
 80004a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004a4:	005b      	lslcc	r3, r3, #1
 80004a6:	ea40 0001 	orr.w	r0, r0, r1
 80004aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ae:	2afd      	cmp	r2, #253	; 0xfd
 80004b0:	d81d      	bhi.n	80004ee <__aeabi_fmul+0x92>
 80004b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ba:	bf08      	it	eq
 80004bc:	f020 0001 	biceq.w	r0, r0, #1
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ca:	bf08      	it	eq
 80004cc:	0249      	lsleq	r1, r1, #9
 80004ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004d6:	3a7f      	subs	r2, #127	; 0x7f
 80004d8:	bfc2      	ittt	gt
 80004da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004e2:	4770      	bxgt	lr
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	3a01      	subs	r2, #1
 80004ee:	dc5d      	bgt.n	80005ac <__aeabi_fmul+0x150>
 80004f0:	f112 0f19 	cmn.w	r2, #25
 80004f4:	bfdc      	itt	le
 80004f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004fa:	4770      	bxle	lr
 80004fc:	f1c2 0200 	rsb	r2, r2, #0
 8000500:	0041      	lsls	r1, r0, #1
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	f1c2 0220 	rsb	r2, r2, #32
 800050a:	fa00 fc02 	lsl.w	ip, r0, r2
 800050e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000512:	f140 0000 	adc.w	r0, r0, #0
 8000516:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800051a:	bf08      	it	eq
 800051c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000520:	4770      	bx	lr
 8000522:	f092 0f00 	teq	r2, #0
 8000526:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800052a:	bf02      	ittt	eq
 800052c:	0040      	lsleq	r0, r0, #1
 800052e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000532:	3a01      	subeq	r2, #1
 8000534:	d0f9      	beq.n	800052a <__aeabi_fmul+0xce>
 8000536:	ea40 000c 	orr.w	r0, r0, ip
 800053a:	f093 0f00 	teq	r3, #0
 800053e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000542:	bf02      	ittt	eq
 8000544:	0049      	lsleq	r1, r1, #1
 8000546:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800054a:	3b01      	subeq	r3, #1
 800054c:	d0f9      	beq.n	8000542 <__aeabi_fmul+0xe6>
 800054e:	ea41 010c 	orr.w	r1, r1, ip
 8000552:	e78f      	b.n	8000474 <__aeabi_fmul+0x18>
 8000554:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000558:	ea92 0f0c 	teq	r2, ip
 800055c:	bf18      	it	ne
 800055e:	ea93 0f0c 	teqne	r3, ip
 8000562:	d00a      	beq.n	800057a <__aeabi_fmul+0x11e>
 8000564:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000568:	bf18      	it	ne
 800056a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800056e:	d1d8      	bne.n	8000522 <__aeabi_fmul+0xc6>
 8000570:	ea80 0001 	eor.w	r0, r0, r1
 8000574:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000578:	4770      	bx	lr
 800057a:	f090 0f00 	teq	r0, #0
 800057e:	bf17      	itett	ne
 8000580:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000584:	4608      	moveq	r0, r1
 8000586:	f091 0f00 	teqne	r1, #0
 800058a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800058e:	d014      	beq.n	80005ba <__aeabi_fmul+0x15e>
 8000590:	ea92 0f0c 	teq	r2, ip
 8000594:	d101      	bne.n	800059a <__aeabi_fmul+0x13e>
 8000596:	0242      	lsls	r2, r0, #9
 8000598:	d10f      	bne.n	80005ba <__aeabi_fmul+0x15e>
 800059a:	ea93 0f0c 	teq	r3, ip
 800059e:	d103      	bne.n	80005a8 <__aeabi_fmul+0x14c>
 80005a0:	024b      	lsls	r3, r1, #9
 80005a2:	bf18      	it	ne
 80005a4:	4608      	movne	r0, r1
 80005a6:	d108      	bne.n	80005ba <__aeabi_fmul+0x15e>
 80005a8:	ea80 0001 	eor.w	r0, r0, r1
 80005ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b8:	4770      	bx	lr
 80005ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005c2:	4770      	bx	lr

080005c4 <__aeabi_fdiv>:
 80005c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005cc:	bf1e      	ittt	ne
 80005ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005d2:	ea92 0f0c 	teqne	r2, ip
 80005d6:	ea93 0f0c 	teqne	r3, ip
 80005da:	d069      	beq.n	80006b0 <__aeabi_fdiv+0xec>
 80005dc:	eba2 0203 	sub.w	r2, r2, r3
 80005e0:	ea80 0c01 	eor.w	ip, r0, r1
 80005e4:	0249      	lsls	r1, r1, #9
 80005e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ea:	d037      	beq.n	800065c <__aeabi_fdiv+0x98>
 80005ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005fc:	428b      	cmp	r3, r1
 80005fe:	bf38      	it	cc
 8000600:	005b      	lslcc	r3, r3, #1
 8000602:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000606:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800060a:	428b      	cmp	r3, r1
 800060c:	bf24      	itt	cs
 800060e:	1a5b      	subcs	r3, r3, r1
 8000610:	ea40 000c 	orrcs.w	r0, r0, ip
 8000614:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000618:	bf24      	itt	cs
 800061a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800061e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000622:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000626:	bf24      	itt	cs
 8000628:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800062c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000630:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000634:	bf24      	itt	cs
 8000636:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800063a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	bf18      	it	ne
 8000642:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000646:	d1e0      	bne.n	800060a <__aeabi_fdiv+0x46>
 8000648:	2afd      	cmp	r2, #253	; 0xfd
 800064a:	f63f af50 	bhi.w	80004ee <__aeabi_fmul+0x92>
 800064e:	428b      	cmp	r3, r1
 8000650:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000654:	bf08      	it	eq
 8000656:	f020 0001 	biceq.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000660:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000664:	327f      	adds	r2, #127	; 0x7f
 8000666:	bfc2      	ittt	gt
 8000668:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800066c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000670:	4770      	bxgt	lr
 8000672:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000676:	f04f 0300 	mov.w	r3, #0
 800067a:	3a01      	subs	r2, #1
 800067c:	e737      	b.n	80004ee <__aeabi_fmul+0x92>
 800067e:	f092 0f00 	teq	r2, #0
 8000682:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000686:	bf02      	ittt	eq
 8000688:	0040      	lsleq	r0, r0, #1
 800068a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800068e:	3a01      	subeq	r2, #1
 8000690:	d0f9      	beq.n	8000686 <__aeabi_fdiv+0xc2>
 8000692:	ea40 000c 	orr.w	r0, r0, ip
 8000696:	f093 0f00 	teq	r3, #0
 800069a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800069e:	bf02      	ittt	eq
 80006a0:	0049      	lsleq	r1, r1, #1
 80006a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006a6:	3b01      	subeq	r3, #1
 80006a8:	d0f9      	beq.n	800069e <__aeabi_fdiv+0xda>
 80006aa:	ea41 010c 	orr.w	r1, r1, ip
 80006ae:	e795      	b.n	80005dc <__aeabi_fdiv+0x18>
 80006b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006b4:	ea92 0f0c 	teq	r2, ip
 80006b8:	d108      	bne.n	80006cc <__aeabi_fdiv+0x108>
 80006ba:	0242      	lsls	r2, r0, #9
 80006bc:	f47f af7d 	bne.w	80005ba <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	f47f af70 	bne.w	80005a8 <__aeabi_fmul+0x14c>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e776      	b.n	80005ba <__aeabi_fmul+0x15e>
 80006cc:	ea93 0f0c 	teq	r3, ip
 80006d0:	d104      	bne.n	80006dc <__aeabi_fdiv+0x118>
 80006d2:	024b      	lsls	r3, r1, #9
 80006d4:	f43f af4c 	beq.w	8000570 <__aeabi_fmul+0x114>
 80006d8:	4608      	mov	r0, r1
 80006da:	e76e      	b.n	80005ba <__aeabi_fmul+0x15e>
 80006dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006e0:	bf18      	it	ne
 80006e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006e6:	d1ca      	bne.n	800067e <__aeabi_fdiv+0xba>
 80006e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006ec:	f47f af5c 	bne.w	80005a8 <__aeabi_fmul+0x14c>
 80006f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006f4:	f47f af3c 	bne.w	8000570 <__aeabi_fmul+0x114>
 80006f8:	e75f      	b.n	80005ba <__aeabi_fmul+0x15e>
 80006fa:	bf00      	nop

080006fc <__gesf2>:
 80006fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000700:	e006      	b.n	8000710 <__cmpsf2+0x4>
 8000702:	bf00      	nop

08000704 <__lesf2>:
 8000704:	f04f 0c01 	mov.w	ip, #1
 8000708:	e002      	b.n	8000710 <__cmpsf2+0x4>
 800070a:	bf00      	nop

0800070c <__cmpsf2>:
 800070c:	f04f 0c01 	mov.w	ip, #1
 8000710:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000714:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000718:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800071c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000720:	bf18      	it	ne
 8000722:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000726:	d011      	beq.n	800074c <__cmpsf2+0x40>
 8000728:	b001      	add	sp, #4
 800072a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800072e:	bf18      	it	ne
 8000730:	ea90 0f01 	teqne	r0, r1
 8000734:	bf58      	it	pl
 8000736:	ebb2 0003 	subspl.w	r0, r2, r3
 800073a:	bf88      	it	hi
 800073c:	17c8      	asrhi	r0, r1, #31
 800073e:	bf38      	it	cc
 8000740:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000744:	bf18      	it	ne
 8000746:	f040 0001 	orrne.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	d102      	bne.n	8000758 <__cmpsf2+0x4c>
 8000752:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000756:	d105      	bne.n	8000764 <__cmpsf2+0x58>
 8000758:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800075c:	d1e4      	bne.n	8000728 <__cmpsf2+0x1c>
 800075e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000762:	d0e1      	beq.n	8000728 <__cmpsf2+0x1c>
 8000764:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_cfrcmple>:
 800076c:	4684      	mov	ip, r0
 800076e:	4608      	mov	r0, r1
 8000770:	4661      	mov	r1, ip
 8000772:	e7ff      	b.n	8000774 <__aeabi_cfcmpeq>

08000774 <__aeabi_cfcmpeq>:
 8000774:	b50f      	push	{r0, r1, r2, r3, lr}
 8000776:	f7ff ffc9 	bl	800070c <__cmpsf2>
 800077a:	2800      	cmp	r0, #0
 800077c:	bf48      	it	mi
 800077e:	f110 0f00 	cmnmi.w	r0, #0
 8000782:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000784 <__aeabi_fcmpeq>:
 8000784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000788:	f7ff fff4 	bl	8000774 <__aeabi_cfcmpeq>
 800078c:	bf0c      	ite	eq
 800078e:	2001      	moveq	r0, #1
 8000790:	2000      	movne	r0, #0
 8000792:	f85d fb08 	ldr.w	pc, [sp], #8
 8000796:	bf00      	nop

08000798 <__aeabi_fcmplt>:
 8000798:	f84d ed08 	str.w	lr, [sp, #-8]!
 800079c:	f7ff ffea 	bl	8000774 <__aeabi_cfcmpeq>
 80007a0:	bf34      	ite	cc
 80007a2:	2001      	movcc	r0, #1
 80007a4:	2000      	movcs	r0, #0
 80007a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007aa:	bf00      	nop

080007ac <__aeabi_fcmple>:
 80007ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b0:	f7ff ffe0 	bl	8000774 <__aeabi_cfcmpeq>
 80007b4:	bf94      	ite	ls
 80007b6:	2001      	movls	r0, #1
 80007b8:	2000      	movhi	r0, #0
 80007ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80007be:	bf00      	nop

080007c0 <__aeabi_fcmpge>:
 80007c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c4:	f7ff ffd2 	bl	800076c <__aeabi_cfrcmple>
 80007c8:	bf94      	ite	ls
 80007ca:	2001      	movls	r0, #1
 80007cc:	2000      	movhi	r0, #0
 80007ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d2:	bf00      	nop

080007d4 <__aeabi_fcmpgt>:
 80007d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d8:	f7ff ffc8 	bl	800076c <__aeabi_cfrcmple>
 80007dc:	bf34      	ite	cc
 80007de:	2001      	movcc	r0, #1
 80007e0:	2000      	movcs	r0, #0
 80007e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007e6:	bf00      	nop

080007e8 <__aeabi_f2iz>:
 80007e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007f0:	d30f      	bcc.n	8000812 <__aeabi_f2iz+0x2a>
 80007f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007fa:	d90d      	bls.n	8000818 <__aeabi_f2iz+0x30>
 80007fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000804:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000808:	fa23 f002 	lsr.w	r0, r3, r2
 800080c:	bf18      	it	ne
 800080e:	4240      	negne	r0, r0
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr
 8000818:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800081c:	d101      	bne.n	8000822 <__aeabi_f2iz+0x3a>
 800081e:	0242      	lsls	r2, r0, #9
 8000820:	d105      	bne.n	800082e <__aeabi_f2iz+0x46>
 8000822:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000826:	bf08      	it	eq
 8000828:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b97a 	b.w	8000b40 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	468c      	mov	ip, r1
 800086a:	460e      	mov	r6, r1
 800086c:	4604      	mov	r4, r0
 800086e:	9d08      	ldr	r5, [sp, #32]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d150      	bne.n	8000916 <__udivmoddi4+0xb2>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d96c      	bls.n	8000954 <__udivmoddi4+0xf0>
 800087a:	fab2 fe82 	clz	lr, r2
 800087e:	f1be 0f00 	cmp.w	lr, #0
 8000882:	d00b      	beq.n	800089c <__udivmoddi4+0x38>
 8000884:	f1ce 0c20 	rsb	ip, lr, #32
 8000888:	fa01 f60e 	lsl.w	r6, r1, lr
 800088c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000890:	fa02 f70e 	lsl.w	r7, r2, lr
 8000894:	ea4c 0c06 	orr.w	ip, ip, r6
 8000898:	fa00 f40e 	lsl.w	r4, r0, lr
 800089c:	0c3a      	lsrs	r2, r7, #16
 800089e:	fbbc f9f2 	udiv	r9, ip, r2
 80008a2:	b2bb      	uxth	r3, r7
 80008a4:	fb02 cc19 	mls	ip, r2, r9, ip
 80008a8:	fb09 fa03 	mul.w	sl, r9, r3
 80008ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80008b0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80008b4:	45b2      	cmp	sl, r6
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x6a>
 80008b8:	19f6      	adds	r6, r6, r7
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80008be:	f080 8125 	bcs.w	8000b0c <__udivmoddi4+0x2a8>
 80008c2:	45b2      	cmp	sl, r6
 80008c4:	f240 8122 	bls.w	8000b0c <__udivmoddi4+0x2a8>
 80008c8:	f1a9 0902 	sub.w	r9, r9, #2
 80008cc:	443e      	add	r6, r7
 80008ce:	eba6 060a 	sub.w	r6, r6, sl
 80008d2:	fbb6 f0f2 	udiv	r0, r6, r2
 80008d6:	fb02 6610 	mls	r6, r2, r0, r6
 80008da:	fb00 f303 	mul.w	r3, r0, r3
 80008de:	b2a4      	uxth	r4, r4
 80008e0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80008e4:	42a3      	cmp	r3, r4
 80008e6:	d909      	bls.n	80008fc <__udivmoddi4+0x98>
 80008e8:	19e4      	adds	r4, r4, r7
 80008ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ee:	f080 810b 	bcs.w	8000b08 <__udivmoddi4+0x2a4>
 80008f2:	42a3      	cmp	r3, r4
 80008f4:	f240 8108 	bls.w	8000b08 <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	443c      	add	r4, r7
 80008fc:	2100      	movs	r1, #0
 80008fe:	1ae4      	subs	r4, r4, r3
 8000900:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000904:	2d00      	cmp	r5, #0
 8000906:	d062      	beq.n	80009ce <__udivmoddi4+0x16a>
 8000908:	2300      	movs	r3, #0
 800090a:	fa24 f40e 	lsr.w	r4, r4, lr
 800090e:	602c      	str	r4, [r5, #0]
 8000910:	606b      	str	r3, [r5, #4]
 8000912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000916:	428b      	cmp	r3, r1
 8000918:	d907      	bls.n	800092a <__udivmoddi4+0xc6>
 800091a:	2d00      	cmp	r5, #0
 800091c:	d055      	beq.n	80009ca <__udivmoddi4+0x166>
 800091e:	2100      	movs	r1, #0
 8000920:	e885 0041 	stmia.w	r5, {r0, r6}
 8000924:	4608      	mov	r0, r1
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	f040 808f 	bne.w	8000a52 <__udivmoddi4+0x1ee>
 8000934:	42b3      	cmp	r3, r6
 8000936:	d302      	bcc.n	800093e <__udivmoddi4+0xda>
 8000938:	4282      	cmp	r2, r0
 800093a:	f200 80fc 	bhi.w	8000b36 <__udivmoddi4+0x2d2>
 800093e:	1a84      	subs	r4, r0, r2
 8000940:	eb66 0603 	sbc.w	r6, r6, r3
 8000944:	2001      	movs	r0, #1
 8000946:	46b4      	mov	ip, r6
 8000948:	2d00      	cmp	r5, #0
 800094a:	d040      	beq.n	80009ce <__udivmoddi4+0x16a>
 800094c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000954:	b912      	cbnz	r2, 800095c <__udivmoddi4+0xf8>
 8000956:	2701      	movs	r7, #1
 8000958:	fbb7 f7f2 	udiv	r7, r7, r2
 800095c:	fab7 fe87 	clz	lr, r7
 8000960:	f1be 0f00 	cmp.w	lr, #0
 8000964:	d135      	bne.n	80009d2 <__udivmoddi4+0x16e>
 8000966:	2101      	movs	r1, #1
 8000968:	1bf6      	subs	r6, r6, r7
 800096a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800096e:	fa1f f887 	uxth.w	r8, r7
 8000972:	fbb6 f2fc 	udiv	r2, r6, ip
 8000976:	fb0c 6612 	mls	r6, ip, r2, r6
 800097a:	fb08 f002 	mul.w	r0, r8, r2
 800097e:	0c23      	lsrs	r3, r4, #16
 8000980:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000984:	42b0      	cmp	r0, r6
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0x134>
 8000988:	19f6      	adds	r6, r6, r7
 800098a:	f102 33ff 	add.w	r3, r2, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x132>
 8000990:	42b0      	cmp	r0, r6
 8000992:	f200 80d2 	bhi.w	8000b3a <__udivmoddi4+0x2d6>
 8000996:	461a      	mov	r2, r3
 8000998:	1a36      	subs	r6, r6, r0
 800099a:	fbb6 f0fc 	udiv	r0, r6, ip
 800099e:	fb0c 6610 	mls	r6, ip, r0, r6
 80009a2:	fb08 f800 	mul.w	r8, r8, r0
 80009a6:	b2a3      	uxth	r3, r4
 80009a8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0x15c>
 80009b0:	19e4      	adds	r4, r4, r7
 80009b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x15a>
 80009b8:	45a0      	cmp	r8, r4
 80009ba:	f200 80b9 	bhi.w	8000b30 <__udivmoddi4+0x2cc>
 80009be:	4618      	mov	r0, r3
 80009c0:	eba4 0408 	sub.w	r4, r4, r8
 80009c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80009c8:	e79c      	b.n	8000904 <__udivmoddi4+0xa0>
 80009ca:	4629      	mov	r1, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80009d6:	f1ce 0320 	rsb	r3, lr, #32
 80009da:	fa26 f203 	lsr.w	r2, r6, r3
 80009de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80009e2:	fbb2 f1fc 	udiv	r1, r2, ip
 80009e6:	fa1f f887 	uxth.w	r8, r7
 80009ea:	fb0c 2211 	mls	r2, ip, r1, r2
 80009ee:	fa06 f60e 	lsl.w	r6, r6, lr
 80009f2:	fa20 f303 	lsr.w	r3, r0, r3
 80009f6:	fb01 f908 	mul.w	r9, r1, r8
 80009fa:	4333      	orrs	r3, r6
 80009fc:	0c1e      	lsrs	r6, r3, #16
 80009fe:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a02:	45b1      	cmp	r9, r6
 8000a04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0x1ba>
 8000a0a:	19f6      	adds	r6, r6, r7
 8000a0c:	f101 32ff 	add.w	r2, r1, #4294967295
 8000a10:	f080 808c 	bcs.w	8000b2c <__udivmoddi4+0x2c8>
 8000a14:	45b1      	cmp	r9, r6
 8000a16:	f240 8089 	bls.w	8000b2c <__udivmoddi4+0x2c8>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	443e      	add	r6, r7
 8000a1e:	eba6 0609 	sub.w	r6, r6, r9
 8000a22:	fbb6 f0fc 	udiv	r0, r6, ip
 8000a26:	fb0c 6210 	mls	r2, ip, r0, r6
 8000a2a:	fb00 f908 	mul.w	r9, r0, r8
 8000a2e:	b29e      	uxth	r6, r3
 8000a30:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000a34:	45b1      	cmp	r9, r6
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1e4>
 8000a38:	19f6      	adds	r6, r6, r7
 8000a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a3e:	d271      	bcs.n	8000b24 <__udivmoddi4+0x2c0>
 8000a40:	45b1      	cmp	r9, r6
 8000a42:	d96f      	bls.n	8000b24 <__udivmoddi4+0x2c0>
 8000a44:	3802      	subs	r0, #2
 8000a46:	443e      	add	r6, r7
 8000a48:	eba6 0609 	sub.w	r6, r6, r9
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	e78f      	b.n	8000972 <__udivmoddi4+0x10e>
 8000a52:	f1c1 0720 	rsb	r7, r1, #32
 8000a56:	fa22 f807 	lsr.w	r8, r2, r7
 8000a5a:	408b      	lsls	r3, r1
 8000a5c:	ea48 0303 	orr.w	r3, r8, r3
 8000a60:	fa26 f407 	lsr.w	r4, r6, r7
 8000a64:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000a68:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a6c:	fa1f fc83 	uxth.w	ip, r3
 8000a70:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a74:	408e      	lsls	r6, r1
 8000a76:	fa20 f807 	lsr.w	r8, r0, r7
 8000a7a:	fb09 fa0c 	mul.w	sl, r9, ip
 8000a7e:	ea48 0806 	orr.w	r8, r8, r6
 8000a82:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000a86:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000a8a:	45a2      	cmp	sl, r4
 8000a8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000a90:	fa00 f601 	lsl.w	r6, r0, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x244>
 8000a96:	18e4      	adds	r4, r4, r3
 8000a98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a9c:	d244      	bcs.n	8000b28 <__udivmoddi4+0x2c4>
 8000a9e:	45a2      	cmp	sl, r4
 8000aa0:	d942      	bls.n	8000b28 <__udivmoddi4+0x2c4>
 8000aa2:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa6:	441c      	add	r4, r3
 8000aa8:	eba4 040a 	sub.w	r4, r4, sl
 8000aac:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ab0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ab4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab8:	fa1f f888 	uxth.w	r8, r8
 8000abc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d907      	bls.n	8000ad4 <__udivmoddi4+0x270>
 8000ac4:	18e4      	adds	r4, r4, r3
 8000ac6:	f100 3eff 	add.w	lr, r0, #4294967295
 8000aca:	d229      	bcs.n	8000b20 <__udivmoddi4+0x2bc>
 8000acc:	45a4      	cmp	ip, r4
 8000ace:	d927      	bls.n	8000b20 <__udivmoddi4+0x2bc>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	441c      	add	r4, r3
 8000ad4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad8:	fba0 8902 	umull	r8, r9, r0, r2
 8000adc:	eba4 0c0c 	sub.w	ip, r4, ip
 8000ae0:	45cc      	cmp	ip, r9
 8000ae2:	46c2      	mov	sl, r8
 8000ae4:	46ce      	mov	lr, r9
 8000ae6:	d315      	bcc.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae8:	d012      	beq.n	8000b10 <__udivmoddi4+0x2ac>
 8000aea:	b155      	cbz	r5, 8000b02 <__udivmoddi4+0x29e>
 8000aec:	ebb6 030a 	subs.w	r3, r6, sl
 8000af0:	eb6c 060e 	sbc.w	r6, ip, lr
 8000af4:	fa06 f707 	lsl.w	r7, r6, r7
 8000af8:	40cb      	lsrs	r3, r1
 8000afa:	431f      	orrs	r7, r3
 8000afc:	40ce      	lsrs	r6, r1
 8000afe:	602f      	str	r7, [r5, #0]
 8000b00:	606e      	str	r6, [r5, #4]
 8000b02:	2100      	movs	r1, #0
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6f7      	b.n	80008fc <__udivmoddi4+0x98>
 8000b0c:	4689      	mov	r9, r1
 8000b0e:	e6de      	b.n	80008ce <__udivmoddi4+0x6a>
 8000b10:	4546      	cmp	r6, r8
 8000b12:	d2ea      	bcs.n	8000aea <__udivmoddi4+0x286>
 8000b14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000b18:	eb69 0e03 	sbc.w	lr, r9, r3
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	e7e4      	b.n	8000aea <__udivmoddi4+0x286>
 8000b20:	4670      	mov	r0, lr
 8000b22:	e7d7      	b.n	8000ad4 <__udivmoddi4+0x270>
 8000b24:	4618      	mov	r0, r3
 8000b26:	e78f      	b.n	8000a48 <__udivmoddi4+0x1e4>
 8000b28:	4681      	mov	r9, r0
 8000b2a:	e7bd      	b.n	8000aa8 <__udivmoddi4+0x244>
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	e776      	b.n	8000a1e <__udivmoddi4+0x1ba>
 8000b30:	3802      	subs	r0, #2
 8000b32:	443c      	add	r4, r7
 8000b34:	e744      	b.n	80009c0 <__udivmoddi4+0x15c>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b3a:	3a02      	subs	r2, #2
 8000b3c:	443e      	add	r6, r7
 8000b3e:	e72b      	b.n	8000998 <__udivmoddi4+0x134>

08000b40 <__aeabi_idiv0>:
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_InitTick+0x3c>)
{
 8000b48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4a:	7818      	ldrb	r0, [r3, #0]
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_InitTick+0x40>)
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5c:	f000 fbda 	bl	8001314 <HAL_SYSTICK_Config>
 8000b60:	4604      	mov	r4, r0
 8000b62:	b958      	cbnz	r0, 8000b7c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b64:	2d0f      	cmp	r5, #15
 8000b66:	d809      	bhi.n	8000b7c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4629      	mov	r1, r5
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 fb90 	bl	8001294 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_InitTick+0x44>)
 8000b76:	4620      	mov	r0, r4
 8000b78:	601d      	str	r5, [r3, #0]
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b7c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	2000004c 	.word	0x2000004c
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x20>)
{
 8000b8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	f000 fb69 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff ffd0 	bl	8000b44 <HAL_InitTick>
  HAL_MspInit();
 8000ba4:	f004 ff70 	bl	8005a88 <HAL_MspInit>
}
 8000ba8:	2000      	movs	r0, #0
 8000baa:	bd08      	pop	{r3, pc}
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x10>)
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_IncTick+0x14>)
 8000bb4:	6811      	ldr	r1, [r2, #0]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	440b      	add	r3, r1
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200054f0 	.word	0x200054f0
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bc8:	4b01      	ldr	r3, [pc, #4]	; (8000bd0 <HAL_GetTick+0x8>)
 8000bca:	6818      	ldr	r0, [r3, #0]
}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200054f0 	.word	0x200054f0

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b538      	push	{r3, r4, r5, lr}
 8000bd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff fff6 	bl	8000bc8 <HAL_GetTick>
 8000bdc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000be0:	bf1e      	ittt	ne
 8000be2:	4b04      	ldrne	r3, [pc, #16]	; (8000bf4 <HAL_Delay+0x20>)
 8000be4:	781b      	ldrbne	r3, [r3, #0]
 8000be6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	1b40      	subs	r0, r0, r5
 8000bee:	4284      	cmp	r4, r0
 8000bf0:	d8fa      	bhi.n	8000be8 <HAL_Delay+0x14>
  {
  }
}
 8000bf2:	bd38      	pop	{r3, r4, r5, pc}
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <HAL_GetUID+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_GetUID+0x18>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetUID+0x1c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6083      	str	r3, [r0, #8]
 8000c0a:	4770      	bx	lr
 8000c0c:	1ffff7e8 	.word	0x1ffff7e8
 8000c10:	1ffff7ec 	.word	0x1ffff7ec
 8000c14:	1ffff7f0 	.word	0x1ffff7f0

08000c18 <HAL_ADC_ConvCpltCallback>:
 8000c18:	4770      	bx	lr

08000c1a <HAL_ADC_LevelOutOfWindowCallback>:
 8000c1a:	4770      	bx	lr

08000c1c <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c1c:	6803      	ldr	r3, [r0, #0]
{
 8000c1e:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c20:	685a      	ldr	r2, [r3, #4]
{
 8000c22:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c24:	0690      	lsls	r0, r2, #26
 8000c26:	d527      	bpl.n	8000c78 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	0791      	lsls	r1, r2, #30
 8000c2c:	d524      	bpl.n	8000c78 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c30:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c32:	bf5e      	ittt	pl
 8000c34:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c36:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000c3a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c42:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c46:	d110      	bne.n	8000c6a <HAL_ADC_IRQHandler+0x4e>
 8000c48:	68e2      	ldr	r2, [r4, #12]
 8000c4a:	b972      	cbnz	r2, 8000c6a <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	f022 0220 	bic.w	r2, r2, #32
 8000c52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c5e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c60:	bf5e      	ittt	pl
 8000c62:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c64:	f043 0301 	orrpl.w	r3, r3, #1
 8000c68:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ffd4 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c70:	f06f 0212 	mvn.w	r2, #18
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	0610      	lsls	r0, r2, #24
 8000c7e:	d530      	bpl.n	8000ce2 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	0751      	lsls	r1, r2, #29
 8000c84:	d52d      	bpl.n	8000ce2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c88:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c8a:	bf5e      	ittt	pl
 8000c8c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c8e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000c92:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000c9a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000c9e:	d00a      	beq.n	8000cb6 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ca0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ca2:	0550      	lsls	r0, r2, #21
 8000ca4:	d416      	bmi.n	8000cd4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cac:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cb0:	d110      	bne.n	8000cd4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cb2:	68e2      	ldr	r2, [r4, #12]
 8000cb4:	b972      	cbnz	r2, 8000cd4 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cbc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cc4:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cc8:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cca:	bf5e      	ittt	pl
 8000ccc:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000cce:	f043 0301 	orrpl.w	r3, r3, #1
 8000cd2:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f004 fb8b 	bl	80053f0 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cda:	f06f 020c 	mvn.w	r2, #12
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	0652      	lsls	r2, r2, #25
 8000ce8:	d50d      	bpl.n	8000d06 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	07db      	lsls	r3, r3, #31
 8000cee:	d50a      	bpl.n	8000d06 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cf2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cfa:	f7ff ff8e 	bl	8000c1a <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cfe:	f06f 0201 	mvn.w	r2, #1
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	bd10      	pop	{r4, pc}

08000d08 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000d08:	2300      	movs	r3, #0
{ 
 8000d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000d0c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d0e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d074      	beq.n	8000e00 <HAL_ADC_ConfigChannel+0xf8>
 8000d16:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d18:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000d1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d1e:	2d06      	cmp	r5, #6
 8000d20:	6802      	ldr	r2, [r0, #0]
 8000d22:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000d26:	680c      	ldr	r4, [r1, #0]
 8000d28:	d825      	bhi.n	8000d76 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d2a:	442b      	add	r3, r5
 8000d2c:	251f      	movs	r5, #31
 8000d2e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000d30:	3b05      	subs	r3, #5
 8000d32:	409d      	lsls	r5, r3
 8000d34:	ea26 0505 	bic.w	r5, r6, r5
 8000d38:	fa04 f303 	lsl.w	r3, r4, r3
 8000d3c:	432b      	orrs	r3, r5
 8000d3e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d40:	2c09      	cmp	r4, #9
 8000d42:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000d46:	688d      	ldr	r5, [r1, #8]
 8000d48:	d92f      	bls.n	8000daa <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d4a:	2607      	movs	r6, #7
 8000d4c:	4423      	add	r3, r4
 8000d4e:	68d1      	ldr	r1, [r2, #12]
 8000d50:	3b1e      	subs	r3, #30
 8000d52:	409e      	lsls	r6, r3
 8000d54:	ea21 0106 	bic.w	r1, r1, r6
 8000d58:	fa05 f303 	lsl.w	r3, r5, r3
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d60:	f1a4 0310 	sub.w	r3, r4, #16
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d92b      	bls.n	8000dc0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	b002      	add	sp, #8
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d76:	2d0c      	cmp	r5, #12
 8000d78:	d80b      	bhi.n	8000d92 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d7a:	442b      	add	r3, r5
 8000d7c:	251f      	movs	r5, #31
 8000d7e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d80:	3b23      	subs	r3, #35	; 0x23
 8000d82:	409d      	lsls	r5, r3
 8000d84:	ea26 0505 	bic.w	r5, r6, r5
 8000d88:	fa04 f303 	lsl.w	r3, r4, r3
 8000d8c:	432b      	orrs	r3, r5
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	e7d6      	b.n	8000d40 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d92:	442b      	add	r3, r5
 8000d94:	251f      	movs	r5, #31
 8000d96:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000d98:	3b41      	subs	r3, #65	; 0x41
 8000d9a:	409d      	lsls	r5, r3
 8000d9c:	ea26 0505 	bic.w	r5, r6, r5
 8000da0:	fa04 f303 	lsl.w	r3, r4, r3
 8000da4:	432b      	orrs	r3, r5
 8000da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000da8:	e7ca      	b.n	8000d40 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000daa:	2607      	movs	r6, #7
 8000dac:	6911      	ldr	r1, [r2, #16]
 8000dae:	4423      	add	r3, r4
 8000db0:	409e      	lsls	r6, r3
 8000db2:	ea21 0106 	bic.w	r1, r1, r6
 8000db6:	fa05 f303 	lsl.w	r3, r5, r3
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6113      	str	r3, [r2, #16]
 8000dbe:	e7cf      	b.n	8000d60 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_ADC_ConfigChannel+0xfc>)
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d116      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dc6:	6893      	ldr	r3, [r2, #8]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	d4cd      	bmi.n	8000d68 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dcc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dce:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dd6:	d1c7      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_ADC_ConfigChannel+0x100>)
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_ADC_ConfigChannel+0x104>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de2:	230a      	movs	r3, #10
 8000de4:	4353      	muls	r3, r2
            wait_loop_index--;
 8000de6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0bc      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	e7f8      	b.n	8000de6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e7b4      	b.n	8000d6a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000e00:	2302      	movs	r3, #2
 8000e02:	e7b5      	b.n	8000d70 <HAL_ADC_ConfigChannel+0x68>
 8000e04:	40012400 	.word	0x40012400
 8000e08:	2000004c 	.word	0x2000004c
 8000e0c:	000f4240 	.word	0x000f4240

08000e10 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000e10:	2300      	movs	r3, #0
{
 8000e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e14:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e16:	6803      	ldr	r3, [r0, #0]
{
 8000e18:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	07d2      	lsls	r2, r2, #31
 8000e1e:	d502      	bpl.n	8000e26 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e20:	2000      	movs	r0, #0
}
 8000e22:	b002      	add	sp, #8
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <ADC_Enable+0x68>)
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <ADC_Enable+0x6c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000e38:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e3a:	9b01      	ldr	r3, [sp, #4]
 8000e3c:	b9c3      	cbnz	r3, 8000e70 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000e3e:	f7ff fec3 	bl	8000bc8 <HAL_GetTick>
 8000e42:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	689d      	ldr	r5, [r3, #8]
 8000e48:	f015 0501 	ands.w	r5, r5, #1
 8000e4c:	d1e8      	bne.n	8000e20 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e4e:	f7ff febb 	bl	8000bc8 <HAL_GetTick>
 8000e52:	1b80      	subs	r0, r0, r6
 8000e54:	2802      	cmp	r0, #2
 8000e56:	d9f5      	bls.n	8000e44 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000e5a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000e66:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e6e:	e7d8      	b.n	8000e22 <ADC_Enable+0x12>
      wait_loop_index--;
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	e7e0      	b.n	8000e38 <ADC_Enable+0x28>
 8000e76:	bf00      	nop
 8000e78:	2000004c 	.word	0x2000004c
 8000e7c:	000f4240 	.word	0x000f4240

08000e80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e80:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e82:	6803      	ldr	r3, [r0, #0]
{
 8000e84:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	07d2      	lsls	r2, r2, #31
 8000e8a:	d401      	bmi.n	8000e90 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e98:	f7ff fe96 	bl	8000bc8 <HAL_GetTick>
 8000e9c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	07db      	lsls	r3, r3, #31
 8000ea4:	d5f2      	bpl.n	8000e8c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ea6:	f7ff fe8f 	bl	8000bc8 <HAL_GetTick>
 8000eaa:	1b40      	subs	r0, r0, r5
 8000eac:	2802      	cmp	r0, #2
 8000eae:	d9f6      	bls.n	8000e9e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}

08000ec4 <HAL_ADC_Init>:
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d071      	beq.n	8000fb0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ecc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ece:	b923      	cbnz	r3, 8000eda <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000ed2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000ed6:	f004 fdff 	bl	8005ad8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff ffd0 	bl	8000e80 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ee2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ee8:	d164      	bne.n	8000fb4 <HAL_ADC_Init+0xf0>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d162      	bne.n	8000fb4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000eee:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000ef4:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	f023 0302 	bic.w	r3, r3, #2
 8000efa:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000efe:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f00:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f04:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f0a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f0e:	d038      	beq.n	8000f82 <HAL_ADC_Init+0xbe>
 8000f10:	2901      	cmp	r1, #1
 8000f12:	bf14      	ite	ne
 8000f14:	4606      	movne	r6, r0
 8000f16:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f1a:	6965      	ldr	r5, [r4, #20]
 8000f1c:	2d01      	cmp	r5, #1
 8000f1e:	d107      	bne.n	8000f30 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d130      	bne.n	8000f86 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f24:	69a3      	ldr	r3, [r4, #24]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000f2c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000f30:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f32:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000f36:	685d      	ldr	r5, [r3, #4]
 8000f38:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000f3c:	ea45 0506 	orr.w	r5, r5, r6
 8000f40:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f42:	689e      	ldr	r6, [r3, #8]
 8000f44:	4d1d      	ldr	r5, [pc, #116]	; (8000fbc <HAL_ADC_Init+0xf8>)
 8000f46:	ea05 0506 	and.w	r5, r5, r6
 8000f4a:	ea45 0502 	orr.w	r5, r5, r2
 8000f4e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f50:	d001      	beq.n	8000f56 <HAL_ADC_Init+0x92>
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d120      	bne.n	8000f98 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f56:	6921      	ldr	r1, [r4, #16]
 8000f58:	3901      	subs	r1, #1
 8000f5a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000f5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000f5e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000f62:	4329      	orrs	r1, r5
 8000f64:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f66:	6899      	ldr	r1, [r3, #8]
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_ADC_Init+0xfc>)
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d115      	bne.n	8000f9c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f70:	2300      	movs	r3, #0
 8000f72:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f76:	f023 0303 	bic.w	r3, r3, #3
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f82:	460e      	mov	r6, r1
 8000f84:	e7c9      	b.n	8000f1a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f96:	e7cb      	b.n	8000f30 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000f98:	2100      	movs	r1, #0
 8000f9a:	e7df      	b.n	8000f5c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f9e:	f023 0312 	bic.w	r3, r3, #18
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
}
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fba:	e7f9      	b.n	8000fb0 <HAL_ADC_Init+0xec>
 8000fbc:	ffe1f7fd 	.word	0xffe1f7fd
 8000fc0:	ff1f0efe 	.word	0xff1f0efe

08000fc4 <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000fc8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000fca:	2b01      	cmp	r3, #1
{
 8000fcc:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000fce:	d04e      	beq.n	800106e <HAL_ADCEx_InjectedStart_IT+0xaa>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000fd6:	f7ff ff1b 	bl	8000e10 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d143      	bne.n	8001066 <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fee:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d105      	bne.n	8001002 <HAL_ADCEx_InjectedStart_IT+0x3e>
 8000ff6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000ffa:	6852      	ldr	r2, [r2, #4]
 8000ffc:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001000:	d129      	bne.n	8001056 <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001004:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001008:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800100a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800100c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001010:	bf08      	it	eq
 8001012:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001014:	2200      	movs	r2, #0
 8001016:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800101a:	f06f 0204 	mvn.w	r2, #4
 800101e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001026:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	0552      	lsls	r2, r2, #21
 800102c:	d420      	bmi.n	8001070 <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001034:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001038:	d111      	bne.n	800105e <HAL_ADCEx_InjectedStart_IT+0x9a>
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADCEx_InjectedStart_IT+0xb0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d105      	bne.n	800104c <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001040:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001044:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001046:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800104a:	d108      	bne.n	800105e <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001056:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001058:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800105c:	e7d4      	b.n	8001008 <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001064:	e7f5      	b.n	8001052 <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001066:	2300      	movs	r3, #0
 8001068:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800106c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800106e:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop
 8001074:	40012800 	.word	0x40012800

08001078 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001078:	2903      	cmp	r1, #3
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	d007      	beq.n	800108e <HAL_ADCEx_InjectedGetValue+0x16>
 800107e:	2904      	cmp	r1, #4
 8001080:	d003      	beq.n	800108a <HAL_ADCEx_InjectedGetValue+0x12>
 8001082:	2902      	cmp	r1, #2
 8001084:	d105      	bne.n	8001092 <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001086:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8001088:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 800108a:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 800108c:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 800108e:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 8001090:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001092:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 8001094:	4770      	bx	lr
	...

08001098 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800109a:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800109c:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 80010a2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	f000 80d8 	beq.w	800125a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 80010aa:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ac:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 80010b0:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 80010b4:	684e      	ldr	r6, [r1, #4]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010ba:	f1be 0f00 	cmp.w	lr, #0
 80010be:	d17b      	bne.n	80011b8 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80010c0:	42be      	cmp	r6, r7
 80010c2:	d173      	bne.n	80011ac <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c4:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80010c6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80010c8:	0da4      	lsrs	r4, r4, #22
 80010ca:	05a4      	lsls	r4, r4, #22
 80010cc:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 80010d0:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d2:	689c      	ldr	r4, [r3, #8]
 80010d4:	07e4      	lsls	r4, r4, #31
 80010d6:	d407      	bmi.n	80010e8 <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80010d8:	689c      	ldr	r4, [r3, #8]
 80010da:	69cf      	ldr	r7, [r1, #28]
 80010dc:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80010e0:	f024 0401 	bic.w	r4, r4, #1
 80010e4:	433c      	orrs	r4, r7
 80010e6:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80010e8:	698c      	ldr	r4, [r1, #24]
 80010ea:	2c01      	cmp	r4, #1
 80010ec:	d10d      	bne.n	800110a <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80010ee:	69cf      	ldr	r7, [r1, #28]
 80010f0:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f4:	bf17      	itett	ne
 80010f6:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80010f8:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fa:	f040 0020 	orrne.w	r0, r0, #32
 80010fe:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001100:	bf12      	itee	ne
 8001102:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001104:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8001108:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800110a:	694f      	ldr	r7, [r1, #20]
 800110c:	2f01      	cmp	r7, #1
 800110e:	d105      	bne.n	800111c <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001110:	2c00      	cmp	r4, #0
 8001112:	d174      	bne.n	80011fe <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001114:	685c      	ldr	r4, [r3, #4]
 8001116:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 800111a:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800111c:	2d09      	cmp	r5, #9
 800111e:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8001122:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001126:	d970      	bls.n	800120a <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001128:	f04f 0c07 	mov.w	ip, #7
 800112c:	442c      	add	r4, r5
 800112e:	68df      	ldr	r7, [r3, #12]
 8001130:	3c1e      	subs	r4, #30
 8001132:	fa0c fc04 	lsl.w	ip, ip, r4
 8001136:	ea27 070c 	bic.w	r7, r7, ip
 800113a:	fa0e f404 	lsl.w	r4, lr, r4
 800113e:	433c      	orrs	r4, r7
 8001140:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001142:	f1a5 0410 	sub.w	r4, r5, #16
 8001146:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001148:	bf98      	it	ls
 800114a:	689f      	ldrls	r7, [r3, #8]
 800114c:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800126c <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 8001150:	bf9c      	itt	ls
 8001152:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 8001156:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001158:	2e02      	cmp	r6, #2
 800115a:	68cf      	ldr	r7, [r1, #12]
 800115c:	d062      	beq.n	8001224 <HAL_ADCEx_InjectedConfigChannel+0x18c>
 800115e:	2e03      	cmp	r6, #3
 8001160:	d066      	beq.n	8001230 <HAL_ADCEx_InjectedConfigChannel+0x198>
 8001162:	2e01      	cmp	r6, #1
 8001164:	d16a      	bne.n	800123c <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001166:	6959      	ldr	r1, [r3, #20]
 8001168:	ea01 010e 	and.w	r1, r1, lr
 800116c:	4339      	orrs	r1, r7
 800116e:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001170:	2c01      	cmp	r4, #1
 8001172:	d816      	bhi.n	80011a2 <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001174:	493a      	ldr	r1, [pc, #232]	; (8001260 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8001176:	428b      	cmp	r3, r1
 8001178:	d169      	bne.n	800124e <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800117a:	6899      	ldr	r1, [r3, #8]
 800117c:	0209      	lsls	r1, r1, #8
 800117e:	d410      	bmi.n	80011a2 <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001180:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8001182:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001184:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001188:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800118a:	d10a      	bne.n	80011a2 <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 800118e:	4936      	ldr	r1, [pc, #216]	; (8001268 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	fbb3 f1f1 	udiv	r1, r3, r1
 8001196:	230a      	movs	r3, #10
 8001198:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 800119a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800119c:	9b01      	ldr	r3, [sp, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d152      	bne.n	8001248 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a2:	2300      	movs	r3, #0
 80011a4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80011a8:	b003      	add	sp, #12
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ac:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011ae:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	f044 0420 	orr.w	r4, r4, #32
 80011b4:	6294      	str	r4, [r2, #40]	; 0x28
 80011b6:	e78c      	b.n	80010d2 <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011b8:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011ba:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 80011be:	1bf4      	subs	r4, r6, r7
 80011c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011c4:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011c6:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011ca:	d810      	bhi.n	80011ee <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011d0:	fa05 f704 	lsl.w	r7, r5, r4
 80011d4:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 80011d8:	f04f 0c1f 	mov.w	ip, #31
 80011dc:	fa0c f404 	lsl.w	r4, ip, r4
 80011e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80011e4:	ea2e 0404 	bic.w	r4, lr, r4
 80011e8:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80011ea:	639c      	str	r4, [r3, #56]	; 0x38
 80011ec:	e771      	b.n	80010d2 <HAL_ADCEx_InjectedConfigChannel+0x3a>
 80011ee:	271f      	movs	r7, #31
 80011f0:	fa07 f404 	lsl.w	r4, r7, r4
 80011f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80011f8:	ea2e 0404 	bic.w	r4, lr, r4
 80011fc:	e7f5      	b.n	80011ea <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fe:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001200:	f040 0020 	orr.w	r0, r0, #32
 8001204:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8001206:	4638      	mov	r0, r7
 8001208:	e788      	b.n	800111c <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800120a:	f04f 0c07 	mov.w	ip, #7
 800120e:	691f      	ldr	r7, [r3, #16]
 8001210:	442c      	add	r4, r5
 8001212:	fa0c fc04 	lsl.w	ip, ip, r4
 8001216:	ea27 070c 	bic.w	r7, r7, ip
 800121a:	fa0e f404 	lsl.w	r4, lr, r4
 800121e:	433c      	orrs	r4, r7
 8001220:	611c      	str	r4, [r3, #16]
 8001222:	e78e      	b.n	8001142 <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 8001224:	6999      	ldr	r1, [r3, #24]
 8001226:	ea01 010e 	and.w	r1, r1, lr
 800122a:	4339      	orrs	r1, r7
 800122c:	6199      	str	r1, [r3, #24]
      break;
 800122e:	e79f      	b.n	8001170 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8001230:	69d9      	ldr	r1, [r3, #28]
 8001232:	ea01 010e 	and.w	r1, r1, lr
 8001236:	4339      	orrs	r1, r7
 8001238:	61d9      	str	r1, [r3, #28]
      break;
 800123a:	e799      	b.n	8001170 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 800123c:	6a19      	ldr	r1, [r3, #32]
 800123e:	ea01 010e 	and.w	r1, r1, lr
 8001242:	4339      	orrs	r1, r7
 8001244:	6219      	str	r1, [r3, #32]
      break;
 8001246:	e793      	b.n	8001170 <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	e7a5      	b.n	800119a <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124e:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001250:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6293      	str	r3, [r2, #40]	; 0x28
 8001258:	e7a3      	b.n	80011a2 <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 800125a:	2002      	movs	r0, #2
 800125c:	e7a4      	b.n	80011a8 <HAL_ADCEx_InjectedConfigChannel+0x110>
 800125e:	bf00      	nop
 8001260:	40012400 	.word	0x40012400
 8001264:	2000004c 	.word	0x2000004c
 8001268:	000f4240 	.word	0x000f4240
 800126c:	fffff000 	.word	0xfffff000

08001270 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001272:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800128a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800128c:	60d3      	str	r3, [r2, #12]
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b530      	push	{r4, r5, lr}
 8001298:	68dc      	ldr	r4, [r3, #12]
 800129a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	bf28      	it	cs
 80012a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b0:	bf98      	it	ls
 80012b2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	fa05 f303 	lsl.w	r3, r5, r3
 80012b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012bc:	bf88      	it	hi
 80012be:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4019      	ands	r1, r3
 80012c2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	fa05 f404 	lsl.w	r4, r5, r4
 80012c8:	3c01      	subs	r4, #1
 80012ca:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012cc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ce:	ea42 0201 	orr.w	r2, r2, r1
 80012d2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	bfaf      	iteee	ge
 80012d8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	4b06      	ldrlt	r3, [pc, #24]	; (80012f8 <HAL_NVIC_SetPriority+0x64>)
 80012de:	f000 000f 	andlt.w	r0, r0, #15
 80012e2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	bfa5      	ittet	ge
 80012e6:	b2d2      	uxtbge	r2, r2
 80012e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012f2:	bd30      	pop	{r4, r5, pc}
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	e000ed14 	.word	0xe000ed14

080012fc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012fc:	2301      	movs	r3, #1
 80012fe:	0942      	lsrs	r2, r0, #5
 8001300:	f000 001f 	and.w	r0, r0, #31
 8001304:	fa03 f000 	lsl.w	r0, r3, r0
 8001308:	4b01      	ldr	r3, [pc, #4]	; (8001310 <HAL_NVIC_EnableIRQ+0x14>)
 800130a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	3801      	subs	r0, #1
 8001316:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800131a:	d20a      	bcs.n	8001332 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001340:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001342:	2800      	cmp	r0, #0
 8001344:	d032      	beq.n	80013ac <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001346:	6801      	ldr	r1, [r0, #0]
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_DMA_Init+0x70>)
 800134a:	2414      	movs	r4, #20
 800134c:	4299      	cmp	r1, r3
 800134e:	d825      	bhi.n	800139c <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001352:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001356:	440a      	add	r2, r1
 8001358:	fbb2 f2f4 	udiv	r2, r2, r4
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001360:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8001362:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001364:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001366:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001368:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	4323      	orrs	r3, r4
 8001372:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001374:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001378:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137a:	6944      	ldr	r4, [r0, #20]
 800137c:	4323      	orrs	r3, r4
 800137e:	6984      	ldr	r4, [r0, #24]
 8001380:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001382:	69c4      	ldr	r4, [r0, #28]
 8001384:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001386:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001388:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800138a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800138e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001394:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001398:	4618      	mov	r0, r3
 800139a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_DMA_Init+0x78>)
 800139e:	440b      	add	r3, r1
 80013a0:	fbb3 f3f4 	udiv	r3, r3, r4
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_DMA_Init+0x7c>)
 80013aa:	e7d9      	b.n	8001360 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
}
 80013ae:	bd10      	pop	{r4, pc}
 80013b0:	40020407 	.word	0x40020407
 80013b4:	bffdfff8 	.word	0xbffdfff8
 80013b8:	bffdfbf8 	.word	0xbffdfbf8
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80013c6:	2c01      	cmp	r4, #1
 80013c8:	d035      	beq.n	8001436 <HAL_DMA_Start_IT+0x76>
 80013ca:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013cc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80013d0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80013d4:	42a5      	cmp	r5, r4
 80013d6:	f04f 0600 	mov.w	r6, #0
 80013da:	f04f 0402 	mov.w	r4, #2
 80013de:	d128      	bne.n	8001432 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013e4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80013e8:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ea:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80013ec:	f026 0601 	bic.w	r6, r6, #1
 80013f0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80013f4:	40bd      	lsls	r5, r7
 80013f6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fa:	6843      	ldr	r3, [r0, #4]
 80013fc:	6805      	ldr	r5, [r0, #0]
 80013fe:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001400:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001402:	bf0b      	itete	eq
 8001404:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001406:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001408:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800140a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800140c:	b14b      	cbz	r3, 8001422 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001414:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001416:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	602b      	str	r3, [r5, #0]
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	f043 030a 	orr.w	r3, r3, #10
 8001430:	e7f0      	b.n	8001414 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001432:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001436:	2002      	movs	r0, #2
}
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800143c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800143c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001440:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001442:	2b02      	cmp	r3, #2
 8001444:	d003      	beq.n	800144e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001446:	2304      	movs	r3, #4
 8001448:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144e:	6803      	ldr	r3, [r0, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f022 020e 	bic.w	r2, r2, #14
 8001456:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <HAL_DMA_Abort_IT+0xcc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d924      	bls.n	80014b0 <HAL_DMA_Abort_IT+0x74>
 8001466:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_DMA_Abort_IT+0x66>
 800146e:	3214      	adds	r2, #20
 8001470:	4293      	cmp	r3, r2
 8001472:	d018      	beq.n	80014a6 <HAL_DMA_Abort_IT+0x6a>
 8001474:	3214      	adds	r2, #20
 8001476:	4293      	cmp	r3, r2
 8001478:	d017      	beq.n	80014aa <HAL_DMA_Abort_IT+0x6e>
 800147a:	3214      	adds	r2, #20
 800147c:	4293      	cmp	r3, r2
 800147e:	bf0c      	ite	eq
 8001480:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001484:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_DMA_Abort_IT+0xd0>)
 800148a:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800148c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800148e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001490:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001494:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001496:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800149a:	b39b      	cbz	r3, 8001504 <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 800149c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	4620      	mov	r0, r4
 80014a0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014a2:	2301      	movs	r3, #1
 80014a4:	e7f0      	b.n	8001488 <HAL_DMA_Abort_IT+0x4c>
 80014a6:	2310      	movs	r3, #16
 80014a8:	e7ee      	b.n	8001488 <HAL_DMA_Abort_IT+0x4c>
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	e7eb      	b.n	8001488 <HAL_DMA_Abort_IT+0x4c>
 80014b0:	4917      	ldr	r1, [pc, #92]	; (8001510 <HAL_DMA_Abort_IT+0xd4>)
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d016      	beq.n	80014e4 <HAL_DMA_Abort_IT+0xa8>
 80014b6:	3114      	adds	r1, #20
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d015      	beq.n	80014e8 <HAL_DMA_Abort_IT+0xac>
 80014bc:	3114      	adds	r1, #20
 80014be:	428b      	cmp	r3, r1
 80014c0:	d014      	beq.n	80014ec <HAL_DMA_Abort_IT+0xb0>
 80014c2:	3114      	adds	r1, #20
 80014c4:	428b      	cmp	r3, r1
 80014c6:	d014      	beq.n	80014f2 <HAL_DMA_Abort_IT+0xb6>
 80014c8:	3114      	adds	r1, #20
 80014ca:	428b      	cmp	r3, r1
 80014cc:	d014      	beq.n	80014f8 <HAL_DMA_Abort_IT+0xbc>
 80014ce:	3114      	adds	r1, #20
 80014d0:	428b      	cmp	r3, r1
 80014d2:	d014      	beq.n	80014fe <HAL_DMA_Abort_IT+0xc2>
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf14      	ite	ne
 80014d8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80014dc:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80014e0:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_DMA_Abort_IT+0xd8>)
 80014e2:	e7d2      	b.n	800148a <HAL_DMA_Abort_IT+0x4e>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e7fb      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014e8:	2310      	movs	r3, #16
 80014ea:	e7f9      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f0:	e7f6      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	e7f3      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fc:	e7f0      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001502:	e7ed      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	4618      	mov	r0, r3
}
 8001506:	bd10      	pop	{r4, pc}
 8001508:	40020080 	.word	0x40020080
 800150c:	40020400 	.word	0x40020400
 8001510:	40020008 	.word	0x40020008
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_DMA_IRQHandler>:
{
 8001518:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800151a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800151c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800151e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001520:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001522:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001524:	4095      	lsls	r5, r2
 8001526:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001528:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800152a:	d055      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xc0>
 800152c:	074d      	lsls	r5, r1, #29
 800152e:	d553      	bpl.n	80015d8 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001534:	bf5e      	ittt	pl
 8001536:	681a      	ldrpl	r2, [r3, #0]
 8001538:	f022 0204 	bicpl.w	r2, r2, #4
 800153c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800153e:	4a60      	ldr	r2, [pc, #384]	; (80016c0 <HAL_DMA_IRQHandler+0x1a8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d91f      	bls.n	8001584 <HAL_DMA_IRQHandler+0x6c>
 8001544:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001548:	4293      	cmp	r3, r2
 800154a:	d014      	beq.n	8001576 <HAL_DMA_IRQHandler+0x5e>
 800154c:	3214      	adds	r2, #20
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_DMA_IRQHandler+0x62>
 8001552:	3214      	adds	r2, #20
 8001554:	4293      	cmp	r3, r2
 8001556:	d012      	beq.n	800157e <HAL_DMA_IRQHandler+0x66>
 8001558:	3214      	adds	r2, #20
 800155a:	4293      	cmp	r3, r2
 800155c:	bf0c      	ite	eq
 800155e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001562:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001566:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_DMA_IRQHandler+0x1ac>)
 8001568:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800156a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a5 	beq.w	80016bc <HAL_DMA_IRQHandler+0x1a4>
}
 8001572:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001574:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001576:	2304      	movs	r3, #4
 8001578:	e7f5      	b.n	8001566 <HAL_DMA_IRQHandler+0x4e>
 800157a:	2340      	movs	r3, #64	; 0x40
 800157c:	e7f3      	b.n	8001566 <HAL_DMA_IRQHandler+0x4e>
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	e7f0      	b.n	8001566 <HAL_DMA_IRQHandler+0x4e>
 8001584:	4950      	ldr	r1, [pc, #320]	; (80016c8 <HAL_DMA_IRQHandler+0x1b0>)
 8001586:	428b      	cmp	r3, r1
 8001588:	d016      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xa0>
 800158a:	3114      	adds	r1, #20
 800158c:	428b      	cmp	r3, r1
 800158e:	d015      	beq.n	80015bc <HAL_DMA_IRQHandler+0xa4>
 8001590:	3114      	adds	r1, #20
 8001592:	428b      	cmp	r3, r1
 8001594:	d014      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xa8>
 8001596:	3114      	adds	r1, #20
 8001598:	428b      	cmp	r3, r1
 800159a:	d014      	beq.n	80015c6 <HAL_DMA_IRQHandler+0xae>
 800159c:	3114      	adds	r1, #20
 800159e:	428b      	cmp	r3, r1
 80015a0:	d014      	beq.n	80015cc <HAL_DMA_IRQHandler+0xb4>
 80015a2:	3114      	adds	r1, #20
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d014      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xba>
 80015a8:	4293      	cmp	r3, r2
 80015aa:	bf14      	ite	ne
 80015ac:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80015b0:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_DMA_IRQHandler+0x1b4>)
 80015b6:	e7d7      	b.n	8001568 <HAL_DMA_IRQHandler+0x50>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e7fb      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
 80015bc:	2340      	movs	r3, #64	; 0x40
 80015be:	e7f9      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	e7f6      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
 80015c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ca:	e7f3      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
 80015cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015d0:	e7f0      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
 80015d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d6:	e7ed      	b.n	80015b4 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015d8:	2502      	movs	r5, #2
 80015da:	4095      	lsls	r5, r2
 80015dc:	4225      	tst	r5, r4
 80015de:	d057      	beq.n	8001690 <HAL_DMA_IRQHandler+0x178>
 80015e0:	078d      	lsls	r5, r1, #30
 80015e2:	d555      	bpl.n	8001690 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	0694      	lsls	r4, r2, #26
 80015e8:	d406      	bmi.n	80015f8 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f022 020a 	bic.w	r2, r2, #10
 80015f0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80015f2:	2201      	movs	r2, #1
 80015f4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <HAL_DMA_IRQHandler+0x1a8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d91e      	bls.n	800163c <HAL_DMA_IRQHandler+0x124>
 80015fe:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_DMA_IRQHandler+0x116>
 8001606:	3214      	adds	r2, #20
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_IRQHandler+0x11a>
 800160c:	3214      	adds	r2, #20
 800160e:	4293      	cmp	r3, r2
 8001610:	d011      	beq.n	8001636 <HAL_DMA_IRQHandler+0x11e>
 8001612:	3214      	adds	r2, #20
 8001614:	4293      	cmp	r3, r2
 8001616:	bf0c      	ite	eq
 8001618:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800161c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <HAL_DMA_IRQHandler+0x1ac>)
 8001622:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001624:	2300      	movs	r3, #0
 8001626:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800162a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800162c:	e79e      	b.n	800156c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800162e:	2302      	movs	r3, #2
 8001630:	e7f6      	b.n	8001620 <HAL_DMA_IRQHandler+0x108>
 8001632:	2320      	movs	r3, #32
 8001634:	e7f4      	b.n	8001620 <HAL_DMA_IRQHandler+0x108>
 8001636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163a:	e7f1      	b.n	8001620 <HAL_DMA_IRQHandler+0x108>
 800163c:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_DMA_IRQHandler+0x1b0>)
 800163e:	428b      	cmp	r3, r1
 8001640:	d016      	beq.n	8001670 <HAL_DMA_IRQHandler+0x158>
 8001642:	3114      	adds	r1, #20
 8001644:	428b      	cmp	r3, r1
 8001646:	d015      	beq.n	8001674 <HAL_DMA_IRQHandler+0x15c>
 8001648:	3114      	adds	r1, #20
 800164a:	428b      	cmp	r3, r1
 800164c:	d014      	beq.n	8001678 <HAL_DMA_IRQHandler+0x160>
 800164e:	3114      	adds	r1, #20
 8001650:	428b      	cmp	r3, r1
 8001652:	d014      	beq.n	800167e <HAL_DMA_IRQHandler+0x166>
 8001654:	3114      	adds	r1, #20
 8001656:	428b      	cmp	r3, r1
 8001658:	d014      	beq.n	8001684 <HAL_DMA_IRQHandler+0x16c>
 800165a:	3114      	adds	r1, #20
 800165c:	428b      	cmp	r3, r1
 800165e:	d014      	beq.n	800168a <HAL_DMA_IRQHandler+0x172>
 8001660:	4293      	cmp	r3, r2
 8001662:	bf14      	ite	ne
 8001664:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001668:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800166c:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_DMA_IRQHandler+0x1b4>)
 800166e:	e7d8      	b.n	8001622 <HAL_DMA_IRQHandler+0x10a>
 8001670:	2302      	movs	r3, #2
 8001672:	e7fb      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
 8001674:	2320      	movs	r3, #32
 8001676:	e7f9      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
 8001678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167c:	e7f6      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	e7f3      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
 8001684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001688:	e7f0      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
 800168a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800168e:	e7ed      	b.n	800166c <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001690:	2508      	movs	r5, #8
 8001692:	4095      	lsls	r5, r2
 8001694:	4225      	tst	r5, r4
 8001696:	d011      	beq.n	80016bc <HAL_DMA_IRQHandler+0x1a4>
 8001698:	0709      	lsls	r1, r1, #28
 800169a:	d50f      	bpl.n	80016bc <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	f021 010e 	bic.w	r1, r1, #14
 80016a2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016a4:	2301      	movs	r3, #1
 80016a6:	fa03 f202 	lsl.w	r2, r3, r2
 80016aa:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ac:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80016b2:	2300      	movs	r3, #0
 80016b4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80016b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80016ba:	e757      	b.n	800156c <HAL_DMA_IRQHandler+0x54>
}
 80016bc:	bc70      	pop	{r4, r5, r6}
 80016be:	4770      	bx	lr
 80016c0:	40020080 	.word	0x40020080
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020008 	.word	0x40020008
 80016cc:	40020000 	.word	0x40020000

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80016d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	4616      	mov	r6, r2
 80016d8:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001880 <HAL_GPIO_Init+0x1b0>
 80016de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001884 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80016e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80016e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80016f0:	45a0      	cmp	r8, r4
 80016f2:	d17f      	bne.n	80017f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80016f4:	684d      	ldr	r5, [r1, #4]
 80016f6:	2d12      	cmp	r5, #18
 80016f8:	f000 80af 	beq.w	800185a <HAL_GPIO_Init+0x18a>
 80016fc:	f200 8088 	bhi.w	8001810 <HAL_GPIO_Init+0x140>
 8001700:	2d02      	cmp	r5, #2
 8001702:	f000 80a7 	beq.w	8001854 <HAL_GPIO_Init+0x184>
 8001706:	d87c      	bhi.n	8001802 <HAL_GPIO_Init+0x132>
 8001708:	2d00      	cmp	r5, #0
 800170a:	f000 808e 	beq.w	800182a <HAL_GPIO_Init+0x15a>
 800170e:	2d01      	cmp	r5, #1
 8001710:	f000 809e 	beq.w	8001850 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001714:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001718:	2cff      	cmp	r4, #255	; 0xff
 800171a:	bf93      	iteet	ls
 800171c:	4682      	movls	sl, r0
 800171e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001722:	3d08      	subhi	r5, #8
 8001724:	f8d0 b000 	ldrls.w	fp, [r0]
 8001728:	bf92      	itee	ls
 800172a:	00b5      	lslls	r5, r6, #2
 800172c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001730:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001732:	fa09 f805 	lsl.w	r8, r9, r5
 8001736:	ea2b 0808 	bic.w	r8, fp, r8
 800173a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173e:	bf88      	it	hi
 8001740:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001744:	ea48 0505 	orr.w	r5, r8, r5
 8001748:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001750:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001754:	d04e      	beq.n	80017f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4d47      	ldr	r5, [pc, #284]	; (8001874 <HAL_GPIO_Init+0x1a4>)
 8001758:	4f46      	ldr	r7, [pc, #280]	; (8001874 <HAL_GPIO_Init+0x1a4>)
 800175a:	69ad      	ldr	r5, [r5, #24]
 800175c:	f026 0803 	bic.w	r8, r6, #3
 8001760:	f045 0501 	orr.w	r5, r5, #1
 8001764:	61bd      	str	r5, [r7, #24]
 8001766:	69bd      	ldr	r5, [r7, #24]
 8001768:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800176c:	f005 0501 	and.w	r5, r5, #1
 8001770:	9501      	str	r5, [sp, #4]
 8001772:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001776:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800177a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800177c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001780:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001784:	fa09 f90b 	lsl.w	r9, r9, fp
 8001788:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178c:	4d3a      	ldr	r5, [pc, #232]	; (8001878 <HAL_GPIO_Init+0x1a8>)
 800178e:	42a8      	cmp	r0, r5
 8001790:	d068      	beq.n	8001864 <HAL_GPIO_Init+0x194>
 8001792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001796:	42a8      	cmp	r0, r5
 8001798:	d066      	beq.n	8001868 <HAL_GPIO_Init+0x198>
 800179a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800179e:	42a8      	cmp	r0, r5
 80017a0:	d064      	beq.n	800186c <HAL_GPIO_Init+0x19c>
 80017a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017a6:	42a8      	cmp	r0, r5
 80017a8:	bf0c      	ite	eq
 80017aa:	2503      	moveq	r5, #3
 80017ac:	2504      	movne	r5, #4
 80017ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80017b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80017b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80017c0:	bf14      	ite	ne
 80017c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c4:	43a5      	biceq	r5, r4
 80017c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80017ce:	bf14      	ite	ne
 80017d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d2:	43a5      	biceq	r5, r4
 80017d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80017dc:	bf14      	ite	ne
 80017de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e0:	43a5      	biceq	r5, r4
 80017e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ea:	bf14      	ite	ne
 80017ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ee:	ea25 0404 	biceq.w	r4, r5, r4
 80017f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80017f4:	3601      	adds	r6, #1
 80017f6:	2e10      	cmp	r6, #16
 80017f8:	f47f af73 	bne.w	80016e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80017fc:	b003      	add	sp, #12
 80017fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001802:	2d03      	cmp	r5, #3
 8001804:	d022      	beq.n	800184c <HAL_GPIO_Init+0x17c>
 8001806:	2d11      	cmp	r5, #17
 8001808:	d184      	bne.n	8001714 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180a:	68ca      	ldr	r2, [r1, #12]
 800180c:	3204      	adds	r2, #4
          break;
 800180e:	e781      	b.n	8001714 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001810:	4f1a      	ldr	r7, [pc, #104]	; (800187c <HAL_GPIO_Init+0x1ac>)
 8001812:	42bd      	cmp	r5, r7
 8001814:	d009      	beq.n	800182a <HAL_GPIO_Init+0x15a>
 8001816:	d812      	bhi.n	800183e <HAL_GPIO_Init+0x16e>
 8001818:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001888 <HAL_GPIO_Init+0x1b8>
 800181c:	454d      	cmp	r5, r9
 800181e:	d004      	beq.n	800182a <HAL_GPIO_Init+0x15a>
 8001820:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001824:	454d      	cmp	r5, r9
 8001826:	f47f af75 	bne.w	8001714 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	688a      	ldr	r2, [r1, #8]
 800182c:	b1c2      	cbz	r2, 8001860 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800182e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001830:	bf0c      	ite	eq
 8001832:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001836:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183a:	2208      	movs	r2, #8
 800183c:	e76a      	b.n	8001714 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800183e:	4575      	cmp	r5, lr
 8001840:	d0f3      	beq.n	800182a <HAL_GPIO_Init+0x15a>
 8001842:	4565      	cmp	r5, ip
 8001844:	d0f1      	beq.n	800182a <HAL_GPIO_Init+0x15a>
 8001846:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800188c <HAL_GPIO_Init+0x1bc>
 800184a:	e7eb      	b.n	8001824 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800184c:	2200      	movs	r2, #0
 800184e:	e761      	b.n	8001714 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	68ca      	ldr	r2, [r1, #12]
          break;
 8001852:	e75f      	b.n	8001714 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001854:	68ca      	ldr	r2, [r1, #12]
 8001856:	3208      	adds	r2, #8
          break;
 8001858:	e75c      	b.n	8001714 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800185a:	68ca      	ldr	r2, [r1, #12]
 800185c:	320c      	adds	r2, #12
          break;
 800185e:	e759      	b.n	8001714 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001860:	2204      	movs	r2, #4
 8001862:	e757      	b.n	8001714 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001864:	2500      	movs	r5, #0
 8001866:	e7a2      	b.n	80017ae <HAL_GPIO_Init+0xde>
 8001868:	2501      	movs	r5, #1
 800186a:	e7a0      	b.n	80017ae <HAL_GPIO_Init+0xde>
 800186c:	2502      	movs	r5, #2
 800186e:	e79e      	b.n	80017ae <HAL_GPIO_Init+0xde>
 8001870:	40010400 	.word	0x40010400
 8001874:	40021000 	.word	0x40021000
 8001878:	40010800 	.word	0x40010800
 800187c:	10210000 	.word	0x10210000
 8001880:	10310000 	.word	0x10310000
 8001884:	10320000 	.word	0x10320000
 8001888:	10110000 	.word	0x10110000
 800188c:	10220000 	.word	0x10220000

08001890 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001890:	6883      	ldr	r3, [r0, #8]
 8001892:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001894:	bf14      	ite	ne
 8001896:	2001      	movne	r0, #1
 8001898:	2000      	moveq	r0, #0
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	b10a      	cbz	r2, 80018a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189e:	6101      	str	r1, [r0, #16]
 80018a0:	4770      	bx	lr
 80018a2:	0409      	lsls	r1, r1, #16
 80018a4:	e7fb      	b.n	800189e <HAL_GPIO_WritePin+0x2>

080018a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80018a6:	68c3      	ldr	r3, [r0, #12]
 80018a8:	4059      	eors	r1, r3
 80018aa:	60c1      	str	r1, [r0, #12]
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b0:	6803      	ldr	r3, [r0, #0]
{
 80018b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	07db      	lsls	r3, r3, #31
{
 80018b8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	d414      	bmi.n	80018e6 <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	079f      	lsls	r7, r3, #30
 80018c0:	d462      	bmi.n	8001988 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	0719      	lsls	r1, r3, #28
 80018c6:	f100 8099 	bmi.w	80019fc <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	682b      	ldr	r3, [r5, #0]
 80018cc:	075a      	lsls	r2, r3, #29
 80018ce:	f100 80c3 	bmi.w	8001a58 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80018d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	f040 8131 	bne.w	8001b3c <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	6a2a      	ldr	r2, [r5, #32]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	f040 8184 	bne.w	8001bea <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e6:	4c90      	ldr	r4, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f2:	6863      	ldr	r3, [r4, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x66>
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	03de      	lsls	r6, r3, #15
 8001900:	d509      	bpl.n	8001916 <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	039c      	lsls	r4, r3, #14
 8001906:	d5d9      	bpl.n	80018bc <HAL_RCC_OscConfig+0xc>
 8001908:	68ab      	ldr	r3, [r5, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1d6      	bne.n	80018bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
}
 8001910:	b002      	add	sp, #8
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	68ab      	ldr	r3, [r5, #8]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d110      	bne.n	8001940 <HAL_RCC_OscConfig+0x90>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001926:	f7ff f94f 	bl	8000bc8 <HAL_GetTick>
 800192a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	0398      	lsls	r0, r3, #14
 8001930:	d4c4      	bmi.n	80018bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001932:	f7ff f949 	bl	8000bc8 <HAL_GetTick>
 8001936:	1b80      	subs	r0, r0, r6
 8001938:	2864      	cmp	r0, #100	; 0x64
 800193a:	d9f7      	bls.n	800192c <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 800193c:	2003      	movs	r0, #3
 800193e:	e7e7      	b.n	8001910 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	b99b      	cbnz	r3, 800196a <HAL_RCC_OscConfig+0xba>
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001950:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001952:	f7ff f939 	bl	8000bc8 <HAL_GetTick>
 8001956:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	0399      	lsls	r1, r3, #14
 800195c:	d5ae      	bpl.n	80018bc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195e:	f7ff f933 	bl	8000bc8 <HAL_GetTick>
 8001962:	1b80      	subs	r0, r0, r6
 8001964:	2864      	cmp	r0, #100	; 0x64
 8001966:	d9f7      	bls.n	8001958 <HAL_RCC_OscConfig+0xa8>
 8001968:	e7e8      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	d103      	bne.n	800197a <HAL_RCC_OscConfig+0xca>
 8001972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001976:	6023      	str	r3, [r4, #0]
 8001978:	e7d1      	b.n	800191e <HAL_RCC_OscConfig+0x6e>
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6023      	str	r3, [r4, #0]
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	e7cd      	b.n	8001924 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001988:	4c67      	ldr	r4, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	f013 0f0c 	tst.w	r3, #12
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001992:	6863      	ldr	r3, [r4, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d110      	bne.n	80019be <HAL_RCC_OscConfig+0x10e>
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	03da      	lsls	r2, r3, #15
 80019a0:	d40d      	bmi.n	80019be <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	079b      	lsls	r3, r3, #30
 80019a6:	d502      	bpl.n	80019ae <HAL_RCC_OscConfig+0xfe>
 80019a8:	696b      	ldr	r3, [r5, #20]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d1af      	bne.n	800190e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	69aa      	ldr	r2, [r5, #24]
 80019b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019ba:	6023      	str	r3, [r4, #0]
 80019bc:	e781      	b.n	80018c2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	696a      	ldr	r2, [r5, #20]
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 80019c2:	b16a      	cbz	r2, 80019e0 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8fe 	bl	8000bc8 <HAL_GetTick>
 80019cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	079f      	lsls	r7, r3, #30
 80019d2:	d4ec      	bmi.n	80019ae <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8f8 	bl	8000bc8 <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9f7      	bls.n	80019ce <HAL_RCC_OscConfig+0x11e>
 80019de:	e7ad      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 80019e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8f1 	bl	8000bc8 <HAL_GetTick>
 80019e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	0798      	lsls	r0, r3, #30
 80019ec:	f57f af69 	bpl.w	80018c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff f8ea 	bl	8000bc8 <HAL_GetTick>
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9f6      	bls.n	80019e8 <HAL_RCC_OscConfig+0x138>
 80019fa:	e79f      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fc:	69ea      	ldr	r2, [r5, #28]
 80019fe:	4c4a      	ldr	r4, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a02:	b1da      	cbz	r2, 8001a3c <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8de 	bl	8000bc8 <HAL_GetTick>
 8001a0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a10:	079b      	lsls	r3, r3, #30
 8001a12:	d50d      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a14:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x284>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a20:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a22:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a24:	9b01      	ldr	r3, [sp, #4]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	9201      	str	r2, [sp, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_RCC_OscConfig+0x172>
 8001a2e:	e74c      	b.n	80018ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff f8ca 	bl	8000bc8 <HAL_GetTick>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	2802      	cmp	r0, #2
 8001a38:	d9e9      	bls.n	8001a0e <HAL_RCC_OscConfig+0x15e>
 8001a3a:	e77f      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001a3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f8c3 	bl	8000bc8 <HAL_GetTick>
 8001a42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a46:	079f      	lsls	r7, r3, #30
 8001a48:	f57f af3f 	bpl.w	80018ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8bc 	bl	8000bc8 <HAL_GetTick>
 8001a50:	1b80      	subs	r0, r0, r6
 8001a52:	2802      	cmp	r0, #2
 8001a54:	d9f6      	bls.n	8001a44 <HAL_RCC_OscConfig+0x194>
 8001a56:	e771      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a58:	4c33      	ldr	r4, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a5a:	69e3      	ldr	r3, [r4, #28]
 8001a5c:	00de      	lsls	r6, r3, #3
 8001a5e:	d424      	bmi.n	8001aaa <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 8001a60:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	69e3      	ldr	r3, [r4, #28]
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61e3      	str	r3, [r4, #28]
 8001a6a:	69e3      	ldr	r3, [r4, #28]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4e30      	ldr	r6, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x288>)
 8001a76:	6833      	ldr	r3, [r6, #0]
 8001a78:	05d8      	lsls	r0, r3, #23
 8001a7a:	d518      	bpl.n	8001aae <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	692b      	ldr	r3, [r5, #16]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d126      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x220>
 8001a82:	6a23      	ldr	r3, [r4, #32]
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f89d 	bl	8000bc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a92:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	6a23      	ldr	r3, [r4, #32]
 8001a96:	079a      	lsls	r2, r3, #30
 8001a98:	d53f      	bpl.n	8001b1a <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001a9a:	2f00      	cmp	r7, #0
 8001a9c:	f43f af19 	beq.w	80018d2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	69e3      	ldr	r3, [r4, #28]
 8001aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	61e3      	str	r3, [r4, #28]
 8001aa8:	e713      	b.n	80018d2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2700      	movs	r7, #0
 8001aac:	e7e2      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	6833      	ldr	r3, [r6, #0]
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f887 	bl	8000bc8 <HAL_GetTick>
 8001aba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	6833      	ldr	r3, [r6, #0]
 8001abe:	05d9      	lsls	r1, r3, #23
 8001ac0:	d4dc      	bmi.n	8001a7c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff f881 	bl	8000bc8 <HAL_GetTick>
 8001ac6:	eba0 0008 	sub.w	r0, r0, r8
 8001aca:	2864      	cmp	r0, #100	; 0x64
 8001acc:	d9f6      	bls.n	8001abc <HAL_RCC_OscConfig+0x20c>
 8001ace:	e735      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	b9ab      	cbnz	r3, 8001afe <HAL_RCC_OscConfig+0x24e>
 8001ad2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6223      	str	r3, [r4, #32]
 8001ade:	6a23      	ldr	r3, [r4, #32]
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f86f 	bl	8000bc8 <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	6a23      	ldr	r3, [r4, #32]
 8001aee:	079b      	lsls	r3, r3, #30
 8001af0:	d5d3      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff f869 	bl	8000bc8 <HAL_GetTick>
 8001af6:	1b80      	subs	r0, r0, r6
 8001af8:	4540      	cmp	r0, r8
 8001afa:	d9f7      	bls.n	8001aec <HAL_RCC_OscConfig+0x23c>
 8001afc:	e71e      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	6a23      	ldr	r3, [r4, #32]
 8001b02:	d103      	bne.n	8001b0c <HAL_RCC_OscConfig+0x25c>
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6223      	str	r3, [r4, #32]
 8001b0a:	e7ba      	b.n	8001a82 <HAL_RCC_OscConfig+0x1d2>
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6223      	str	r3, [r4, #32]
 8001b12:	6a23      	ldr	r3, [r4, #32]
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	e7b6      	b.n	8001a88 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff f855 	bl	8000bc8 <HAL_GetTick>
 8001b1e:	eba0 0008 	sub.w	r0, r0, r8
 8001b22:	42b0      	cmp	r0, r6
 8001b24:	d9b6      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1e4>
 8001b26:	e709      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	42420000 	.word	0x42420000
 8001b30:	42420480 	.word	0x42420480
 8001b34:	2000004c 	.word	0x2000004c
 8001b38:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001b3c:	4c4f      	ldr	r4, [pc, #316]	; (8001c7c <HAL_RCC_OscConfig+0x3cc>)
 8001b3e:	6863      	ldr	r3, [r4, #4]
 8001b40:	03d8      	lsls	r0, r3, #15
 8001b42:	d508      	bpl.n	8001b56 <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d103      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001b50:	03d9      	lsls	r1, r3, #15
 8001b52:	f53f aedc 	bmi.w	800190e <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001b56:	2a02      	cmp	r2, #2
 8001b58:	d133      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	00da      	lsls	r2, r3, #3
 8001b5e:	d506      	bpl.n	8001b6e <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001b60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001b62:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	f47f aed0 	bne.w	800190e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	4e43      	ldr	r6, [pc, #268]	; (8001c80 <HAL_RCC_OscConfig+0x3d0>)
 8001b72:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b74:	f7ff f828 	bl	8000bc8 <HAL_GetTick>
 8001b78:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	d41a      	bmi.n	8001bb6 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001b80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b82:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b8e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b94:	4313      	orrs	r3, r2
 8001b96:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001b98:	2301      	movs	r3, #1
 8001b9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f814 	bl	8000bc8 <HAL_GetTick>
 8001ba0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	011f      	lsls	r7, r3, #4
 8001ba6:	f53f ae98 	bmi.w	80018da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001baa:	f7ff f80d 	bl	8000bc8 <HAL_GetTick>
 8001bae:	1b80      	subs	r0, r0, r6
 8001bb0:	2864      	cmp	r0, #100	; 0x64
 8001bb2:	d9f6      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
 8001bb4:	e6c2      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001bb6:	f7ff f807 	bl	8000bc8 <HAL_GetTick>
 8001bba:	1bc0      	subs	r0, r0, r7
 8001bbc:	2864      	cmp	r0, #100	; 0x64
 8001bbe:	d9dc      	bls.n	8001b7a <HAL_RCC_OscConfig+0x2ca>
 8001bc0:	e6bc      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 8001bc2:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_RCC_OscConfig+0x3d0>)
 8001bce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fffa 	bl	8000bc8 <HAL_GetTick>
 8001bd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	0118      	lsls	r0, r3, #4
 8001bda:	f57f ae7e 	bpl.w	80018da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001bde:	f7fe fff3 	bl	8000bc8 <HAL_GetTick>
 8001be2:	1b80      	subs	r0, r0, r6
 8001be4:	2864      	cmp	r0, #100	; 0x64
 8001be6:	d9f6      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x326>
 8001be8:	e6a8      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bea:	4c24      	ldr	r4, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x3cc>)
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	f43f ae8b 	beq.w	800190e <HAL_RCC_OscConfig+0x5e>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4e22      	ldr	r6, [pc, #136]	; (8001c84 <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c00:	d12f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001c02:	f7fe ffe1 	bl	8000bc8 <HAL_GetTick>
 8001c06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	0199      	lsls	r1, r3, #6
 8001c0c:	d423      	bmi.n	8001c56 <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001c16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c18:	6869      	ldr	r1, [r5, #4]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c20:	68e9      	ldr	r1, [r5, #12]
 8001c22:	f022 020f 	bic.w	r2, r2, #15
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001c2c:	6862      	ldr	r2, [r4, #4]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c34:	4313      	orrs	r3, r2
 8001c36:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ffc4 	bl	8000bc8 <HAL_GetTick>
 8001c40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	019a      	lsls	r2, r3, #6
 8001c46:	f53f ae4c 	bmi.w	80018e2 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ffbd 	bl	8000bc8 <HAL_GetTick>
 8001c4e:	1b40      	subs	r0, r0, r5
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d9f6      	bls.n	8001c42 <HAL_RCC_OscConfig+0x392>
 8001c54:	e672      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ffb7 	bl	8000bc8 <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	2802      	cmp	r0, #2
 8001c5e:	d9d3      	bls.n	8001c08 <HAL_RCC_OscConfig+0x358>
 8001c60:	e66c      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001c62:	f7fe ffb1 	bl	8000bc8 <HAL_GetTick>
 8001c66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	f57f ae39 	bpl.w	80018e2 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe ffaa 	bl	8000bc8 <HAL_GetTick>
 8001c74:	1b40      	subs	r0, r0, r5
 8001c76:	2802      	cmp	r0, #2
 8001c78:	d9f6      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3b8>
 8001c7a:	e65f      	b.n	800193c <HAL_RCC_OscConfig+0x8c>
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	42420068 	.word	0x42420068
 8001c84:	42420060 	.word	0x42420060

08001c88 <HAL_RCC_GetSysClockFreq>:
{
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001c8c:	466a      	mov	r2, sp
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c90:	f103 0508 	add.w	r5, r3, #8
 8001c94:	4614      	mov	r4, r2
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	c403      	stmia	r4!, {r0, r1}
 8001c9e:	42ab      	cmp	r3, r5
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	d1f7      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xc>
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	6020      	str	r0, [r4, #0]
 8001caa:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cae:	ac04      	add	r4, sp, #16
 8001cb0:	f103 0510 	add.w	r5, r3, #16
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	3308      	adds	r3, #8
 8001cbc:	c203      	stmia	r2!, {r0, r1}
 8001cbe:	42ab      	cmp	r3, r5
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	d1f7      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8001cc4:	491e      	ldr	r1, [pc, #120]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc8:	f003 020c 	and.w	r2, r3, #12
 8001ccc:	2a08      	cmp	r2, #8
 8001cce:	d131      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cd0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001cd4:	a808      	add	r0, sp, #32
 8001cd6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cda:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cde:	d526      	bpl.n	8001d2e <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001ce0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	4403      	add	r3, r0
 8001ce8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001cec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001cee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001cf6:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001cf8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001cfa:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001cfe:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001d00:	fba4 4506 	umull	r4, r5, r4, r6
 8001d04:	fba4 0103 	umull	r0, r1, r4, r3
 8001d08:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001d0c:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001d10:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001d12:	fba3 2302 	umull	r2, r3, r3, r2
 8001d16:	f7fe fd8d 	bl	8000834 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001d1a:	2e0d      	cmp	r6, #13
 8001d1c:	d100      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001d1e:	0840      	lsrs	r0, r0, #1
}
 8001d20:	b009      	add	sp, #36	; 0x24
 8001d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001d24:	fb03 f006 	mul.w	r0, r3, r6
 8001d28:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d2c:	e7f5      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d30:	4370      	muls	r0, r6
 8001d32:	e7f5      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 8001d36:	e7f3      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x98>
 8001d38:	08007010 	.word	0x08007010
 8001d3c:	0800701e 	.word	0x0800701e
 8001d40:	40021000 	.word	0x40021000
 8001d44:	007a1200 	.word	0x007a1200
 8001d48:	003d0900 	.word	0x003d0900

08001d4c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_RCC_ClockConfig+0x154>)
{
 8001d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d52:	6813      	ldr	r3, [r2, #0]
{
 8001d54:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	428b      	cmp	r3, r1
{
 8001d5c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d5e:	d32a      	bcc.n	8001db6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	6829      	ldr	r1, [r5, #0]
 8001d62:	078c      	lsls	r4, r1, #30
 8001d64:	d434      	bmi.n	8001dd0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	07ca      	lsls	r2, r1, #31
 8001d68:	d447      	bmi.n	8001dfa <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x154>)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	429e      	cmp	r6, r3
 8001d74:	f0c0 8082 	bcc.w	8001e7c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	682a      	ldr	r2, [r5, #0]
 8001d7a:	4c4a      	ldr	r4, [pc, #296]	; (8001ea4 <HAL_RCC_ClockConfig+0x158>)
 8001d7c:	f012 0f04 	tst.w	r2, #4
 8001d80:	f040 8087 	bne.w	8001e92 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	0713      	lsls	r3, r2, #28
 8001d86:	d506      	bpl.n	8001d96 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	692a      	ldr	r2, [r5, #16]
 8001d8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d94:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d96:	f7ff ff77 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001d9a:	6863      	ldr	r3, [r4, #4]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_RCC_ClockConfig+0x15c>)
 8001d9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	40d8      	lsrs	r0, r3
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_ClockConfig+0x160>)
 8001da8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f7fe feca 	bl	8000b44 <HAL_InitTick>
  return HAL_OK;
 8001db0:	2000      	movs	r0, #0
}
 8001db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f023 0307 	bic.w	r3, r3, #7
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d0ca      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd6:	bf1e      	ittt	ne
 8001dd8:	685a      	ldrne	r2, [r3, #4]
 8001dda:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001dde:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de2:	bf42      	ittt	mi
 8001de4:	685a      	ldrmi	r2, [r3, #4]
 8001de6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001dea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	68a8      	ldr	r0, [r5, #8]
 8001df0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001df4:	4302      	orrs	r2, r0
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	e7b5      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	686a      	ldr	r2, [r5, #4]
 8001dfc:	4c29      	ldr	r4, [pc, #164]	; (8001ea4 <HAL_RCC_ClockConfig+0x158>)
 8001dfe:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e00:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	d11c      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	d0df      	beq.n	8001dca <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e10:	f023 0303 	bic.w	r3, r3, #3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001e18:	f7fe fed6 	bl	8000bc8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001e1e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d114      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e24:	6863      	ldr	r3, [r4, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d09d      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7fe fecb 	bl	8000bc8 <HAL_GetTick>
 8001e32:	1bc0      	subs	r0, r0, r7
 8001e34:	4540      	cmp	r0, r8
 8001e36:	d9f5      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001e38:	2003      	movs	r0, #3
 8001e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	2a02      	cmp	r2, #2
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e46:	e7df      	b.n	8001e08 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	f013 0f02 	tst.w	r3, #2
 8001e4c:	e7dc      	b.n	8001e08 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d10f      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e52:	6863      	ldr	r3, [r4, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d086      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe feb4 	bl	8000bc8 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	4540      	cmp	r0, r8
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x106>
 8001e66:	e7e7      	b.n	8001e38 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7fe feae 	bl	8000bc8 <HAL_GetTick>
 8001e6c:	1bc0      	subs	r0, r0, r7
 8001e6e:	4540      	cmp	r0, r8
 8001e70:	d8e2      	bhi.n	8001e38 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	6863      	ldr	r3, [r4, #4]
 8001e74:	f013 0f0c 	tst.w	r3, #12
 8001e78:	d1f6      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x11c>
 8001e7a:	e776      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	4333      	orrs	r3, r6
 8001e84:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	429e      	cmp	r6, r3
 8001e8e:	d19c      	bne.n	8001dca <HAL_RCC_ClockConfig+0x7e>
 8001e90:	e772      	b.n	8001d78 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	68e9      	ldr	r1, [r5, #12]
 8001e96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6063      	str	r3, [r4, #4]
 8001e9e:	e771      	b.n	8001d84 <HAL_RCC_ClockConfig+0x38>
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	080071b3 	.word	0x080071b3
 8001eac:	2000004c 	.word	0x2000004c

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ebe:	6810      	ldr	r0, [r2, #0]
}    
 8001ec0:	40d8      	lsrs	r0, r3
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080071c3 	.word	0x080071c3
 8001ecc:	2000004c 	.word	0x2000004c

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ede:	6810      	ldr	r0, [r2, #0]
} 
 8001ee0:	40d8      	lsrs	r0, r3
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080071c3 	.word	0x080071c3
 8001eec:	2000004c 	.word	0x2000004c

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ef0:	6803      	ldr	r3, [r0, #0]
{
 8001ef2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ef6:	f013 0f01 	tst.w	r3, #1
{
 8001efa:	4605      	mov	r5, r0
 8001efc:	4c57      	ldr	r4, [pc, #348]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001efe:	d01f      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f00:	69e3      	ldr	r3, [r4, #28]
 8001f02:	00da      	lsls	r2, r3, #3
 8001f04:	d447      	bmi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001f06:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	69e3      	ldr	r3, [r4, #28]
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	61e3      	str	r3, [r4, #28]
 8001f10:	69e3      	ldr	r3, [r4, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4e51      	ldr	r6, [pc, #324]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001f1c:	6833      	ldr	r3, [r6, #0]
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	d53b      	bpl.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f22:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f24:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f28:	d14b      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f2a:	6a23      	ldr	r3, [r4, #32]
 8001f2c:	686a      	ldr	r2, [r5, #4]
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f32:	4313      	orrs	r3, r2
 8001f34:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f36:	b11f      	cbz	r7, 8001f40 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	69e3      	ldr	r3, [r4, #28]
 8001f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f40:	682a      	ldr	r2, [r5, #0]
 8001f42:	0793      	lsls	r3, r2, #30
 8001f44:	d505      	bpl.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	68a9      	ldr	r1, [r5, #8]
 8001f4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f52:	0757      	lsls	r7, r2, #29
 8001f54:	d505      	bpl.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f58:	68e9      	ldr	r1, [r5, #12]
 8001f5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8001f62:	0716      	lsls	r6, r2, #28
 8001f64:	d505      	bpl.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8001f66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f68:	692a      	ldr	r2, [r5, #16]
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8001f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f74:	0398      	lsls	r0, r3, #14
 8001f76:	d466      	bmi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001f78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f7a:	0359      	lsls	r1, r3, #13
 8001f7c:	d463      	bmi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f7e:	6828      	ldr	r0, [r5, #0]
 8001f80:	f010 0010 	ands.w	r0, r0, #16
 8001f84:	d01a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	69ea      	ldr	r2, [r5, #28]
 8001f8a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f92:	2000      	movs	r0, #0
 8001f94:	e012      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2700      	movs	r7, #0
 8001f98:	e7bf      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	6833      	ldr	r3, [r6, #0]
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fe11 	bl	8000bc8 <HAL_GetTick>
 8001fa6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	6833      	ldr	r3, [r6, #0]
 8001faa:	05d8      	lsls	r0, r3, #23
 8001fac:	d4b9      	bmi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe fe0b 	bl	8000bc8 <HAL_GetTick>
 8001fb2:	eba0 0008 	sub.w	r0, r0, r8
 8001fb6:	2864      	cmp	r0, #100	; 0x64
 8001fb8:	d9f6      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001fba:	2003      	movs	r0, #3
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc2:	686a      	ldr	r2, [r5, #4]
 8001fc4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d0ae      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fcc:	2001      	movs	r0, #1
 8001fce:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fda:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001fdc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fde:	07d9      	lsls	r1, r3, #31
 8001fe0:	d5a3      	bpl.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fdf1 	bl	8000bc8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	6a23      	ldr	r3, [r4, #32]
 8001fee:	079a      	lsls	r2, r3, #30
 8001ff0:	d49b      	bmi.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fde9 	bl	8000bc8 <HAL_GetTick>
 8001ff6:	1b80      	subs	r0, r0, r6
 8001ff8:	4540      	cmp	r0, r8
 8001ffa:	d9f7      	bls.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001ffc:	e7dd      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	69a9      	ldr	r1, [r5, #24]
 8002002:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002006:	d004      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002008:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800200a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 800200e:	428a      	cmp	r2, r1
 8002010:	d122      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002018:	430b      	orrs	r3, r1
 800201a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800201c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800201e:	696a      	ldr	r2, [r5, #20]
 8002020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002024:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8002026:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002028:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800202c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800202e:	f7fe fdcb 	bl	8000bc8 <HAL_GetTick>
 8002032:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	d4a1      	bmi.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800203a:	f7fe fdc5 	bl	8000bc8 <HAL_GetTick>
 800203e:	1b80      	subs	r0, r0, r6
 8002040:	2864      	cmp	r0, #100	; 0x64
 8002042:	d9f7      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002044:	e7b9      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	d5d8      	bpl.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800204c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800204e:	696a      	ldr	r2, [r5, #20]
 8002050:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002054:	4293      	cmp	r3, r2
 8002056:	d092      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
 800205a:	e7af      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420440 	.word	0x42420440
 8002068:	42420070 	.word	0x42420070

0800206c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002070:	4604      	mov	r4, r0
 8002072:	4688      	mov	r8, r1
 8002074:	4617      	mov	r7, r2
 8002076:	461d      	mov	r5, r3
 8002078:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	6893      	ldr	r3, [r2, #8]
 800207e:	ea38 0303 	bics.w	r3, r8, r3
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	429f      	cmp	r7, r3
 800208a:	d102      	bne.n	8002092 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800208c:	2000      	movs	r0, #0
}
 800208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002092:	1c6b      	adds	r3, r5, #1
 8002094:	d0f2      	beq.n	800207c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002096:	bb55      	cbnz	r5, 80020ee <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020a0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020a2:	6862      	ldr	r2, [r4, #4]
 80020a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80020a8:	d10a      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80020aa:	68a2      	ldr	r2, [r4, #8]
 80020ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020b0:	d002      	beq.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80020b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80020b6:	d103      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020be:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020c6:	d109      	bne.n	80020dc <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	0412      	lsls	r2, r2, #16
 80020d0:	0c12      	lsrs	r2, r2, #16
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020da:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80020dc:	2301      	movs	r3, #1
 80020de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80020e2:	2300      	movs	r3, #0
 80020e4:	2003      	movs	r0, #3
 80020e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80020ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80020ee:	f7fe fd6b 	bl	8000bc8 <HAL_GetTick>
 80020f2:	1b80      	subs	r0, r0, r6
 80020f4:	4285      	cmp	r5, r0
 80020f6:	d8c0      	bhi.n	800207a <SPI_WaitFlagStateUntilTimeout+0xe>
 80020f8:	e7ce      	b.n	8002098 <SPI_WaitFlagStateUntilTimeout+0x2c>

080020fa <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020fa:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020fc:	460b      	mov	r3, r1
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	2200      	movs	r2, #0
{
 8002104:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002106:	f7ff ffb1 	bl	800206c <SPI_WaitFlagStateUntilTimeout>
 800210a:	b120      	cbz	r0, 8002116 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800210e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002116:	b002      	add	sp, #8
 8002118:	bd10      	pop	{r4, pc}

0800211a <HAL_SPI_Init>:
{
 800211a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800211c:	4604      	mov	r4, r0
 800211e:	2800      	cmp	r0, #0
 8002120:	d036      	beq.n	8002190 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002126:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800212a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800212e:	b91b      	cbnz	r3, 8002138 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002130:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002134:	f003 fd06 	bl	8005b44 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002138:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800213a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800213c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002140:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002142:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002148:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	69a2      	ldr	r2, [r4, #24]
 800214e:	4303      	orrs	r3, r0
 8002150:	68e0      	ldr	r0, [r4, #12]
 8002152:	4303      	orrs	r3, r0
 8002154:	6920      	ldr	r0, [r4, #16]
 8002156:	4303      	orrs	r3, r0
 8002158:	6960      	ldr	r0, [r4, #20]
 800215a:	4303      	orrs	r3, r0
 800215c:	69e0      	ldr	r0, [r4, #28]
 800215e:	4303      	orrs	r3, r0
 8002160:	6a20      	ldr	r0, [r4, #32]
 8002162:	4303      	orrs	r3, r0
 8002164:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002166:	4303      	orrs	r3, r0
 8002168:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800216c:	4303      	orrs	r3, r0
 800216e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002170:	0c12      	lsrs	r2, r2, #16
 8002172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002174:	f002 0204 	and.w	r2, r2, #4
 8002178:	431a      	orrs	r2, r3
 800217a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217c:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800217e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002184:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002186:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002188:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800218a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800218e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
}
 8002192:	bd10      	pop	{r4, pc}

08002194 <HAL_SPI_Transmit>:
{
 8002194:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002198:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800219a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800219e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80021a0:	2b01      	cmp	r3, #1
{
 80021a2:	460d      	mov	r5, r1
 80021a4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80021a6:	f000 809c 	beq.w	80022e2 <HAL_SPI_Transmit+0x14e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80021b0:	f7fe fd0a 	bl	8000bc8 <HAL_GetTick>
 80021b4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80021b6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80021ba:	b2c0      	uxtb	r0, r0
 80021bc:	2801      	cmp	r0, #1
 80021be:	f040 808e 	bne.w	80022de <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 80021c2:	2d00      	cmp	r5, #0
 80021c4:	d04e      	beq.n	8002264 <HAL_SPI_Transmit+0xd0>
 80021c6:	f1b8 0f00 	cmp.w	r8, #0
 80021ca:	d04b      	beq.n	8002264 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021d6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021d8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80021dc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021de:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021e0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021e2:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021e6:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ec:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80021ee:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80021f2:	bf02      	ittt	eq
 80021f4:	681a      	ldreq	r2, [r3, #0]
 80021f6:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80021fa:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002200:	bf5e      	ittt	pl
 8002202:	681a      	ldrpl	r2, [r3, #0]
 8002204:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002208:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220a:	68e2      	ldr	r2, [r4, #12]
 800220c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002210:	6862      	ldr	r2, [r4, #4]
 8002212:	d138      	bne.n	8002286 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002214:	b11a      	cbz	r2, 800221e <HAL_SPI_Transmit+0x8a>
 8002216:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002218:	b292      	uxth	r2, r2
 800221a:	2a01      	cmp	r2, #1
 800221c:	d106      	bne.n	800222c <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 800221e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002222:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002224:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002226:	3b01      	subs	r3, #1
 8002228:	b29b      	uxth	r3, r3
 800222a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800222c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800222e:	b29b      	uxth	r3, r3
 8002230:	b993      	cbnz	r3, 8002258 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002232:	9700      	str	r7, [sp, #0]
 8002234:	4633      	mov	r3, r6
 8002236:	2201      	movs	r2, #1
 8002238:	2102      	movs	r1, #2
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff16 	bl	800206c <SPI_WaitFlagStateUntilTimeout>
 8002240:	b978      	cbnz	r0, 8002262 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002242:	463a      	mov	r2, r7
 8002244:	4631      	mov	r1, r6
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ff57 	bl	80020fa <SPI_CheckFlag_BSY>
 800224c:	2800      	cmp	r0, #0
 800224e:	d038      	beq.n	80022c2 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002250:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002252:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002254:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8002256:	e005      	b.n	8002264 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	0790      	lsls	r0, r2, #30
 800225e:	d4de      	bmi.n	800221e <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002260:	b94e      	cbnz	r6, 8002276 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002262:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002264:	2301      	movs	r3, #1
 8002266:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800226a:	2300      	movs	r3, #0
 800226c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002270:	b004      	add	sp, #16
 8002272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002276:	1c71      	adds	r1, r6, #1
 8002278:	d0d8      	beq.n	800222c <HAL_SPI_Transmit+0x98>
 800227a:	f7fe fca5 	bl	8000bc8 <HAL_GetTick>
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4286      	cmp	r6, r0
 8002282:	d8d3      	bhi.n	800222c <HAL_SPI_Transmit+0x98>
 8002284:	e7ed      	b.n	8002262 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002286:	b11a      	cbz	r2, 8002290 <HAL_SPI_Transmit+0xfc>
 8002288:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800228a:	b292      	uxth	r2, r2
 800228c:	2a01      	cmp	r2, #1
 800228e:	d106      	bne.n	800229e <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002290:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002294:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002296:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002298:	3b01      	subs	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800229e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0c5      	beq.n	8002232 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	0792      	lsls	r2, r2, #30
 80022ac:	d4f0      	bmi.n	8002290 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	d0d7      	beq.n	8002262 <HAL_SPI_Transmit+0xce>
 80022b2:	1c73      	adds	r3, r6, #1
 80022b4:	d0f3      	beq.n	800229e <HAL_SPI_Transmit+0x10a>
 80022b6:	f7fe fc87 	bl	8000bc8 <HAL_GetTick>
 80022ba:	1bc0      	subs	r0, r0, r7
 80022bc:	4286      	cmp	r6, r0
 80022be:	d8ee      	bhi.n	800229e <HAL_SPI_Transmit+0x10a>
 80022c0:	e7cf      	b.n	8002262 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c2:	68a3      	ldr	r3, [r4, #8]
 80022c4:	b933      	cbnz	r3, 80022d4 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c6:	9303      	str	r3, [sp, #12]
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	9203      	str	r2, [sp, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	9303      	str	r3, [sp, #12]
 80022d2:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80022d6:	3000      	adds	r0, #0
 80022d8:	bf18      	it	ne
 80022da:	2001      	movne	r0, #1
 80022dc:	e7c2      	b.n	8002264 <HAL_SPI_Transmit+0xd0>
 80022de:	2002      	movs	r0, #2
 80022e0:	e7c0      	b.n	8002264 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80022e2:	2002      	movs	r0, #2
 80022e4:	e7c4      	b.n	8002270 <HAL_SPI_Transmit+0xdc>

080022e6 <HAL_SPI_TransmitReceive>:
{
 80022e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022ea:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80022ec:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80022f0:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80022f2:	2b01      	cmp	r3, #1
{
 80022f4:	4604      	mov	r4, r0
 80022f6:	460d      	mov	r5, r1
 80022f8:	4616      	mov	r6, r2
 80022fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80022fc:	f000 80ee 	beq.w	80024dc <HAL_SPI_TransmitReceive+0x1f6>
 8002300:	2301      	movs	r3, #1
 8002302:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002306:	f7fe fc5f 	bl	8000bc8 <HAL_GetTick>
  tmp  = hspi->State;
 800230a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800230e:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8002310:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002312:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8002314:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002316:	d00a      	beq.n	800232e <HAL_SPI_TransmitReceive+0x48>
 8002318:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800231c:	f040 80dc 	bne.w	80024d8 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002320:	68a2      	ldr	r2, [r4, #8]
 8002322:	2a00      	cmp	r2, #0
 8002324:	f040 80d8 	bne.w	80024d8 <HAL_SPI_TransmitReceive+0x1f2>
 8002328:	2b04      	cmp	r3, #4
 800232a:	f040 80d5 	bne.w	80024d8 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800232e:	2d00      	cmp	r5, #0
 8002330:	d04e      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0xea>
 8002332:	2e00      	cmp	r6, #0
 8002334:	d04c      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0xea>
 8002336:	f1b9 0f00 	cmp.w	r9, #0
 800233a:	d049      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 800233c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002340:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8002342:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002344:	bf04      	itt	eq
 8002346:	2305      	moveq	r3, #5
 8002348:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002350:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002352:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002354:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002356:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800235a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800235e:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002360:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002364:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002366:	bf58      	it	pl
 8002368:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800236a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800236c:	bf58      	it	pl
 800236e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002372:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002376:	bf58      	it	pl
 8002378:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800237a:	68e2      	ldr	r2, [r4, #12]
 800237c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002380:	d15d      	bne.n	800243e <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002382:	b119      	cbz	r1, 800238c <HAL_SPI_TransmitReceive+0xa6>
 8002384:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002386:	b292      	uxth	r2, r2
 8002388:	2a01      	cmp	r2, #1
 800238a:	d106      	bne.n	800239a <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800238c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002390:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002392:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002394:	3b01      	subs	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800239a:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800239e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b9bb      	cbnz	r3, 80023d4 <HAL_SPI_TransmitReceive+0xee>
 80023a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b9a3      	cbnz	r3, 80023d4 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80023aa:	f8cd 8000 	str.w	r8, [sp]
 80023ae:	463b      	mov	r3, r7
 80023b0:	2201      	movs	r2, #1
 80023b2:	2102      	movs	r1, #2
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fe59 	bl	800206c <SPI_WaitFlagStateUntilTimeout>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d135      	bne.n	800242a <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80023be:	4642      	mov	r2, r8
 80023c0:	4639      	mov	r1, r7
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fe99 	bl	80020fa <SPI_CheckFlag_BSY>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d07a      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023cc:	2320      	movs	r3, #32
 80023ce:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e02b      	b.n	800242c <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80023d4:	f1b9 0f00 	cmp.w	r9, #0
 80023d8:	d00f      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x114>
 80023da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b163      	cbz	r3, 80023fa <HAL_SPI_TransmitReceive+0x114>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	0791      	lsls	r1, r2, #30
 80023e6:	d508      	bpl.n	80023fa <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 80023e8:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80023ec:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023f0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80023f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b163      	cbz	r3, 800241a <HAL_SPI_TransmitReceive+0x134>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	07d2      	lsls	r2, r2, #31
 8002406:	d508      	bpl.n	800241a <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8002408:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002412:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002414:	3b01      	subs	r3, #1
 8002416:	b29b      	uxth	r3, r3
 8002418:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800241a:	1c78      	adds	r0, r7, #1
 800241c:	d0bf      	beq.n	800239e <HAL_SPI_TransmitReceive+0xb8>
 800241e:	f7fe fbd3 	bl	8000bc8 <HAL_GetTick>
 8002422:	eba0 0008 	sub.w	r0, r0, r8
 8002426:	4287      	cmp	r7, r0
 8002428:	d8b9      	bhi.n	800239e <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800242c:	2301      	movs	r3, #1
 800242e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002432:	2300      	movs	r3, #0
 8002434:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002438:	b005      	add	sp, #20
 800243a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800243e:	b119      	cbz	r1, 8002448 <HAL_SPI_TransmitReceive+0x162>
 8002440:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002442:	b292      	uxth	r2, r2
 8002444:	2a01      	cmp	r2, #1
 8002446:	d106      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002448:	f815 2b01 	ldrb.w	r2, [r5], #1
 800244c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800244e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002450:	3b01      	subs	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002456:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	b91b      	cbnz	r3, 8002468 <HAL_SPI_TransmitReceive+0x182>
 8002460:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0a0      	beq.n	80023aa <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002468:	f1b9 0f00 	cmp.w	r9, #0
 800246c:	d00f      	beq.n	800248e <HAL_SPI_TransmitReceive+0x1a8>
 800246e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	b163      	cbz	r3, 800248e <HAL_SPI_TransmitReceive+0x1a8>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	0791      	lsls	r1, r2, #30
 800247a:	d508      	bpl.n	800248e <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 800247c:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002480:	782a      	ldrb	r2, [r5, #0]
 8002482:	3501      	adds	r5, #1
 8002484:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002488:	3b01      	subs	r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800248e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	b16b      	cbz	r3, 80024b0 <HAL_SPI_TransmitReceive+0x1ca>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	07d2      	lsls	r2, r2, #31
 800249a:	d509      	bpl.n	80024b0 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 800249c:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	3601      	adds	r6, #1
 80024a4:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 80024a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80024b0:	1c7b      	adds	r3, r7, #1
 80024b2:	d0d2      	beq.n	800245a <HAL_SPI_TransmitReceive+0x174>
 80024b4:	f7fe fb88 	bl	8000bc8 <HAL_GetTick>
 80024b8:	eba0 0008 	sub.w	r0, r0, r8
 80024bc:	4287      	cmp	r7, r0
 80024be:	d8cc      	bhi.n	800245a <HAL_SPI_TransmitReceive+0x174>
 80024c0:	e7b3      	b.n	800242a <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1b1      	bne.n	800242c <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	9003      	str	r0, [sp, #12]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	9203      	str	r2, [sp, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	9303      	str	r3, [sp, #12]
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	e7a9      	b.n	800242c <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80024d8:	2002      	movs	r0, #2
 80024da:	e7a7      	b.n	800242c <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80024dc:	2002      	movs	r0, #2
 80024de:	e7ab      	b.n	8002438 <HAL_SPI_TransmitReceive+0x152>

080024e0 <HAL_SPI_Receive>:
{
 80024e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024e4:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024e6:	6843      	ldr	r3, [r0, #4]
{
 80024e8:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80024ee:	460d      	mov	r5, r1
 80024f0:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024f2:	d10c      	bne.n	800250e <HAL_SPI_Receive+0x2e>
 80024f4:	6883      	ldr	r3, [r0, #8]
 80024f6:	b953      	cbnz	r3, 800250e <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024f8:	2304      	movs	r3, #4
 80024fa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80024fe:	4613      	mov	r3, r2
 8002500:	9600      	str	r6, [sp, #0]
 8002502:	460a      	mov	r2, r1
 8002504:	f7ff feef 	bl	80022e6 <HAL_SPI_TransmitReceive>
}
 8002508:	b002      	add	sp, #8
 800250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800250e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002512:	2b01      	cmp	r3, #1
 8002514:	f000 8081 	beq.w	800261a <HAL_SPI_Receive+0x13a>
 8002518:	2301      	movs	r3, #1
 800251a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800251e:	f7fe fb53 	bl	8000bc8 <HAL_GetTick>
 8002522:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002524:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002528:	b2c0      	uxtb	r0, r0
 800252a:	2801      	cmp	r0, #1
 800252c:	d173      	bne.n	8002616 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0U))
 800252e:	2d00      	cmp	r5, #0
 8002530:	d058      	beq.n	80025e4 <HAL_SPI_Receive+0x104>
 8002532:	f1b8 0f00 	cmp.w	r8, #0
 8002536:	d055      	beq.n	80025e4 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002538:	2304      	movs	r3, #4
 800253a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002542:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002544:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002548:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800254a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800254c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800254e:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002550:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002552:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800255a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 800255e:	bf02      	ittt	eq
 8002560:	681a      	ldreq	r2, [r3, #0]
 8002562:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002566:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800256c:	bf5e      	ittt	pl
 800256e:	681a      	ldrpl	r2, [r3, #0]
 8002570:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002574:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002576:	68e3      	ldr	r3, [r4, #12]
 8002578:	b1cb      	cbz	r3, 80025ae <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 800257a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	b1d3      	cbz	r3, 80025b6 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	07d2      	lsls	r2, r2, #31
 8002586:	d53c      	bpl.n	8002602 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 800258e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002590:	3b01      	subs	r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002596:	e7f0      	b.n	800257a <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	07d0      	lsls	r0, r2, #31
 800259e:	d51f      	bpl.n	80025e0 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80025a0:	7b1b      	ldrb	r3, [r3, #12]
 80025a2:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80025a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 80025ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b6:	6863      	ldr	r3, [r4, #4]
 80025b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025bc:	d10b      	bne.n	80025d6 <HAL_SPI_Receive+0xf6>
 80025be:	68a3      	ldr	r3, [r4, #8]
 80025c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c4:	d002      	beq.n	80025cc <HAL_SPI_Receive+0xec>
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d104      	bne.n	80025d6 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d4:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80025d8:	3000      	adds	r0, #0
 80025da:	bf18      	it	ne
 80025dc:	2001      	movne	r0, #1
 80025de:	e001      	b.n	80025e4 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025e0:	b93e      	cbnz	r6, 80025f2 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 80025e2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025ea:	2300      	movs	r3, #0
 80025ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80025f0:	e78a      	b.n	8002508 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025f2:	1c71      	adds	r1, r6, #1
 80025f4:	d0db      	beq.n	80025ae <HAL_SPI_Receive+0xce>
 80025f6:	f7fe fae7 	bl	8000bc8 <HAL_GetTick>
 80025fa:	1bc0      	subs	r0, r0, r7
 80025fc:	4286      	cmp	r6, r0
 80025fe:	d8d6      	bhi.n	80025ae <HAL_SPI_Receive+0xce>
 8002600:	e7ef      	b.n	80025e2 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002602:	2e00      	cmp	r6, #0
 8002604:	d0ed      	beq.n	80025e2 <HAL_SPI_Receive+0x102>
 8002606:	1c73      	adds	r3, r6, #1
 8002608:	d0b7      	beq.n	800257a <HAL_SPI_Receive+0x9a>
 800260a:	f7fe fadd 	bl	8000bc8 <HAL_GetTick>
 800260e:	1bc0      	subs	r0, r0, r7
 8002610:	4286      	cmp	r6, r0
 8002612:	d8b2      	bhi.n	800257a <HAL_SPI_Receive+0x9a>
 8002614:	e7e5      	b.n	80025e2 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8002616:	2002      	movs	r0, #2
 8002618:	e7e4      	b.n	80025e4 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 800261a:	2002      	movs	r0, #2
 800261c:	e774      	b.n	8002508 <HAL_SPI_Receive+0x28>

0800261e <HAL_SPI_ErrorCallback>:
 800261e:	4770      	bx	lr

08002620 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002620:	6803      	ldr	r3, [r0, #0]
{
 8002622:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002624:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002626:	689a      	ldr	r2, [r3, #8]
{
 8002628:	b085      	sub	sp, #20
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800262a:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800262e:	2d01      	cmp	r5, #1
{
 8002630:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002632:	d105      	bne.n	8002640 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002634:	064d      	lsls	r5, r1, #25
 8002636:	d503      	bpl.n	8002640 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8002638:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800263a:	4798      	blx	r3
}
 800263c:	b005      	add	sp, #20
 800263e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002640:	0790      	lsls	r0, r2, #30
 8002642:	d504      	bpl.n	800264e <HAL_SPI_IRQHandler+0x2e>
 8002644:	060d      	lsls	r5, r1, #24
 8002646:	d502      	bpl.n	800264e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800264a:	4620      	mov	r0, r4
 800264c:	e7f5      	b.n	800263a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800264e:	f012 0f60 	tst.w	r2, #96	; 0x60
 8002652:	d0f3      	beq.n	800263c <HAL_SPI_IRQHandler+0x1c>
 8002654:	0688      	lsls	r0, r1, #26
 8002656:	d5f1      	bpl.n	800263c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002658:	0655      	lsls	r5, r2, #25
 800265a:	d50e      	bpl.n	800267a <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800265c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002660:	2500      	movs	r5, #0
 8002662:	2803      	cmp	r0, #3
 8002664:	d036      	beq.n	80026d4 <HAL_SPI_IRQHandler+0xb4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002668:	f040 0004 	orr.w	r0, r0, #4
 800266c:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266e:	9501      	str	r5, [sp, #4]
 8002670:	68d8      	ldr	r0, [r3, #12]
 8002672:	9001      	str	r0, [sp, #4]
 8002674:	6898      	ldr	r0, [r3, #8]
 8002676:	9001      	str	r0, [sp, #4]
 8002678:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800267a:	0690      	lsls	r0, r2, #26
 800267c:	d50c      	bpl.n	8002698 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800267e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002686:	2200      	movs	r2, #0
 8002688:	9203      	str	r2, [sp, #12]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	9203      	str	r2, [sp, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002698:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800269a:	2a00      	cmp	r2, #0
 800269c:	d0ce      	beq.n	800263c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80026a6:	2201      	movs	r2, #1
 80026a8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026ac:	078a      	lsls	r2, r1, #30
 80026ae:	d018      	beq.n	80026e2 <HAL_SPI_IRQHandler+0xc2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026b0:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80026b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026b4:	f022 0203 	bic.w	r2, r2, #3
 80026b8:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80026ba:	b118      	cbz	r0, 80026c4 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_SPI_IRQHandler+0xcc>)
 80026be:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80026c0:	f7fe febc 	bl	800143c <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80026c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d0b8      	beq.n	800263c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_SPI_IRQHandler+0xcc>)
 80026cc:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80026ce:	f7fe feb5 	bl	800143c <HAL_DMA_Abort_IT>
 80026d2:	e7b3      	b.n	800263c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d4:	9502      	str	r5, [sp, #8]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	9202      	str	r2, [sp, #8]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	9b02      	ldr	r3, [sp, #8]
        return;
 80026e0:	e7ac      	b.n	800263c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff ff9b 	bl	800261e <HAL_SPI_ErrorCallback>
 80026e8:	e7a8      	b.n	800263c <HAL_SPI_IRQHandler+0x1c>
 80026ea:	bf00      	nop
 80026ec:	080026f1 	.word	0x080026f1

080026f0 <SPI_DMAAbortOnError>:
{
 80026f0:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80026f2:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80026f6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026f8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80026fa:	f7ff ff90 	bl	800261e <HAL_SPI_ErrorCallback>
 80026fe:	bd08      	pop	{r3, pc}

08002700 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002700:	6803      	ldr	r3, [r0, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002708:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002712:	2320      	movs	r3, #32
 8002714:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002718:	4770      	bx	lr
	...

0800271c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	6805      	ldr	r5, [r0, #0]
 8002722:	68c2      	ldr	r2, [r0, #12]
 8002724:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002726:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002728:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800272c:	4313      	orrs	r3, r2
 800272e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002730:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002732:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002734:	430b      	orrs	r3, r1
 8002736:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002738:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800273c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002740:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002742:	4313      	orrs	r3, r2
 8002744:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002746:	696b      	ldr	r3, [r5, #20]
 8002748:	6982      	ldr	r2, [r0, #24]
 800274a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274e:	4313      	orrs	r3, r2
 8002750:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <UART_SetConfig+0x138>)
{
 8002754:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002756:	429d      	cmp	r5, r3
 8002758:	f04f 0419 	mov.w	r4, #25
 800275c:	d146      	bne.n	80027ec <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800275e:	f7ff fbb7 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002762:	fb04 f300 	mul.w	r3, r4, r0
 8002766:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800276a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800276e:	00b6      	lsls	r6, r6, #2
 8002770:	fbb3 f3f6 	udiv	r3, r3, r6
 8002774:	fbb3 f3f8 	udiv	r3, r3, r8
 8002778:	011e      	lsls	r6, r3, #4
 800277a:	f7ff fba9 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 800277e:	4360      	muls	r0, r4
 8002780:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fbb0 f7f3 	udiv	r7, r0, r3
 800278a:	f7ff fba1 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 800278e:	4360      	muls	r0, r4
 8002790:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	fbb3 f3f8 	udiv	r3, r3, r8
 800279e:	fb08 7313 	mls	r3, r8, r3, r7
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80027aa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80027ae:	f7ff fb8f 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 80027b2:	4360      	muls	r0, r4
 80027b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	fbb0 faf2 	udiv	sl, r0, r2
 80027be:	f7ff fb87 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027c2:	4360      	muls	r0, r4
 80027c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80027d2:	fb08 a313 	mls	r3, r8, r3, sl
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3332      	adds	r3, #50	; 0x32
 80027da:	fbb3 f3f8 	udiv	r3, r3, r8
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	433b      	orrs	r3, r7
 80027e4:	4433      	add	r3, r6
 80027e6:	60ab      	str	r3, [r5, #8]
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	f7ff fb60 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 80027f0:	fb04 f300 	mul.w	r3, r4, r0
 80027f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027fc:	00b6      	lsls	r6, r6, #2
 80027fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8002802:	fbb3 f3f8 	udiv	r3, r3, r8
 8002806:	011e      	lsls	r6, r3, #4
 8002808:	f7ff fb52 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800280c:	4360      	muls	r0, r4
 800280e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fbb0 f7f3 	udiv	r7, r0, r3
 8002818:	f7ff fb4a 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800281c:	4360      	muls	r0, r4
 800281e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb0 f3f3 	udiv	r3, r0, r3
 8002828:	fbb3 f3f8 	udiv	r3, r3, r8
 800282c:	fb08 7313 	mls	r3, r8, r3, r7
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	3332      	adds	r3, #50	; 0x32
 8002834:	fbb3 f3f8 	udiv	r3, r3, r8
 8002838:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800283c:	f7ff fb38 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8002840:	4360      	muls	r0, r4
 8002842:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	fbb0 faf2 	udiv	sl, r0, r2
 800284c:	f7ff fb30 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8002850:	e7b7      	b.n	80027c2 <UART_SetConfig+0xa6>
 8002852:	bf00      	nop
 8002854:	40013800 	.word	0x40013800

08002858 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	4604      	mov	r4, r0
 800285c:	460e      	mov	r6, r1
 800285e:	4617      	mov	r7, r2
 8002860:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002862:	6821      	ldr	r1, [r4, #0]
 8002864:	680b      	ldr	r3, [r1, #0]
 8002866:	ea36 0303 	bics.w	r3, r6, r3
 800286a:	d101      	bne.n	8002870 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800286c:	2000      	movs	r0, #0
}
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002870:	1c6b      	adds	r3, r5, #1
 8002872:	d0f7      	beq.n	8002864 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002874:	b995      	cbnz	r5, 800289c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002876:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002878:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002880:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800288a:	2320      	movs	r3, #32
 800288c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002890:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002894:	2300      	movs	r3, #0
 8002896:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800289c:	f7fe f994 	bl	8000bc8 <HAL_GetTick>
 80028a0:	1bc0      	subs	r0, r0, r7
 80028a2:	4285      	cmp	r5, r0
 80028a4:	d2dd      	bcs.n	8002862 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80028a6:	e7e6      	b.n	8002876 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080028a8 <HAL_UART_Init>:
{
 80028a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028aa:	4604      	mov	r4, r0
 80028ac:	b340      	cbz	r0, 8002900 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80028b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028b6:	b91b      	cbnz	r3, 80028c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028bc:	f003 f984 	bl	8005bc8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80028c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80028c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80028ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80028cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028d2:	f7ff ff23 	bl	800271c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80028f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80028f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80028fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80028fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
}
 8002902:	bd10      	pop	{r4, pc}

08002904 <HAL_UART_Transmit>:
{
 8002904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002908:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800290a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800290e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002910:	2b20      	cmp	r3, #32
{
 8002912:	460d      	mov	r5, r1
 8002914:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002916:	d14e      	bne.n	80029b6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002918:	2900      	cmp	r1, #0
 800291a:	d049      	beq.n	80029b0 <HAL_UART_Transmit+0xac>
 800291c:	2a00      	cmp	r2, #0
 800291e:	d047      	beq.n	80029b0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002920:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002924:	2b01      	cmp	r3, #1
 8002926:	d046      	beq.n	80029b6 <HAL_UART_Transmit+0xb2>
 8002928:	2301      	movs	r3, #1
 800292a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002932:	2321      	movs	r3, #33	; 0x21
 8002934:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002938:	f7fe f946 	bl	8000bc8 <HAL_GetTick>
 800293c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800293e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002942:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002946:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002948:	b29b      	uxth	r3, r3
 800294a:	b96b      	cbnz	r3, 8002968 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4632      	mov	r2, r6
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff ff80 	bl	8002858 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002958:	b9a8      	cbnz	r0, 8002986 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800295a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800295c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002960:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002968:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002972:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	4620      	mov	r0, r4
 800297c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800297e:	d10e      	bne.n	800299e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002980:	f7ff ff6a 	bl	8002858 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002984:	b110      	cbz	r0, 800298c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800298c:	882b      	ldrh	r3, [r5, #0]
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002994:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002996:	6923      	ldr	r3, [r4, #16]
 8002998:	b943      	cbnz	r3, 80029ac <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800299a:	3502      	adds	r5, #2
 800299c:	e7d3      	b.n	8002946 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	f7ff ff5b 	bl	8002858 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d1ef      	bne.n	8002986 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	782a      	ldrb	r2, [r5, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	3501      	adds	r5, #1
 80029ae:	e7ca      	b.n	8002946 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
 80029b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80029b6:	2002      	movs	r0, #2
}
 80029b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029bc <HAL_UART_Receive>:
{
 80029bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c0:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80029c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80029c6:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 80029c8:	2b20      	cmp	r3, #32
{
 80029ca:	460d      	mov	r5, r1
 80029cc:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80029ce:	d151      	bne.n	8002a74 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d04c      	beq.n	8002a6e <HAL_UART_Receive+0xb2>
 80029d4:	2a00      	cmp	r2, #0
 80029d6:	d04a      	beq.n	8002a6e <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80029d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d049      	beq.n	8002a74 <HAL_UART_Receive+0xb8>
 80029e0:	2301      	movs	r3, #1
 80029e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ea:	2322      	movs	r3, #34	; 0x22
 80029ec:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80029f0:	f7fe f8ea 	bl	8000bc8 <HAL_GetTick>
 80029f4:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80029f6:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029fa:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80029fe:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002a00:	b280      	uxth	r0, r0
 8002a02:	b930      	cbnz	r0, 8002a12 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002a04:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002a06:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8002a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002a12:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a14:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a1c:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1e:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a24:	4620      	mov	r0, r4
 8002a26:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a28:	d112      	bne.n	8002a50 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	f7ff ff15 	bl	8002858 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a2e:	b110      	cbz	r0, 8002a36 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8002a30:	2003      	movs	r0, #3
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a36:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a38:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a3a:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a3c:	b922      	cbnz	r2, 8002a48 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	f825 3b02 	strh.w	r3, [r5], #2
 8002a46:	e7da      	b.n	80029fe <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f825 3b01 	strh.w	r3, [r5], #1
 8002a4e:	e7d6      	b.n	80029fe <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a50:	f7ff ff02 	bl	8002858 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d1eb      	bne.n	8002a30 <HAL_UART_Receive+0x74>
 8002a58:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a5a:	6921      	ldr	r1, [r4, #16]
 8002a5c:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a5e:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a60:	b911      	cbnz	r1, 8002a68 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a62:	702b      	strb	r3, [r5, #0]
 8002a64:	4615      	mov	r5, r2
 8002a66:	e7ca      	b.n	80029fe <HAL_UART_Receive+0x42>
 8002a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6c:	e7f9      	b.n	8002a62 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8002a6e:	2001      	movs	r0, #1
 8002a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002a74:	2002      	movs	r0, #2
}
 8002a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a7a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a7a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d120      	bne.n	8002ac4 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8002a82:	b1e9      	cbz	r1, 8002ac0 <HAL_UART_Receive_IT+0x46>
 8002a84:	b1e2      	cbz	r2, 8002ac0 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002a86:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d01a      	beq.n	8002ac4 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002a8e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002a90:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a94:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a98:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a9c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002a9e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aa0:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002aa2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aa6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002aaa:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002aac:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002aae:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ab0:	f041 0101 	orr.w	r1, r1, #1
 8002ab4:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ab6:	68d1      	ldr	r1, [r2, #12]
 8002ab8:	f041 0120 	orr.w	r1, r1, #32
 8002abc:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002abe:	4770      	bx	lr
      return HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	4770      	bx	lr
    return HAL_BUSY;
 8002ac4:	2002      	movs	r0, #2
}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_UART_Transmit_DMA>:
{
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4604      	mov	r4, r0
 8002acc:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002ace:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002ad2:	2a20      	cmp	r2, #32
 8002ad4:	d12a      	bne.n	8002b2c <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8002ad6:	b339      	cbz	r1, 8002b28 <HAL_UART_Transmit_DMA+0x60>
 8002ad8:	b333      	cbz	r3, 8002b28 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8002ada:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002ade:	2a01      	cmp	r2, #1
 8002ae0:	d024      	beq.n	8002b2c <HAL_UART_Transmit_DMA+0x64>
 8002ae2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002ae6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aea:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002aec:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af0:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8002af8:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002afa:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002afc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002b00:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b02:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_UART_Transmit_DMA+0x70>)
 8002b06:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b08:	6822      	ldr	r2, [r4, #0]
 8002b0a:	3204      	adds	r2, #4
 8002b0c:	f7fe fc58 	bl	80013c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b14:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8002b16:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b18:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b1a:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002b1c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b24:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002b2c:	2002      	movs	r0, #2
}
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	08002b3f 	.word	0x08002b3f
 8002b34:	08002b6d 	.word	0x08002b6d
 8002b38:	08002bf5 	.word	0x08002bf5

08002b3c <HAL_UART_TxCpltCallback>:
 8002b3c:	4770      	bx	lr

08002b3e <UART_DMATransmitCplt>:
{
 8002b3e:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b40:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b42:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f013 0320 	ands.w	r3, r3, #32
 8002b4a:	d10a      	bne.n	8002b62 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8002b4c:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b56:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7ff ffea 	bl	8002b3c <HAL_UART_TxCpltCallback>
 8002b68:	bd08      	pop	{r3, pc}

08002b6a <HAL_UART_TxHalfCpltCallback>:
 8002b6a:	4770      	bx	lr

08002b6c <UART_DMATxHalfCplt>:
{
 8002b6c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002b6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002b70:	f7ff fffb 	bl	8002b6a <HAL_UART_TxHalfCpltCallback>
 8002b74:	bd08      	pop	{r3, pc}

08002b76 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002b76:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002b7a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002b7c:	2b22      	cmp	r3, #34	; 0x22
 8002b7e:	d136      	bne.n	8002bee <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b80:	6883      	ldr	r3, [r0, #8]
 8002b82:	6901      	ldr	r1, [r0, #16]
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	6802      	ldr	r2, [r0, #0]
 8002b8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b8c:	d123      	bne.n	8002bd6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b8e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b90:	b9e9      	cbnz	r1, 8002bce <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b96:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002b9a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002b9c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002b9e:	3c01      	subs	r4, #1
 8002ba0:	b2a4      	uxth	r4, r4
 8002ba2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002ba4:	b98c      	cbnz	r4, 8002bca <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	f022 0220 	bic.w	r2, r2, #32
 8002bae:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb6:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002bc6:	f002 fbdb 	bl	8005380 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002bca:	2000      	movs	r0, #0
}
 8002bcc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f823 2b01 	strh.w	r2, [r3], #1
 8002bd4:	e7e1      	b.n	8002b9a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002bd6:	b921      	cbnz	r1, 8002be2 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bd8:	1c59      	adds	r1, r3, #1
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e7dc      	b.n	8002b9c <UART_Receive_IT+0x26>
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	1c59      	adds	r1, r3, #1
 8002be6:	6281      	str	r1, [r0, #40]	; 0x28
 8002be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bec:	e7f7      	b.n	8002bde <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002bee:	2002      	movs	r0, #2
 8002bf0:	bd10      	pop	{r4, pc}

08002bf2 <HAL_UART_ErrorCallback>:
 8002bf2:	4770      	bx	lr

08002bf4 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf4:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8002bf6:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bfc:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002c00:	2821      	cmp	r0, #33	; 0x21
 8002c02:	d10a      	bne.n	8002c1a <UART_DMAError+0x26>
 8002c04:	0612      	lsls	r2, r2, #24
 8002c06:	d508      	bpl.n	8002c1a <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8002c08:	2200      	movs	r2, #0
 8002c0a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c12:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	2220      	movs	r2, #32
 8002c16:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002c1a:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c1c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002c20:	2a22      	cmp	r2, #34	; 0x22
 8002c22:	d106      	bne.n	8002c32 <UART_DMAError+0x3e>
 8002c24:	065b      	lsls	r3, r3, #25
 8002c26:	d504      	bpl.n	8002c32 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002c28:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8002c2a:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002c2c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c2e:	f7ff fd67 	bl	8002700 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002c34:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002c3c:	f7ff ffd9 	bl	8002bf2 <HAL_UART_ErrorCallback>
 8002c40:	bd08      	pop	{r3, pc}
	...

08002c44 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c44:	6803      	ldr	r3, [r0, #0]
{
 8002c46:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c48:	681a      	ldr	r2, [r3, #0]
{
 8002c4a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002c4c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c4e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c50:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002c52:	d107      	bne.n	8002c64 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c54:	0696      	lsls	r6, r2, #26
 8002c56:	d55a      	bpl.n	8002d0e <HAL_UART_IRQHandler+0xca>
 8002c58:	068d      	lsls	r5, r1, #26
 8002c5a:	d558      	bpl.n	8002d0e <HAL_UART_IRQHandler+0xca>
}
 8002c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002c60:	f7ff bf89 	b.w	8002b76 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c64:	f015 0501 	ands.w	r5, r5, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_UART_IRQHandler+0x2c>
 8002c6a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002c6e:	d04e      	beq.n	8002d0e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c70:	07d3      	lsls	r3, r2, #31
 8002c72:	d505      	bpl.n	8002c80 <HAL_UART_IRQHandler+0x3c>
 8002c74:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c76:	bf42      	ittt	mi
 8002c78:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002c7a:	f043 0301 	orrmi.w	r3, r3, #1
 8002c7e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c80:	0750      	lsls	r0, r2, #29
 8002c82:	d504      	bpl.n	8002c8e <HAL_UART_IRQHandler+0x4a>
 8002c84:	b11d      	cbz	r5, 8002c8e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c8e:	0793      	lsls	r3, r2, #30
 8002c90:	d504      	bpl.n	8002c9c <HAL_UART_IRQHandler+0x58>
 8002c92:	b11d      	cbz	r5, 8002c9c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c9c:	0716      	lsls	r6, r2, #28
 8002c9e:	d504      	bpl.n	8002caa <HAL_UART_IRQHandler+0x66>
 8002ca0:	b11d      	cbz	r5, 8002caa <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002caa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d066      	beq.n	8002d7e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cb0:	0695      	lsls	r5, r2, #26
 8002cb2:	d504      	bpl.n	8002cbe <HAL_UART_IRQHandler+0x7a>
 8002cb4:	0688      	lsls	r0, r1, #26
 8002cb6:	d502      	bpl.n	8002cbe <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff ff5c 	bl	8002b76 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002cc0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002cc6:	0711      	lsls	r1, r2, #28
 8002cc8:	d402      	bmi.n	8002cd0 <HAL_UART_IRQHandler+0x8c>
 8002cca:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002cce:	d01a      	beq.n	8002d06 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002cd0:	f7ff fd16 	bl	8002700 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	0652      	lsls	r2, r2, #25
 8002cda:	d510      	bpl.n	8002cfe <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cdc:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002cde:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002ce6:	b150      	cbz	r0, 8002cfe <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_UART_IRQHandler+0x13c>)
 8002cea:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cec:	f7fe fba6 	bl	800143c <HAL_DMA_Abort_IT>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d044      	beq.n	8002d7e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cfc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7ff ff77 	bl	8002bf2 <HAL_UART_ErrorCallback>
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002d06:	f7ff ff74 	bl	8002bf2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d0e:	0616      	lsls	r6, r2, #24
 8002d10:	d527      	bpl.n	8002d62 <HAL_UART_IRQHandler+0x11e>
 8002d12:	060d      	lsls	r5, r1, #24
 8002d14:	d525      	bpl.n	8002d62 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d16:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002d1a:	2a21      	cmp	r2, #33	; 0x21
 8002d1c:	d12f      	bne.n	8002d7e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d1e:	68a2      	ldr	r2, [r4, #8]
 8002d20:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002d24:	6a22      	ldr	r2, [r4, #32]
 8002d26:	d117      	bne.n	8002d58 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d28:	8811      	ldrh	r1, [r2, #0]
 8002d2a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d2e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d30:	6921      	ldr	r1, [r4, #16]
 8002d32:	b979      	cbnz	r1, 8002d54 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002d34:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002d36:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002d38:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002d3a:	3a01      	subs	r2, #1
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002d40:	b9ea      	cbnz	r2, 8002d7e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d48:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002d54:	3201      	adds	r2, #1
 8002d56:	e7ee      	b.n	8002d36 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d58:	1c51      	adds	r1, r2, #1
 8002d5a:	6221      	str	r1, [r4, #32]
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	e7ea      	b.n	8002d38 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d62:	0650      	lsls	r0, r2, #25
 8002d64:	d50b      	bpl.n	8002d7e <HAL_UART_IRQHandler+0x13a>
 8002d66:	064a      	lsls	r2, r1, #25
 8002d68:	d509      	bpl.n	8002d7e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d6a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002d6c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	2320      	movs	r3, #32
 8002d76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002d7a:	f7ff fedf 	bl	8002b3c <HAL_UART_TxCpltCallback>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	08002d85 	.word	0x08002d85

08002d84 <UART_DMAAbortOnError>:
{
 8002d84:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002d86:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d88:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002d8a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d8c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002d8e:	f7ff ff30 	bl	8002bf2 <HAL_UART_ErrorCallback>
 8002d92:	bd08      	pop	{r3, pc}

08002d94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d94:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002d96:	f000 ff2b 	bl	8003bf0 <vTaskStartScheduler>
  
  return osOK;
}
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd08      	pop	{r3, pc}

08002d9e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d9e:	f100 0308 	add.w	r3, r0, #8
 8002da2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002daa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dac:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dae:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002db0:	6003      	str	r3, [r0, #0]
 8002db2:	4770      	bx	lr

08002db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	6103      	str	r3, [r0, #16]
 8002db8:	4770      	bx	lr

08002dba <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dba:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dbc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002dbe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dc0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dc6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002dc8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dca:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002dcc:	3301      	adds	r3, #1
 8002dce:	6003      	str	r3, [r0, #0]
 8002dd0:	4770      	bx	lr

08002dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd2:	680a      	ldr	r2, [r1, #0]
{
 8002dd4:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dd6:	1c53      	adds	r3, r2, #1
 8002dd8:	d10a      	bne.n	8002df0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dda:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002de0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002de6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002de8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002dea:	3301      	adds	r3, #1
 8002dec:	6003      	str	r3, [r0, #0]
 8002dee:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002df0:	f100 0308 	add.w	r3, r0, #8
 8002df4:	685c      	ldr	r4, [r3, #4]
 8002df6:	6825      	ldr	r5, [r4, #0]
 8002df8:	42aa      	cmp	r2, r5
 8002dfa:	d3ef      	bcc.n	8002ddc <vListInsert+0xa>
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	e7f9      	b.n	8002df4 <vListInsert+0x22>

08002e00 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e00:	6841      	ldr	r1, [r0, #4]
 8002e02:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e04:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e06:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e08:	6882      	ldr	r2, [r0, #8]
 8002e0a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e10:	bf08      	it	eq
 8002e12:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e14:	2200      	movs	r2, #0
 8002e16:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	3801      	subs	r0, #1
 8002e1c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002e1e:	4770      	bx	lr

08002e20 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <prvTaskExitError+0x2c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	d008      	beq.n	8002e3a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	e7fe      	b.n	8002e38 <prvTaskExitError+0x18>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	e7fe      	b.n	8002e4a <prvTaskExitError+0x2a>
 8002e4c:	20000008 	.word	0x20000008

08002e50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002e50:	4806      	ldr	r0, [pc, #24]	; (8002e6c <prvPortStartFirstTask+0x1c>)
 8002e52:	6800      	ldr	r0, [r0, #0]
 8002e54:	6800      	ldr	r0, [r0, #0]
 8002e56:	f380 8808 	msr	MSP, r0
 8002e5a:	b662      	cpsie	i
 8002e5c:	b661      	cpsie	f
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	df00      	svc	0
 8002e68:	bf00      	nop
 8002e6a:	0000      	.short	0x0000
 8002e6c:	e000ed08 	.word	0xe000ed08

08002e70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e7a:	f021 0101 	bic.w	r1, r1, #1
 8002e7e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e86:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002e8a:	3840      	subs	r0, #64	; 0x40
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	08002e21 	.word	0x08002e21
	...

08002ea0 <SVC_Handler>:
	__asm volatile (
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <pxCurrentTCBConst2>)
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002eaa:	f380 8809 	msr	PSP, r0
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f380 8811 	msr	BASEPRI, r0
 8002eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8002ebe:	4770      	bx	lr

08002ec0 <pxCurrentTCBConst2>:
 8002ec0:	2000507c 	.word	0x2000507c

08002ec4 <vPortEnterCritical>:
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <vPortEnterCritical+0x3c>)
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002eda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002edc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002ede:	d10d      	bne.n	8002efc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <vPortEnterCritical+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002ee8:	d008      	beq.n	8002efc <vPortEnterCritical+0x38>
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	e7fe      	b.n	8002efa <vPortEnterCritical+0x36>
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000008 	.word	0x20000008
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <vPortExitCritical+0x24>)
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	b943      	cbnz	r3, 8002f20 <vPortExitCritical+0x18>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	e7fe      	b.n	8002f1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002f20:	3b01      	subs	r3, #1
 8002f22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f24:	b90b      	cbnz	r3, 8002f2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	4770      	bx	lr
 8002f2c:	20000008 	.word	0x20000008

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f40:	6010      	str	r0, [r2, #0]
 8002f42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f4a:	f380 8811 	msr	BASEPRI, r0
 8002f4e:	f000 fff9 	bl	8003f44 <vTaskSwitchContext>
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8811 	msr	BASEPRI, r0
 8002f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f66:	f380 8809 	msr	PSP, r0
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	4770      	bx	lr

08002f70 <pxCurrentTCBConst>:
 8002f70:	2000507c 	.word	0x2000507c

08002f74 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f74:	b508      	push	{r3, lr}
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f86:	f000 fe77 	bl	8003c78 <xTaskIncrementTick>
 8002f8a:	b118      	cbz	r0, 8002f94 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <xPortSysTickHandler+0x28>)
 8002f92:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002f94:	2300      	movs	r3, #0
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	bd08      	pop	{r3, pc}
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <vPortSetupTimerInterrupt+0x1c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <vPortSetupTimerInterrupt+0x20>)
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <vPortSetupTimerInterrupt+0x24>)
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000004c 	.word	0x2000004c
 8002fc0:	e000e014 	.word	0xe000e014
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <xPortStartScheduler>:
{
 8002fc8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fca:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fcc:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fd8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fe2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fe6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fec:	2207      	movs	r2, #7
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <xPortStartScheduler+0x88>)
 8002ff0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ff2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002ff6:	1e54      	subs	r4, r2, #1
 8002ff8:	0600      	lsls	r0, r0, #24
 8002ffa:	d41c      	bmi.n	8003036 <xPortStartScheduler+0x6e>
 8002ffc:	b101      	cbz	r1, 8003000 <xPortStartScheduler+0x38>
 8002ffe:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003004:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003008:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <xPortStartScheduler+0x80>)
 800300e:	b2db      	uxtb	r3, r3
 8003010:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <xPortStartScheduler+0x8c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800301a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003022:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003024:	f7ff ffbc 	bl	8002fa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003028:	2200      	movs	r2, #0
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <xPortStartScheduler+0x90>)
 800302c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800302e:	f7ff ff0f 	bl	8002e50 <prvPortStartFirstTask>
	prvTaskExitError();
 8003032:	f7ff fef5 	bl	8002e20 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003036:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800303a:	2101      	movs	r1, #1
 800303c:	0052      	lsls	r2, r2, #1
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f88d 2003 	strb.w	r2, [sp, #3]
 8003044:	4622      	mov	r2, r4
 8003046:	e7d4      	b.n	8002ff2 <xPortStartScheduler+0x2a>
 8003048:	e000e400 	.word	0xe000e400
 800304c:	2000023c 	.word	0x2000023c
 8003050:	20000240 	.word	0x20000240
 8003054:	e000ed20 	.word	0xe000ed20
 8003058:	20000008 	.word	0x20000008

0800305c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800305c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d90e      	bls.n	8003082 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003064:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <vPortValidateInterruptPriority+0x4c>)
 8003066:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003068:	4a10      	ldr	r2, [pc, #64]	; (80030ac <vPortValidateInterruptPriority+0x50>)
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	e7fe      	b.n	8003080 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <vPortValidateInterruptPriority+0x54>)
 8003084:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <vPortValidateInterruptPriority+0x58>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800308e:	4293      	cmp	r3, r2
 8003090:	d908      	bls.n	80030a4 <vPortValidateInterruptPriority+0x48>
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	e7fe      	b.n	80030a2 <vPortValidateInterruptPriority+0x46>
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e3f0 	.word	0xe000e3f0
 80030ac:	2000023c 	.word	0x2000023c
 80030b0:	e000ed0c 	.word	0xe000ed0c
 80030b4:	20000240 	.word	0x20000240

080030b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030b8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <prvInsertBlockIntoFreeList+0x40>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4282      	cmp	r2, r0
 80030c0:	d318      	bcc.n	80030f4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030c2:	685c      	ldr	r4, [r3, #4]
 80030c4:	1919      	adds	r1, r3, r4
 80030c6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030c8:	bf01      	itttt	eq
 80030ca:	6841      	ldreq	r1, [r0, #4]
 80030cc:	4618      	moveq	r0, r3
 80030ce:	1909      	addeq	r1, r1, r4
 80030d0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030d2:	6844      	ldr	r4, [r0, #4]
 80030d4:	1901      	adds	r1, r0, r4
 80030d6:	428a      	cmp	r2, r1
 80030d8:	d107      	bne.n	80030ea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <prvInsertBlockIntoFreeList+0x44>)
 80030dc:	6809      	ldr	r1, [r1, #0]
 80030de:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030e0:	bf1f      	itttt	ne
 80030e2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030e4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030e6:	1909      	addne	r1, r1, r4
 80030e8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030ea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030ec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030ee:	bf18      	it	ne
 80030f0:	6018      	strne	r0, [r3, #0]
 80030f2:	bd10      	pop	{r4, pc}
 80030f4:	4613      	mov	r3, r2
 80030f6:	e7e1      	b.n	80030bc <prvInsertBlockIntoFreeList+0x4>
 80030f8:	20005074 	.word	0x20005074
 80030fc:	20000244 	.word	0x20000244

08003100 <pvPortMalloc>:
{
 8003100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003104:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003106:	f000 fda9 	bl	8003c5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800310a:	493d      	ldr	r1, [pc, #244]	; (8003200 <pvPortMalloc+0x100>)
 800310c:	4d3d      	ldr	r5, [pc, #244]	; (8003204 <pvPortMalloc+0x104>)
 800310e:	680b      	ldr	r3, [r1, #0]
 8003110:	b9fb      	cbnz	r3, 8003152 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003112:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8003114:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003116:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003118:	bf0f      	iteee	eq
 800311a:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800311e:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003120:	4b3a      	ldrne	r3, [pc, #232]	; (800320c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003122:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003126:	bf18      	it	ne
 8003128:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800312a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800312c:	4e38      	ldr	r6, [pc, #224]	; (8003210 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800312e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003130:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003134:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003136:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003138:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800313a:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 800313c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800313e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003140:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003144:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003146:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003148:	4b33      	ldr	r3, [pc, #204]	; (8003218 <pvPortMalloc+0x118>)
 800314a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800314c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003150:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003152:	682f      	ldr	r7, [r5, #0]
 8003154:	4227      	tst	r7, r4
 8003156:	d116      	bne.n	8003186 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003158:	2c00      	cmp	r4, #0
 800315a:	d040      	beq.n	80031de <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800315c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003160:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003162:	bf1c      	itt	ne
 8003164:	f023 0307 	bicne.w	r3, r3, #7
 8003168:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800316a:	b163      	cbz	r3, 8003186 <pvPortMalloc+0x86>
 800316c:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <pvPortMalloc+0x118>)
 800316e:	6816      	ldr	r6, [r2, #0]
 8003170:	4690      	mov	r8, r2
 8003172:	42b3      	cmp	r3, r6
 8003174:	d807      	bhi.n	8003186 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003176:	4a26      	ldr	r2, [pc, #152]	; (8003210 <pvPortMalloc+0x110>)
 8003178:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800317a:	6868      	ldr	r0, [r5, #4]
 800317c:	4283      	cmp	r3, r0
 800317e:	d804      	bhi.n	800318a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003180:	6809      	ldr	r1, [r1, #0]
 8003182:	428d      	cmp	r5, r1
 8003184:	d107      	bne.n	8003196 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003186:	2400      	movs	r4, #0
 8003188:	e029      	b.n	80031de <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800318a:	682c      	ldr	r4, [r5, #0]
 800318c:	2c00      	cmp	r4, #0
 800318e:	d0f7      	beq.n	8003180 <pvPortMalloc+0x80>
 8003190:	462a      	mov	r2, r5
 8003192:	4625      	mov	r5, r4
 8003194:	e7f1      	b.n	800317a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003196:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003198:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800319a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800319c:	1ac2      	subs	r2, r0, r3
 800319e:	2a10      	cmp	r2, #16
 80031a0:	d90f      	bls.n	80031c2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031a2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031a4:	0741      	lsls	r1, r0, #29
 80031a6:	d008      	beq.n	80031ba <pvPortMalloc+0xba>
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	e7fe      	b.n	80031b8 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031ba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031bc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031be:	f7ff ff7b 	bl	80030b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031c2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031c4:	4913      	ldr	r1, [pc, #76]	; (8003214 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031c6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031c8:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80031ca:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031cc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031ce:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031d2:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031d4:	bf38      	it	cc
 80031d6:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d8:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031da:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031dc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80031de:	f000 fddd 	bl	8003d9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e2:	0763      	lsls	r3, r4, #29
 80031e4:	d008      	beq.n	80031f8 <pvPortMalloc+0xf8>
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	e7fe      	b.n	80031f6 <pvPortMalloc+0xf6>
}
 80031f8:	4620      	mov	r0, r4
 80031fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031fe:	bf00      	nop
 8003200:	20000244 	.word	0x20000244
 8003204:	20005068 	.word	0x20005068
 8003208:	20000248 	.word	0x20000248
 800320c:	20005068 	.word	0x20005068
 8003210:	20005074 	.word	0x20005074
 8003214:	20005070 	.word	0x20005070
 8003218:	2000506c 	.word	0x2000506c

0800321c <vPortFree>:
{
 800321c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800321e:	4604      	mov	r4, r0
 8003220:	b370      	cbz	r0, 8003280 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <vPortFree+0x68>)
 8003224:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4213      	tst	r3, r2
 800322c:	d108      	bne.n	8003240 <vPortFree+0x24>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	e7fe      	b.n	800323e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003240:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003244:	b141      	cbz	r1, 8003258 <vPortFree+0x3c>
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	e7fe      	b.n	8003256 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003258:	ea23 0302 	bic.w	r3, r3, r2
 800325c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003260:	f000 fcfc 	bl	8003c5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003264:	4a08      	ldr	r2, [pc, #32]	; (8003288 <vPortFree+0x6c>)
 8003266:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800326a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800326c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003270:	440b      	add	r3, r1
 8003272:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003274:	f7ff ff20 	bl	80030b8 <prvInsertBlockIntoFreeList>
}
 8003278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800327c:	f000 bd8e 	b.w	8003d9c <xTaskResumeAll>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	20005068 	.word	0x20005068
 8003288:	2000506c 	.word	0x2000506c

0800328c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003290:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003292:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003294:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003296:	b942      	cbnz	r2, 80032aa <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003298:	6805      	ldr	r5, [r0, #0]
 800329a:	b99d      	cbnz	r5, 80032c4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800329c:	6840      	ldr	r0, [r0, #4]
 800329e:	f000 ff8f 	bl	80041c0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80032a2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80032a4:	3601      	adds	r6, #1
 80032a6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80032aa:	b96d      	cbnz	r5, 80032c8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032ac:	6880      	ldr	r0, [r0, #8]
 80032ae:	f002 fd81 	bl	8005db4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032b6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032ba:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032bc:	4293      	cmp	r3, r2
 80032be:	d301      	bcc.n	80032c4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80032c4:	2000      	movs	r0, #0
 80032c6:	e7ed      	b.n	80032a4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c8:	68c0      	ldr	r0, [r0, #12]
 80032ca:	f002 fd73 	bl	8005db4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032d0:	68e2      	ldr	r2, [r4, #12]
 80032d2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032d6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032d8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032da:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032dc:	bf3e      	ittt	cc
 80032de:	6862      	ldrcc	r2, [r4, #4]
 80032e0:	189b      	addcc	r3, r3, r2
 80032e2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80032e4:	2d02      	cmp	r5, #2
 80032e6:	d1ed      	bne.n	80032c4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e8:	b10e      	cbz	r6, 80032ee <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80032ea:	3e01      	subs	r6, #1
 80032ec:	e7ea      	b.n	80032c4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80032ee:	4630      	mov	r0, r6
 80032f0:	e7d8      	b.n	80032a4 <prvCopyDataToQueue+0x18>

080032f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032f2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80032f6:	b410      	push	{r4}
 80032f8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032fa:	b162      	cbz	r2, 8003316 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032fc:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032fe:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003300:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003302:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003304:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003306:	bf28      	it	cs
 8003308:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800330a:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800330c:	bf28      	it	cs
 800330e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003310:	68d9      	ldr	r1, [r3, #12]
 8003312:	f002 bd4f 	b.w	8005db4 <memcpy>
}
 8003316:	bc10      	pop	{r4}
 8003318:	4770      	bx	lr

0800331a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800331a:	b570      	push	{r4, r5, r6, lr}
 800331c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800331e:	f7ff fdd1 	bl	8002ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003322:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003326:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800332a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800332c:	2d00      	cmp	r5, #0
 800332e:	dc14      	bgt.n	800335a <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003330:	23ff      	movs	r3, #255	; 0xff
 8003332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003336:	f7ff fde7 	bl	8002f08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800333a:	f7ff fdc3 	bl	8002ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800333e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003342:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003346:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003348:	2d00      	cmp	r5, #0
 800334a:	dc12      	bgt.n	8003372 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800334c:	23ff      	movs	r3, #255	; 0xff
 800334e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003356:	f7ff bdd7 	b.w	8002f08 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e7      	beq.n	8003330 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003360:	4630      	mov	r0, r6
 8003362:	f000 fe43 	bl	8003fec <xTaskRemoveFromEventList>
 8003366:	b108      	cbz	r0, 800336c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003368:	f000 fecc 	bl	8004104 <vTaskMissedYield>
 800336c:	3d01      	subs	r5, #1
 800336e:	b26d      	sxtb	r5, r5
 8003370:	e7dc      	b.n	800332c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0e9      	beq.n	800334c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003378:	4630      	mov	r0, r6
 800337a:	f000 fe37 	bl	8003fec <xTaskRemoveFromEventList>
 800337e:	b108      	cbz	r0, 8003384 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003380:	f000 fec0 	bl	8004104 <vTaskMissedYield>
 8003384:	3d01      	subs	r5, #1
 8003386:	b26d      	sxtb	r5, r5
 8003388:	e7de      	b.n	8003348 <prvUnlockQueue+0x2e>
	...

0800338c <xQueueGenericReset>:
{
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003390:	4604      	mov	r4, r0
 8003392:	b940      	cbnz	r0, 80033a6 <xQueueGenericReset+0x1a>
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80033a6:	f7ff fd8d 	bl	8002ec4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80033ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	4343      	muls	r3, r0
 80033b2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033b4:	1a1b      	subs	r3, r3, r0
 80033b6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033b8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033ba:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033bc:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80033be:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033c0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80033c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80033cc:	b995      	cbnz	r5, 80033f4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	b163      	cbz	r3, 80033ec <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d2:	f104 0010 	add.w	r0, r4, #16
 80033d6:	f000 fe09 	bl	8003fec <xTaskRemoveFromEventList>
 80033da:	b138      	cbz	r0, 80033ec <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80033dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <xQueueGenericReset+0x7c>)
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80033ec:	f7ff fd8c 	bl	8002f08 <vPortExitCritical>
}
 80033f0:	2001      	movs	r0, #1
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033f4:	f104 0010 	add.w	r0, r4, #16
 80033f8:	f7ff fcd1 	bl	8002d9e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003400:	f7ff fccd 	bl	8002d9e <vListInitialise>
 8003404:	e7f2      	b.n	80033ec <xQueueGenericReset+0x60>
 8003406:	bf00      	nop
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <xQueueGenericCreate>:
	{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003410:	4606      	mov	r6, r0
 8003412:	b940      	cbnz	r0, 8003426 <xQueueGenericCreate+0x1a>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	e7fe      	b.n	8003424 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003426:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003428:	3048      	adds	r0, #72	; 0x48
 800342a:	f7ff fe69 	bl	8003100 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800342e:	4604      	mov	r4, r0
 8003430:	b150      	cbz	r0, 8003448 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003438:	b945      	cbnz	r5, 800344c <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800343a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800343c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800343e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003440:	2101      	movs	r1, #1
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff ffa2 	bl	800338c <xQueueGenericReset>
	}
 8003448:	4620      	mov	r0, r4
 800344a:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800344c:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003450:	6003      	str	r3, [r0, #0]
 8003452:	e7f3      	b.n	800343c <xQueueGenericCreate+0x30>

08003454 <xQueueGenericSend>:
{
 8003454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	4689      	mov	r9, r1
 800345a:	9201      	str	r2, [sp, #4]
 800345c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800345e:	4604      	mov	r4, r0
 8003460:	b940      	cbnz	r0, 8003474 <xQueueGenericSend+0x20>
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	e7fe      	b.n	8003472 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003474:	2900      	cmp	r1, #0
 8003476:	f040 8088 	bne.w	800358a <xQueueGenericSend+0x136>
 800347a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8084 	beq.w	800358a <xQueueGenericSend+0x136>
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	e7fe      	b.n	8003492 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003494:	9e01      	ldr	r6, [sp, #4]
 8003496:	2e00      	cmp	r6, #0
 8003498:	f000 8082 	beq.w	80035a0 <xQueueGenericSend+0x14c>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80034ae:	9d01      	ldr	r5, [sp, #4]
 80034b0:	b91d      	cbnz	r5, 80034ba <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80034b2:	f7ff fd29 	bl	8002f08 <vPortExitCritical>
			return errQUEUE_FULL;
 80034b6:	2000      	movs	r0, #0
 80034b8:	e058      	b.n	800356c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80034ba:	b916      	cbnz	r6, 80034c2 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 80034bc:	a802      	add	r0, sp, #8
 80034be:	f000 fdd7 	bl	8004070 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80034c2:	f7ff fd21 	bl	8002f08 <vPortExitCritical>
		vTaskSuspendAll();
 80034c6:	f000 fbc9 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034ca:	f7ff fcfb 	bl	8002ec4 <vPortEnterCritical>
 80034ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034d2:	2bff      	cmp	r3, #255	; 0xff
 80034d4:	bf08      	it	eq
 80034d6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80034da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	bf08      	it	eq
 80034e2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80034e6:	f7ff fd0f 	bl	8002f08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ea:	a901      	add	r1, sp, #4
 80034ec:	a802      	add	r0, sp, #8
 80034ee:	f000 fdcf 	bl	8004090 <xTaskCheckForTimeOut>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d143      	bne.n	800357e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034f6:	f7ff fce5 	bl	8002ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80034fc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f7ff fd03 	bl	8002f08 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003502:	42ae      	cmp	r6, r5
 8003504:	d135      	bne.n	8003572 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003506:	9901      	ldr	r1, [sp, #4]
 8003508:	f104 0010 	add.w	r0, r4, #16
 800350c:	f000 fd54 	bl	8003fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff ff02 	bl	800331a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003516:	f000 fc41 	bl	8003d9c <xTaskResumeAll>
 800351a:	b938      	cbnz	r0, 800352c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 800351c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003520:	f8ca 3000 	str.w	r3, [sl]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800352e:	f7ff fcc9 	bl	8002ec4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003536:	429a      	cmp	r2, r3
 8003538:	d301      	bcc.n	800353e <xQueueGenericSend+0xea>
 800353a:	2f02      	cmp	r7, #2
 800353c:	d1b7      	bne.n	80034ae <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800353e:	463a      	mov	r2, r7
 8003540:	4649      	mov	r1, r9
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff fea2 	bl	800328c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800354a:	b11b      	cbz	r3, 8003554 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800354c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003550:	f000 fd4c 	bl	8003fec <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003554:	b138      	cbz	r0, 8003566 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <xQueueGenericSend+0x168>)
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003566:	f7ff fccf 	bl	8002f08 <vPortExitCritical>
				return pdPASS;
 800356a:	2001      	movs	r0, #1
}
 800356c:	b004      	add	sp, #16
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003572:	4620      	mov	r0, r4
 8003574:	f7ff fed1 	bl	800331a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003578:	f000 fc10 	bl	8003d9c <xTaskResumeAll>
 800357c:	e7d6      	b.n	800352c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800357e:	4620      	mov	r0, r4
 8003580:	f7ff fecb 	bl	800331a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003584:	f000 fc0a 	bl	8003d9c <xTaskResumeAll>
 8003588:	e795      	b.n	80034b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800358a:	2f02      	cmp	r7, #2
 800358c:	d102      	bne.n	8003594 <xQueueGenericSend+0x140>
 800358e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10a      	bne.n	80035aa <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003594:	f000 fdbc 	bl	8004110 <xTaskGetSchedulerState>
 8003598:	2800      	cmp	r0, #0
 800359a:	f43f af7b 	beq.w	8003494 <xQueueGenericSend+0x40>
 800359e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80035a0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80035a4:	f8df a014 	ldr.w	sl, [pc, #20]	; 80035bc <xQueueGenericSend+0x168>
 80035a8:	e7c1      	b.n	800352e <xQueueGenericSend+0xda>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	e7fe      	b.n	80035ba <xQueueGenericSend+0x166>
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xQueueGenericSendFromISR>:
{
 80035c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c4:	4688      	mov	r8, r1
 80035c6:	4691      	mov	r9, r2
 80035c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80035ca:	4604      	mov	r4, r0
 80035cc:	b940      	cbnz	r0, 80035e0 <xQueueGenericSendFromISR+0x20>
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	e7fe      	b.n	80035de <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e0:	bb09      	cbnz	r1, 8003626 <xQueueGenericSendFromISR+0x66>
 80035e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035e4:	b1fb      	cbz	r3, 8003626 <xQueueGenericSendFromISR+0x66>
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035fc:	f000 fcf6 	bl	8003fec <xTaskRemoveFromEventList>
 8003600:	2800      	cmp	r0, #0
 8003602:	d034      	beq.n	800366e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8003604:	f1b9 0f00 	cmp.w	r9, #0
 8003608:	d031      	beq.n	800366e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800360a:	2001      	movs	r0, #1
 800360c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003610:	f386 8811 	msr	BASEPRI, r6
}
 8003614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003618:	3501      	adds	r5, #1
 800361a:	b26d      	sxtb	r5, r5
 800361c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003620:	e025      	b.n	800366e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8003622:	2000      	movs	r0, #0
 8003624:	e7f4      	b.n	8003610 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003626:	2f02      	cmp	r7, #2
 8003628:	d102      	bne.n	8003630 <xQueueGenericSendFromISR+0x70>
 800362a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d120      	bne.n	8003672 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003630:	f7ff fd14 	bl	800305c <vPortValidateInterruptPriority>
	__asm volatile
 8003634:	f3ef 8611 	mrs	r6, BASEPRI
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003648:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800364a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800364c:	429a      	cmp	r2, r3
 800364e:	d301      	bcc.n	8003654 <xQueueGenericSendFromISR+0x94>
 8003650:	2f02      	cmp	r7, #2
 8003652:	d1e6      	bne.n	8003622 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003654:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003658:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800365a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800365c:	4641      	mov	r1, r8
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff fe14 	bl	800328c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003664:	1c6b      	adds	r3, r5, #1
 8003666:	d1d7      	bne.n	8003618 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1c4      	bne.n	80035f8 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800366e:	2001      	movs	r0, #1
 8003670:	e7ce      	b.n	8003610 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	e7fe      	b.n	8003682 <xQueueGenericSendFromISR+0xc2>

08003684 <xQueueGenericReceive>:
{
 8003684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4688      	mov	r8, r1
 800368a:	9201      	str	r2, [sp, #4]
 800368c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800368e:	4604      	mov	r4, r0
 8003690:	b940      	cbnz	r0, 80036a4 <xQueueGenericReceive+0x20>
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	e7fe      	b.n	80036a2 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a4:	2900      	cmp	r1, #0
 80036a6:	f040 80a5 	bne.w	80037f4 <xQueueGenericReceive+0x170>
 80036aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a1 	beq.w	80037f4 <xQueueGenericReceive+0x170>
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c4:	9e01      	ldr	r6, [sp, #4]
 80036c6:	2e00      	cmp	r6, #0
 80036c8:	f000 809a 	beq.w	8003800 <xQueueGenericReceive+0x17c>
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036de:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80036e0:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d06d      	beq.n	80037c2 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036ea:	e05f      	b.n	80037ac <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 80036ec:	9d01      	ldr	r5, [sp, #4]
 80036ee:	b91d      	cbnz	r5, 80036f8 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 80036f0:	f7ff fc0a 	bl	8002f08 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80036f4:	4628      	mov	r0, r5
 80036f6:	e067      	b.n	80037c8 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80036f8:	b916      	cbnz	r6, 8003700 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80036fa:	a802      	add	r0, sp, #8
 80036fc:	f000 fcb8 	bl	8004070 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003700:	f7ff fc02 	bl	8002f08 <vPortExitCritical>
		vTaskSuspendAll();
 8003704:	f000 faaa 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003708:	f7ff fbdc 	bl	8002ec4 <vPortEnterCritical>
 800370c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003710:	2bff      	cmp	r3, #255	; 0xff
 8003712:	bf08      	it	eq
 8003714:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003718:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800371c:	2bff      	cmp	r3, #255	; 0xff
 800371e:	bf08      	it	eq
 8003720:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003724:	f7ff fbf0 	bl	8002f08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003728:	a901      	add	r1, sp, #4
 800372a:	a802      	add	r0, sp, #8
 800372c:	f000 fcb0 	bl	8004090 <xTaskCheckForTimeOut>
 8003730:	2800      	cmp	r0, #0
 8003732:	d152      	bne.n	80037da <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8003734:	f7ff fbc6 	bl	8002ec4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003738:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800373a:	f7ff fbe5 	bl	8002f08 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800373e:	2d00      	cmp	r5, #0
 8003740:	d145      	bne.n	80037ce <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	b933      	cbnz	r3, 8003754 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8003746:	f7ff fbbd 	bl	8002ec4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800374a:	6860      	ldr	r0, [r4, #4]
 800374c:	f000 fcf0 	bl	8004130 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003750:	f7ff fbda 	bl	8002f08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003754:	9901      	ldr	r1, [sp, #4]
 8003756:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800375a:	f000 fc2d 	bl	8003fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff fddb 	bl	800331a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003764:	f000 fb1a 	bl	8003d9c <xTaskResumeAll>
 8003768:	b938      	cbnz	r0, 800377a <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800376a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800376e:	f8ca 3000 	str.w	r3, [sl]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800377c:	f7ff fba2 	bl	8002ec4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003780:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003782:	2d00      	cmp	r5, #0
 8003784:	d0b2      	beq.n	80036ec <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003786:	4641      	mov	r1, r8
 8003788:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800378a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800378c:	f7ff fdb1 	bl	80032f2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8003790:	f1b9 0f00 	cmp.w	r9, #0
 8003794:	d1a3      	bne.n	80036de <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003796:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003798:	3d01      	subs	r5, #1
 800379a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800379c:	b913      	cbnz	r3, 80037a4 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800379e:	f000 fd5f 	bl	8004260 <pvTaskIncrementMutexHeldCount>
 80037a2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	b163      	cbz	r3, 80037c2 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ac:	f000 fc1e 	bl	8003fec <xTaskRemoveFromEventList>
 80037b0:	b138      	cbz	r0, 80037c2 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80037b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <xQueueGenericReceive+0x184>)
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80037c2:	f7ff fba1 	bl	8002f08 <vPortExitCritical>
				return pdPASS;
 80037c6:	2001      	movs	r0, #1
}
 80037c8:	b004      	add	sp, #16
 80037ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7ff fda3 	bl	800331a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037d4:	f000 fae2 	bl	8003d9c <xTaskResumeAll>
 80037d8:	e7cf      	b.n	800377a <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fd9d 	bl	800331a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037e0:	f000 fadc 	bl	8003d9c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80037e4:	f7ff fb6e 	bl	8002ec4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80037ea:	f7ff fb8d 	bl	8002f08 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	d1c3      	bne.n	800377a <xQueueGenericReceive+0xf6>
 80037f2:	e77f      	b.n	80036f4 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037f4:	f000 fc8c 	bl	8004110 <xTaskGetSchedulerState>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f43f af63 	beq.w	80036c4 <xQueueGenericReceive+0x40>
 80037fe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003800:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003802:	f8df a004 	ldr.w	sl, [pc, #4]	; 8003808 <xQueueGenericReceive+0x184>
 8003806:	e7b9      	b.n	800377c <xQueueGenericReceive+0xf8>
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003810:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003812:	f7ff fb57 	bl	8002ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003818:	4c2d      	ldr	r4, [pc, #180]	; (80038d0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4f2d      	ldr	r7, [pc, #180]	; (80038d4 <prvAddNewTaskToReadyList+0xc8>)
 800381e:	3201      	adds	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003822:	6825      	ldr	r5, [r4, #0]
 8003824:	2d00      	cmp	r5, #0
 8003826:	d145      	bne.n	80038b4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003828:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d11c      	bne.n	800386a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003830:	1978      	adds	r0, r7, r5
 8003832:	3514      	adds	r5, #20
 8003834:	f7ff fab3 	bl	8002d9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003838:	2d8c      	cmp	r5, #140	; 0x8c
 800383a:	d1f9      	bne.n	8003830 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800383c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003900 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003840:	4d25      	ldr	r5, [pc, #148]	; (80038d8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003842:	4640      	mov	r0, r8
 8003844:	f7ff faab 	bl	8002d9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003848:	4628      	mov	r0, r5
 800384a:	f7ff faa8 	bl	8002d9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800384e:	4823      	ldr	r0, [pc, #140]	; (80038dc <prvAddNewTaskToReadyList+0xd0>)
 8003850:	f7ff faa5 	bl	8002d9e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003854:	4822      	ldr	r0, [pc, #136]	; (80038e0 <prvAddNewTaskToReadyList+0xd4>)
 8003856:	f7ff faa2 	bl	8002d9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800385a:	4822      	ldr	r0, [pc, #136]	; (80038e4 <prvAddNewTaskToReadyList+0xd8>)
 800385c:	f7ff fa9f 	bl	8002d9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <prvAddNewTaskToReadyList+0xdc>)
 8003862:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003866:	4b21      	ldr	r3, [pc, #132]	; (80038ec <prvAddNewTaskToReadyList+0xe0>)
 8003868:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800386a:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800386c:	4921      	ldr	r1, [pc, #132]	; (80038f4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800386e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003870:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003872:	3301      	adds	r3, #1
 8003874:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003876:	2301      	movs	r3, #1
 8003878:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800387a:	4093      	lsls	r3, r2
 800387c:	4303      	orrs	r3, r0
 800387e:	2014      	movs	r0, #20
 8003880:	600b      	str	r3, [r1, #0]
 8003882:	fb00 7002 	mla	r0, r0, r2, r7
 8003886:	1d31      	adds	r1, r6, #4
 8003888:	f7ff fa97 	bl	8002dba <vListInsertEnd>
	taskEXIT_CRITICAL();
 800388c:	f7ff fb3c 	bl	8002f08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <prvAddNewTaskToReadyList+0xec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	b163      	cbz	r3, 80038b0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80038a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <prvAddNewTaskToReadyList+0xf0>)
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <prvAddNewTaskToReadyList+0xec>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1d6      	bne.n	800386a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80038c2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80038c4:	bf98      	it	ls
 80038c6:	6026      	strls	r6, [r4, #0]
 80038c8:	e7cf      	b.n	800386a <prvAddNewTaskToReadyList+0x5e>
 80038ca:	bf00      	nop
 80038cc:	20005114 	.word	0x20005114
 80038d0:	2000507c 	.word	0x2000507c
 80038d4:	20005088 	.word	0x20005088
 80038d8:	20005140 	.word	0x20005140
 80038dc:	2000515c 	.word	0x2000515c
 80038e0:	20005188 	.word	0x20005188
 80038e4:	20005174 	.word	0x20005174
 80038e8:	20005080 	.word	0x20005080
 80038ec:	20005084 	.word	0x20005084
 80038f0:	20005124 	.word	0x20005124
 80038f4:	20005128 	.word	0x20005128
 80038f8:	20005170 	.word	0x20005170
 80038fc:	e000ed04 	.word	0xe000ed04
 8003900:	2000512c 	.word	0x2000512c

08003904 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003904:	4a06      	ldr	r2, [pc, #24]	; (8003920 <prvResetNextTaskUnblockTime+0x1c>)
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	6819      	ldr	r1, [r3, #0]
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <prvResetNextTaskUnblockTime+0x20>)
 800390c:	b919      	cbnz	r1, 8003916 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800391a:	68d2      	ldr	r2, [r2, #12]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	e7f8      	b.n	8003912 <prvResetNextTaskUnblockTime+0xe>
 8003920:	20005080 	.word	0x20005080
 8003924:	20005154 	.word	0x20005154

08003928 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800392c:	4681      	mov	r9, r0
 800392e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003930:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003934:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003936:	3a01      	subs	r2, #1
 8003938:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800393c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003940:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003942:	f026 0607 	bic.w	r6, r6, #7
 8003946:	1e4b      	subs	r3, r1, #1
 8003948:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800394c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800394e:	7858      	ldrb	r0, [r3, #1]
 8003950:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003954:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003958:	b108      	cbz	r0, 800395e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395a:	428b      	cmp	r3, r1
 800395c:	d1f7      	bne.n	800394e <prvInitialiseNewTask.isra.2+0x26>
 800395e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003960:	2700      	movs	r7, #0
 8003962:	2d06      	cmp	r5, #6
 8003964:	bf28      	it	cs
 8003966:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003968:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800396a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800396c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800396e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003972:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003974:	f7ff fa1e 	bl	8002db4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003978:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800397c:	f104 0018 	add.w	r0, r4, #24
 8003980:	f7ff fa18 	bl	8002db4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003984:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003986:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003988:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800398a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800398c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003990:	4652      	mov	r2, sl
 8003992:	4649      	mov	r1, r9
 8003994:	4630      	mov	r0, r6
 8003996:	f7ff fa6b 	bl	8002e70 <pxPortInitialiseStack>
 800399a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800399c:	f1b8 0f00 	cmp.w	r8, #0
 80039a0:	d001      	beq.n	80039a6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039a2:	f8c8 4000 	str.w	r4, [r8]
 80039a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080039aa <prvDeleteTCB>:
	{
 80039aa:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039ac:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80039b0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039b2:	b93b      	cbnz	r3, 80039c4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80039b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80039b6:	f7ff fc31 	bl	800321c <vPortFree>
				vPortFree( pxTCB );
 80039ba:	4620      	mov	r0, r4
	}
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80039c0:	f7ff bc2c 	b.w	800321c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d0f9      	beq.n	80039bc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d008      	beq.n	80039de <prvDeleteTCB+0x34>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	e7fe      	b.n	80039dc <prvDeleteTCB+0x32>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e4:	4e1b      	ldr	r6, [pc, #108]	; (8003a54 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80039e6:	681d      	ldr	r5, [r3, #0]
{
 80039e8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ea:	6830      	ldr	r0, [r6, #0]
{
 80039ec:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ee:	3004      	adds	r0, #4
 80039f0:	f7ff fa06 	bl	8002e00 <uxListRemove>
 80039f4:	4633      	mov	r3, r6
 80039f6:	b940      	cbnz	r0, 8003a0a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039f8:	2001      	movs	r0, #1
 80039fa:	6831      	ldr	r1, [r6, #0]
 80039fc:	4e16      	ldr	r6, [pc, #88]	; (8003a58 <prvAddCurrentTaskToDelayedList+0x78>)
 80039fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003a00:	6832      	ldr	r2, [r6, #0]
 8003a02:	4088      	lsls	r0, r1
 8003a04:	ea22 0200 	bic.w	r2, r2, r0
 8003a08:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a0a:	1c62      	adds	r2, r4, #1
 8003a0c:	d107      	bne.n	8003a1e <prvAddCurrentTaskToDelayedList+0x3e>
 8003a0e:	b137      	cbz	r7, 8003a1e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	4812      	ldr	r0, [pc, #72]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x7c>)
 8003a14:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1a:	f7ff b9ce 	b.w	8002dba <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a1e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a20:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003a22:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a24:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003a26:	d907      	bls.n	8003a38 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <prvAddCurrentTaskToDelayedList+0x80>)
 8003a2a:	6810      	ldr	r0, [r2, #0]
 8003a2c:	6819      	ldr	r1, [r3, #0]
}
 8003a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a32:	3104      	adds	r1, #4
 8003a34:	f7ff b9cd 	b.w	8002dd2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <prvAddCurrentTaskToDelayedList+0x84>)
 8003a3a:	6810      	ldr	r0, [r2, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	3104      	adds	r1, #4
 8003a40:	f7ff f9c7 	bl	8002dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x88>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003a4a:	bf38      	it	cc
 8003a4c:	601c      	strcc	r4, [r3, #0]
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	2000519c 	.word	0x2000519c
 8003a54:	2000507c 	.word	0x2000507c
 8003a58:	20005128 	.word	0x20005128
 8003a5c:	20005174 	.word	0x20005174
 8003a60:	20005084 	.word	0x20005084
 8003a64:	20005080 	.word	0x20005080
 8003a68:	20005154 	.word	0x20005154

08003a6c <prvTaskIsTaskSuspended.part.0>:
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	e7fe      	b.n	8003a7c <prvTaskIsTaskSuspended.part.0+0x10>

08003a7e <xTaskCreateStatic>:
	{
 8003a7e:	b530      	push	{r4, r5, lr}
 8003a80:	b087      	sub	sp, #28
 8003a82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003a86:	b90d      	cbnz	r5, 8003a8c <xTaskCreateStatic+0xe>
 8003a88:	f7ff fff0 	bl	8003a6c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 8003a8c:	b944      	cbnz	r4, 8003aa0 <xTaskCreateStatic+0x22>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	e7fe      	b.n	8003a9e <xTaskCreateStatic+0x20>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aa0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003aa2:	2502      	movs	r5, #2
 8003aa4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa8:	ad05      	add	r5, sp, #20
 8003aaa:	9501      	str	r5, [sp, #4]
 8003aac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003aae:	9402      	str	r4, [sp, #8]
 8003ab0:	9500      	str	r5, [sp, #0]
 8003ab2:	f7ff ff39 	bl	8003928 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff fea8 	bl	800380c <prvAddNewTaskToReadyList>
	}
 8003abc:	9805      	ldr	r0, [sp, #20]
 8003abe:	b007      	add	sp, #28
 8003ac0:	bd30      	pop	{r4, r5, pc}

08003ac2 <xTaskCreate>:
	{
 8003ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aca:	0090      	lsls	r0, r2, #2
	{
 8003acc:	4688      	mov	r8, r1
 8003ace:	4616      	mov	r6, r2
 8003ad0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad2:	f7ff fb15 	bl	8003100 <pvPortMalloc>
			if( pxStack != NULL )
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	b1e8      	cbz	r0, 8003b16 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ada:	2054      	movs	r0, #84	; 0x54
 8003adc:	f7ff fb10 	bl	8003100 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	b1a8      	cbz	r0, 8003b10 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003aec:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003af2:	9002      	str	r0, [sp, #8]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4632      	mov	r2, r6
 8003af8:	464b      	mov	r3, r9
 8003afa:	4641      	mov	r1, r8
 8003afc:	4638      	mov	r0, r7
 8003afe:	f7ff ff13 	bl	8003928 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7ff fe82 	bl	800380c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b08:	2001      	movs	r0, #1
	}
 8003b0a:	b005      	add	sp, #20
 8003b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003b10:	4628      	mov	r0, r5
 8003b12:	f7ff fb83 	bl	800321c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b16:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003b1a:	e7f6      	b.n	8003b0a <xTaskCreate+0x48>

08003b1c <vTaskDelete>:
	{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4d29      	ldr	r5, [pc, #164]	; (8003bc8 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 8003b22:	f7ff f9cf 	bl	8002ec4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003b26:	b904      	cbnz	r4, 8003b2a <vTaskDelete+0xe>
 8003b28:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2a:	1d26      	adds	r6, r4, #4
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff f967 	bl	8002e00 <uxListRemove>
 8003b32:	b960      	cbnz	r0, 8003b4e <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b34:	2114      	movs	r1, #20
 8003b36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <vTaskDelete+0xb0>)
 8003b3a:	4341      	muls	r1, r0
 8003b3c:	585b      	ldr	r3, [r3, r1]
 8003b3e:	b933      	cbnz	r3, 8003b4e <vTaskDelete+0x32>
 8003b40:	2201      	movs	r2, #1
 8003b42:	4923      	ldr	r1, [pc, #140]	; (8003bd0 <vTaskDelete+0xb4>)
 8003b44:	4082      	lsls	r2, r0
 8003b46:	680b      	ldr	r3, [r1, #0]
 8003b48:	ea23 0302 	bic.w	r3, r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b50:	b11b      	cbz	r3, 8003b5a <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b52:	f104 0018 	add.w	r0, r4, #24
 8003b56:	f7ff f953 	bl	8002e00 <uxListRemove>
			uxTaskNumber++;
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <vTaskDelete+0xb8>)
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d11b      	bne.n	8003ba0 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003b68:	4631      	mov	r1, r6
 8003b6a:	481b      	ldr	r0, [pc, #108]	; (8003bd8 <vTaskDelete+0xbc>)
 8003b6c:	f7ff f925 	bl	8002dba <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003b70:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <vTaskDelete+0xc0>)
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8003b78:	f7ff f9c6 	bl	8002f08 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <vTaskDelete+0xc4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b303      	cbz	r3, 8003bc4 <vTaskDelete+0xa8>
			if( pxTCB == pxCurrentTCB )
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	429c      	cmp	r4, r3
 8003b86:	d11d      	bne.n	8003bc4 <vTaskDelete+0xa8>
				configASSERT( uxSchedulerSuspended == 0 );
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <vTaskDelete+0xc8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b193      	cbz	r3, 8003bb4 <vTaskDelete+0x98>
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	e7fe      	b.n	8003b9e <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <vTaskDelete+0xcc>)
				prvDeleteTCB( pxTCB );
 8003ba2:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003baa:	f7ff fefe 	bl	80039aa <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8003bae:	f7ff fea9 	bl	8003904 <prvResetNextTaskUnblockTime>
 8003bb2:	e7e1      	b.n	8003b78 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8003bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <vTaskDelete+0xd0>)
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000507c 	.word	0x2000507c
 8003bcc:	20005088 	.word	0x20005088
 8003bd0:	20005128 	.word	0x20005128
 8003bd4:	20005124 	.word	0x20005124
 8003bd8:	20005188 	.word	0x20005188
 8003bdc:	20005118 	.word	0x20005118
 8003be0:	20005170 	.word	0x20005170
 8003be4:	20005120 	.word	0x20005120
 8003be8:	20005114 	.word	0x20005114
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <vTaskStartScheduler>:
{
 8003bf0:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bf2:	2400      	movs	r4, #0
{
 8003bf4:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bf6:	aa07      	add	r2, sp, #28
 8003bf8:	a906      	add	r1, sp, #24
 8003bfa:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bfc:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bfe:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c00:	f001 fa3e 	bl	8005080 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c04:	9b05      	ldr	r3, [sp, #20]
 8003c06:	9400      	str	r4, [sp, #0]
 8003c08:	9302      	str	r3, [sp, #8]
 8003c0a:	9b06      	ldr	r3, [sp, #24]
 8003c0c:	9a07      	ldr	r2, [sp, #28]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	490d      	ldr	r1, [pc, #52]	; (8003c48 <vTaskStartScheduler+0x58>)
 8003c12:	4623      	mov	r3, r4
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <vTaskStartScheduler+0x5c>)
 8003c16:	f7ff ff32 	bl	8003a7e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003c1a:	b190      	cbz	r0, 8003c42 <vTaskStartScheduler+0x52>
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <vTaskStartScheduler+0x60>)
 8003c32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c34:	2201      	movs	r2, #1
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <vTaskStartScheduler+0x64>)
 8003c38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <vTaskStartScheduler+0x68>)
 8003c3c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003c3e:	f7ff f9c3 	bl	8002fc8 <xPortStartScheduler>
}
 8003c42:	b008      	add	sp, #32
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	08007074 	.word	0x08007074
 8003c4c:	08003ed5 	.word	0x08003ed5
 8003c50:	20005154 	.word	0x20005154
 8003c54:	20005170 	.word	0x20005170
 8003c58:	2000519c 	.word	0x2000519c

08003c5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <vTaskSuspendAll+0xc>)
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20005120 	.word	0x20005120

08003c6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <xTaskGetTickCount+0x8>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000519c 	.word	0x2000519c

08003c78 <xTaskIncrementTick>:
{
 8003c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <xTaskIncrementTick+0xf8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d153      	bne.n	8003d2c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <xTaskIncrementTick+0xfc>)
 8003c86:	681c      	ldr	r4, [r3, #0]
 8003c88:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003c8a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003c8c:	b9bc      	cbnz	r4, 8003cbe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003c8e:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <xTaskIncrementTick+0x100>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	b142      	cbz	r2, 8003ca8 <xTaskIncrementTick+0x30>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskIncrementTick+0x2e>
 8003ca8:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <xTaskIncrementTick+0x104>)
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	6810      	ldr	r0, [r2, #0]
 8003cae:	6018      	str	r0, [r3, #0]
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <xTaskIncrementTick+0x108>)
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	f7ff fe23 	bl	8003904 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cbe:	4d31      	ldr	r5, [pc, #196]	; (8003d84 <xTaskIncrementTick+0x10c>)
 8003cc0:	f04f 0b00 	mov.w	fp, #0
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	4f30      	ldr	r7, [pc, #192]	; (8003d88 <xTaskIncrementTick+0x110>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	d33e      	bcc.n	8003d4a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ccc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003d78 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003cd0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003d98 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd4:	f8d8 2000 	ldr.w	r2, [r8]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	bb72      	cbnz	r2, 8003d3a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	602a      	str	r2, [r5, #0]
					break;
 8003ce2:	e032      	b.n	8003d4a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce4:	f106 0a04 	add.w	sl, r6, #4
 8003ce8:	4650      	mov	r0, sl
 8003cea:	f7ff f889 	bl	8002e00 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003cf0:	b119      	cbz	r1, 8003cfa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf2:	f106 0018 	add.w	r0, r6, #24
 8003cf6:	f7ff f883 	bl	8002e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f04f 0e14 	mov.w	lr, #20
 8003d00:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003d02:	f8d9 3000 	ldr.w	r3, [r9]
 8003d06:	fa02 f100 	lsl.w	r1, r2, r0
 8003d0a:	4319      	orrs	r1, r3
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <xTaskIncrementTick+0x114>)
 8003d0e:	f8c9 1000 	str.w	r1, [r9]
 8003d12:	fb0e 3000 	mla	r0, lr, r0, r3
 8003d16:	4651      	mov	r1, sl
 8003d18:	f7ff f84f 	bl	8002dba <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003d20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003d22:	4291      	cmp	r1, r2
 8003d24:	bf28      	it	cs
 8003d26:	f04f 0b01 	movcs.w	fp, #1
 8003d2a:	e7d3      	b.n	8003cd4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003d2e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e011      	b.n	8003d5e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d3a:	f8d8 2000 	ldr.w	r2, [r8]
 8003d3e:	68d2      	ldr	r2, [r2, #12]
 8003d40:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d42:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003d44:	428c      	cmp	r4, r1
 8003d46:	d2cd      	bcs.n	8003ce4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003d48:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xTaskIncrementTick+0x114>)
 8003d4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d50:	2214      	movs	r2, #20
 8003d52:	434a      	muls	r2, r1
 8003d54:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003d56:	2a02      	cmp	r2, #2
 8003d58:	bf28      	it	cs
 8003d5a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003d5e:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <xTaskIncrementTick+0x11c>)
 8003d60:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	bf18      	it	ne
 8003d66:	f04f 0b01 	movne.w	fp, #1
}
 8003d6a:	4658      	mov	r0, fp
 8003d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d70:	20005120 	.word	0x20005120
 8003d74:	2000519c 	.word	0x2000519c
 8003d78:	20005080 	.word	0x20005080
 8003d7c:	20005084 	.word	0x20005084
 8003d80:	20005158 	.word	0x20005158
 8003d84:	20005154 	.word	0x20005154
 8003d88:	2000507c 	.word	0x2000507c
 8003d8c:	20005088 	.word	0x20005088
 8003d90:	2000511c 	.word	0x2000511c
 8003d94:	200051a0 	.word	0x200051a0
 8003d98:	20005128 	.word	0x20005128

08003d9c <xTaskResumeAll>:
{
 8003d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003da0:	4c31      	ldr	r4, [pc, #196]	; (8003e68 <xTaskResumeAll+0xcc>)
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	b943      	cbnz	r3, 8003db8 <xTaskResumeAll+0x1c>
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	e7fe      	b.n	8003db6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003db8:	f7ff f884 	bl	8002ec4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	6824      	ldr	r4, [r4, #0]
 8003dc4:	b12c      	cbz	r4, 8003dd2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003dc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003dc8:	f7ff f89e 	bl	8002f08 <vPortExitCritical>
}
 8003dcc:	4620      	mov	r0, r4
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dd2:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <xTaskResumeAll+0xd0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f5      	beq.n	8003dc6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dda:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003e84 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003dde:	4f24      	ldr	r7, [pc, #144]	; (8003e70 <xTaskResumeAll+0xd4>)
 8003de0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003e88 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de4:	f8d9 3000 	ldr.w	r3, [r9]
 8003de8:	b9e3      	cbnz	r3, 8003e24 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003dea:	b10c      	cbz	r4, 8003df0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003dec:	f7ff fd8a 	bl	8003904 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003df0:	4d20      	ldr	r5, [pc, #128]	; (8003e74 <xTaskResumeAll+0xd8>)
 8003df2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003df4:	b144      	cbz	r4, 8003e08 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003df6:	2701      	movs	r7, #1
 8003df8:	4e1f      	ldr	r6, [pc, #124]	; (8003e78 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003dfa:	f7ff ff3d 	bl	8003c78 <xTaskIncrementTick>
 8003dfe:	b100      	cbz	r0, 8003e02 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003e00:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e02:	3c01      	subs	r4, #1
 8003e04:	d1f9      	bne.n	8003dfa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003e06:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <xTaskResumeAll+0xdc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0da      	beq.n	8003dc6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <xTaskResumeAll+0xe0>)
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003e20:	2401      	movs	r4, #1
 8003e22:	e7d1      	b.n	8003dc8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e24:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003e28:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e2a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e2e:	f104 0018 	add.w	r0, r4, #24
 8003e32:	f7fe ffe5 	bl	8002e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7fe ffe2 	bl	8002e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e3c:	2014      	movs	r0, #20
 8003e3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e40:	6839      	ldr	r1, [r7, #0]
 8003e42:	fa05 f302 	lsl.w	r3, r5, r2
 8003e46:	430b      	orrs	r3, r1
 8003e48:	fb00 8002 	mla	r0, r0, r2, r8
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	f7fe ffb3 	bl	8002dba <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <xTaskResumeAll+0xe4>)
 8003e56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003e5e:	bf24      	itt	cs
 8003e60:	4b05      	ldrcs	r3, [pc, #20]	; (8003e78 <xTaskResumeAll+0xdc>)
 8003e62:	601d      	strcs	r5, [r3, #0]
 8003e64:	e7be      	b.n	8003de4 <xTaskResumeAll+0x48>
 8003e66:	bf00      	nop
 8003e68:	20005120 	.word	0x20005120
 8003e6c:	20005114 	.word	0x20005114
 8003e70:	20005128 	.word	0x20005128
 8003e74:	2000511c 	.word	0x2000511c
 8003e78:	200051a0 	.word	0x200051a0
 8003e7c:	e000ed04 	.word	0xe000ed04
 8003e80:	2000507c 	.word	0x2000507c
 8003e84:	2000515c 	.word	0x2000515c
 8003e88:	20005088 	.word	0x20005088

08003e8c <vTaskDelay>:
	{
 8003e8c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e8e:	b940      	cbnz	r0, 8003ea2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <vTaskDelay+0x40>)
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <vTaskDelay+0x44>)
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	b141      	cbz	r1, 8003eba <vTaskDelay+0x2e>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003eba:	f7ff fecf 	bl	8003c5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ebe:	f7ff fd8f 	bl	80039e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003ec2:	f7ff ff6b 	bl	8003d9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d0e2      	beq.n	8003e90 <vTaskDelay+0x4>
 8003eca:	bd08      	pop	{r3, pc}
 8003ecc:	e000ed04 	.word	0xe000ed04
 8003ed0:	20005120 	.word	0x20005120

08003ed4 <prvIdleTask>:
{
 8003ed4:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003ed6:	4d16      	ldr	r5, [pc, #88]	; (8003f30 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed8:	4c16      	ldr	r4, [pc, #88]	; (8003f34 <prvIdleTask+0x60>)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	b963      	cbnz	r3, 8003ef8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <prvIdleTask+0x64>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9f8      	bls.n	8003ed8 <prvIdleTask+0x4>
				taskYIELD();
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <prvIdleTask+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	e7ef      	b.n	8003ed8 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003ef8:	f7ff feb0 	bl	8003c5c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003efc:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 8003efe:	f7ff ff4d 	bl	8003d9c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d0e9      	beq.n	8003eda <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003f06:	f7fe ffdd 	bl	8002ec4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f0a:	68eb      	ldr	r3, [r5, #12]
 8003f0c:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0e:	1d30      	adds	r0, r6, #4
 8003f10:	f7fe ff76 	bl	8002e00 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <prvIdleTask+0x6c>)
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003f22:	f7fe fff1 	bl	8002f08 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff fd3f 	bl	80039aa <prvDeleteTCB>
 8003f2c:	e7d5      	b.n	8003eda <prvIdleTask+0x6>
 8003f2e:	bf00      	nop
 8003f30:	20005188 	.word	0x20005188
 8003f34:	20005118 	.word	0x20005118
 8003f38:	20005088 	.word	0x20005088
 8003f3c:	e000ed04 	.word	0xe000ed04
 8003f40:	20005114 	.word	0x20005114

08003f44 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <vTaskSwitchContext+0x60>)
{
 8003f46:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <vTaskSwitchContext+0x64>)
 8003f4c:	b112      	cbz	r2, 8003f54 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003f4e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003f54:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <vTaskSwitchContext+0x68>)
 8003f58:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	2214      	movs	r2, #20
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f1c3 031f 	rsb	r3, r3, #31
 8003f66:	435a      	muls	r2, r3
 8003f68:	4911      	ldr	r1, [pc, #68]	; (8003fb0 <vTaskSwitchContext+0x6c>)
 8003f6a:	588c      	ldr	r4, [r1, r2]
 8003f6c:	1888      	adds	r0, r1, r2
 8003f6e:	b944      	cbnz	r4, 8003f82 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	e7fe      	b.n	8003f80 <vTaskSwitchContext+0x3c>
 8003f82:	6844      	ldr	r4, [r0, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	6864      	ldr	r4, [r4, #4]
 8003f88:	440a      	add	r2, r1
 8003f8a:	4294      	cmp	r4, r2
 8003f8c:	bf08      	it	eq
 8003f8e:	6862      	ldreq	r2, [r4, #4]
 8003f90:	6044      	str	r4, [r0, #4]
 8003f92:	bf08      	it	eq
 8003f94:	6042      	streq	r2, [r0, #4]
 8003f96:	2214      	movs	r2, #20
 8003f98:	fb02 1303 	mla	r3, r2, r3, r1
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <vTaskSwitchContext+0x70>)
 8003fa2:	e7d5      	b.n	8003f50 <vTaskSwitchContext+0xc>
 8003fa4:	20005120 	.word	0x20005120
 8003fa8:	200051a0 	.word	0x200051a0
 8003fac:	20005128 	.word	0x20005128
 8003fb0:	20005088 	.word	0x20005088
 8003fb4:	2000507c 	.word	0x2000507c

08003fb8 <vTaskPlaceOnEventList>:
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003fbc:	b940      	cbnz	r0, 8003fd0 <vTaskPlaceOnEventList+0x18>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	e7fe      	b.n	8003fce <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <vTaskPlaceOnEventList+0x30>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	3118      	adds	r1, #24
 8003fd6:	f7fe fefc 	bl	8002dd2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fda:	4620      	mov	r0, r4
}
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	f7ff bcfd 	b.w	80039e0 <prvAddCurrentTaskToDelayedList>
 8003fe6:	bf00      	nop
 8003fe8:	2000507c 	.word	0x2000507c

08003fec <xTaskRemoveFromEventList>:
{
 8003fec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003fee:	68c3      	ldr	r3, [r0, #12]
 8003ff0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003ff2:	b944      	cbnz	r4, 8004006 <xTaskRemoveFromEventList+0x1a>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	e7fe      	b.n	8004004 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004006:	f104 0518 	add.w	r5, r4, #24
 800400a:	4628      	mov	r0, r5
 800400c:	f7fe fef8 	bl	8002e00 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <xTaskRemoveFromEventList+0x6c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	b9e3      	cbnz	r3, 8004050 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004016:	1d25      	adds	r5, r4, #4
 8004018:	4628      	mov	r0, r5
 800401a:	f7fe fef1 	bl	8002e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800401e:	2301      	movs	r3, #1
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <xTaskRemoveFromEventList+0x70>)
 8004022:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004024:	6808      	ldr	r0, [r1, #0]
 8004026:	4093      	lsls	r3, r2
 8004028:	4303      	orrs	r3, r0
 800402a:	2014      	movs	r0, #20
 800402c:	600b      	str	r3, [r1, #0]
 800402e:	4629      	mov	r1, r5
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <xTaskRemoveFromEventList+0x74>)
 8004032:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004036:	f7fe fec0 	bl	8002dba <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <xTaskRemoveFromEventList+0x78>)
 800403c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004044:	bf85      	ittet	hi
 8004046:	2001      	movhi	r0, #1
 8004048:	4b07      	ldrhi	r3, [pc, #28]	; (8004068 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 800404a:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800404c:	6018      	strhi	r0, [r3, #0]
}
 800404e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004050:	4629      	mov	r1, r5
 8004052:	4806      	ldr	r0, [pc, #24]	; (800406c <xTaskRemoveFromEventList+0x80>)
 8004054:	e7ef      	b.n	8004036 <xTaskRemoveFromEventList+0x4a>
 8004056:	bf00      	nop
 8004058:	20005120 	.word	0x20005120
 800405c:	20005128 	.word	0x20005128
 8004060:	20005088 	.word	0x20005088
 8004064:	2000507c 	.word	0x2000507c
 8004068:	200051a0 	.word	0x200051a0
 800406c:	2000515c 	.word	0x2000515c

08004070 <vTaskSetTimeOutState>:
{
 8004070:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004072:	b908      	cbnz	r0, 8004078 <vTaskSetTimeOutState+0x8>
 8004074:	f7ff fcfa 	bl	8003a6c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <vTaskSetTimeOutState+0x18>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800407e:	4b03      	ldr	r3, [pc, #12]	; (800408c <vTaskSetTimeOutState+0x1c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6043      	str	r3, [r0, #4]
 8004084:	bd08      	pop	{r3, pc}
 8004086:	bf00      	nop
 8004088:	20005158 	.word	0x20005158
 800408c:	2000519c 	.word	0x2000519c

08004090 <xTaskCheckForTimeOut>:
{
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8004094:	4604      	mov	r4, r0
 8004096:	b940      	cbnz	r0, 80040aa <xTaskCheckForTimeOut+0x1a>
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	e7fe      	b.n	80040a8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80040aa:	b941      	cbnz	r1, 80040be <xTaskCheckForTimeOut+0x2e>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	e7fe      	b.n	80040bc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80040be:	f7fe ff01 	bl	8002ec4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <xTaskCheckForTimeOut+0x6c>)
 80040c4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	d010      	beq.n	80040ee <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040cc:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <xTaskCheckForTimeOut+0x70>)
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	4290      	cmp	r0, r2
 80040d4:	6862      	ldr	r2, [r4, #4]
 80040d6:	d001      	beq.n	80040dc <xTaskCheckForTimeOut+0x4c>
 80040d8:	4291      	cmp	r1, r2
 80040da:	d20d      	bcs.n	80040f8 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040dc:	1a88      	subs	r0, r1, r2
 80040de:	4283      	cmp	r3, r0
 80040e0:	d90a      	bls.n	80040f8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	4413      	add	r3, r2
 80040e6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff ffc1 	bl	8004070 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80040ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80040f0:	f7fe ff0a 	bl	8002f08 <vPortExitCritical>
}
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80040f8:	2401      	movs	r4, #1
 80040fa:	e7f9      	b.n	80040f0 <xTaskCheckForTimeOut+0x60>
 80040fc:	2000519c 	.word	0x2000519c
 8004100:	20005158 	.word	0x20005158

08004104 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004104:	2201      	movs	r2, #1
 8004106:	4b01      	ldr	r3, [pc, #4]	; (800410c <vTaskMissedYield+0x8>)
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4770      	bx	lr
 800410c:	200051a0 	.word	0x200051a0

08004110 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <xTaskGetSchedulerState+0x18>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	b133      	cbz	r3, 8004124 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <xTaskGetSchedulerState+0x1c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800411c:	bf0c      	ite	eq
 800411e:	2002      	moveq	r0, #2
 8004120:	2000      	movne	r0, #0
 8004122:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004124:	2001      	movs	r0, #1
	}
 8004126:	4770      	bx	lr
 8004128:	20005170 	.word	0x20005170
 800412c:	20005120 	.word	0x20005120

08004130 <vTaskPriorityInherit>:
	{
 8004130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004134:	4604      	mov	r4, r0
 8004136:	2800      	cmp	r0, #0
 8004138:	d039      	beq.n	80041ae <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800413a:	4d1e      	ldr	r5, [pc, #120]	; (80041b4 <vTaskPriorityInherit+0x84>)
 800413c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800413e:	682a      	ldr	r2, [r5, #0]
 8004140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004142:	4293      	cmp	r3, r2
 8004144:	d233      	bcs.n	80041ae <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004146:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004148:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800414a:	4e1b      	ldr	r6, [pc, #108]	; (80041b8 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800414c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414e:	bfa8      	it	ge
 8004150:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004152:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004156:	bfa2      	ittt	ge
 8004158:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800415a:	f1c2 0207 	rsbge	r2, r2, #7
 800415e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004160:	6942      	ldr	r2, [r0, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d120      	bne.n	80041a8 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004166:	f100 0804 	add.w	r8, r0, #4
 800416a:	4640      	mov	r0, r8
 800416c:	f7fe fe48 	bl	8002e00 <uxListRemove>
 8004170:	4a12      	ldr	r2, [pc, #72]	; (80041bc <vTaskPriorityInherit+0x8c>)
 8004172:	b948      	cbnz	r0, 8004188 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004174:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004176:	4347      	muls	r7, r0
 8004178:	59f3      	ldr	r3, [r6, r7]
 800417a:	b92b      	cbnz	r3, 8004188 <vTaskPriorityInherit+0x58>
 800417c:	2101      	movs	r1, #1
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	4081      	lsls	r1, r0
 8004182:	ea23 0301 	bic.w	r3, r3, r1
 8004186:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004188:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800418a:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800418c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800418e:	2301      	movs	r3, #1
 8004190:	4083      	lsls	r3, r0
 8004192:	430b      	orrs	r3, r1
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004198:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800419a:	4641      	mov	r1, r8
 800419c:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80041a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80041a4:	f7fe be09 	b.w	8002dba <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	62c3      	str	r3, [r0, #44]	; 0x2c
 80041ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b2:	bf00      	nop
 80041b4:	2000507c 	.word	0x2000507c
 80041b8:	20005088 	.word	0x20005088
 80041bc:	20005128 	.word	0x20005128

080041c0 <xTaskPriorityDisinherit>:
	{
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80041c2:	4604      	mov	r4, r0
 80041c4:	b908      	cbnz	r0, 80041ca <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80041c6:	2000      	movs	r0, #0
 80041c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <xTaskPriorityDisinherit+0x94>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4298      	cmp	r0, r3
 80041d0:	d008      	beq.n	80041e4 <xTaskPriorityDisinherit+0x24>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	e7fe      	b.n	80041e2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80041e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80041e6:	b943      	cbnz	r3, 80041fa <xTaskPriorityDisinherit+0x3a>
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	e7fe      	b.n	80041f8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80041fe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004200:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004202:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004204:	d0df      	beq.n	80041c6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1dd      	bne.n	80041c6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420a:	1d05      	adds	r5, r0, #4
 800420c:	4628      	mov	r0, r5
 800420e:	f7fe fdf7 	bl	8002e00 <uxListRemove>
 8004212:	4e11      	ldr	r6, [pc, #68]	; (8004258 <xTaskPriorityDisinherit+0x98>)
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <xTaskPriorityDisinherit+0x9c>)
 8004216:	b950      	cbnz	r0, 800422e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004218:	2114      	movs	r1, #20
 800421a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800421c:	4379      	muls	r1, r7
 800421e:	5873      	ldr	r3, [r6, r1]
 8004220:	b92b      	cbnz	r3, 800422e <xTaskPriorityDisinherit+0x6e>
 8004222:	2001      	movs	r0, #1
 8004224:	6813      	ldr	r3, [r2, #0]
 8004226:	40b8      	lsls	r0, r7
 8004228:	ea23 0300 	bic.w	r3, r3, r0
 800422c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800422e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004230:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004234:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004236:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004238:	2401      	movs	r4, #1
 800423a:	6811      	ldr	r1, [r2, #0]
 800423c:	fa04 f003 	lsl.w	r0, r4, r3
 8004240:	4308      	orrs	r0, r1
 8004242:	6010      	str	r0, [r2, #0]
 8004244:	2014      	movs	r0, #20
 8004246:	4629      	mov	r1, r5
 8004248:	fb00 6003 	mla	r0, r0, r3, r6
 800424c:	f7fe fdb5 	bl	8002dba <vListInsertEnd>
					xReturn = pdTRUE;
 8004250:	4620      	mov	r0, r4
	}
 8004252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004254:	2000507c 	.word	0x2000507c
 8004258:	20005088 	.word	0x20005088
 800425c:	20005128 	.word	0x20005128

08004260 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <pvTaskIncrementMutexHeldCount+0x14>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	b11a      	cbz	r2, 800426e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800426a:	3201      	adds	r2, #1
 800426c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800426e:	6818      	ldr	r0, [r3, #0]
	}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	2000507c 	.word	0x2000507c

08004278 <fir_filter>:

extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint8_t p_recCommandBuffer;

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 800427c:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 800427e:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8004280:	4d0f      	ldr	r5, [pc, #60]	; (80042c0 <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004282:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8004284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800428a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800428c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004290:	e884 0003 	stmia.w	r4, {r0, r1}
 8004294:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8004298:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 800429c:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 800429e:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 80042a0:	d1fa      	bne.n	8004298 <fir_filter+0x20>
	}

	signal[0] = sample;
 80042a2:	2300      	movs	r3, #0
	filteredSample = 0;
 80042a4:	4618      	mov	r0, r3
	signal[0] = sample;
 80042a6:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 80042a8:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 80042ac:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 80042b0:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 80042b2:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 80042b4:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 80042b8:	d1f6      	bne.n	80042a8 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 80042ba:	0c00      	lsrs	r0, r0, #16
 80042bc:	b00b      	add	sp, #44	; 0x2c
 80042be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c0:	08007030 	.word	0x08007030

080042c4 <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 80042c8:	2214      	movs	r2, #20
 80042ca:	2100      	movs	r1, #0
 80042cc:	4668      	mov	r0, sp
 80042ce:	f001 fd7c 	bl	8005dca <memset>
	uint16_t sens2_array[10] = {2};
 80042d2:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 80042d4:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 80042d6:	2100      	movs	r1, #0
 80042d8:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 80042dc:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 80042e0:	f001 fd73 	bl	8005dca <memset>
 80042e4:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 80042e6:	2214      	movs	r2, #20
 80042e8:	2100      	movs	r1, #0
 80042ea:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 80042ec:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 80042f0:	f001 fd6b 	bl	8005dca <memset>
 80042f4:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 80042f6:	2214      	movs	r2, #20
 80042f8:	2100      	movs	r1, #0
 80042fa:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (controllerState.lastTimeCommand > 50){
 80042fc:	4e69      	ldr	r6, [pc, #420]	; (80044a4 <xStoreADCDataTask+0x1e0>)
	uint16_t sens3_array[10] = {3};
 80042fe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8004302:	f001 fd62 	bl	8005dca <memset>
 8004306:	2304      	movs	r3, #4
 8004308:	4634      	mov	r4, r6
			}
			else{
				controllerState.lastTimeCommand++;
				if (controllerState.lastTimeCommand > 600){

					CMD_RF_ON;
 800430a:	4f67      	ldr	r7, [pc, #412]	; (80044a8 <xStoreADCDataTask+0x1e4>)
	uint16_t sens4_array[10] = {4};
 800430c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (controllerState.lastTimeCommand > 50){
 8004310:	8bf3      	ldrh	r3, [r6, #30]
 8004312:	2b32      	cmp	r3, #50	; 0x32
 8004314:	f240 808d 	bls.w	8004432 <xStoreADCDataTask+0x16e>
			if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004318:	7875      	ldrb	r5, [r6, #1]
 800431a:	bb6d      	cbnz	r5, 8004378 <xStoreADCDataTask+0xb4>
				C1_UP_OFF;
 800431c:	462a      	mov	r2, r5
 800431e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004322:	4862      	ldr	r0, [pc, #392]	; (80044ac <xStoreADCDataTask+0x1e8>)
 8004324:	f7fd faba 	bl	800189c <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8004328:	462a      	mov	r2, r5
 800432a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800432e:	485f      	ldr	r0, [pc, #380]	; (80044ac <xStoreADCDataTask+0x1e8>)
 8004330:	f7fd fab4 	bl	800189c <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8004334:	462a      	mov	r2, r5
 8004336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800433a:	485c      	ldr	r0, [pc, #368]	; (80044ac <xStoreADCDataTask+0x1e8>)
 800433c:	f7fd faae 	bl	800189c <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004340:	462a      	mov	r2, r5
 8004342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004346:	4859      	ldr	r0, [pc, #356]	; (80044ac <xStoreADCDataTask+0x1e8>)
 8004348:	f7fd faa8 	bl	800189c <HAL_GPIO_WritePin>
				C3_UP_OFF;
 800434c:	462a      	mov	r2, r5
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	4857      	ldr	r0, [pc, #348]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 8004352:	f7fd faa3 	bl	800189c <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8004356:	462a      	mov	r2, r5
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	4855      	ldr	r0, [pc, #340]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 800435c:	f7fd fa9e 	bl	800189c <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004360:	462a      	mov	r2, r5
 8004362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004366:	4852      	ldr	r0, [pc, #328]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 8004368:	f7fd fa98 	bl	800189c <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 800436c:	462a      	mov	r2, r5
 800436e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004372:	484f      	ldr	r0, [pc, #316]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 8004374:	f7fd fa92 	bl	800189c <HAL_GPIO_WritePin>
			if (controllerState.soundIndicationState != SEARCH_INDICATION){
 8004378:	78e5      	ldrb	r5, [r4, #3]
 800437a:	2d01      	cmp	r5, #1
 800437c:	d032      	beq.n	80043e4 <xStoreADCDataTask+0x120>
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

					vTaskDelay(50 / portTICK_RATE_MS);
					CMD_RF_OFF;

					controllerState.soundIndicationState = NORMAL_INDICATION;
 800437e:	2300      	movs	r3, #0
 8004380:	70e3      	strb	r3, [r4, #3]
					controllerState.lastTimeCommand = 0;
 8004382:	83e3      	strh	r3, [r4, #30]
		}
		else{
			controllerState.lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <xStoreADCDataTask+0x1f0>)
 8004386:	4d4c      	ldr	r5, [pc, #304]	; (80044b8 <xStoreADCDataTask+0x1f4>)
 8004388:	881a      	ldrh	r2, [r3, #0]
//#if DEBUG_SERIAL
//	sprintf(message, "val: %d %d %d %d\n", sensorValue[SENS_1], sensorValue[SENS_2], sensorValue[SENS_3], sensorValue[SENS_4]);
//	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
//#endif

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 800438a:	484c      	ldr	r0, [pc, #304]	; (80044bc <xStoreADCDataTask+0x1f8>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 800438c:	802a      	strh	r2, [r5, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 800438e:	885a      	ldrh	r2, [r3, #2]
 8004390:	806a      	strh	r2, [r5, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004392:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004394:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004396:	80aa      	strh	r2, [r5, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004398:	80eb      	strh	r3, [r5, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 800439a:	f7fc fe13 	bl	8000fc4 <HAL_ADCEx_InjectedStart_IT>
		//HAL_ADCEx_InjectedStart_IT(&hadc2);


		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 800439e:	8829      	ldrh	r1, [r5, #0]
 80043a0:	4668      	mov	r0, sp
 80043a2:	f7ff ff69 	bl	8004278 <fir_filter>
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 80043a6:	8869      	ldrh	r1, [r5, #2]
		controllerState.filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 80043a8:	81e0      	strh	r0, [r4, #14]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 80043aa:	a805      	add	r0, sp, #20
 80043ac:	f7ff ff64 	bl	8004278 <fir_filter>
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 80043b0:	88a9      	ldrh	r1, [r5, #4]
		controllerState.filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 80043b2:	8220      	strh	r0, [r4, #16]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 80043b4:	a80a      	add	r0, sp, #40	; 0x28
 80043b6:	f7ff ff5f 	bl	8004278 <fir_filter>
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 80043ba:	88e9      	ldrh	r1, [r5, #6]
		controllerState.filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 80043bc:	8260      	strh	r0, [r4, #18]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 80043be:	a80f      	add	r0, sp, #60	; 0x3c
 80043c0:	f7ff ff5a 	bl	8004278 <fir_filter>


		if (controllerState.pressureCompensation == COMPENSATION_ON){
 80043c4:	7863      	ldrb	r3, [r4, #1]
		controllerState.filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 80043c6:	82a0      	strh	r0, [r4, #20]
		if (controllerState.pressureCompensation == COMPENSATION_ON){
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d135      	bne.n	8004438 <xStoreADCDataTask+0x174>
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 80043cc:	2300      	movs	r3, #0
			xSemaphoreGive(xPressureCompensationSemaphore);
 80043ce:	483c      	ldr	r0, [pc, #240]	; (80044c0 <xStoreADCDataTask+0x1fc>)
 80043d0:	461a      	mov	r2, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	6800      	ldr	r0, [r0, #0]
			controllerState.prevPressureCompensation = COMPENSATION_OFF;
 80043d6:	70a3      	strb	r3, [r4, #2]
			xSemaphoreGive(xPressureCompensationSemaphore);
 80043d8:	f7ff f83c 	bl	8003454 <xQueueGenericSend>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 80043dc:	2032      	movs	r0, #50	; 0x32
 80043de:	f7ff fd55 	bl	8003e8c <vTaskDelay>
		if (controllerState.lastTimeCommand > 50){
 80043e2:	e795      	b.n	8004310 <xStoreADCDataTask+0x4c>
				controllerState.lastTimeCommand++;
 80043e4:	8be3      	ldrh	r3, [r4, #30]
 80043e6:	3301      	adds	r3, #1
 80043e8:	b29b      	uxth	r3, r3
				if (controllerState.lastTimeCommand > 600){
 80043ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				controllerState.lastTimeCommand++;
 80043ee:	83e3      	strh	r3, [r4, #30]
				if (controllerState.lastTimeCommand > 600){
 80043f0:	d9c8      	bls.n	8004384 <xStoreADCDataTask+0xc0>
					CMD_RF_ON;
 80043f2:	2200      	movs	r2, #0
 80043f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043f8:	4638      	mov	r0, r7
 80043fa:	f7fd fa4f 	bl	800189c <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 80043fe:	2032      	movs	r0, #50	; 0x32
 8004400:	f7ff fd44 	bl	8003e8c <vTaskDelay>
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <xStoreADCDataTask+0x200>)
 8004406:	4930      	ldr	r1, [pc, #192]	; (80044c8 <xStoreADCDataTask+0x204>)
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	4830      	ldr	r0, [pc, #192]	; (80044cc <xStoreADCDataTask+0x208>)
 800440c:	f001 fce6 	bl	8005ddc <siprintf>
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <xStoreADCDataTask+0x20c>)
 8004412:	b2c2      	uxtb	r2, r0
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004414:	492d      	ldr	r1, [pc, #180]	; (80044cc <xStoreADCDataTask+0x208>)
 8004416:	482f      	ldr	r0, [pc, #188]	; (80044d4 <xStoreADCDataTask+0x210>)
					messageLength = sprintf(message, "AT+C%03d\r", controllerData.rfChannel);
 8004418:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800441a:	f7fe fb55 	bl	8002ac8 <HAL_UART_Transmit_DMA>
					vTaskDelay(50 / portTICK_RATE_MS);
 800441e:	2032      	movs	r0, #50	; 0x32
 8004420:	f7ff fd34 	bl	8003e8c <vTaskDelay>
					CMD_RF_OFF;
 8004424:	462a      	mov	r2, r5
 8004426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800442a:	4638      	mov	r0, r7
 800442c:	f7fd fa36 	bl	800189c <HAL_GPIO_WritePin>
 8004430:	e7a5      	b.n	800437e <xStoreADCDataTask+0xba>
			controllerState.lastTimeCommand++;
 8004432:	3301      	adds	r3, #1
 8004434:	83f3      	strh	r3, [r6, #30]
 8004436:	e7a5      	b.n	8004384 <xStoreADCDataTask+0xc0>
			if (controllerState.prevPressureCompensation == COMPENSATION_ON){
 8004438:	78a3      	ldrb	r3, [r4, #2]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d1ce      	bne.n	80043dc <xStoreADCDataTask+0x118>
				controllerState.numberOfTries = 0;
 800443e:	2500      	movs	r5, #0
				C1_UP_OFF;
 8004440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004444:	462a      	mov	r2, r5
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <xStoreADCDataTask+0x1e8>)
				controllerState.numberOfTries = 0;
 8004448:	7765      	strb	r5, [r4, #29]
				C1_UP_OFF;
 800444a:	f7fd fa27 	bl	800189c <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 800444e:	462a      	mov	r2, r5
 8004450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004454:	4815      	ldr	r0, [pc, #84]	; (80044ac <xStoreADCDataTask+0x1e8>)
 8004456:	f7fd fa21 	bl	800189c <HAL_GPIO_WritePin>
				C2_UP_OFF;
 800445a:	462a      	mov	r2, r5
 800445c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004460:	4812      	ldr	r0, [pc, #72]	; (80044ac <xStoreADCDataTask+0x1e8>)
 8004462:	f7fd fa1b 	bl	800189c <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004466:	462a      	mov	r2, r5
 8004468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800446c:	480f      	ldr	r0, [pc, #60]	; (80044ac <xStoreADCDataTask+0x1e8>)
 800446e:	f7fd fa15 	bl	800189c <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8004472:	462a      	mov	r2, r5
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	480e      	ldr	r0, [pc, #56]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 8004478:	f7fd fa10 	bl	800189c <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 800447c:	462a      	mov	r2, r5
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	480b      	ldr	r0, [pc, #44]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 8004482:	f7fd fa0b 	bl	800189c <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004486:	462a      	mov	r2, r5
 8004488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448c:	4808      	ldr	r0, [pc, #32]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 800448e:	f7fd fa05 	bl	800189c <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8004492:	462a      	mov	r2, r5
 8004494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <xStoreADCDataTask+0x1ec>)
 800449a:	f7fd f9ff 	bl	800189c <HAL_GPIO_WritePin>
				controllerState.prevPressureCompensation = COMPENSATION_OFF;
 800449e:	70a5      	strb	r5, [r4, #2]
 80044a0:	e79c      	b.n	80043dc <xStoreADCDataTask+0x118>
 80044a2:	bf00      	nop
 80044a4:	200054bc 	.word	0x200054bc
 80044a8:	40010800 	.word	0x40010800
 80044ac:	40010c00 	.word	0x40010c00
 80044b0:	40011000 	.word	0x40011000
 80044b4:	20005578 	.word	0x20005578
 80044b8:	2000563e 	.word	0x2000563e
 80044bc:	200055cc 	.word	0x200055cc
 80044c0:	20005584 	.word	0x20005584
 80044c4:	2000547c 	.word	0x2000547c
 80044c8:	08007079 	.word	0x08007079
 80044cc:	200053f8 	.word	0x200053f8
 80044d0:	20005478 	.word	0x20005478
 80044d4:	200055fc 	.word	0x200055fc

080044d8 <xAnalyzeTask>:

extern char message[128];
extern uint8_t messageLength;


void xAnalyzeTask(void *arguments){
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;

	uint8_t i = 0;
	int16_t deltaPressure = 0;

	int32_t impTime[4] = {0, 1, 2, 3};
 80044dc:	4bb9      	ldr	r3, [pc, #740]	; (80047c4 <xAnalyzeTask+0x2ec>)
void xAnalyzeTask(void *arguments){
 80044de:	b093      	sub	sp, #76	; 0x4c
	int32_t impTime[4] = {0, 1, 2, 3};
 80044e0:	ac0e      	add	r4, sp, #56	; 0x38
 80044e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t startPressure[4];
	uint32_t dCounter = 0;
	uint8_t stopImp = 0;
	uint32_t impCounter = 0;
	uint8_t numOfAxles = 0;
	uint8_t numOfWays[2] = {0, 0};
 80044e8:	2400      	movs	r4, #0

	int8_t pressIsLower[4] = {0};
	int32_t maxUpImp = 0;


	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 80044ea:	4db7      	ldr	r5, [pc, #732]	; (80047c8 <xAnalyzeTask+0x2f0>)
 80044ec:	4623      	mov	r3, r4
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	4621      	mov	r1, r4
 80044f4:	6828      	ldr	r0, [r5, #0]
	uint8_t numOfWays[2] = {0, 0};
 80044f6:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80044fa:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	int8_t pressIsLower[4] = {0};
 80044fe:	940b      	str	r4, [sp, #44]	; 0x2c
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004500:	f7ff f8c0 	bl	8003684 <xQueueGenericReceive>
	int32_t maxUpImp = 0;
 8004504:	9405      	str	r4, [sp, #20]
	for(;;){
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004506:	9509      	str	r5, [sp, #36]	; 0x24
 8004508:	2300      	movs	r3, #0
 800450a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	4619      	mov	r1, r3
 8004512:	6800      	ldr	r0, [r0, #0]
 8004514:	f7ff f8b6 	bl	8003684 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8004518:	2801      	cmp	r0, #1
 800451a:	d1f5      	bne.n	8004508 <xAnalyzeTask+0x30>
			//-------- check for number of tries -----------------
			controllerState.analyzeState = COMPENSATION_STATE_FREE;
 800451c:	4dab      	ldr	r5, [pc, #684]	; (80047cc <xAnalyzeTask+0x2f4>)
			if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 800451e:	7f6b      	ldrb	r3, [r5, #29]
			controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004520:	702c      	strb	r4, [r5, #0]
			if (controllerState.numberOfTries >= MAX_ANALYZE_TRIES){
 8004522:	2b06      	cmp	r3, #6
 8004524:	d923      	bls.n	800456e <xAnalyzeTask+0x96>
				controllerState.numberOfTries = 0;
				controllerState.pressureCompensation = COMPENSATION_OFF;

				controllerInfo.aligningNum += 1;
 8004526:	4eaa      	ldr	r6, [pc, #680]	; (80047d0 <xAnalyzeTask+0x2f8>)
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 8004528:	2204      	movs	r2, #4
				controllerInfo.aligningNum += 1;
 800452a:	4631      	mov	r1, r6
 800452c:	68b3      	ldr	r3, [r6, #8]
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 800452e:	2008      	movs	r0, #8
				controllerInfo.aligningNum += 1;
 8004530:	3301      	adds	r3, #1
 8004532:	f841 3f08 	str.w	r3, [r1, #8]!
				controllerState.numberOfTries = 0;
 8004536:	776c      	strb	r4, [r5, #29]
				controllerState.pressureCompensation = COMPENSATION_OFF;
 8004538:	706c      	strb	r4, [r5, #1]
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 800453a:	f000 fd35 	bl	8004fa8 <eeprom_write_page>
				vTaskDelay(5);
 800453e:	2005      	movs	r0, #5
 8004540:	f7ff fca4 	bl	8003e8c <vTaskDelay>
				controllerInfo.errorAligningNum += 1;
 8004544:	4631      	mov	r1, r6
 8004546:	68f3      	ldr	r3, [r6, #12]
				eeprom_write_page(EEPROM_ERROR_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.errorAligningNum, sizeof(controllerInfo.errorAligningNum));
 8004548:	2204      	movs	r2, #4
				controllerInfo.errorAligningNum += 1;
 800454a:	3301      	adds	r3, #1
 800454c:	f841 3f0c 	str.w	r3, [r1, #12]!
				eeprom_write_page(EEPROM_ERROR_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.errorAligningNum, sizeof(controllerInfo.errorAligningNum));
 8004550:	200c      	movs	r0, #12
 8004552:	f000 fd29 	bl	8004fa8 <eeprom_write_page>
				vTaskDelay(5);
 8004556:	2005      	movs	r0, #5
 8004558:	f7ff fc98 	bl	8003e8c <vTaskDelay>
			else{
				controllerState.numberOfTries += 1;
			}

			//axles calculations
			switch (controllerState.waysType){
 800455c:	7eab      	ldrb	r3, [r5, #26]
 800455e:	3b01      	subs	r3, #1
 8004560:	2b05      	cmp	r3, #5
 8004562:	d86a      	bhi.n	800463a <xAnalyzeTask+0x162>
 8004564:	e8df f003 	tbb	[pc, r3]
 8004568:	574f0d06 	.word	0x574f0d06
 800456c:	655e      	.short	0x655e
				controllerState.numberOfTries += 1;
 800456e:	3301      	adds	r3, #1
 8004570:	776b      	strb	r3, [r5, #29]
 8004572:	e7f3      	b.n	800455c <xAnalyzeTask+0x84>
				case 1:{ // Single Way !!!NOT USED!!!
					numOfAxles = 1;
					numOfWays[0] = 1;
 8004574:	2301      	movs	r3, #1
					numOfWays[1] = 0;
 8004576:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
					numOfWays[0] = 1;
 800457a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					numOfWays[0] = 2;
					numOfWays[1] = 1;
					break;
				}
				case VIEW_2_2:{ //FOUR WAYS
					numOfAxles = 2;
 800457e:	469b      	mov	fp, r3
					numOfWays[0] = 2;
					numOfWays[1] = 2;
					break;
 8004580:	e006      	b.n	8004590 <xAnalyzeTask+0xb8>
					numOfWays[0] = 2;
 8004582:	2302      	movs	r3, #2
					numOfAxles = 1;
 8004584:	f04f 0b01 	mov.w	fp, #1
					numOfWays[0] = 2;
 8004588:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					numOfWays[1] = 0;
 800458c:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
				}

			}

			//-------- looking at pressure delta -----------------
			for (i = 0; i < numOfWays[0] + numOfWays[1]; i++){
 8004590:	2100      	movs	r1, #0
					else
						pressIsLower[i] = 0; //if need to lower
					controllerState.analyzeState = COMPENSATION_STATE_WORKING;
				}
				else{
					pressIsLower[i] = -1; //if not need to change
 8004592:	f04f 09ff 	mov.w	r9, #255	; 0xff
			for (i = 0; i < numOfWays[0] + numOfWays[1]; i++){
 8004596:	460e      	mov	r6, r1
 8004598:	f04f 0a01 	mov.w	sl, #1
 800459c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80045a0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
				if (deltaPressure > controllerState.analyzeAccuracy){
 80045a4:	f895 801b 	ldrb.w	r8, [r5, #27]
			for (i = 0; i < numOfWays[0] + numOfWays[1]; i++){
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	f895 c000 	ldrb.w	ip, [r5]
 80045ae:	9302      	str	r3, [sp, #8]
 80045b0:	9a02      	ldr	r2, [sp, #8]
 80045b2:	b2cb      	uxtb	r3, r1
 80045b4:	4293      	cmp	r3, r2
 80045b6:	db42      	blt.n	800463e <xAnalyzeTask+0x166>
 80045b8:	b10e      	cbz	r6, 80045be <xAnalyzeTask+0xe6>
 80045ba:	f885 c000 	strb.w	ip, [r5]
				}
			}

			//-------- if everything is OK stop compensation -----------------
			if (controllerState.analyzeState == COMPENSATION_STATE_FREE){
 80045be:	782e      	ldrb	r6, [r5, #0]
 80045c0:	2e00      	cmp	r6, #0
 80045c2:	f040 822b 	bne.w	8004a1c <xAnalyzeTask+0x544>
				impTime[1] = 0;
				impTime[2] = 0;
				impTime[3] = 0;
				controllerState.numberOfTries = 0;

				controllerInfo.aligningNum += 1;
 80045c6:	4982      	ldr	r1, [pc, #520]	; (80047d0 <xAnalyzeTask+0x2f8>)
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 80045c8:	2204      	movs	r2, #4
				controllerInfo.aligningNum += 1;
 80045ca:	688b      	ldr	r3, [r1, #8]
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 80045cc:	2008      	movs	r0, #8
				controllerInfo.aligningNum += 1;
 80045ce:	3301      	adds	r3, #1
 80045d0:	f841 3f08 	str.w	r3, [r1, #8]!
				controllerState.pressureCompensation = COMPENSATION_OFF;
 80045d4:	706e      	strb	r6, [r5, #1]
				impTime[0] = 0;
 80045d6:	960e      	str	r6, [sp, #56]	; 0x38
				impTime[1] = 0;
 80045d8:	960f      	str	r6, [sp, #60]	; 0x3c
				impTime[2] = 0;
 80045da:	9610      	str	r6, [sp, #64]	; 0x40
				impTime[3] = 0;
 80045dc:	9611      	str	r6, [sp, #68]	; 0x44
				controllerState.numberOfTries = 0;
 80045de:	776e      	strb	r6, [r5, #29]
				eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 80045e0:	f000 fce2 	bl	8004fa8 <eeprom_write_page>
				vTaskDelay(5);
 80045e4:	2005      	movs	r0, #5
 80045e6:	f7ff fc51 	bl	8003e8c <vTaskDelay>

				controllerData.writeCounter += 1;
 80045ea:	4a7a      	ldr	r2, [pc, #488]	; (80047d4 <xAnalyzeTask+0x2fc>)
				xTaskCreate(xEepromWriteSettings,
 80045ec:	497a      	ldr	r1, [pc, #488]	; (80047d8 <xAnalyzeTask+0x300>)
				controllerData.writeCounter += 1;
 80045ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
				xTaskCreate(xEepromWriteSettings,
 80045f0:	487a      	ldr	r0, [pc, #488]	; (80047dc <xAnalyzeTask+0x304>)
				controllerData.writeCounter += 1;
 80045f2:	3301      	adds	r3, #1
 80045f4:	62d3      	str	r3, [r2, #44]	; 0x2c
				xTaskCreate(xEepromWriteSettings,
 80045f6:	2301      	movs	r3, #1
 80045f8:	9601      	str	r6, [sp, #4]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	22c8      	movs	r2, #200	; 0xc8
 80045fe:	4633      	mov	r3, r6
 8004600:	f7ff fa5f 	bl	8003ac2 <xTaskCreate>
							1,
							NULL);


				//mWrite_flash();
				continue;
 8004604:	e780      	b.n	8004508 <xAnalyzeTask+0x30>
					numOfWays[0] = 1;
 8004606:	2301      	movs	r3, #1
					numOfAxles = 2;
 8004608:	f04f 0b02 	mov.w	fp, #2
					numOfWays[0] = 1;
 800460c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					numOfWays[1] = 1;
 8004610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					break;
 8004614:	e7bc      	b.n	8004590 <xAnalyzeTask+0xb8>
					numOfWays[0] = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					numOfWays[1] = 2;
 800461c:	2302      	movs	r3, #2
					numOfWays[1] = 2;
 800461e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004622:	e7ac      	b.n	800457e <xAnalyzeTask+0xa6>
					numOfWays[0] = 2;
 8004624:	2302      	movs	r3, #2
					numOfWays[1] = 1;
 8004626:	2201      	movs	r2, #1
					numOfWays[0] = 2;
 8004628:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					numOfWays[1] = 1;
 800462c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8004630:	e7a5      	b.n	800457e <xAnalyzeTask+0xa6>
					numOfWays[0] = 2;
 8004632:	2302      	movs	r3, #2
 8004634:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004638:	e7f1      	b.n	800461e <xAnalyzeTask+0x146>
					controllerState.pressureCompensation = COMPENSATION_OFF;
 800463a:	706c      	strb	r4, [r5, #1]
					continue;
 800463c:	e764      	b.n	8004508 <xAnalyzeTask+0x30>
				startPressure[i] = controllerState.filteredData[i];
 800463e:	4a63      	ldr	r2, [pc, #396]	; (80047cc <xAnalyzeTask+0x2f4>)
 8004640:	af12      	add	r7, sp, #72	; 0x48
 8004642:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004646:	89d0      	ldrh	r0, [r2, #14]
 8004648:	005a      	lsls	r2, r3, #1
 800464a:	eb07 0e02 	add.w	lr, r7, r2
				deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 800464e:	4f5f      	ldr	r7, [pc, #380]	; (80047cc <xAnalyzeTask+0x2f4>)
				startPressure[i] = controllerState.filteredData[i];
 8004650:	f82e 0c18 	strh.w	r0, [lr, #-24]
				deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 8004654:	443a      	add	r2, r7
 8004656:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 800465a:	ebae 0200 	sub.w	r2, lr, r0
				deltaPressure = abs(deltaPressure);
 800465e:	b212      	sxth	r2, r2
 8004660:	2a00      	cmp	r2, #0
 8004662:	bfb8      	it	lt
 8004664:	4252      	neglt	r2, r2
				if (deltaPressure > controllerState.analyzeAccuracy){
 8004666:	b212      	sxth	r2, r2
 8004668:	4542      	cmp	r2, r8
 800466a:	aa12      	add	r2, sp, #72	; 0x48
 800466c:	4413      	add	r3, r2
 800466e:	dd09      	ble.n	8004684 <xAnalyzeTask+0x1ac>
 8004670:	2601      	movs	r6, #1
					if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 8004672:	4570      	cmp	r0, lr
						pressIsLower[i] = 1; //if need to lift
 8004674:	bf2c      	ite	cs
 8004676:	4622      	movcs	r2, r4
 8004678:	4652      	movcc	r2, sl
					controllerState.analyzeState = COMPENSATION_STATE_WORKING;
 800467a:	46b4      	mov	ip, r6
						pressIsLower[i] = 1; //if need to lift
 800467c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8004680:	3101      	adds	r1, #1
 8004682:	e795      	b.n	80045b0 <xAnalyzeTask+0xd8>
					pressIsLower[i] = -1; //if not need to change
 8004684:	f803 9c1c 	strb.w	r9, [r3, #-28]
 8004688:	e7fa      	b.n	8004680 <xAnalyzeTask+0x1a8>

			for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
				for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
					i = axleCounter*numOfWays[0] + wayCounter;

					startPressure[i] = controllerState.filteredData[i];
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	a912      	add	r1, sp, #72	; 0x48
 800468e:	441e      	add	r6, r3
 8004690:	b2f6      	uxtb	r6, r6
 8004692:	eb05 0346 	add.w	r3, r5, r6, lsl #1
 8004696:	89da      	ldrh	r2, [r3, #14]
 8004698:	0073      	lsls	r3, r6, #1
 800469a:	4419      	add	r1, r3
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 800469c:	442b      	add	r3, r5
 800469e:	f8b3 c006 	ldrh.w	ip, [r3, #6]

					//another check for ness moving
					if (pressIsLower[i] >= 0){
 80046a2:	ab12      	add	r3, sp, #72	; 0x48
 80046a4:	4433      	add	r3, r6
 80046a6:	f913 7c1c 	ldrsb.w	r7, [r3, #-28]
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80046aa:	ebac 0002 	sub.w	r0, ip, r2
					if (pressIsLower[i] >= 0){
 80046ae:	2f00      	cmp	r7, #0
					startPressure[i] = controllerState.filteredData[i];
 80046b0:	f821 2c18 	strh.w	r2, [r1, #-24]
					deltaPressure = controllerState.nessPressure[i] - controllerState.filteredData[i];
 80046b4:	b200      	sxth	r0, r0
 80046b6:	ea4f 0786 	mov.w	r7, r6, lsl #2
					if (pressIsLower[i] >= 0){
 80046ba:	db0d      	blt.n	80046d8 <xAnalyzeTask+0x200>
						if (abs(deltaPressure) > controllerState.analyzeAccuracy){
 80046bc:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80046c0:	9908      	ldr	r1, [sp, #32]
 80046c2:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80046c6:	458e      	cmp	lr, r1
 80046c8:	dd23      	ble.n	8004712 <xAnalyzeTask+0x23a>
							if (controllerState.nessPressure[i] > controllerState.filteredData[i])
 80046ca:	4562      	cmp	r2, ip
								pressIsLower[i] = 1; //if need to lift
 80046cc:	bf36      	itet	cc
 80046ce:	2201      	movcc	r2, #1
							else
								pressIsLower[i] = 0; //if need to lower
 80046d0:	f803 4c1c 	strbcs.w	r4, [r3, #-28]
								pressIsLower[i] = 1; //if need to lift
 80046d4:	f803 2c1c 	strbcc.w	r2, [r3, #-28]
							continue;
						}
					}


					if (pressIsLower[i] == 1){
 80046d8:	ab12      	add	r3, sp, #72	; 0x48
 80046da:	4433      	add	r3, r6
 80046dc:	f913 3c1c 	ldrsb.w	r3, [r3, #-28]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 809e 	bne.w	8004822 <xAnalyzeTask+0x34a>

						impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 80046e6:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <xAnalyzeTask+0x2fc>)
 80046e8:	443b      	add	r3, r7
 80046ea:	685e      	ldr	r6, [r3, #4]
 80046ec:	f7fb fe62 	bl	80003b4 <__aeabi_i2f>
 80046f0:	4631      	mov	r1, r6
 80046f2:	f7fb feb3 	bl	800045c <__aeabi_fmul>
 80046f6:	f7fc f877 	bl	80007e8 <__aeabi_f2iz>
 80046fa:	ab12      	add	r3, sp, #72	; 0x48
 80046fc:	441f      	add	r7, r3
						#if DEBUG_SERIAL
							messageLength = sprintf(message, "[INFO] %d: up %ld\n", i, impTime[i]);
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
						#endif

						if (controllerState.airSystemType == RECEIVER){
 80046fe:	9b06      	ldr	r3, [sp, #24]
						impTime[i] = (int32_t)(controllerData.impUpCoeff[i] * (float)deltaPressure);
 8004700:	f847 0c10 	str.w	r0, [r7, #-16]
						if (controllerState.airSystemType == RECEIVER){
 8004704:	2b01      	cmp	r3, #1
 8004706:	d17e      	bne.n	8004806 <xAnalyzeTask+0x32e>
							if (impTime[i] < 0) impTime[i] = 500;
 8004708:	2800      	cmp	r0, #0
 800470a:	da71      	bge.n	80047f0 <xAnalyzeTask+0x318>
 800470c:	f847 9c10 	str.w	r9, [r7, #-16]
 8004710:	e007      	b.n	8004722 <xAnalyzeTask+0x24a>
							pressIsLower[i] = -1;
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	f803 2c1c 	strb.w	r2, [r3, #-28]
							impTime[i] = 0;
 800471a:	ab12      	add	r3, sp, #72	; 0x48
 800471c:	441f      	add	r7, r3
 800471e:	f847 4c10 	str.w	r4, [r7, #-16]
 8004722:	f10a 0a01 	add.w	sl, sl, #1
				for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004726:	9b02      	ldr	r3, [sp, #8]
 8004728:	fa5f f68a 	uxtb.w	r6, sl
 800472c:	42b3      	cmp	r3, r6
 800472e:	d8ac      	bhi.n	800468a <xAnalyzeTask+0x1b2>
					else{
						impTime[i] = 0;
					}
				}

				if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004730:	786e      	ldrb	r6, [r5, #1]
 8004732:	2e00      	cmp	r6, #0
 8004734:	f000 809b 	beq.w	800486e <xAnalyzeTask+0x396>
 8004738:	f04f 0900 	mov.w	r9, #0
					if (impTime[i] > 0){
						if (pressIsLower[i] == 1){
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
						}
						else if (pressIsLower[i] == 0){
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 800473c:	4e28      	ldr	r6, [pc, #160]	; (80047e0 <xAnalyzeTask+0x308>)
 800473e:	4f29      	ldr	r7, [pc, #164]	; (80047e4 <xAnalyzeTask+0x30c>)
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8004740:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80047ec <xAnalyzeTask+0x314>
				for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004744:	9b02      	ldr	r3, [sp, #8]
 8004746:	fa5f f289 	uxtb.w	r2, r9
 800474a:	429a      	cmp	r2, r3
 800474c:	f0c0 80cc 	bcc.w	80048e8 <xAnalyzeTask+0x410>
					messageLength = sprintf(message, "[INFO] ac %d, nw0 %d, nw1 %d\n", axleCounter, numOfWays[0], numOfWays[1]);
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
				#endif


				if (controllerState.airSystemType == COMPRESSOR){
 8004750:	792a      	ldrb	r2, [r5, #4]
 8004752:	b972      	cbnz	r2, 8004772 <xAnalyzeTask+0x29a>
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
						i = axleCounter*numOfWays[0] + wayCounter;
 8004754:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8004758:	9b04      	ldr	r3, [sp, #16]
 800475a:	4359      	muls	r1, r3
 800475c:	b2c9      	uxtb	r1, r1
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 800475e:	9802      	ldr	r0, [sp, #8]
 8004760:	b2d3      	uxtb	r3, r2
 8004762:	4298      	cmp	r0, r3
 8004764:	f200 80e5 	bhi.w	8004932 <xAnalyzeTask+0x45a>
						}
					}
				}

				if (controllerState.airSystemType == COMPRESSOR){
					if(controllerState.compressorWorkTime > 300000){
 8004768:	6a2a      	ldr	r2, [r5, #32]
 800476a:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <xAnalyzeTask+0x310>)
 800476c:	429a      	cmp	r2, r3
 800476e:	f200 80f4 	bhi.w	800495a <xAnalyzeTask+0x482>
						continue;

					}
				}

				impCounter = xTaskGetTickCount();
 8004772:	f7ff fa7b 	bl	8003c6c <xTaskGetTickCount>
 8004776:	4681      	mov	r9, r0
				while(1){
					vTaskDelay(20);
 8004778:	2014      	movs	r0, #20
 800477a:	f7ff fb87 	bl	8003e8c <vTaskDelay>
					dCounter = xTaskGetTickCount() - impCounter;
 800477e:	f7ff fa75 	bl	8003c6c <xTaskGetTickCount>

					if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004782:	786b      	ldrb	r3, [r5, #1]
					dCounter = xTaskGetTickCount() - impCounter;
 8004784:	eba0 0a09 	sub.w	sl, r0, r9
					if (controllerState.pressureCompensation == COMPENSATION_OFF){
 8004788:	b15b      	cbz	r3, 80047a2 <xAnalyzeTask+0x2ca>
 800478a:	f04f 0800 	mov.w	r8, #0
 800478e:	4647      	mov	r7, r8

					stopImp = 0;
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
						i = axleCounter*numOfWays[0] + wayCounter;
						if(dCounter > impTime[i]){
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <xAnalyzeTask+0x30c>)
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004792:	9902      	ldr	r1, [sp, #8]
 8004794:	fa5f f288 	uxtb.w	r2, r8
 8004798:	428a      	cmp	r2, r1
 800479a:	f0c0 8103 	bcc.w	80049a4 <xAnalyzeTask+0x4cc>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
							stopImp++;
						}
					}
					if (stopImp >= numOfWays[axleCounter]){
 800479e:	428f      	cmp	r7, r1
 80047a0:	d3ea      	bcc.n	8004778 <xAnalyzeTask+0x2a0>
						break;
					}
				}

				if (controllerState.pressureCompensation == COMPENSATION_OFF){
 80047a2:	786e      	ldrb	r6, [r5, #1]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	f000 8122 	beq.w	80049ee <xAnalyzeTask+0x516>
					impTime[3] = 0;
					controllerState.numberOfTries = 0;
					continue;
				}

				vTaskDelay(3000);
 80047aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80047ae:	f7ff fb6d 	bl	8003e8c <vTaskDelay>

				if (controllerState.airSystemType == COMPRESSOR){
 80047b2:	792b      	ldrb	r3, [r5, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 80d6 	bne.w	8004966 <xAnalyzeTask+0x48e>
					controllerState.compressorWorkTime += maxUpImp;
 80047ba:	6a2b      	ldr	r3, [r5, #32]
 80047bc:	9a05      	ldr	r2, [sp, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	622b      	str	r3, [r5, #32]
 80047c2:	e0d0      	b.n	8004966 <xAnalyzeTask+0x48e>
 80047c4:	08007058 	.word	0x08007058
 80047c8:	20005584 	.word	0x20005584
 80047cc:	200054bc 	.word	0x200054bc
 80047d0:	200054ac 	.word	0x200054ac
 80047d4:	2000547c 	.word	0x2000547c
 80047d8:	08007083 	.word	0x08007083
 80047dc:	08004f19 	.word	0x08004f19
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	2000001c 	.word	0x2000001c
 80047e8:	000493e0 	.word	0x000493e0
 80047ec:	2000002c 	.word	0x2000002c
							else if (impTime[i] == 0) impTime[i] = 1000;
 80047f0:	d104      	bne.n	80047fc <xAnalyzeTask+0x324>
							if (impTime[i] < 0) impTime[i] = 1000;
 80047f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
							else if (impTime[i] == 0) impTime[i] = 5000;
 80047f6:	f847 3c10 	str.w	r3, [r7, #-16]
 80047fa:	e792      	b.n	8004722 <xAnalyzeTask+0x24a>
							else if (impTime[i] > 10000) impTime[i] = 10000;
 80047fc:	4540      	cmp	r0, r8
 80047fe:	dd90      	ble.n	8004722 <xAnalyzeTask+0x24a>
 8004800:	f847 8c10 	str.w	r8, [r7, #-16]
 8004804:	e78d      	b.n	8004722 <xAnalyzeTask+0x24a>
						else if (controllerState.airSystemType == COMPRESSOR){
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d18a      	bne.n	8004722 <xAnalyzeTask+0x24a>
							if (impTime[i] < 0) impTime[i] = 1000;
 800480c:	2800      	cmp	r0, #0
 800480e:	dbf0      	blt.n	80047f2 <xAnalyzeTask+0x31a>
							else if (impTime[i] == 0) impTime[i] = 5000;
 8004810:	d102      	bne.n	8004818 <xAnalyzeTask+0x340>
 8004812:	f241 3388 	movw	r3, #5000	; 0x1388
 8004816:	e7ee      	b.n	80047f6 <xAnalyzeTask+0x31e>
							else if (impTime[i] > 20000) impTime[i] = 20000;
 8004818:	f644 6320 	movw	r3, #20000	; 0x4e20
 800481c:	4298      	cmp	r0, r3
 800481e:	dd80      	ble.n	8004722 <xAnalyzeTask+0x24a>
 8004820:	e7e9      	b.n	80047f6 <xAnalyzeTask+0x31e>
					else if (pressIsLower[i] == 0){
 8004822:	b9f3      	cbnz	r3, 8004862 <xAnalyzeTask+0x38a>
						impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8004824:	4ab9      	ldr	r2, [pc, #740]	; (8004b0c <xAnalyzeTask+0x634>)
 8004826:	1d33      	adds	r3, r6, #4
 8004828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800482c:	685f      	ldr	r7, [r3, #4]
 800482e:	f7fb fdc1 	bl	80003b4 <__aeabi_i2f>
 8004832:	4639      	mov	r1, r7
 8004834:	f7fb fe12 	bl	800045c <__aeabi_fmul>
 8004838:	f7fb ffd6 	bl	80007e8 <__aeabi_f2iz>
						if (impTime[i] < 0) impTime[i] = 500;
 800483c:	2800      	cmp	r0, #0
 800483e:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8004842:	da04      	bge.n	800484e <xAnalyzeTask+0x376>
						else if (impTime[i] == 0) impTime[i] = 500;
 8004844:	ab12      	add	r3, sp, #72	; 0x48
 8004846:	441e      	add	r6, r3
 8004848:	f846 9c10 	str.w	r9, [r6, #-16]
 800484c:	e769      	b.n	8004722 <xAnalyzeTask+0x24a>
 800484e:	d0f9      	beq.n	8004844 <xAnalyzeTask+0x36c>
						else if (impTime[i] > 10000) impTime[i] = 10000;
 8004850:	ab12      	add	r3, sp, #72	; 0x48
 8004852:	441e      	add	r6, r3
 8004854:	4540      	cmp	r0, r8
						impTime[i] = (int32_t)(controllerData.impDownCoeff[i] * (float)deltaPressure);
 8004856:	bfd4      	ite	le
 8004858:	f846 0c10 	strle.w	r0, [r6, #-16]
						else if (impTime[i] > 10000) impTime[i] = 10000;
 800485c:	f846 8c10 	strgt.w	r8, [r6, #-16]
 8004860:	e75f      	b.n	8004722 <xAnalyzeTask+0x24a>
						impTime[i] = 0;
 8004862:	ab12      	add	r3, sp, #72	; 0x48
 8004864:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004868:	f846 4c10 	str.w	r4, [r6, #-16]
 800486c:	e759      	b.n	8004722 <xAnalyzeTask+0x24a>
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800486e:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8004b20 <xAnalyzeTask+0x648>
 8004872:	4fa7      	ldr	r7, [pc, #668]	; (8004b10 <xAnalyzeTask+0x638>)
 8004874:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8004878:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800487c:	2200      	movs	r2, #0
 800487e:	f7fd f80d 	bl	800189c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004882:	4ba4      	ldr	r3, [pc, #656]	; (8004b14 <xAnalyzeTask+0x63c>)
 8004884:	2200      	movs	r2, #0
 8004886:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 800488a:	4ba3      	ldr	r3, [pc, #652]	; (8004b18 <xAnalyzeTask+0x640>)
 800488c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004890:	3601      	adds	r6, #1
 8004892:	f7fd f803 	bl	800189c <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004896:	2e04      	cmp	r6, #4
 8004898:	d1ec      	bne.n	8004874 <xAnalyzeTask+0x39c>
					impTime[0] = 0;
 800489a:	940e      	str	r4, [sp, #56]	; 0x38
					impTime[1] = 0;
 800489c:	940f      	str	r4, [sp, #60]	; 0x3c
					impTime[2] = 0;
 800489e:	9410      	str	r4, [sp, #64]	; 0x40
					impTime[3] = 0;
 80048a0:	9411      	str	r4, [sp, #68]	; 0x44
					controllerState.numberOfTries = 0;
 80048a2:	776c      	strb	r4, [r5, #29]
				}

			} //stepCounter

			if (controllerState.pressureCompensation == COMPENSATION_OFF){
 80048a4:	4e9d      	ldr	r6, [pc, #628]	; (8004b1c <xAnalyzeTask+0x644>)
 80048a6:	7873      	ldrb	r3, [r6, #1]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 80bb 	bne.w	8004a24 <xAnalyzeTask+0x54c>
 80048ae:	461d      	mov	r5, r3
				for (i = 0; i < 4; i++){
					HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80048b0:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8004b20 <xAnalyzeTask+0x648>
 80048b4:	4f96      	ldr	r7, [pc, #600]	; (8004b10 <xAnalyzeTask+0x638>)
 80048b6:	f838 1025 	ldrh.w	r1, [r8, r5, lsl #2]
 80048ba:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80048be:	2200      	movs	r2, #0
 80048c0:	f7fc ffec 	bl	800189c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80048c4:	4b93      	ldr	r3, [pc, #588]	; (8004b14 <xAnalyzeTask+0x63c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	f833 1025 	ldrh.w	r1, [r3, r5, lsl #2]
 80048cc:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <xAnalyzeTask+0x640>)
 80048ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048d2:	3501      	adds	r5, #1
 80048d4:	f7fc ffe2 	bl	800189c <HAL_GPIO_WritePin>
				for (i = 0; i < 4; i++){
 80048d8:	2d04      	cmp	r5, #4
 80048da:	d1ec      	bne.n	80048b6 <xAnalyzeTask+0x3de>
				}
				impTime[0] = 0;
 80048dc:	940e      	str	r4, [sp, #56]	; 0x38
				impTime[1] = 0;
 80048de:	940f      	str	r4, [sp, #60]	; 0x3c
				impTime[2] = 0;
 80048e0:	9410      	str	r4, [sp, #64]	; 0x40
				impTime[3] = 0;
 80048e2:	9411      	str	r4, [sp, #68]	; 0x44
				controllerState.numberOfTries = 0;
 80048e4:	7774      	strb	r4, [r6, #29]
				continue;
 80048e6:	e60f      	b.n	8004508 <xAnalyzeTask+0x30>
					i = axleCounter*numOfWays[0] + wayCounter;
 80048e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80048ec:	9904      	ldr	r1, [sp, #16]
 80048ee:	fb03 2301 	mla	r3, r3, r1, r2
					if (impTime[i] > 0){
 80048f2:	aa12      	add	r2, sp, #72	; 0x48
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80048fa:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80048fe:	2a00      	cmp	r2, #0
 8004900:	dd0c      	ble.n	800491c <xAnalyzeTask+0x444>
						if (pressIsLower[i] == 1){
 8004902:	aa12      	add	r2, sp, #72	; 0x48
 8004904:	441a      	add	r2, r3
 8004906:	f912 2c1c 	ldrsb.w	r2, [r2, #-28]
 800490a:	2a01      	cmp	r2, #1
 800490c:	d109      	bne.n	8004922 <xAnalyzeTask+0x44a>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 800490e:	4882      	ldr	r0, [pc, #520]	; (8004b18 <xAnalyzeTask+0x640>)
 8004910:	f838 1023 	ldrh.w	r1, [r8, r3, lsl #2]
 8004914:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004918:	f7fc ffc0 	bl	800189c <HAL_GPIO_WritePin>
 800491c:	f109 0901 	add.w	r9, r9, #1
 8004920:	e710      	b.n	8004744 <xAnalyzeTask+0x26c>
						else if (pressIsLower[i] == 0){
 8004922:	2a00      	cmp	r2, #0
 8004924:	d1fa      	bne.n	800491c <xAnalyzeTask+0x444>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004926:	2201      	movs	r2, #1
 8004928:	f836 1023 	ldrh.w	r1, [r6, r3, lsl #2]
 800492c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8004930:	e7f2      	b.n	8004918 <xAnalyzeTask+0x440>
						if (pressIsLower[i] > 0){
 8004932:	440b      	add	r3, r1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	a812      	add	r0, sp, #72	; 0x48
 8004938:	4418      	add	r0, r3
 800493a:	f910 0c1c 	ldrsb.w	r0, [r0, #-28]
 800493e:	2800      	cmp	r0, #0
 8004940:	dd09      	ble.n	8004956 <xAnalyzeTask+0x47e>
							if (impTime[i] > maxUpImp){
 8004942:	a812      	add	r0, sp, #72	; 0x48
 8004944:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004948:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800494c:	9805      	ldr	r0, [sp, #20]
 800494e:	4298      	cmp	r0, r3
 8004950:	bfb8      	it	lt
 8004952:	4618      	movlt	r0, r3
 8004954:	9005      	str	r0, [sp, #20]
 8004956:	3201      	adds	r2, #1
 8004958:	e701      	b.n	800475e <xAnalyzeTask+0x286>
						controllerState.pressureCompensation = COMPENSATION_OFF;
 800495a:	706c      	strb	r4, [r5, #1]
					impTime[0] = 0;
 800495c:	940e      	str	r4, [sp, #56]	; 0x38
					impTime[1] = 0;
 800495e:	940f      	str	r4, [sp, #60]	; 0x3c
					impTime[2] = 0;
 8004960:	9410      	str	r4, [sp, #64]	; 0x40
					impTime[3] = 0;
 8004962:	9411      	str	r4, [sp, #68]	; 0x44
					controllerState.numberOfTries = 0;
 8004964:	776c      	strb	r4, [r5, #29]
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	9303      	str	r3, [sp, #12]
			for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
 800496c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004970:	459b      	cmp	fp, r3
 8004972:	d997      	bls.n	80048a4 <xAnalyzeTask+0x3cc>
 8004974:	f89d 300c 	ldrb.w	r3, [sp, #12]
				for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004978:	9a03      	ldr	r2, [sp, #12]
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	ab0a      	add	r3, sp, #40	; 0x28
 800497e:	5cd3      	ldrb	r3, [r2, r3]
					i = axleCounter*numOfWays[0] + wayCounter;
 8004980:	9a04      	ldr	r2, [sp, #16]
				for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004982:	9302      	str	r3, [sp, #8]
					i = axleCounter*numOfWays[0] + wayCounter;
 8004984:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
						if (controllerState.airSystemType == RECEIVER){
 8004988:	f04f 0a00 	mov.w	sl, #0
					i = axleCounter*numOfWays[0] + wayCounter;
 800498c:	4353      	muls	r3, r2
 800498e:	b2db      	uxtb	r3, r3
 8004990:	9307      	str	r3, [sp, #28]
						if (abs(deltaPressure) > controllerState.analyzeAccuracy){
 8004992:	7eeb      	ldrb	r3, [r5, #27]
						else if (impTime[i] > 10000) impTime[i] = 10000;
 8004994:	f242 7810 	movw	r8, #10000	; 0x2710
						if (abs(deltaPressure) > controllerState.analyzeAccuracy){
 8004998:	9308      	str	r3, [sp, #32]
						if (controllerState.airSystemType == RECEIVER){
 800499a:	792b      	ldrb	r3, [r5, #4]
						else if (impTime[i] == 0) impTime[i] = 500;
 800499c:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
						if (controllerState.airSystemType == RECEIVER){
 80049a0:	9306      	str	r3, [sp, #24]
 80049a2:	e6c0      	b.n	8004726 <xAnalyzeTask+0x24e>
						i = axleCounter*numOfWays[0] + wayCounter;
 80049a4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 80049a8:	9904      	ldr	r1, [sp, #16]
 80049aa:	fb06 2601 	mla	r6, r6, r1, r2
						if(dCounter > impTime[i]){
 80049ae:	aa12      	add	r2, sp, #72	; 0x48
 80049b0:	b2f6      	uxtb	r6, r6
 80049b2:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80049b6:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80049ba:	4592      	cmp	sl, r2
 80049bc:	d914      	bls.n	80049e8 <xAnalyzeTask+0x510>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80049be:	4958      	ldr	r1, [pc, #352]	; (8004b20 <xAnalyzeTask+0x648>)
 80049c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f831 1026 	ldrh.w	r1, [r1, r6, lsl #2]
 80049ca:	9306      	str	r3, [sp, #24]
 80049cc:	f7fc ff66 	bl	800189c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <xAnalyzeTask+0x63c>)
 80049d2:	4851      	ldr	r0, [pc, #324]	; (8004b18 <xAnalyzeTask+0x640>)
 80049d4:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 80049d8:	2200      	movs	r2, #0
 80049da:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80049de:	f7fc ff5d 	bl	800189c <HAL_GPIO_WritePin>
							stopImp++;
 80049e2:	3701      	adds	r7, #1
 80049e4:	9b06      	ldr	r3, [sp, #24]
 80049e6:	b2ff      	uxtb	r7, r7
 80049e8:	f108 0801 	add.w	r8, r8, #1
 80049ec:	e6d1      	b.n	8004792 <xAnalyzeTask+0x2ba>
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 80049ee:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004b20 <xAnalyzeTask+0x648>
 80049f2:	4f47      	ldr	r7, [pc, #284]	; (8004b10 <xAnalyzeTask+0x638>)
 80049f4:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 80049f8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f7fc ff4d 	bl	800189c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <xAnalyzeTask+0x63c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 8004a0a:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <xAnalyzeTask+0x640>)
 8004a0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a10:	3601      	adds	r6, #1
 8004a12:	f7fc ff43 	bl	800189c <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004a16:	2e04      	cmp	r6, #4
 8004a18:	d1ec      	bne.n	80049f4 <xAnalyzeTask+0x51c>
 8004a1a:	e79f      	b.n	800495c <xAnalyzeTask+0x484>
 8004a1c:	2300      	movs	r3, #0
						if (abs(deltaPressure) > controllerState.analyzeAccuracy){
 8004a1e:	4d3f      	ldr	r5, [pc, #252]	; (8004b1c <xAnalyzeTask+0x644>)
 8004a20:	9303      	str	r3, [sp, #12]
 8004a22:	e7a7      	b.n	8004974 <xAnalyzeTask+0x49c>
			}
//here starts common code

			controllerState.errorMeaningByte = 0;
 8004a24:	2300      	movs	r3, #0
			for (i = 0 ; i < 4; i++){
				if (impTime[i] > 1500){
					deltaPressure = controllerState.filteredData[i] - startPressure[i];
					deltaPressure = abs(deltaPressure);
					if (deltaPressure < 10){
						pressIsLower[i] = -1;
 8004a26:	f04f 09ff 	mov.w	r9, #255	; 0xff
			controllerState.errorMeaningByte = 0;
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	469e      	mov	lr, r3
							HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
						#endif

							//TODO: error valve
							controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
							controllerState.errorByte |= (1 << i);
 8004a2e:	f04f 0a01 	mov.w	sl, #1
 8004a32:	7977      	ldrb	r7, [r6, #5]
 8004a34:	7e31      	ldrb	r1, [r6, #24]
			controllerState.errorMeaningByte = 0;
 8004a36:	7674      	strb	r4, [r6, #25]
				if (impTime[i] > 1500){
 8004a38:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
						pressIsLower[i] = -1;
 8004a3c:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
				if (impTime[i] > 1500){
 8004a40:	f240 5bdc 	movw	fp, #1500	; 0x5dc
 8004a44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8004a48:	455a      	cmp	r2, fp
 8004a4a:	dd19      	ble.n	8004a80 <xAnalyzeTask+0x5a8>
					deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a4c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8004a50:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004a54:	89d2      	ldrh	r2, [r2, #14]
 8004a56:	f83b b013 	ldrh.w	fp, [fp, r3, lsl #1]
 8004a5a:	eba2 020b 	sub.w	r2, r2, fp
					deltaPressure = abs(deltaPressure);
 8004a5e:	b212      	sxth	r2, r2
 8004a60:	2a00      	cmp	r2, #0
 8004a62:	bfb8      	it	lt
 8004a64:	4252      	neglt	r2, r2
					if (deltaPressure < 10){
 8004a66:	b212      	sxth	r2, r2
 8004a68:	2a09      	cmp	r2, #9
 8004a6a:	dc09      	bgt.n	8004a80 <xAnalyzeTask+0x5a8>
							controllerState.errorByte |= (1 << i);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	4686      	mov	lr, r0
 8004a70:	fa0a f203 	lsl.w	r2, sl, r3
 8004a74:	4311      	orrs	r1, r2
						pressIsLower[i] = -1;
 8004a76:	f803 9008 	strb.w	r9, [r3, r8]
							controllerState.errorStatus |= (1 << STATUS_ERROR_VALVE);
 8004a7a:	f047 0704 	orr.w	r7, r7, #4
							controllerState.errorByte |= (1 << i);
 8004a7e:	b2c9      	uxtb	r1, r1
 8004a80:	3301      	adds	r3, #1
			for (i = 0 ; i < 4; i++){
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d1dc      	bne.n	8004a40 <xAnalyzeTask+0x568>
 8004a86:	f1be 0f00 	cmp.w	lr, #0
 8004a8a:	d000      	beq.n	8004a8e <xAnalyzeTask+0x5b6>
 8004a8c:	7177      	strb	r7, [r6, #5]
 8004a8e:	b100      	cbz	r0, 8004a92 <xAnalyzeTask+0x5ba>
 8004a90:	7631      	strb	r1, [r6, #24]
							controllerState.errorByte |= (1 << i);
 8004a92:	f04f 0900 	mov.w	r9, #0
						if (impCoeff[i] >= 0.0)
							controllerData.impUpCoeff[i] = impCoeff[i];
					}
					else if (pressIsLower[i] == 0){
						if (impCoeff[i] <= 0.0)
							controllerData.impDownCoeff[i] = impCoeff[i];
 8004a96:	4d1d      	ldr	r5, [pc, #116]	; (8004b0c <xAnalyzeTask+0x634>)
				if (pressIsLower[i] >=0){
 8004a98:	af0b      	add	r7, sp, #44	; 0x2c
					deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004a9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				if (pressIsLower[i] >=0){
 8004a9e:	f919 a007 	ldrsb.w	sl, [r9, r7]
 8004aa2:	f1ba 0f00 	cmp.w	sl, #0
 8004aa6:	db1e      	blt.n	8004ae6 <xAnalyzeTask+0x60e>
					impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004aa8:	ab0e      	add	r3, sp, #56	; 0x38
 8004aaa:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8004aae:	f7fb fc81 	bl	80003b4 <__aeabi_i2f>
					deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <xAnalyzeTask+0x644>)
					impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004ab4:	4606      	mov	r6, r0
					deltaPressure = controllerState.filteredData[i] - startPressure[i];
 8004ab6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8004aba:	89d8      	ldrh	r0, [r3, #14]
 8004abc:	f838 3019 	ldrh.w	r3, [r8, r9, lsl #1]
 8004ac0:	1ac0      	subs	r0, r0, r3
					impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004ac2:	b200      	sxth	r0, r0
 8004ac4:	f7fb fc76 	bl	80003b4 <__aeabi_i2f>
 8004ac8:	4601      	mov	r1, r0
 8004aca:	4630      	mov	r0, r6
 8004acc:	f7fb fd7a 	bl	80005c4 <__aeabi_fdiv>
					if (pressIsLower[i] == 1){
 8004ad0:	f1ba 0f01 	cmp.w	sl, #1
					impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8004ad4:	4606      	mov	r6, r0
					if (pressIsLower[i] == 1){
 8004ad6:	d10c      	bne.n	8004af2 <xAnalyzeTask+0x61a>
						if (impCoeff[i] >= 0.0)
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f7fb fe71 	bl	80007c0 <__aeabi_fcmpge>
 8004ade:	b110      	cbz	r0, 8004ae6 <xAnalyzeTask+0x60e>
							controllerData.impUpCoeff[i] = impCoeff[i];
 8004ae0:	eb05 0389 	add.w	r3, r5, r9, lsl #2
							controllerData.impDownCoeff[i] = impCoeff[i];
 8004ae4:	605e      	str	r6, [r3, #4]
 8004ae6:	f109 0901 	add.w	r9, r9, #1
			for (i = 0 ; i < 4; i++){
 8004aea:	f1b9 0f04 	cmp.w	r9, #4
 8004aee:	d1d6      	bne.n	8004a9e <xAnalyzeTask+0x5c6>
 8004af0:	e50a      	b.n	8004508 <xAnalyzeTask+0x30>
					else if (pressIsLower[i] == 0){
 8004af2:	f1ba 0f00 	cmp.w	sl, #0
 8004af6:	d1f6      	bne.n	8004ae6 <xAnalyzeTask+0x60e>
						if (impCoeff[i] <= 0.0)
 8004af8:	2100      	movs	r1, #0
 8004afa:	f7fb fe57 	bl	80007ac <__aeabi_fcmple>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0f1      	beq.n	8004ae6 <xAnalyzeTask+0x60e>
							controllerData.impDownCoeff[i] = impCoeff[i];
 8004b02:	f109 0304 	add.w	r3, r9, #4
 8004b06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004b0a:	e7eb      	b.n	8004ae4 <xAnalyzeTask+0x60c>
 8004b0c:	2000547c 	.word	0x2000547c
 8004b10:	2000001c 	.word	0x2000001c
 8004b14:	2000002c 	.word	0x2000002c
 8004b18:	2000003c 	.word	0x2000003c
 8004b1c:	200054bc 	.word	0x200054bc
 8004b20:	2000000c 	.word	0x2000000c

08004b24 <xBlynkTask>:
extern char message[128];
extern uint8_t messageLength;
extern uint8_t recCommandByte;


void xBlynkTask(void* arguments){
 8004b24:	b508      	push	{r3, lr}
	for(;;){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8004b26:	4e0d      	ldr	r6, [pc, #52]	; (8004b5c <xBlynkTask+0x38>)
		switch(controllerState.soundIndicationState){
 8004b28:	4d0d      	ldr	r5, [pc, #52]	; (8004b60 <xBlynkTask+0x3c>)
		case SEARCH_INDICATION:
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
			break;
		case NORMAL_INDICATION:
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004b2a:	4c0e      	ldr	r4, [pc, #56]	; (8004b64 <xBlynkTask+0x40>)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8004b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b30:	4630      	mov	r0, r6
 8004b32:	f7fc feb8 	bl	80018a6 <HAL_GPIO_TogglePin>
		switch(controllerState.soundIndicationState){
 8004b36:	78ea      	ldrb	r2, [r5, #3]
 8004b38:	b152      	cbz	r2, 8004b50 <xBlynkTask+0x2c>
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	d103      	bne.n	8004b46 <xBlynkTask+0x22>
			HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7fc feb0 	bl	80018a6 <HAL_GPIO_TogglePin>
			break;
		default:
			break;
		}
		vTaskDelay(500 / portTICK_RATE_MS);
 8004b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b4a:	f7ff f99f 	bl	8003e8c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8004b4e:	e7ed      	b.n	8004b2c <xBlynkTask+0x8>
			HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004b50:	2101      	movs	r1, #1
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7fc fea2 	bl	800189c <HAL_GPIO_WritePin>
			break;
 8004b58:	e7f5      	b.n	8004b46 <xBlynkTask+0x22>
 8004b5a:	bf00      	nop
 8004b5c:	40010800 	.word	0x40010800
 8004b60:	200054bc 	.word	0x200054bc
 8004b64:	40011000 	.word	0x40011000

08004b68 <controller_init>:
	}

	vTaskDelete(NULL);
}

void controller_init(){
 8004b68:	b570      	push	{r4, r5, r6, lr}
	uint32_t unique_ID[3] = {0};
 8004b6a:	2400      	movs	r4, #0

	init_structures();
	//eeprom_clear_pages();

	  eeprom_read_controller_info((uint8_t*)&controllerInfo);
 8004b6c:	4d86      	ldr	r5, [pc, #536]	; (8004d88 <controller_init+0x220>)
void controller_init(){
 8004b6e:	b086      	sub	sp, #24
	uint32_t unique_ID[3] = {0};
 8004b70:	9403      	str	r4, [sp, #12]
 8004b72:	9404      	str	r4, [sp, #16]
 8004b74:	9405      	str	r4, [sp, #20]
	init_structures();
 8004b76:	f000 f9b1 	bl	8004edc <init_structures>
	  eeprom_read_controller_info((uint8_t*)&controllerInfo);
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fa78 	bl	8005070 <eeprom_read_controller_info>
	  if (controllerInfo.version != FIRMWARE_VERSION){
 8004b80:	782b      	ldrb	r3, [r5, #0]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d039      	beq.n	8004bfa <controller_init+0x92>
		  controllerInfo.version = FIRMWARE_VERSION;
 8004b86:	2602      	movs	r6, #2
		  eeprom_write_page(EEPROM_VERSION_ADDR, (uint8_t*) &controllerInfo.version, sizeof(controllerInfo.version));
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4620      	mov	r0, r4
		  controllerInfo.version = FIRMWARE_VERSION;
 8004b8e:	702e      	strb	r6, [r5, #0]
		  eeprom_write_page(EEPROM_VERSION_ADDR, (uint8_t*) &controllerInfo.version, sizeof(controllerInfo.version));
 8004b90:	f000 fa0a 	bl	8004fa8 <eeprom_write_page>
		  HAL_Delay(5);
 8004b94:	2005      	movs	r0, #5
 8004b96:	f7fc f81d 	bl	8000bd4 <HAL_Delay>

		  controllerInfo.aligningNum = 0;
 8004b9a:	4629      	mov	r1, r5
		  eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 8004b9c:	2204      	movs	r2, #4
		  controllerInfo.aligningNum = 0;
 8004b9e:	f841 4f08 	str.w	r4, [r1, #8]!
		  eeprom_write_page(EEPROM_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.aligningNum, sizeof(controllerInfo.aligningNum));
 8004ba2:	2008      	movs	r0, #8
 8004ba4:	f000 fa00 	bl	8004fa8 <eeprom_write_page>
		  HAL_Delay(5);
 8004ba8:	2005      	movs	r0, #5
 8004baa:	f7fc f813 	bl	8000bd4 <HAL_Delay>

		  controllerInfo.connectionNum = 0;
 8004bae:	4629      	mov	r1, r5
		  eeprom_write_page(EEPROM_CONNECTION_NUM_ADDR, (uint8_t*) &controllerInfo.connectionNum, sizeof(controllerInfo.connectionNum));
 8004bb0:	4632      	mov	r2, r6
		  controllerInfo.connectionNum = 0;
 8004bb2:	f821 4f02 	strh.w	r4, [r1, #2]!
		  eeprom_write_page(EEPROM_CONNECTION_NUM_ADDR, (uint8_t*) &controllerInfo.connectionNum, sizeof(controllerInfo.connectionNum));
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 f9f6 	bl	8004fa8 <eeprom_write_page>
		  HAL_Delay(5);
 8004bbc:	2005      	movs	r0, #5
 8004bbe:	f7fc f809 	bl	8000bd4 <HAL_Delay>

		  controllerInfo.errorAligningNum = 0;
 8004bc2:	4629      	mov	r1, r5
		  eeprom_write_page(EEPROM_ERROR_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.errorAligningNum, sizeof(controllerInfo.errorAligningNum));
 8004bc4:	2204      	movs	r2, #4
		  controllerInfo.errorAligningNum = 0;
 8004bc6:	f841 4f0c 	str.w	r4, [r1, #12]!
		  eeprom_write_page(EEPROM_ERROR_ALIGNING_NUM_ADDR, (uint8_t*) &controllerInfo.errorAligningNum, sizeof(controllerInfo.errorAligningNum));
 8004bca:	200c      	movs	r0, #12
 8004bcc:	f000 f9ec 	bl	8004fa8 <eeprom_write_page>
		  HAL_Delay(5);
 8004bd0:	2005      	movs	r0, #5
 8004bd2:	f7fb ffff 	bl	8000bd4 <HAL_Delay>

		  controllerInfo.settingsAddress = 32;
 8004bd6:	4629      	mov	r1, r5
		  eeprom_write_page(EEPROM_SETTINGS_ADDR, (uint8_t*) &controllerInfo.settingsAddress, sizeof(controllerInfo.settingsAddress));
 8004bd8:	2201      	movs	r2, #1
		  controllerInfo.settingsAddress = 32;
 8004bda:	2320      	movs	r3, #32
		  eeprom_write_page(EEPROM_SETTINGS_ADDR, (uint8_t*) &controllerInfo.settingsAddress, sizeof(controllerInfo.settingsAddress));
 8004bdc:	4610      	mov	r0, r2
		  controllerInfo.settingsAddress = 32;
 8004bde:	f801 3f01 	strb.w	r3, [r1, #1]!
		  eeprom_write_page(EEPROM_SETTINGS_ADDR, (uint8_t*) &controllerInfo.settingsAddress, sizeof(controllerInfo.settingsAddress));
 8004be2:	f000 f9e1 	bl	8004fa8 <eeprom_write_page>
		  HAL_Delay(5);
 8004be6:	2005      	movs	r0, #5
 8004be8:	f7fb fff4 	bl	8000bd4 <HAL_Delay>

		  controllerInfo.turnOnNum = 0;
 8004bec:	4629      	mov	r1, r5
		  eeprom_write_page(EEPROM_TURN_ON_NUM_ADDR, (uint8_t*) &controllerInfo.turnOnNum, sizeof(controllerInfo.turnOnNum));
 8004bee:	2204      	movs	r2, #4
		  controllerInfo.turnOnNum = 0;
 8004bf0:	f841 4f04 	str.w	r4, [r1, #4]!
		  eeprom_write_page(EEPROM_TURN_ON_NUM_ADDR, (uint8_t*) &controllerInfo.turnOnNum, sizeof(controllerInfo.turnOnNum));
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f000 f9d7 	bl	8004fa8 <eeprom_write_page>



//	mRead_flash();
	  HAL_Delay(5);
	  eeprom_read_controller_settings(controllerInfo.settingsAddress, (uint8_t*) &controllerData);
 8004bfa:	4c64      	ldr	r4, [pc, #400]	; (8004d8c <controller_init+0x224>)
	  HAL_Delay(5);
 8004bfc:	2005      	movs	r0, #5
 8004bfe:	f7fb ffe9 	bl	8000bd4 <HAL_Delay>
	  eeprom_read_controller_settings(controllerInfo.settingsAddress, (uint8_t*) &controllerData);
 8004c02:	4621      	mov	r1, r4
 8004c04:	7868      	ldrb	r0, [r5, #1]
 8004c06:	f000 fa38 	bl	800507a <eeprom_read_controller_settings>


	  if(controllerData.rfChannel > 120 || controllerData.rfChannel == 0){
 8004c0a:	7823      	ldrb	r3, [r4, #0]
 8004c0c:	2b78      	cmp	r3, #120	; 0x78
 8004c0e:	d802      	bhi.n	8004c16 <controller_init+0xae>
 8004c10:	7823      	ldrb	r3, [r4, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d132      	bne.n	8004c7c <controller_init+0x114>
		controllerData.rfChannel = 1;
 8004c16:	2301      	movs	r3, #1
		controllerData.writeCounter = 0;
 8004c18:	2200      	movs	r2, #0
		controllerData.rfChannel = 1;
 8004c1a:	7023      	strb	r3, [r4, #0]
		controllerData.clientID = 33333;
 8004c1c:	f248 2335 	movw	r3, #33333	; 0x8235
		controllerData.writeCounter = 0;
 8004c20:	62e2      	str	r2, [r4, #44]	; 0x2c
		controllerData.clientID = 33333;
 8004c22:	8063      	strh	r3, [r4, #2]
		controllerData.impDownCoeff[0] = 0.0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	6163      	str	r3, [r4, #20]
		controllerData.impDownCoeff[1] = 0.0;
 8004c28:	61a3      	str	r3, [r4, #24]
		controllerData.impDownCoeff[2] = 0.0;
 8004c2a:	61e3      	str	r3, [r4, #28]
		controllerData.impDownCoeff[3] = 0.0;
 8004c2c:	6223      	str	r3, [r4, #32]

		controllerData.impUpCoeff[0] = 0.0;
 8004c2e:	6063      	str	r3, [r4, #4]
		controllerData.impUpCoeff[1] = 0.0;
 8004c30:	60a3      	str	r3, [r4, #8]
		controllerData.impUpCoeff[2] = 0.0;
 8004c32:	60e3      	str	r3, [r4, #12]
		controllerData.impUpCoeff[3] = 0.0;
 8004c34:	6123      	str	r3, [r4, #16]

		controllerData.offsetPressure[0] = 0;
 8004c36:	84a2      	strh	r2, [r4, #36]	; 0x24
		controllerData.offsetPressure[1] = 0;
 8004c38:	84e2      	strh	r2, [r4, #38]	; 0x26
		controllerData.offsetPressure[2] = 0;
 8004c3a:	8522      	strh	r2, [r4, #40]	; 0x28
		controllerData.offsetPressure[3] = 0;
 8004c3c:	8562      	strh	r2, [r4, #42]	; 0x2a

		controllerData.writeCounter += 1;
 8004c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		eeprom_write_page(controllerInfo.settingsAddress, (uint8_t*)&controllerData, 16);
 8004c40:	2210      	movs	r2, #16
		controllerData.writeCounter += 1;
 8004c42:	3301      	adds	r3, #1
		eeprom_write_page(controllerInfo.settingsAddress, (uint8_t*)&controllerData, 16);
 8004c44:	4951      	ldr	r1, [pc, #324]	; (8004d8c <controller_init+0x224>)
 8004c46:	7868      	ldrb	r0, [r5, #1]
		controllerData.writeCounter += 1;
 8004c48:	62e3      	str	r3, [r4, #44]	; 0x2c
		eeprom_write_page(controllerInfo.settingsAddress, (uint8_t*)&controllerData, 16);
 8004c4a:	f000 f9ad 	bl	8004fa8 <eeprom_write_page>
		HAL_Delay(8);
 8004c4e:	2008      	movs	r0, #8
 8004c50:	f7fb ffc0 	bl	8000bd4 <HAL_Delay>

		eeprom_write_page(controllerInfo.settingsAddress+16, ((uint8_t*)(&controllerData))+16, 16);
 8004c54:	7868      	ldrb	r0, [r5, #1]
 8004c56:	2210      	movs	r2, #16
 8004c58:	3010      	adds	r0, #16
 8004c5a:	494d      	ldr	r1, [pc, #308]	; (8004d90 <controller_init+0x228>)
 8004c5c:	b2c0      	uxtb	r0, r0
 8004c5e:	f000 f9a3 	bl	8004fa8 <eeprom_write_page>
		HAL_Delay(8);
 8004c62:	2008      	movs	r0, #8
 8004c64:	f7fb ffb6 	bl	8000bd4 <HAL_Delay>

		eeprom_write_page(controllerInfo.settingsAddress+32, ((uint8_t*)(&controllerData))+32, 16);
 8004c68:	7868      	ldrb	r0, [r5, #1]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	3020      	adds	r0, #32
 8004c6e:	4949      	ldr	r1, [pc, #292]	; (8004d94 <controller_init+0x22c>)
 8004c70:	b2c0      	uxtb	r0, r0
 8004c72:	f000 f999 	bl	8004fa8 <eeprom_write_page>
		HAL_Delay(8);
 8004c76:	2008      	movs	r0, #8
 8004c78:	f7fb ffac 	bl	8000bd4 <HAL_Delay>
	}
	HAL_Delay(5);
 8004c7c:	2005      	movs	r0, #5
 8004c7e:	f7fb ffa9 	bl	8000bd4 <HAL_Delay>

	if(controllerData.rfChannel > 120){
 8004c82:	7823      	ldrb	r3, [r4, #0]
		controllerData.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 8004c84:	a803      	add	r0, sp, #12
	if(controllerData.rfChannel > 120){
 8004c86:	2b78      	cmp	r3, #120	; 0x78
		controllerData.rfChannel = 1;
 8004c88:	bf84      	itt	hi
 8004c8a:	2301      	movhi	r3, #1
 8004c8c:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 8004c8e:	f7fb ffb3 	bl	8000bf8 <HAL_GetUID>
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 8004c92:	9a04      	ldr	r2, [sp, #16]
 8004c94:	9b03      	ldr	r3, [sp, #12]

	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004c96:	4840      	ldr	r0, [pc, #256]	; (8004d98 <controller_init+0x230>)
	controllerState.serverUID = unique_ID[0] + unique_ID[1] + unique_ID[2];
 8004c98:	4413      	add	r3, r2
 8004c9a:	9a05      	ldr	r2, [sp, #20]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <controller_init+0x234>)
 8004ca0:	82d3      	strh	r3, [r2, #22]
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	f7fc fdf9 	bl	800189c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004caa:	2064      	movs	r0, #100	; 0x64
 8004cac:	f7fb ff92 	bl	8000bd4 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4838      	ldr	r0, [pc, #224]	; (8004d98 <controller_init+0x230>)
 8004cb6:	f7fc fdf1 	bl	800189c <HAL_GPIO_WritePin>


	init_rf433(controllerData.rfChannel); //TODO: change to more common
 8004cba:	7820      	ldrb	r0, [r4, #0]
 8004cbc:	f000 f892 	bl	8004de4 <init_rf433>
	  messageLength = sprintf(message, "counter: %lu\n",controllerData.writeCounter);
	  HAL_UART_Transmit(&huart1, (uint8_t*) message, messageLength, 0x2000);
#endif


	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fe fba1 	bl	800340c <xQueueGenericCreate>
 8004cca:	4a35      	ldr	r2, [pc, #212]	; (8004da0 <controller_init+0x238>)
 8004ccc:	6010      	str	r0, [r2, #0]
 8004cce:	b120      	cbz	r0, 8004cda <controller_init+0x172>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f7fe fbbd 	bl	8003454 <xQueueGenericSend>
	vSemaphoreCreateBinary(xSpiTxCompleteSemaphore);
 8004cda:	2203      	movs	r2, #3
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7fe fb94 	bl	800340c <xQueueGenericCreate>
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <controller_init+0x23c>)
 8004ce6:	6010      	str	r0, [r2, #0]
 8004ce8:	b120      	cbz	r0, 8004cf4 <controller_init+0x18c>
 8004cea:	2300      	movs	r3, #0
 8004cec:	461a      	mov	r2, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f7fe fbb0 	bl	8003454 <xQueueGenericSend>
		uint32_t fre=xPortGetFreeHeapSize();
		sprintf(message, "Free heap: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xBlynkTask,
 8004cf4:	2400      	movs	r4, #0
 8004cf6:	2601      	movs	r6, #1
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	9401      	str	r4, [sp, #4]
 8004cfc:	9600      	str	r6, [sp, #0]
 8004cfe:	22c8      	movs	r2, #200	; 0xc8
 8004d00:	4929      	ldr	r1, [pc, #164]	; (8004da8 <controller_init+0x240>)
 8004d02:	482a      	ldr	r0, [pc, #168]	; (8004dac <controller_init+0x244>)
 8004d04:	f7fe fedd 	bl	8003ac2 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xScanInputTask,
 8004d08:	4623      	mov	r3, r4
 8004d0a:	9401      	str	r4, [sp, #4]
 8004d0c:	9600      	str	r6, [sp, #0]
 8004d0e:	22c8      	movs	r2, #200	; 0xc8
 8004d10:	4927      	ldr	r1, [pc, #156]	; (8004db0 <controller_init+0x248>)
 8004d12:	4828      	ldr	r0, [pc, #160]	; (8004db4 <controller_init+0x24c>)
 8004d14:	f7fe fed5 	bl	8003ac2 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Scan: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xStoreADCDataTask,
 8004d18:	4623      	mov	r3, r4
 8004d1a:	9401      	str	r4, [sp, #4]
 8004d1c:	9600      	str	r6, [sp, #0]
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	4925      	ldr	r1, [pc, #148]	; (8004db8 <controller_init+0x250>)
 8004d24:	4825      	ldr	r0, [pc, #148]	; (8004dbc <controller_init+0x254>)
 8004d26:	f7fe fecc 	bl	8003ac2 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xProcessCommandTask,
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	9401      	str	r4, [sp, #4]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d34:	4623      	mov	r3, r4
 8004d36:	4922      	ldr	r1, [pc, #136]	; (8004dc0 <controller_init+0x258>)
 8004d38:	4822      	ldr	r0, [pc, #136]	; (8004dc4 <controller_init+0x25c>)
 8004d3a:	f7fe fec2 	bl	8003ac2 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xAnalyzeTask,
 8004d3e:	4623      	mov	r3, r4
 8004d40:	9401      	str	r4, [sp, #4]
 8004d42:	9600      	str	r6, [sp, #0]
 8004d44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004d48:	491f      	ldr	r1, [pc, #124]	; (8004dc8 <controller_init+0x260>)
 8004d4a:	4820      	ldr	r0, [pc, #128]	; (8004dcc <controller_init+0x264>)
 8004d4c:	f7fe feb9 	bl	8003ac2 <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8004d50:	4622      	mov	r2, r4
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	2002      	movs	r0, #2
 8004d56:	f7fe fb59 	bl	800340c <xQueueGenericCreate>
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <controller_init+0x268>)
 8004d5c:	6018      	str	r0, [r3, #0]
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after queue: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

		  controllerInfo.turnOnNum++;
 8004d5e:	686b      	ldr	r3, [r5, #4]
 8004d60:	4433      	add	r3, r6
 8004d62:	606b      	str	r3, [r5, #4]
		  eeprom_wren();
 8004d64:	f000 f902 	bl	8004f6c <eeprom_wren>
		  eeprom_write_page(EEPROM_TURN_ON_NUM_ADDR, (uint8_t*) &controllerInfo.turnOnNum, sizeof(controllerInfo.turnOnNum));
 8004d68:	2204      	movs	r2, #4
 8004d6a:	491a      	ldr	r1, [pc, #104]	; (8004dd4 <controller_init+0x26c>)
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 f91b 	bl	8004fa8 <eeprom_write_page>
		  //while(xSemaphoreTake( xSpiTxCompleteSemaphore, portMAX_DELAY ) != pdTRUE);

	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8004d72:	4632      	mov	r2, r6
 8004d74:	4918      	ldr	r1, [pc, #96]	; (8004dd8 <controller_init+0x270>)
 8004d76:	4819      	ldr	r0, [pc, #100]	; (8004ddc <controller_init+0x274>)
 8004d78:	f7fd fe7f 	bl	8002a7a <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004d7c:	4818      	ldr	r0, [pc, #96]	; (8004de0 <controller_init+0x278>)
 8004d7e:	f7fc f921 	bl	8000fc4 <HAL_ADCEx_InjectedStart_IT>
}
 8004d82:	b006      	add	sp, #24
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	bf00      	nop
 8004d88:	200054ac 	.word	0x200054ac
 8004d8c:	2000547c 	.word	0x2000547c
 8004d90:	2000548c 	.word	0x2000548c
 8004d94:	2000549c 	.word	0x2000549c
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	200054bc 	.word	0x200054bc
 8004da0:	20005584 	.word	0x20005584
 8004da4:	20005580 	.word	0x20005580
 8004da8:	0800708a 	.word	0x0800708a
 8004dac:	08004b25 	.word	0x08004b25
 8004db0:	08007090 	.word	0x08007090
 8004db4:	080059fd 	.word	0x080059fd
 8004db8:	08007095 	.word	0x08007095
 8004dbc:	080042c5 	.word	0x080042c5
 8004dc0:	0800709e 	.word	0x0800709e
 8004dc4:	08005471 	.word	0x08005471
 8004dc8:	080070a6 	.word	0x080070a6
 8004dcc:	080044d9 	.word	0x080044d9
 8004dd0:	200056a0 	.word	0x200056a0
 8004dd4:	200054b0 	.word	0x200054b0
 8004dd8:	200056a4 	.word	0x200056a4
 8004ddc:	200055fc 	.word	0x200055fc
 8004de0:	200055cc 	.word	0x200055cc

08004de4 <init_rf433>:
//	if (HAL_UART_Init(&huart1) != HAL_OK){
//		//Error_Handler();
//	}
//}

void init_rf433(uint8_t channel){
 8004de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char bufLenRf = 0;
	char bufRf[10] = {0};
 8004de6:	2200      	movs	r2, #0
	uint8_t recVal = 0;

	CMD_RF_ON;
 8004de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
	uint8_t recVal = 0;
 8004dec:	ad04      	add	r5, sp, #16
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004dee:	4c35      	ldr	r4, [pc, #212]	; (8004ec4 <init_rf433+0xe0>)
void init_rf433(uint8_t channel){
 8004df0:	4606      	mov	r6, r0
	CMD_RF_ON;
 8004df2:	4835      	ldr	r0, [pc, #212]	; (8004ec8 <init_rf433+0xe4>)
	uint8_t recVal = 0;
 8004df4:	f805 2d0d 	strb.w	r2, [r5, #-13]!
	char bufRf[10] = {0};
 8004df8:	9201      	str	r2, [sp, #4]
 8004dfa:	9202      	str	r2, [sp, #8]
 8004dfc:	f8ad 200c 	strh.w	r2, [sp, #12]
	CMD_RF_ON;
 8004e00:	f7fc fd4c 	bl	800189c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004e04:	2032      	movs	r0, #50	; 0x32
 8004e06:	f7fb fee5 	bl	8000bd4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0e:	2207      	movs	r2, #7
 8004e10:	492e      	ldr	r1, [pc, #184]	; (8004ecc <init_rf433+0xe8>)
 8004e12:	4620      	mov	r0, r4
 8004e14:	f7fd fd76 	bl	8002904 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, &recVal, 1, 100);
 8004e18:	2364      	movs	r3, #100	; 0x64
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7fd fdcc 	bl	80029bc <HAL_UART_Receive>
	HAL_Delay(200);
 8004e24:	20c8      	movs	r0, #200	; 0xc8
 8004e26:	f7fb fed5 	bl	8000bd4 <HAL_Delay>

	if (recVal != 'O'){
 8004e2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004e2e:	2b4f      	cmp	r3, #79	; 0x4f
 8004e30:	d00f      	beq.n	8004e52 <init_rf433+0x6e>
		huart1.Init.BaudRate = 19200;
 8004e32:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
		if (HAL_UART_Init(&huart1) != HAL_OK){
 8004e36:	4620      	mov	r0, r4
		huart1.Init.BaudRate = 19200;
 8004e38:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart1) != HAL_OK){
 8004e3a:	f7fd fd35 	bl	80028a8 <HAL_UART_Init>

		}
		HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e42:	2207      	movs	r2, #7
 8004e44:	4921      	ldr	r1, [pc, #132]	; (8004ecc <init_rf433+0xe8>)
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7fd fd5c 	bl	8002904 <HAL_UART_Transmit>
		HAL_Delay(200);
 8004e4c:	20c8      	movs	r0, #200	; 0xc8
 8004e4e:	f7fb fec1 	bl	8000bd4 <HAL_Delay>

	}

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+P8\r", 6, 0x2000);
 8004e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e56:	2206      	movs	r2, #6
 8004e58:	491d      	ldr	r1, [pc, #116]	; (8004ed0 <init_rf433+0xec>)
 8004e5a:	481a      	ldr	r0, [pc, #104]	; (8004ec4 <init_rf433+0xe0>)
 8004e5c:	f7fd fd52 	bl	8002904 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004e60:	20c8      	movs	r0, #200	; 0xc8
 8004e62:	f7fb feb7 	bl	8000bd4 <HAL_Delay>

//	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+DEFAULT\r", 11, 0x2000);
//	HAL_Delay(200);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 10, 0x2000);
 8004e66:	220a      	movs	r2, #10
 8004e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e6c:	4919      	ldr	r1, [pc, #100]	; (8004ed4 <init_rf433+0xf0>)
 8004e6e:	4815      	ldr	r0, [pc, #84]	; (8004ec4 <init_rf433+0xe0>)
 8004e70:	f7fd fd48 	bl	8002904 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004e74:	20c8      	movs	r0, #200	; 0xc8
 8004e76:	f7fb fead 	bl	8000bd4 <HAL_Delay>
	if (channel == 0 || channel > 127) channel = 1;
 8004e7a:	b273      	sxtb	r3, r6
 8004e7c:	2b00      	cmp	r3, #0
	bufLenRf = sprintf(bufRf, "AT+C%03d\r", channel);
 8004e7e:	bfcc      	ite	gt
 8004e80:	4632      	movgt	r2, r6
 8004e82:	2201      	movle	r2, #1
 8004e84:	4914      	ldr	r1, [pc, #80]	; (8004ed8 <init_rf433+0xf4>)
 8004e86:	a801      	add	r0, sp, #4
 8004e88:	f000 ffa8 	bl	8005ddc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) bufRf, bufLenRf, 0x2000);
 8004e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e90:	b2c2      	uxtb	r2, r0
 8004e92:	a901      	add	r1, sp, #4
 8004e94:	480b      	ldr	r0, [pc, #44]	; (8004ec4 <init_rf433+0xe0>)
 8004e96:	f7fd fd35 	bl	8002904 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004e9a:	20c8      	movs	r0, #200	; 0xc8
 8004e9c:	f7fb fe9a 	bl	8000bd4 <HAL_Delay>

	CMD_RF_OFF;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ea6:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <init_rf433+0xe4>)
 8004ea8:	f7fc fcf8 	bl	800189c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004eac:	2032      	movs	r0, #50	; 0x32
 8004eae:	f7fb fe91 	bl	8000bd4 <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 8004eb2:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8004eb6:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <init_rf433+0xe0>)
	huart1.Init.BaudRate = 19200;
 8004eb8:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8004eba:	f7fd fcf5 	bl	80028a8 <HAL_UART_Init>

	}
}
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200055fc 	.word	0x200055fc
 8004ec8:	40010800 	.word	0x40010800
 8004ecc:	080070ac 	.word	0x080070ac
 8004ed0:	080070b4 	.word	0x080070b4
 8004ed4:	080070bb 	.word	0x080070bb
 8004ed8:	08007079 	.word	0x08007079

08004edc <init_structures>:
void init_structures(){

	controllerState.analyzeState = COMPENSATION_STATE_FREE;
	controllerState.pressureCompensation = COMPENSATION_OFF;
	controllerState.soundIndicationState = NORMAL_INDICATION;
	controllerState.airSystemType = RECEIVER;
 8004edc:	2101      	movs	r1, #1
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <init_structures+0x38>)
 8004ee0:	2200      	movs	r2, #0
	controllerState.airSystemType = RECEIVER;
 8004ee2:	7119      	strb	r1, [r3, #4]
	controllerState.filteredData[3] = 0;

	controllerState.serverUID = 0;
	controllerState.errorByte = 0;
	controllerState.errorMeaningByte = 0;
	controllerState.waysType = 6;
 8004ee4:	2106      	movs	r1, #6
 8004ee6:	7699      	strb	r1, [r3, #26]
	controllerState.analyzeAccuracy = 40;
 8004ee8:	2128      	movs	r1, #40	; 0x28
	controllerState.analyzeState = COMPENSATION_STATE_FREE;
 8004eea:	701a      	strb	r2, [r3, #0]
	controllerState.pressureCompensation = COMPENSATION_OFF;
 8004eec:	705a      	strb	r2, [r3, #1]
	controllerState.soundIndicationState = NORMAL_INDICATION;
 8004eee:	70da      	strb	r2, [r3, #3]
	controllerState.errorStatus = STATUS_NORMAL;
 8004ef0:	715a      	strb	r2, [r3, #5]
	controllerState.nessPressure[0] = 0;
 8004ef2:	80da      	strh	r2, [r3, #6]
	controllerState.nessPressure[1] = 0;
 8004ef4:	811a      	strh	r2, [r3, #8]
	controllerState.nessPressure[2] = 0;
 8004ef6:	815a      	strh	r2, [r3, #10]
	controllerState.nessPressure[3] = 0;
 8004ef8:	819a      	strh	r2, [r3, #12]
	controllerState.filteredData[0] = 0;
 8004efa:	81da      	strh	r2, [r3, #14]
	controllerState.filteredData[1] = 0;
 8004efc:	821a      	strh	r2, [r3, #16]
	controllerState.filteredData[2] = 0;
 8004efe:	825a      	strh	r2, [r3, #18]
	controllerState.filteredData[3] = 0;
 8004f00:	829a      	strh	r2, [r3, #20]
	controllerState.serverUID = 0;
 8004f02:	82da      	strh	r2, [r3, #22]
	controllerState.errorByte = 0;
 8004f04:	761a      	strb	r2, [r3, #24]
	controllerState.errorMeaningByte = 0;
 8004f06:	765a      	strb	r2, [r3, #25]
	controllerState.analyzeAccuracy = 40;
 8004f08:	76d9      	strb	r1, [r3, #27]
	controllerState.status = 0;
 8004f0a:	771a      	strb	r2, [r3, #28]
	controllerState.numberOfTries = 0;
 8004f0c:	775a      	strb	r2, [r3, #29]
	controllerState.lastTimeCommand = 0;
 8004f0e:	83da      	strh	r2, [r3, #30]
	controllerState.compressorWorkTime = 0;
 8004f10:	621a      	str	r2, [r3, #32]
 8004f12:	4770      	bx	lr
 8004f14:	200054bc 	.word	0x200054bc

08004f18 <xEepromWriteSettings>:
#include "eepromTasks.h"
#include "eeprom_driver.h"

extern UART_HandleTypeDef huart1;

void xEepromWriteSettings(void* arguments){
 8004f18:	b508      	push	{r3, lr}
	for(;;){
		#if DEBUG_SERIAL
			HAL_UART_Transmit(&huart1, (uint8_t*) "EEPROM\n", 7, 0xFFFF);
		#endif
		eeprom_write_page(controllerInfo.settingsAddress, (uint8_t*)&controllerData, 16);
 8004f1a:	4c10      	ldr	r4, [pc, #64]	; (8004f5c <xEepromWriteSettings+0x44>)
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	4910      	ldr	r1, [pc, #64]	; (8004f60 <xEepromWriteSettings+0x48>)
 8004f20:	7860      	ldrb	r0, [r4, #1]
 8004f22:	f000 f841 	bl	8004fa8 <eeprom_write_page>
		//while(xSemaphoreTake( xSemaphore, LONG_TIME ) != pdTRUE);
		vTaskDelay(8);
 8004f26:	2008      	movs	r0, #8
 8004f28:	f7fe ffb0 	bl	8003e8c <vTaskDelay>
		eeprom_write_page(controllerInfo.settingsAddress+16, (uint8_t*)(&controllerData)+16, 16);
 8004f2c:	7860      	ldrb	r0, [r4, #1]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	3010      	adds	r0, #16
 8004f32:	490c      	ldr	r1, [pc, #48]	; (8004f64 <xEepromWriteSettings+0x4c>)
 8004f34:	b2c0      	uxtb	r0, r0
 8004f36:	f000 f837 	bl	8004fa8 <eeprom_write_page>
		vTaskDelay(8);
 8004f3a:	2008      	movs	r0, #8
 8004f3c:	f7fe ffa6 	bl	8003e8c <vTaskDelay>
		eeprom_write_page(controllerInfo.settingsAddress+32, (uint8_t*)(&controllerData)+32, 16);
 8004f40:	7860      	ldrb	r0, [r4, #1]
 8004f42:	2210      	movs	r2, #16
 8004f44:	3020      	adds	r0, #32
 8004f46:	4908      	ldr	r1, [pc, #32]	; (8004f68 <xEepromWriteSettings+0x50>)
 8004f48:	b2c0      	uxtb	r0, r0
 8004f4a:	f000 f82d 	bl	8004fa8 <eeprom_write_page>
		vTaskDelay(8);
 8004f4e:	2008      	movs	r0, #8
 8004f50:	f7fe ff9c 	bl	8003e8c <vTaskDelay>
		vTaskDelete(NULL);
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7fe fde1 	bl	8003b1c <vTaskDelete>
 8004f5a:	e7df      	b.n	8004f1c <xEepromWriteSettings+0x4>
 8004f5c:	200054ac 	.word	0x200054ac
 8004f60:	2000547c 	.word	0x2000547c
 8004f64:	2000548c 	.word	0x2000548c
 8004f68:	2000549c 	.word	0x2000549c

08004f6c <eeprom_wren>:
	return recByte;

}

void eeprom_wren(){
	uint8_t wren = 0x06;
 8004f6c:	2306      	movs	r3, #6
void eeprom_wren(){
 8004f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	EEPROM_CS_ON;
 8004f70:	4d0b      	ldr	r5, [pc, #44]	; (8004fa0 <eeprom_wren+0x34>)
	uint8_t wren = 0x06;
 8004f72:	ac02      	add	r4, sp, #8
 8004f74:	f804 3d01 	strb.w	r3, [r4, #-1]!
	EEPROM_CS_ON;
 8004f78:	4628      	mov	r0, r5
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	f7fc fc8d 	bl	800189c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &wren, 1, 0x2000);
 8004f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f86:	4621      	mov	r1, r4
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <eeprom_wren+0x38>)
 8004f8c:	f7fd f902 	bl	8002194 <HAL_SPI_Transmit>
	EEPROM_CS_OFF;
 8004f90:	2201      	movs	r2, #1
 8004f92:	4628      	mov	r0, r5
 8004f94:	4611      	mov	r1, r2
 8004f96:	f7fc fc81 	bl	800189c <HAL_GPIO_WritePin>
}
 8004f9a:	b003      	add	sp, #12
 8004f9c:	bd30      	pop	{r4, r5, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40010c00 	.word	0x40010c00
 8004fa4:	20005648 	.word	0x20005648

08004fa8 <eeprom_write_page>:
	EEPROM_CS_OFF;

	return 0;
}

uint8_t eeprom_write_page(uint8_t address, uint8_t* data, uint8_t size){
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4614      	mov	r4, r2
 8004fac:	b086      	sub	sp, #24
 8004fae:	4606      	mov	r6, r0
 8004fb0:	460d      	mov	r5, r1
	eeprom_wren();
 8004fb2:	f7ff ffdb 	bl	8004f6c <eeprom_wren>
	if (size > 16){
 8004fb6:	2c10      	cmp	r4, #16
 8004fb8:	d827      	bhi.n	800500a <eeprom_write_page+0x62>
		return 1;
	}
	uint8_t msg[18] = {0};
 8004fba:	2212      	movs	r2, #18
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	a801      	add	r0, sp, #4
 8004fc0:	f000 ff03 	bl	8005dca <memset>
	uint8_t i = 2;
	msg[0] = 0x02;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f88d 3004 	strb.w	r3, [sp, #4]
	msg[1] = address;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f88d 6005 	strb.w	r6, [sp, #5]


	for (i = 0; i < size; i++){
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4294      	cmp	r4, r2
 8004fd4:	d813      	bhi.n	8004ffe <eeprom_write_page+0x56>
//		msg[i] = (uint8_t)*data++;
//		i++;
//		size--;
//	}

	EEPROM_CS_ON;
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2101      	movs	r1, #1
 8004fda:	480d      	ldr	r0, [pc, #52]	; (8005010 <eeprom_write_page+0x68>)
 8004fdc:	f7fc fc5e 	bl	800189c <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit_IT(&hspi1, msg, size+2, 0x2000);
	HAL_SPI_Transmit(&hspi1, msg, size+2, 0x2000);
 8004fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fe4:	1ca2      	adds	r2, r4, #2
 8004fe6:	a901      	add	r1, sp, #4
 8004fe8:	480a      	ldr	r0, [pc, #40]	; (8005014 <eeprom_write_page+0x6c>)
 8004fea:	f7fd f8d3 	bl	8002194 <HAL_SPI_Transmit>
	EEPROM_CS_OFF;
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4807      	ldr	r0, [pc, #28]	; (8005010 <eeprom_write_page+0x68>)
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	f7fc fc52 	bl	800189c <HAL_GPIO_WritePin>
 8004ff8:	2000      	movs	r0, #0

	return 0;
}
 8004ffa:	b006      	add	sp, #24
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
		msg[i+2] = data[i];
 8004ffe:	5ce9      	ldrb	r1, [r5, r3]
 8005000:	aa01      	add	r2, sp, #4
 8005002:	441a      	add	r2, r3
 8005004:	7091      	strb	r1, [r2, #2]
 8005006:	3301      	adds	r3, #1
 8005008:	e7e2      	b.n	8004fd0 <eeprom_write_page+0x28>
		return 1;
 800500a:	2001      	movs	r0, #1
 800500c:	e7f5      	b.n	8004ffa <eeprom_write_page+0x52>
 800500e:	bf00      	nop
 8005010:	40010c00 	.word	0x40010c00
 8005014:	20005648 	.word	0x20005648

08005018 <eeprom_read_page>:

uint8_t eeprom_read_page(uint8_t address, uint8_t* data, uint8_t size){
 8005018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t msg[2] = {0};
 800501c:	2400      	movs	r4, #0
	msg[0] = 0x03;
 800501e:	2303      	movs	r3, #3
uint8_t eeprom_read_page(uint8_t address, uint8_t* data, uint8_t size){
 8005020:	460f      	mov	r7, r1
 8005022:	4690      	mov	r8, r2
	msg[1] = address;

	EEPROM_CS_ON;
 8005024:	4d10      	ldr	r5, [pc, #64]	; (8005068 <eeprom_read_page+0x50>)
	HAL_SPI_Transmit(&hspi1, msg, 2, 0x2000);
 8005026:	4e11      	ldr	r6, [pc, #68]	; (800506c <eeprom_read_page+0x54>)
	msg[1] = address;
 8005028:	f88d 0005 	strb.w	r0, [sp, #5]
	EEPROM_CS_ON;
 800502c:	4622      	mov	r2, r4
 800502e:	4628      	mov	r0, r5
 8005030:	2101      	movs	r1, #1
	msg[0] = 0x03;
 8005032:	f88d 3004 	strb.w	r3, [sp, #4]
	EEPROM_CS_ON;
 8005036:	f7fc fc31 	bl	800189c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, msg, 2, 0x2000);
 800503a:	a901      	add	r1, sp, #4
 800503c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005040:	2202      	movs	r2, #2
 8005042:	4630      	mov	r0, r6
 8005044:	f7fd f8a6 	bl	8002194 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, data, size, 0x2000);
 8005048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800504c:	4642      	mov	r2, r8
 800504e:	4639      	mov	r1, r7
 8005050:	4630      	mov	r0, r6
 8005052:	f7fd fa45 	bl	80024e0 <HAL_SPI_Receive>

	EEPROM_CS_OFF;
 8005056:	2201      	movs	r2, #1
 8005058:	4628      	mov	r0, r5
 800505a:	4611      	mov	r1, r2
 800505c:	f7fc fc1e 	bl	800189c <HAL_GPIO_WritePin>
	return 0;
}
 8005060:	4620      	mov	r0, r4
 8005062:	b002      	add	sp, #8
 8005064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005068:	40010c00 	.word	0x40010c00
 800506c:	20005648 	.word	0x20005648

08005070 <eeprom_read_controller_info>:

void eeprom_read_controller_info(uint8_t* infoStruct){
	eeprom_read_page(0, infoStruct, 16);
 8005070:	4601      	mov	r1, r0
 8005072:	2210      	movs	r2, #16
 8005074:	2000      	movs	r0, #0
 8005076:	f7ff bfcf 	b.w	8005018 <eeprom_read_page>

0800507a <eeprom_read_controller_settings>:
	HAL_Delay(5);
	eeprom_write_page(address+32, (uint8_t*)(settings+32), 16);
}

void eeprom_read_controller_settings(uint8_t address, uint8_t* settings){
	eeprom_read_page(address, settings, 48);
 800507a:	2230      	movs	r2, #48	; 0x30
 800507c:	f7ff bfcc 	b.w	8005018 <eeprom_read_page>

08005080 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <vApplicationGetIdleTaskMemory+0x10>)
 8005082:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <vApplicationGetIdleTaskMemory+0x14>)
 8005086:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	200053a4 	.word	0x200053a4
 8005094:	200051a4 	.word	0x200051a4

08005098 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005098:	2238      	movs	r2, #56	; 0x38
{
 800509a:	b530      	push	{r4, r5, lr}
 800509c:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800509e:	eb0d 0002 	add.w	r0, sp, r2
 80050a2:	2100      	movs	r1, #0
 80050a4:	f000 fe91 	bl	8005dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050a8:	2214      	movs	r2, #20
 80050aa:	2100      	movs	r1, #0
 80050ac:	a801      	add	r0, sp, #4
 80050ae:	f000 fe8c 	bl	8005dca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050b2:	2220      	movs	r2, #32
 80050b4:	2100      	movs	r1, #0
 80050b6:	a806      	add	r0, sp, #24
 80050b8:	f000 fe87 	bl	8005dca <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050c0:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050c2:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050c6:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80050c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050cc:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80050ce:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050d0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050d2:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050d4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050d6:	f7fc fbeb 	bl	80018b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050da:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050e0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050e2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050e4:	4621      	mov	r1, r4
 80050e6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050e8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050ea:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050ec:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050ee:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050f0:	f7fc fe2c 	bl	8001d4c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80050f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050f8:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80050fa:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80050fc:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050fe:	f7fc fef7 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8005102:	4b02      	ldr	r3, [pc, #8]	; (800510c <SystemClock_Config+0x74>)
 8005104:	601d      	str	r5, [r3, #0]
}
 8005106:	b01d      	add	sp, #116	; 0x74
 8005108:	bd30      	pop	{r4, r5, pc}
 800510a:	bf00      	nop
 800510c:	42420070 	.word	0x42420070

08005110 <main>:
{
 8005110:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005112:	4d91      	ldr	r5, [pc, #580]	; (8005358 <main+0x248>)
{
 8005114:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8005116:	f7fb fd39 	bl	8000b8c <HAL_Init>
  SystemClock_Config();
 800511a:	f7ff ffbd 	bl	8005098 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511e:	2210      	movs	r2, #16
 8005120:	2100      	movs	r1, #0
 8005122:	a808      	add	r0, sp, #32
 8005124:	f000 fe51 	bl	8005dca <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005128:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800512a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800512c:	f043 0320 	orr.w	r3, r3, #32
 8005130:	61ab      	str	r3, [r5, #24]
 8005132:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8005134:	f240 31c1 	movw	r1, #961	; 0x3c1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005140:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8005142:	4886      	ldr	r0, [pc, #536]	; (800535c <main+0x24c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005144:	f043 0310 	orr.w	r3, r3, #16
 8005148:	61ab      	str	r3, [r5, #24]
 800514a:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : PC0 PC6 PC7 PC8 
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005156:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005158:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	61ab      	str	r3, [r5, #24]
 8005160:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005162:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	9303      	str	r3, [sp, #12]
 800516a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800516c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800516e:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005172:	f043 0308 	orr.w	r3, r3, #8
 8005176:	61ab      	str	r3, [r5, #24]
 8005178:	69ab      	ldr	r3, [r5, #24]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800517a:	f04f 0920 	mov.w	r9, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8005186:	f7fc fb89 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800518a:	2201      	movs	r2, #1
 800518c:	2130      	movs	r1, #48	; 0x30
 800518e:	4873      	ldr	r0, [pc, #460]	; (800535c <main+0x24c>)
 8005190:	f7fc fb84 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8005194:	2201      	movs	r2, #1
 8005196:	2103      	movs	r1, #3
 8005198:	4871      	ldr	r0, [pc, #452]	; (8005360 <main+0x250>)
 800519a:	f7fc fb7f 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800519e:	2200      	movs	r2, #0
 80051a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80051a4:	486e      	ldr	r0, [pc, #440]	; (8005360 <main+0x250>)
 80051a6:	f7fc fb79 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80051aa:	2201      	movs	r2, #1
 80051ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051b0:	486c      	ldr	r0, [pc, #432]	; (8005364 <main+0x254>)
 80051b2:	f7fc fb73 	bl	800189c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80051b6:	2200      	movs	r2, #0
 80051b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051bc:	4869      	ldr	r0, [pc, #420]	; (8005364 <main+0x254>)
 80051be:	f7fc fb6d 	bl	800189c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80051c2:	f240 33c1 	movw	r3, #961	; 0x3c1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c6:	a908      	add	r1, sp, #32
 80051c8:	4864      	ldr	r0, [pc, #400]	; (800535c <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80051ca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051cc:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80051d0:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d2:	f7fc fa7d 	bl	80016d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051d6:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d8:	a908      	add	r1, sp, #32
 80051da:	4860      	ldr	r0, [pc, #384]	; (800535c <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80051dc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051de:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051e4:	f7fc fa74 	bl	80016d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e8:	a908      	add	r1, sp, #32
 80051ea:	485d      	ldr	r0, [pc, #372]	; (8005360 <main+0x250>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051ec:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051f0:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f4:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f6:	f7fc fa6b 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80051fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051fe:	a908      	add	r1, sp, #32
 8005200:	4857      	ldr	r0, [pc, #348]	; (8005360 <main+0x250>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005202:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005204:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005208:	f7fc fa62 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800520c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005210:	a908      	add	r1, sp, #32
 8005212:	4853      	ldr	r0, [pc, #332]	; (8005360 <main+0x250>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005214:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005216:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800521a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521c:	f7fc fa58 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005220:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005224:	a908      	add	r1, sp, #32
 8005226:	484f      	ldr	r0, [pc, #316]	; (8005364 <main+0x254>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005228:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800522a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800522e:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005230:	f7fc fa4e 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005238:	a908      	add	r1, sp, #32
 800523a:	484a      	ldr	r0, [pc, #296]	; (8005364 <main+0x254>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800523c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	f7fc fa44 	bl	80016d0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005248:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800524a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800524c:	4333      	orrs	r3, r6
 800524e:	616b      	str	r3, [r5, #20]
 8005250:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005252:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005254:	4033      	ands	r3, r6
 8005256:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005258:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 800525a:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800525c:	f7fc f81a 	bl	8001294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005260:	200e      	movs	r0, #14
 8005262:	f7fc f84b 	bl	80012fc <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005266:	464a      	mov	r2, r9
 8005268:	4621      	mov	r1, r4
 800526a:	eb0d 0009 	add.w	r0, sp, r9
  hadc1.Instance = ADC1;
 800526e:	4d3e      	ldr	r5, [pc, #248]	; (8005368 <main+0x258>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8005270:	9405      	str	r4, [sp, #20]
 8005272:	9406      	str	r4, [sp, #24]
 8005274:	9407      	str	r4, [sp, #28]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005276:	f000 fda8 	bl	8005dca <memset>
  hadc1.Instance = ADC1;
 800527a:	4b3c      	ldr	r3, [pc, #240]	; (800536c <main+0x25c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800527c:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 800527e:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005284:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005286:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 800528a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800528c:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800528e:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005290:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005292:	612e      	str	r6, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005294:	f7fb fe16 	bl	8000ec4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005298:	a905      	add	r1, sp, #20
 800529a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 800529c:	9405      	str	r4, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800529e:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80052a0:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052a2:	f7fb fd31 	bl	8000d08 <HAL_ADC_ConfigChannel>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80052a6:	2306      	movs	r3, #6
  sConfigInjected.InjectedNbrOfConversion = 4;
 80052a8:	f04f 0a04 	mov.w	sl, #4
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80052ac:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80052ae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052b2:	eb0d 0109 	add.w	r1, sp, r9
 80052b6:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80052b8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80052ba:	9408      	str	r4, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80052bc:	9609      	str	r6, [sp, #36]	; 0x24
  sConfigInjected.InjectedNbrOfConversion = 4;
 80052be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  sConfigInjected.AutoInjectedConv = DISABLE;
 80052c2:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80052c4:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffset = 0;
 80052c6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052c8:	f7fb fee6 	bl	8001098 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052cc:	eb0d 0109 	add.w	r1, sp, r9
 80052d0:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80052d2:	9608      	str	r6, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80052d4:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052d6:	f7fb fedf 	bl	8001098 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052da:	eb0d 0109 	add.w	r1, sp, r9
 80052de:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80052e0:	9708      	str	r7, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80052e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052e6:	f7fb fed7 	bl	8001098 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052ea:	eb0d 0109 	add.w	r1, sp, r9
 80052ee:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80052f0:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 80052f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80052f8:	f7fb fece 	bl	8001098 <HAL_ADCEx_InjectedConfigChannel>
  huart1.Init.BaudRate = 9600;
 80052fc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8005300:	481b      	ldr	r0, [pc, #108]	; (8005370 <main+0x260>)
  huart1.Init.BaudRate = 9600;
 8005302:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <main+0x264>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005304:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8005306:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800530a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800530c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800530e:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005310:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005312:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005314:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005316:	f7fd fac7 	bl	80028a8 <HAL_UART_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800531a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800531e:	4816      	ldr	r0, [pc, #88]	; (8005378 <main+0x268>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005320:	4916      	ldr	r1, [pc, #88]	; (800537c <main+0x26c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005322:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005324:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800532c:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800532e:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005330:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 8005332:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005334:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005336:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005338:	f8c0 901c 	str.w	r9, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800533c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800533e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005340:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005342:	f7fc feea 	bl	800211a <HAL_SPI_Init>
  HAL_Delay(2000);
 8005346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800534a:	f7fb fc43 	bl	8000bd4 <HAL_Delay>
  controller_init();
 800534e:	f7ff fc0b 	bl	8004b68 <controller_init>
  osKernelStart();
 8005352:	f7fd fd1f 	bl	8002d94 <osKernelStart>
 8005356:	e7fe      	b.n	8005356 <main+0x246>
 8005358:	40021000 	.word	0x40021000
 800535c:	40011000 	.word	0x40011000
 8005360:	40010c00 	.word	0x40010c00
 8005364:	40010800 	.word	0x40010800
 8005368:	200055cc 	.word	0x200055cc
 800536c:	40012400 	.word	0x40012400
 8005370:	200055fc 	.word	0x200055fc
 8005374:	40013800 	.word	0x40013800
 8005378:	20005648 	.word	0x20005648
 800537c:	40013000 	.word	0x40013000

08005380 <HAL_UART_RxCpltCallback>:
//	xHigherPriorityTaskWoken = pdFALSE;
//	xSemaphoreGiveFromISR(xSpiTxCompleteSemaphore, &xHigherPriorityTaskWoken);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
 8005380:	6802      	ldr	r2, [r0, #0]
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_UART_RxCpltCallback+0x54>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005384:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 8005386:	429a      	cmp	r2, r3
 8005388:	d122      	bne.n	80053d0 <HAL_UART_RxCpltCallback+0x50>
		if (recCommandByte != '\r'){
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <HAL_UART_RxCpltCallback+0x58>)
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	2a0d      	cmp	r2, #13
 8005390:	d019      	beq.n	80053c6 <HAL_UART_RxCpltCallback+0x46>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 8005392:	4c12      	ldr	r4, [pc, #72]	; (80053dc <HAL_UART_RxCpltCallback+0x5c>)
 8005394:	4912      	ldr	r1, [pc, #72]	; (80053e0 <HAL_UART_RxCpltCallback+0x60>)
 8005396:	7823      	ldrb	r3, [r4, #0]
 8005398:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 800539a:	3301      	adds	r3, #1
 800539c:	b2db      	uxtb	r3, r3

			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	bf08      	it	eq
 80053a2:	2300      	moveq	r3, #0

			if(recCommandByte == '\n'){
 80053a4:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 80053a6:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 80053a8:	d10d      	bne.n	80053c6 <HAL_UART_RxCpltCallback+0x46>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 80053aa:	7822      	ldrb	r2, [r4, #0]
 80053ac:	490c      	ldr	r1, [pc, #48]	; (80053e0 <HAL_UART_RxCpltCallback+0x60>)
 80053ae:	480d      	ldr	r0, [pc, #52]	; (80053e4 <HAL_UART_RxCpltCallback+0x64>)
 80053b0:	f000 fd00 	bl	8005db4 <memcpy>
				portBASE_TYPE r1;
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 80053b4:	480c      	ldr	r0, [pc, #48]	; (80053e8 <HAL_UART_RxCpltCallback+0x68>)
 80053b6:	2300      	movs	r3, #0
 80053b8:	aa01      	add	r2, sp, #4
 80053ba:	490a      	ldr	r1, [pc, #40]	; (80053e4 <HAL_UART_RxCpltCallback+0x64>)
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f7fe f8ff 	bl	80035c0 <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	7023      	strb	r3, [r4, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 80053c6:	2201      	movs	r2, #1
 80053c8:	4903      	ldr	r1, [pc, #12]	; (80053d8 <HAL_UART_RxCpltCallback+0x58>)
 80053ca:	4808      	ldr	r0, [pc, #32]	; (80053ec <HAL_UART_RxCpltCallback+0x6c>)
 80053cc:	f7fd fb55 	bl	8002a7a <HAL_UART_Receive_IT>
	}
}
 80053d0:	b002      	add	sp, #8
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	40013800 	.word	0x40013800
 80053d8:	200056a4 	.word	0x200056a4
 80053dc:	20005479 	.word	0x20005479
 80053e0:	200054f4 	.word	0x200054f4
 80053e4:	20005534 	.word	0x20005534
 80053e8:	200056a0 	.word	0x200056a0
 80053ec:	200055fc 	.word	0x200055fc

080053f0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80053f0:	b538      	push	{r3, r4, r5, lr}
	if (hadc1->Instance == ADC1){
 80053f2:	6802      	ldr	r2, [r0, #0]
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80053f6:	4605      	mov	r5, r0
	if (hadc1->Instance == ADC1){
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d113      	bne.n	8005424 <HAL_ADCEx_InjectedConvCpltCallback+0x34>
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80053fc:	2101      	movs	r1, #1
 80053fe:	f7fb fe3b 	bl	8001078 <HAL_ADCEx_InjectedGetValue>
 8005402:	4c0a      	ldr	r4, [pc, #40]	; (800542c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005404:	2102      	movs	r1, #2
		  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 8005406:	8020      	strh	r0, [r4, #0]
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005408:	4628      	mov	r0, r5
 800540a:	f7fb fe35 	bl	8001078 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 800540e:	2103      	movs	r1, #3
		  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005410:	8060      	strh	r0, [r4, #2]
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 8005412:	4628      	mov	r0, r5
 8005414:	f7fb fe30 	bl	8001078 <HAL_ADCEx_InjectedGetValue>
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8005418:	2104      	movs	r1, #4
		  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 800541a:	80a0      	strh	r0, [r4, #4]
		  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 800541c:	4628      	mov	r0, r5
 800541e:	f7fb fe2b 	bl	8001078 <HAL_ADCEx_InjectedGetValue>
 8005422:	80e0      	strh	r0, [r4, #6]
 8005424:	bd38      	pop	{r3, r4, r5, pc}
 8005426:	bf00      	nop
 8005428:	40012400 	.word	0x40012400
 800542c:	20005578 	.word	0x20005578

08005430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005430:	4770      	bx	lr

08005432 <crc_sum>:

uint8_t crc_sum(char* s, uint8_t len){
	uint8_t i = 0;
	uint8_t sum = 0;

	for(i = 0; i < len; i++){
 8005432:	2200      	movs	r2, #0
	uint8_t sum = 0;
 8005434:	4613      	mov	r3, r2
uint8_t crc_sum(char* s, uint8_t len){
 8005436:	b510      	push	{r4, lr}
 8005438:	b2d4      	uxtb	r4, r2
	for(i = 0; i < len; i++){
 800543a:	42a1      	cmp	r1, r4
 800543c:	d804      	bhi.n	8005448 <crc_sum+0x16>
		if (i == 1) continue;
		sum = sum ^ s[i];
	}

	if (sum == 10) sum = 9;
 800543e:	2b0a      	cmp	r3, #10
	return sum;
}
 8005440:	bf14      	ite	ne
 8005442:	4618      	movne	r0, r3
 8005444:	2009      	moveq	r0, #9
 8005446:	bd10      	pop	{r4, pc}
		if (i == 1) continue;
 8005448:	2c01      	cmp	r4, #1
		sum = sum ^ s[i];
 800544a:	bf18      	it	ne
 800544c:	5c84      	ldrbne	r4, [r0, r2]
 800544e:	f102 0201 	add.w	r2, r2, #1
 8005452:	bf1c      	itt	ne
 8005454:	4063      	eorne	r3, r4
 8005456:	b2db      	uxtbne	r3, r3
 8005458:	e7ee      	b.n	8005438 <crc_sum+0x6>

0800545a <s_len_crc>:

uint8_t s_len_crc(char* s, char endChar){
 800545a:	1e43      	subs	r3, r0, #1
	uint8_t i = 0;
	uint8_t len = 0;

	for(i = 0; i < 128; i++){
 800545c:	2000      	movs	r0, #0
		len += 1;
		if (s[i] == endChar) break;
 800545e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
		len += 1;
 8005462:	3001      	adds	r0, #1
		if (s[i] == endChar) break;
 8005464:	428a      	cmp	r2, r1
		len += 1;
 8005466:	b2c0      	uxtb	r0, r0
		if (s[i] == endChar) break;
 8005468:	d001      	beq.n	800546e <s_len_crc+0x14>
	for(i = 0; i < 128; i++){
 800546a:	2880      	cmp	r0, #128	; 0x80
 800546c:	d1f7      	bne.n	800545e <s_len_crc+0x4>
	}

	return len;
}
 800546e:	4770      	bx	lr

08005470 <xProcessCommandTask>:

void xProcessCommandTask(void* arguments){
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	for(;;){
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
		if (xStatus == pdPASS){

			controllerState.lastTimeCommand = 0;
 8005474:	4fb8      	ldr	r7, [pc, #736]	; (8005758 <xProcessCommandTask+0x2e8>)
	uint16_t id = 0;
 8005476:	2500      	movs	r5, #0
 8005478:	463c      	mov	r4, r7
void xProcessCommandTask(void* arguments){
 800547a:	b09a      	sub	sp, #104	; 0x68
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	2100      	movs	r1, #0
 8005480:	a80a      	add	r0, sp, #40	; 0x28

								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 8005482:	4eb6      	ldr	r6, [pc, #728]	; (800575c <xProcessCommandTask+0x2ec>)
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8005484:	f000 fca1 	bl	8005dca <memset>
	uint16_t id = 0;
 8005488:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	char co = 0;
 800548c:	f88d 501e 	strb.w	r5, [sp, #30]
	char outputState = 0;
 8005490:	f88d 501f 	strb.w	r5, [sp, #31]
	uint16_t channel = 0;
 8005494:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	char systemType = 0;
 8005498:	f88d 5020 	strb.w	r5, [sp, #32]
	uint8_t sum = 0;
 800549c:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 80054a0:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 80057a0 <xProcessCommandTask+0x330>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	a90a      	add	r1, sp, #40	; 0x28
 80054ac:	f8d8 0000 	ldr.w	r0, [r8]
 80054b0:	f7fe f8e8 	bl	8003684 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 80054b4:	2801      	cmp	r0, #1
 80054b6:	d1f5      	bne.n	80054a4 <xProcessCommandTask+0x34>
			controllerState.lastTimeCommand = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	83fb      	strh	r3, [r7, #30]
			switch(command[0]){
 80054bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80054c0:	3b6d      	subs	r3, #109	; 0x6d
 80054c2:	2b0b      	cmp	r3, #11
 80054c4:	d8ec      	bhi.n	80054a0 <xProcessCommandTask+0x30>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <xProcessCommandTask+0x5c>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005599 	.word	0x08005599
 80054d0:	080054a1 	.word	0x080054a1
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005567 	.word	0x08005567
 80054dc:	080054a1 	.word	0x080054a1
 80054e0:	080054a1 	.word	0x080054a1
 80054e4:	08005735 	.word	0x08005735
 80054e8:	080054a1 	.word	0x080054a1
 80054ec:	080054a1 	.word	0x080054a1
 80054f0:	080054a1 	.word	0x080054a1
 80054f4:	080054a1 	.word	0x080054a1
 80054f8:	080058bb 	.word	0x080058bb
				sscanf((char*)command, "o,%hu,\n", &id);
 80054fc:	aa09      	add	r2, sp, #36	; 0x24
 80054fe:	4998      	ldr	r1, [pc, #608]	; (8005760 <xProcessCommandTask+0x2f0>)
 8005500:	a80a      	add	r0, sp, #40	; 0x28
 8005502:	f000 fc8f 	bl	8005e24 <siscanf>
				if (id == controllerState.serverUID){
 8005506:	8ae2      	ldrh	r2, [r4, #22]
 8005508:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800550c:	429a      	cmp	r2, r3
 800550e:	d1c7      	bne.n	80054a0 <xProcessCommandTask+0x30>
					controllerState.status = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	7723      	strb	r3, [r4, #28]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 8005514:	7863      	ldrb	r3, [r4, #1]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 8005516:	7962      	ldrb	r2, [r4, #5]
					if (controllerState.pressureCompensation == COMPENSATION_ON){
 8005518:	2b01      	cmp	r3, #1
						controllerState.status = 0x01;
 800551a:	bf08      	it	eq
 800551c:	7723      	strbeq	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 800551e:	0791      	lsls	r1, r2, #30
						controllerState.status |= 0x02;
 8005520:	bf42      	ittt	mi
 8005522:	7f23      	ldrbmi	r3, [r4, #28]
 8005524:	f043 0302 	orrmi.w	r3, r3, #2
 8005528:	7723      	strbmi	r3, [r4, #28]
					if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 800552a:	0753      	lsls	r3, r2, #29
						controllerState.status |= 0x03;
 800552c:	bf42      	ittt	mi
 800552e:	7f23      	ldrbmi	r3, [r4, #28]
 8005530:	f043 0303 	orrmi.w	r3, r3, #3
 8005534:	7723      	strbmi	r3, [r4, #28]
					messageLength = sprintf(message, "o,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerData.clientID,
 8005536:	7f21      	ldrb	r1, [r4, #28]
 8005538:	4b8a      	ldr	r3, [pc, #552]	; (8005764 <xProcessCommandTask+0x2f4>)
 800553a:	885a      	ldrh	r2, [r3, #2]
 800553c:	89e3      	ldrh	r3, [r4, #14]
 800553e:	9103      	str	r1, [sp, #12]
 8005540:	8aa1      	ldrh	r1, [r4, #20]
 8005542:	b292      	uxth	r2, r2
 8005544:	9102      	str	r1, [sp, #8]
 8005546:	8a61      	ldrh	r1, [r4, #18]
 8005548:	9101      	str	r1, [sp, #4]
 800554a:	8a21      	ldrh	r1, [r4, #16]
 800554c:	9100      	str	r1, [sp, #0]
 800554e:	4986      	ldr	r1, [pc, #536]	; (8005768 <xProcessCommandTask+0x2f8>)
					messageLength = sprintf(message, "p,%hu,%hu,%hu,%lu,%lu,%lu,\n",controllerData.clientID,
 8005550:	4886      	ldr	r0, [pc, #536]	; (800576c <xProcessCommandTask+0x2fc>)
 8005552:	f000 fc43 	bl	8005ddc <siprintf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 8005556:	4b86      	ldr	r3, [pc, #536]	; (8005770 <xProcessCommandTask+0x300>)
 8005558:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800555a:	4984      	ldr	r1, [pc, #528]	; (800576c <xProcessCommandTask+0x2fc>)
 800555c:	4885      	ldr	r0, [pc, #532]	; (8005774 <xProcessCommandTask+0x304>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 800555e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005560:	f7fd fab2 	bl	8002ac8 <HAL_UART_Transmit_DMA>
 8005564:	e79c      	b.n	80054a0 <xProcessCommandTask+0x30>
				sscanf((char*)command, "p,%hu,\n", &id);
 8005566:	aa09      	add	r2, sp, #36	; 0x24
 8005568:	4983      	ldr	r1, [pc, #524]	; (8005778 <xProcessCommandTask+0x308>)
 800556a:	a80a      	add	r0, sp, #40	; 0x28
 800556c:	f000 fc5a 	bl	8005e24 <siscanf>
				if (id == controllerState.serverUID){
 8005570:	8ae2      	ldrh	r2, [r4, #22]
 8005572:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005576:	429a      	cmp	r2, r3
 8005578:	d192      	bne.n	80054a0 <xProcessCommandTask+0x30>
							controllerInfo.version,
 800557a:	4980      	ldr	r1, [pc, #512]	; (800577c <xProcessCommandTask+0x30c>)
					messageLength = sprintf(message, "p,%hu,%hu,%hu,%lu,%lu,%lu,\n",controllerData.clientID,
 800557c:	4b79      	ldr	r3, [pc, #484]	; (8005764 <xProcessCommandTask+0x2f4>)
 800557e:	68c8      	ldr	r0, [r1, #12]
 8005580:	885a      	ldrh	r2, [r3, #2]
 8005582:	780b      	ldrb	r3, [r1, #0]
 8005584:	9003      	str	r0, [sp, #12]
 8005586:	6888      	ldr	r0, [r1, #8]
 8005588:	b292      	uxth	r2, r2
 800558a:	9002      	str	r0, [sp, #8]
 800558c:	6848      	ldr	r0, [r1, #4]
 800558e:	9001      	str	r0, [sp, #4]
 8005590:	8849      	ldrh	r1, [r1, #2]
 8005592:	9100      	str	r1, [sp, #0]
 8005594:	497a      	ldr	r1, [pc, #488]	; (8005780 <xProcessCommandTask+0x310>)
 8005596:	e7db      	b.n	8005550 <xProcessCommandTask+0xe0>
					sscanf((char*)command, "m%c,%hu,%c,%c,\n", &sum, &id, &co, &outputState);
 8005598:	f10d 031f 	add.w	r3, sp, #31
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	f10d 031e 	add.w	r3, sp, #30
 80055a2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	4976      	ldr	r1, [pc, #472]	; (8005784 <xProcessCommandTask+0x314>)
 80055aa:	ab09      	add	r3, sp, #36	; 0x24
 80055ac:	a80a      	add	r0, sp, #40	; 0x28
 80055ae:	f000 fc39 	bl	8005e24 <siscanf>
					len = s_len_crc((char*)command, '\n');
 80055b2:	210a      	movs	r1, #10
 80055b4:	a80a      	add	r0, sp, #40	; 0x28
 80055b6:	f7ff ff50 	bl	800545a <s_len_crc>
					calcSum = crc_sum((char*)command, len);
 80055ba:	4601      	mov	r1, r0
 80055bc:	a80a      	add	r0, sp, #40	; 0x28
 80055be:	f7ff ff38 	bl	8005432 <crc_sum>
					if(calcSum != sum) break;
 80055c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055c6:	4283      	cmp	r3, r0
 80055c8:	f47f af6a 	bne.w	80054a0 <xProcessCommandTask+0x30>
					outputState = command[11];
 80055cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
					if (id == controllerState.serverUID){
 80055d0:	8ae2      	ldrh	r2, [r4, #22]
					outputState = command[11];
 80055d2:	f88d 301f 	strb.w	r3, [sp, #31]
					if (id == controllerState.serverUID){
 80055d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80055da:	429a      	cmp	r2, r3
 80055dc:	f47f af60 	bne.w	80054a0 <xProcessCommandTask+0x30>
						controllerState.status = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	7723      	strb	r3, [r4, #28]
						if (controllerState.pressureCompensation == COMPENSATION_ON){
 80055e4:	7863      	ldrb	r3, [r4, #1]
 80055e6:	4a5f      	ldr	r2, [pc, #380]	; (8005764 <xProcessCommandTask+0x2f4>)
 80055e8:	2b01      	cmp	r3, #1
							controllerState.status = 0x01;
 80055ea:	bf08      	it	eq
 80055ec:	7723      	strbeq	r3, [r4, #28]
						if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 80055ee:	7963      	ldrb	r3, [r4, #5]
 80055f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005770 <xProcessCommandTask+0x300>
 80055f4:	f013 0a02 	ands.w	sl, r3, #2
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 80055f8:	8852      	ldrh	r2, [r2, #2]
						if (controllerState.errorStatus & (1 << STATUS_ERROR_OVERCURRENT)){
 80055fa:	d00e      	beq.n	800561a <xProcessCommandTask+0x1aa>
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 80055fc:	b292      	uxth	r2, r2
 80055fe:	4962      	ldr	r1, [pc, #392]	; (8005788 <xProcessCommandTask+0x318>)
 8005600:	485a      	ldr	r0, [pc, #360]	; (800576c <xProcessCommandTask+0x2fc>)
 8005602:	f000 fbeb 	bl	8005ddc <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005606:	4959      	ldr	r1, [pc, #356]	; (800576c <xProcessCommandTask+0x2fc>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 8005608:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800560a:	485a      	ldr	r0, [pc, #360]	; (8005774 <xProcessCommandTask+0x304>)
							messageLength = sprintf(message, "w,%hu,\n",controllerData.clientID);
 800560c:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005610:	f7fd fa5a 	bl	8002ac8 <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	7163      	strb	r3, [r4, #5]
							break;
 8005618:	e742      	b.n	80054a0 <xProcessCommandTask+0x30>
						if (controllerState.errorStatus & (1 << STATUS_ERROR_VALVE)){
 800561a:	f013 0804 	ands.w	r8, r3, #4
 800561e:	d00e      	beq.n	800563e <xProcessCommandTask+0x1ce>
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8005620:	b292      	uxth	r2, r2
 8005622:	495a      	ldr	r1, [pc, #360]	; (800578c <xProcessCommandTask+0x31c>)
 8005624:	4851      	ldr	r0, [pc, #324]	; (800576c <xProcessCommandTask+0x2fc>)
 8005626:	f000 fbd9 	bl	8005ddc <siprintf>
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800562a:	4950      	ldr	r1, [pc, #320]	; (800576c <xProcessCommandTask+0x2fc>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 800562c:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800562e:	4851      	ldr	r0, [pc, #324]	; (8005774 <xProcessCommandTask+0x304>)
							messageLength = sprintf(message, "q,%hu,0,\n",controllerData.clientID);
 8005630:	f889 2000 	strb.w	r2, [r9]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005634:	f7fd fa48 	bl	8002ac8 <HAL_UART_Transmit_DMA>
							controllerState.errorStatus = 0;
 8005638:	f884 a005 	strb.w	sl, [r4, #5]
							break;
 800563c:	e730      	b.n	80054a0 <xProcessCommandTask+0x30>
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 800563e:	7e61      	ldrb	r1, [r4, #25]
 8005640:	89e3      	ldrh	r3, [r4, #14]
 8005642:	9105      	str	r1, [sp, #20]
 8005644:	7e21      	ldrb	r1, [r4, #24]
 8005646:	b292      	uxth	r2, r2
 8005648:	9104      	str	r1, [sp, #16]
 800564a:	7f21      	ldrb	r1, [r4, #28]
 800564c:	4847      	ldr	r0, [pc, #284]	; (800576c <xProcessCommandTask+0x2fc>)
 800564e:	9103      	str	r1, [sp, #12]
 8005650:	8aa1      	ldrh	r1, [r4, #20]
 8005652:	9102      	str	r1, [sp, #8]
 8005654:	8a61      	ldrh	r1, [r4, #18]
 8005656:	9101      	str	r1, [sp, #4]
 8005658:	8a21      	ldrh	r1, [r4, #16]
 800565a:	9100      	str	r1, [sp, #0]
 800565c:	494c      	ldr	r1, [pc, #304]	; (8005790 <xProcessCommandTask+0x320>)
 800565e:	f000 fbbd 	bl	8005ddc <siprintf>
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005662:	4942      	ldr	r1, [pc, #264]	; (800576c <xProcessCommandTask+0x2fc>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8005664:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005666:	4843      	ldr	r0, [pc, #268]	; (8005774 <xProcessCommandTask+0x304>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", 	controllerData.clientID,
 8005668:	f889 2000 	strb.w	r2, [r9]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800566c:	f7fd fa2c 	bl	8002ac8 <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState && controllerState.errorStatus != STATUS_ERROR_OVERCURRENT){
 8005670:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005674:	4295      	cmp	r5, r2
 8005676:	f43f af13 	beq.w	80054a0 <xProcessCommandTask+0x30>
 800567a:	7963      	ldrb	r3, [r4, #5]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f43f af0f 	beq.w	80054a0 <xProcessCommandTask+0x30>
							if (outputState & 0b00000001) 	C1_UP_ON;
 8005682:	f012 0201 	ands.w	r2, r2, #1
 8005686:	bf18      	it	ne
 8005688:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 800568a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800568e:	4841      	ldr	r0, [pc, #260]	; (8005794 <xProcessCommandTask+0x324>)
							controllerState.pressureCompensation = COMPENSATION_OFF;
 8005690:	f884 8001 	strb.w	r8, [r4, #1]
							else 				   			C1_UP_OFF;
 8005694:	f7fc f902 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8005698:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C1_DOWN_OFF;
 800569c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 80056a0:	f012 0202 	ands.w	r2, r2, #2
 80056a4:	bf18      	it	ne
 80056a6:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 80056a8:	483a      	ldr	r0, [pc, #232]	; (8005794 <xProcessCommandTask+0x324>)
 80056aa:	f7fc f8f7 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 80056ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C2_UP_OFF;
 80056b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
							if (outputState & 0b00000100) 	C2_UP_ON;
 80056b6:	f012 0204 	ands.w	r2, r2, #4
 80056ba:	bf18      	it	ne
 80056bc:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 80056be:	4835      	ldr	r0, [pc, #212]	; (8005794 <xProcessCommandTask+0x324>)
 80056c0:	f7fc f8ec 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80056c4:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C2_DOWN_OFF;
 80056c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80056cc:	f012 0208 	ands.w	r2, r2, #8
 80056d0:	bf18      	it	ne
 80056d2:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 80056d4:	482f      	ldr	r0, [pc, #188]	; (8005794 <xProcessCommandTask+0x324>)
 80056d6:	f7fc f8e1 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 80056da:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C3_UP_OFF;
 80056de:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00010000) 	C3_UP_ON;
 80056e0:	f012 0210 	ands.w	r2, r2, #16
 80056e4:	bf18      	it	ne
 80056e6:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 80056e8:	482b      	ldr	r0, [pc, #172]	; (8005798 <xProcessCommandTask+0x328>)
 80056ea:	f7fc f8d7 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 80056ee:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C3_DOWN_OFF;
 80056f2:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 80056f4:	f012 0220 	ands.w	r2, r2, #32
 80056f8:	bf18      	it	ne
 80056fa:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 80056fc:	4826      	ldr	r0, [pc, #152]	; (8005798 <xProcessCommandTask+0x328>)
 80056fe:	f7fc f8cd 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 8005702:	f89d 201f 	ldrb.w	r2, [sp, #31]
							else 				   			C4_UP_OFF;
 8005706:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b01000000) 	C4_UP_ON;
 800570a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800570e:	bf18      	it	ne
 8005710:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 8005712:	4821      	ldr	r0, [pc, #132]	; (8005798 <xProcessCommandTask+0x328>)
 8005714:	f7fc f8c2 	bl	800189c <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005718:	f99d 301f 	ldrsb.w	r3, [sp, #31]
							else 				   			C4_DOWN_OFF;
 800571c:	f44f 7100 	mov.w	r1, #512	; 0x200
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfb4      	ite	lt
 8005724:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8005726:	2200      	movge	r2, #0
 8005728:	481b      	ldr	r0, [pc, #108]	; (8005798 <xProcessCommandTask+0x328>)
 800572a:	f7fc f8b7 	bl	800189c <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 800572e:	f89d 501f 	ldrb.w	r5, [sp, #31]
 8005732:	e6b5      	b.n	80054a0 <xProcessCommandTask+0x30>
					if (command[1] == 'x'){
 8005734:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8005738:	2b78      	cmp	r3, #120	; 0x78
 800573a:	d133      	bne.n	80057a4 <xProcessCommandTask+0x334>
						sscanf((char*)command, "sx,%hu,\n", &id);
 800573c:	aa09      	add	r2, sp, #36	; 0x24
 800573e:	4917      	ldr	r1, [pc, #92]	; (800579c <xProcessCommandTask+0x32c>)
 8005740:	a80a      	add	r0, sp, #40	; 0x28
 8005742:	f000 fb6f 	bl	8005e24 <siscanf>
						if (id == controllerState.serverUID){
 8005746:	8ae2      	ldrh	r2, [r4, #22]
 8005748:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800574c:	429a      	cmp	r2, r3
 800574e:	f47f aea7 	bne.w	80054a0 <xProcessCommandTask+0x30>
							controllerState.pressureCompensation = COMPENSATION_OFF;
 8005752:	2300      	movs	r3, #0
							controllerState.pressureCompensation = COMPENSATION_ON;
 8005754:	7063      	strb	r3, [r4, #1]
 8005756:	e6a3      	b.n	80054a0 <xProcessCommandTask+0x30>
 8005758:	200054bc 	.word	0x200054bc
 800575c:	40010800 	.word	0x40010800
 8005760:	080070c6 	.word	0x080070c6
 8005764:	2000547c 	.word	0x2000547c
 8005768:	080070ce 	.word	0x080070ce
 800576c:	200053f8 	.word	0x200053f8
 8005770:	20005478 	.word	0x20005478
 8005774:	200055fc 	.word	0x200055fc
 8005778:	080070e9 	.word	0x080070e9
 800577c:	200054ac 	.word	0x200054ac
 8005780:	080070f1 	.word	0x080070f1
 8005784:	0800710d 	.word	0x0800710d
 8005788:	0800711d 	.word	0x0800711d
 800578c:	08007125 	.word	0x08007125
 8005790:	0800712f 	.word	0x0800712f
 8005794:	40010c00 	.word	0x40010c00
 8005798:	40011000 	.word	0x40011000
 800579c:	08007150 	.word	0x08007150
 80057a0:	200056a0 	.word	0x200056a0
					else if (command[1] == ','){
 80057a4:	2b2c      	cmp	r3, #44	; 0x2c
 80057a6:	f47f ae7b 	bne.w	80054a0 <xProcessCommandTask+0x30>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,%c,%c,\n", &id, 	&controllerState.nessPressure[0],
 80057aa:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	ab08      	add	r3, sp, #32
 80057b8:	9303      	str	r3, [sp, #12]
 80057ba:	4b80      	ldr	r3, [pc, #512]	; (80059bc <xProcessCommandTask+0x54c>)
 80057bc:	4980      	ldr	r1, [pc, #512]	; (80059c0 <xProcessCommandTask+0x550>)
 80057be:	1e9a      	subs	r2, r3, #2
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	1f1a      	subs	r2, r3, #4
 80057c4:	9302      	str	r3, [sp, #8]
 80057c6:	9200      	str	r2, [sp, #0]
 80057c8:	3b06      	subs	r3, #6
 80057ca:	aa09      	add	r2, sp, #36	; 0x24
 80057cc:	a80a      	add	r0, sp, #40	; 0x28
 80057ce:	f000 fb29 	bl	8005e24 <siscanf>
						if (id == controllerState.serverUID && controllerState.errorStatus == STATUS_NORMAL){
 80057d2:	8ae2      	ldrh	r2, [r4, #22]
 80057d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80057d8:	429a      	cmp	r2, r3
 80057da:	f47f ae61 	bne.w	80054a0 <xProcessCommandTask+0x30>
 80057de:	7963      	ldrb	r3, [r4, #5]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f ae5d 	bne.w	80054a0 <xProcessCommandTask+0x30>
							if (systemType == '1'){ // air system choice
 80057e6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80057ea:	2a31      	cmp	r2, #49	; 0x31
								controllerState.airSystemType = RECEIVER;
 80057ec:	bf1c      	itt	ne
 80057ee:	2201      	movne	r2, #1
 80057f0:	7122      	strbne	r2, [r4, #4]
 80057f2:	4a74      	ldr	r2, [pc, #464]	; (80059c4 <xProcessCommandTask+0x554>)
								controllerState.airSystemType = COMPRESSOR; // for compressor
 80057f4:	bf04      	itt	eq
 80057f6:	7123      	strbeq	r3, [r4, #4]
								controllerState.compressorWorkTime = 0;
 80057f8:	6223      	streq	r3, [r4, #32]
 80057fa:	f102 0108 	add.w	r1, r2, #8
								if (controllerState.nessPressure[i] > 4000) controllerState.nessPressure[i] = controllerState.filteredData[i];
 80057fe:	8810      	ldrh	r0, [r2, #0]
 8005800:	3202      	adds	r2, #2
 8005802:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8005806:	bf84      	itt	hi
 8005808:	88d0      	ldrhhi	r0, [r2, #6]
 800580a:	f822 0c02 	strhhi.w	r0, [r2, #-2]
							for(i = 0; i < 4; i++){
 800580e:	428a      	cmp	r2, r1
 8005810:	d1f5      	bne.n	80057fe <xProcessCommandTask+0x38e>
							controllerState.waysType = waysType - '0';
 8005812:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
							if (accuracy == '1'){
 8005816:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
							controllerState.waysType = waysType - '0';
 800581a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800581e:	b2c0      	uxtb	r0, r0
							if (accuracy == '1'){
 8005820:	2931      	cmp	r1, #49	; 0x31
							controllerState.waysType = waysType - '0';
 8005822:	76a0      	strb	r0, [r4, #26]
							if (accuracy == '1'){
 8005824:	d11b      	bne.n	800585e <xProcessCommandTask+0x3ee>
								controllerState.analyzeAccuracy = 30;
 8005826:	211e      	movs	r1, #30
								controllerState.analyzeAccuracy = 25;
 8005828:	76e1      	strb	r1, [r4, #27]
							if (controllerState.waysType > 6 || controllerState.waysType < 2){
 800582a:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
 800582e:	b2c9      	uxtb	r1, r1
 8005830:	2904      	cmp	r1, #4
 8005832:	f63f ae35 	bhi.w	80054a0 <xProcessCommandTask+0x30>
							if(controllerState.waysType == VIEW_2_2){
 8005836:	2806      	cmp	r0, #6
 8005838:	d11a      	bne.n	8005870 <xProcessCommandTask+0x400>
 800583a:	4a60      	ldr	r2, [pc, #384]	; (80059bc <xProcessCommandTask+0x54c>)
 800583c:	f102 0108 	add.w	r1, r2, #8
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8005840:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8005844:	b120      	cbz	r0, 8005850 <xProcessCommandTask+0x3e0>
 8005846:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 800584a:	b108      	cbz	r0, 8005850 <xProcessCommandTask+0x3e0>
									successCounter += 1;
 800584c:	3301      	adds	r3, #1
 800584e:	b2db      	uxtb	r3, r3
								for(i = 0; i < 4; i++){
 8005850:	4291      	cmp	r1, r2
 8005852:	d1f5      	bne.n	8005840 <xProcessCommandTask+0x3d0>
								if (successCounter != 4){
 8005854:	2b04      	cmp	r3, #4
								if (successCounter != 3){
 8005856:	f47f ae23 	bne.w	80054a0 <xProcessCommandTask+0x30>
							controllerState.pressureCompensation = COMPENSATION_ON;
 800585a:	2301      	movs	r3, #1
 800585c:	e77a      	b.n	8005754 <xProcessCommandTask+0x2e4>
							else if (accuracy == '2'){
 800585e:	2932      	cmp	r1, #50	; 0x32
 8005860:	d101      	bne.n	8005866 <xProcessCommandTask+0x3f6>
								controllerState.analyzeAccuracy = 60;
 8005862:	213c      	movs	r1, #60	; 0x3c
 8005864:	e7e0      	b.n	8005828 <xProcessCommandTask+0x3b8>
							else if (accuracy == '3'){
 8005866:	2933      	cmp	r1, #51	; 0x33
								controllerState.analyzeAccuracy = 90;
 8005868:	bf0c      	ite	eq
 800586a:	215a      	moveq	r1, #90	; 0x5a
								controllerState.analyzeAccuracy = 25;
 800586c:	2119      	movne	r1, #25
 800586e:	e7db      	b.n	8005828 <xProcessCommandTask+0x3b8>
							else if(controllerState.waysType == VIEW_2_1 || controllerState.waysType == VIEW_1_2){
 8005870:	3a34      	subs	r2, #52	; 0x34
 8005872:	2a01      	cmp	r2, #1
 8005874:	d80d      	bhi.n	8005892 <xProcessCommandTask+0x422>
 8005876:	4a51      	ldr	r2, [pc, #324]	; (80059bc <xProcessCommandTask+0x54c>)
 8005878:	1d91      	adds	r1, r2, #6
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 800587a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800587e:	b120      	cbz	r0, 800588a <xProcessCommandTask+0x41a>
 8005880:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8005884:	b108      	cbz	r0, 800588a <xProcessCommandTask+0x41a>
									successCounter += 1;
 8005886:	3301      	adds	r3, #1
 8005888:	b2db      	uxtb	r3, r3
								for(i = 0; i < 3; i++){
 800588a:	428a      	cmp	r2, r1
 800588c:	d1f5      	bne.n	800587a <xProcessCommandTask+0x40a>
								if (successCounter != 3){
 800588e:	2b03      	cmp	r3, #3
 8005890:	e7e1      	b.n	8005856 <xProcessCommandTask+0x3e6>
							else if(controllerState.waysType == VIEW_1_1 || controllerState.waysType == VIEW_0_2){
 8005892:	2901      	cmp	r1, #1
 8005894:	d8e1      	bhi.n	800585a <xProcessCommandTask+0x3ea>
									if (controllerState.filteredData[i] == 0 || controllerState.nessPressure[i] == 0){
 8005896:	89e3      	ldrh	r3, [r4, #14]
 8005898:	b11b      	cbz	r3, 80058a2 <xProcessCommandTask+0x432>
 800589a:	88e3      	ldrh	r3, [r4, #6]
 800589c:	3300      	adds	r3, #0
 800589e:	bf18      	it	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	8a22      	ldrh	r2, [r4, #16]
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f43f adfb 	beq.w	80054a0 <xProcessCommandTask+0x30>
 80058aa:	8922      	ldrh	r2, [r4, #8]
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	f43f adf7 	beq.w	80054a0 <xProcessCommandTask+0x30>
								if (successCounter != 2){
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f43f adf4 	beq.w	80054a0 <xProcessCommandTask+0x30>
 80058b8:	e7cf      	b.n	800585a <xProcessCommandTask+0x3ea>
					if (controllerState.soundIndicationState == SEARCH_INDICATION){
 80058ba:	f894 a003 	ldrb.w	sl, [r4, #3]
 80058be:	f1ba 0f01 	cmp.w	sl, #1
 80058c2:	f47f aded 	bne.w	80054a0 <xProcessCommandTask+0x30>
						if (command[1] == '?'){
 80058c6:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80058ca:	2b3f      	cmp	r3, #63	; 0x3f
 80058cc:	d10d      	bne.n	80058ea <xProcessCommandTask+0x47a>
							sscanf((char*)command, "x?%hu,\n", &controllerData.clientID);
 80058ce:	4a3e      	ldr	r2, [pc, #248]	; (80059c8 <xProcessCommandTask+0x558>)
 80058d0:	493e      	ldr	r1, [pc, #248]	; (80059cc <xProcessCommandTask+0x55c>)
 80058d2:	a80a      	add	r0, sp, #40	; 0x28
 80058d4:	f000 faa6 	bl	8005e24 <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerData.clientID, controllerState.serverUID);
 80058d8:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <xProcessCommandTask+0x560>)
 80058da:	493e      	ldr	r1, [pc, #248]	; (80059d4 <xProcessCommandTask+0x564>)
 80058dc:	885a      	ldrh	r2, [r3, #2]
 80058de:	483e      	ldr	r0, [pc, #248]	; (80059d8 <xProcessCommandTask+0x568>)
 80058e0:	8ae3      	ldrh	r3, [r4, #22]
 80058e2:	b292      	uxth	r2, r2
 80058e4:	f000 fa7a 	bl	8005ddc <siprintf>
 80058e8:	e635      	b.n	8005556 <xProcessCommandTask+0xe6>
						else if (command[1] == 'c'){
 80058ea:	2b63      	cmp	r3, #99	; 0x63
 80058ec:	f47f add8 	bne.w	80054a0 <xProcessCommandTask+0x30>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 80058f0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80058f4:	aa09      	add	r2, sp, #36	; 0x24
 80058f6:	4939      	ldr	r1, [pc, #228]	; (80059dc <xProcessCommandTask+0x56c>)
 80058f8:	a80a      	add	r0, sp, #40	; 0x28
 80058fa:	f000 fa93 	bl	8005e24 <siscanf>
							if (id == controllerState.serverUID){
 80058fe:	8ae2      	ldrh	r2, [r4, #22]
 8005900:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005904:	429a      	cmp	r2, r3
 8005906:	f47f adcb 	bne.w	80054a0 <xProcessCommandTask+0x30>
								eeprom_write_page(EEPROM_CONNECTION_NUM_ADDR, (uint8_t*) &controllerInfo.connectionNum, sizeof(controllerInfo.connectionNum));
 800590a:	2202      	movs	r2, #2
								xTaskCreate(xEepromWriteSettings,
 800590c:	f04f 0800 	mov.w	r8, #0
								controllerData.rfChannel = channel;
 8005910:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80059d0 <xProcessCommandTask+0x560>
 8005914:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
								controllerInfo.connectionNum += 1;
 8005918:	4931      	ldr	r1, [pc, #196]	; (80059e0 <xProcessCommandTask+0x570>)
								controllerData.rfChannel = channel;
 800591a:	f889 3000 	strb.w	r3, [r9]
								controllerData.writeCounter += 1;
 800591e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
								eeprom_write_page(EEPROM_CONNECTION_NUM_ADDR, (uint8_t*) &controllerInfo.connectionNum, sizeof(controllerInfo.connectionNum));
 8005922:	4610      	mov	r0, r2
								controllerData.writeCounter += 1;
 8005924:	3301      	adds	r3, #1
 8005926:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
								controllerInfo.connectionNum += 1;
 800592a:	884b      	ldrh	r3, [r1, #2]
 800592c:	3301      	adds	r3, #1
 800592e:	f821 3f02 	strh.w	r3, [r1, #2]!
								eeprom_write_page(EEPROM_CONNECTION_NUM_ADDR, (uint8_t*) &controllerInfo.connectionNum, sizeof(controllerInfo.connectionNum));
 8005932:	f7ff fb39 	bl	8004fa8 <eeprom_write_page>
								vTaskDelay(5);
 8005936:	2005      	movs	r0, #5
 8005938:	f7fe faa8 	bl	8003e8c <vTaskDelay>
								xTaskCreate(xEepromWriteSettings,
 800593c:	4643      	mov	r3, r8
 800593e:	22c8      	movs	r2, #200	; 0xc8
 8005940:	4928      	ldr	r1, [pc, #160]	; (80059e4 <xProcessCommandTask+0x574>)
 8005942:	f8cd 8004 	str.w	r8, [sp, #4]
 8005946:	f8cd a000 	str.w	sl, [sp]
 800594a:	4827      	ldr	r0, [pc, #156]	; (80059e8 <xProcessCommandTask+0x578>)
 800594c:	f7fe f8b9 	bl	8003ac2 <xTaskCreate>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 8005950:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8005954:	4925      	ldr	r1, [pc, #148]	; (80059ec <xProcessCommandTask+0x57c>)
 8005956:	b292      	uxth	r2, r2
 8005958:	481f      	ldr	r0, [pc, #124]	; (80059d8 <xProcessCommandTask+0x568>)
 800595a:	f000 fa3f 	bl	8005ddc <siprintf>
 800595e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80059f8 <xProcessCommandTask+0x588>
 8005962:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005964:	491c      	ldr	r1, [pc, #112]	; (80059d8 <xProcessCommandTask+0x568>)
 8005966:	4822      	ldr	r0, [pc, #136]	; (80059f0 <xProcessCommandTask+0x580>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerData.clientID);
 8005968:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800596c:	f7fd f8ac 	bl	8002ac8 <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 8005970:	20c8      	movs	r0, #200	; 0xc8
 8005972:	f7fe fa8b 	bl	8003e8c <vTaskDelay>
								CMD_RF_ON;
 8005976:	4642      	mov	r2, r8
 8005978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800597c:	4630      	mov	r0, r6
 800597e:	f7fb ff8d 	bl	800189c <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 8005982:	2032      	movs	r0, #50	; 0x32
 8005984:	f7fe fa82 	bl	8003e8c <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005988:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800598c:	4919      	ldr	r1, [pc, #100]	; (80059f4 <xProcessCommandTask+0x584>)
 800598e:	4812      	ldr	r0, [pc, #72]	; (80059d8 <xProcessCommandTask+0x568>)
 8005990:	f000 fa24 	bl	8005ddc <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005994:	4910      	ldr	r1, [pc, #64]	; (80059d8 <xProcessCommandTask+0x568>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005996:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005998:	4815      	ldr	r0, [pc, #84]	; (80059f0 <xProcessCommandTask+0x580>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 800599a:	f889 2000 	strb.w	r2, [r9]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 800599e:	f7fd f893 	bl	8002ac8 <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 80059a2:	2032      	movs	r0, #50	; 0x32
 80059a4:	f7fe fa72 	bl	8003e8c <vTaskDelay>
								CMD_RF_OFF;
 80059a8:	4652      	mov	r2, sl
 80059aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7fb ff74 	bl	800189c <HAL_GPIO_WritePin>

								controllerState.soundIndicationState = NORMAL_INDICATION;
 80059b4:	f884 8003 	strb.w	r8, [r4, #3]
 80059b8:	e572      	b.n	80054a0 <xProcessCommandTask+0x30>
 80059ba:	bf00      	nop
 80059bc:	200054c8 	.word	0x200054c8
 80059c0:	08007159 	.word	0x08007159
 80059c4:	200054c2 	.word	0x200054c2
 80059c8:	2000547e 	.word	0x2000547e
 80059cc:	0800717a 	.word	0x0800717a
 80059d0:	2000547c 	.word	0x2000547c
 80059d4:	08007182 	.word	0x08007182
 80059d8:	200053f8 	.word	0x200053f8
 80059dc:	08007190 	.word	0x08007190
 80059e0:	200054ac 	.word	0x200054ac
 80059e4:	08007083 	.word	0x08007083
 80059e8:	08004f19 	.word	0x08004f19
 80059ec:	0800719d 	.word	0x0800719d
 80059f0:	200055fc 	.word	0x200055fc
 80059f4:	08007079 	.word	0x08007079
 80059f8:	20005478 	.word	0x20005478

080059fc <xScanInputTask>:
#include "flashFunctions.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 80059fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t curInputWireState = 1;
	uint8_t prevInputWireState = 1;
 8005a00:	2501      	movs	r5, #1

	for(;;){
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a02:	4f1c      	ldr	r7, [pc, #112]	; (8005a74 <xScanInputTask+0x78>)
//					controllerData.offsetPressure[2] = controllerState.filteredData[2];
//					controllerData.offsetPressure[3] = controllerState.filteredData[3];

//					mWrite_flash();

					controllerState.soundIndicationState = SEARCH_INDICATION;
 8005a04:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005a84 <xScanInputTask+0x88>
					CMD_RF_ON;
 8005a08:	4e1b      	ldr	r6, [pc, #108]	; (8005a78 <xScanInputTask+0x7c>)
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a0e:	4819      	ldr	r0, [pc, #100]	; (8005a74 <xScanInputTask+0x78>)
 8005a10:	f7fb ff3e 	bl	8001890 <HAL_GPIO_ReadPin>
		if (curInputWireState != prevInputWireState){
 8005a14:	4285      	cmp	r5, r0
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a16:	4604      	mov	r4, r0
		if (curInputWireState != prevInputWireState){
 8005a18:	d027      	beq.n	8005a6a <xScanInputTask+0x6e>
			vTaskDelay(1 / portTICK_RATE_MS);
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fe fa36 	bl	8003e8c <vTaskDelay>
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7fb ff33 	bl	8001890 <HAL_GPIO_ReadPin>
			if (curInputWireState != prevInputWireState){
 8005a2a:	4285      	cmp	r5, r0
			curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a2c:	4604      	mov	r4, r0
			if (curInputWireState != prevInputWireState){
 8005a2e:	d01c      	beq.n	8005a6a <xScanInputTask+0x6e>
				if (!prevInputWireState){
 8005a30:	b9d8      	cbnz	r0, 8005a6a <xScanInputTask+0x6e>
					controllerState.soundIndicationState = SEARCH_INDICATION;
 8005a32:	2501      	movs	r5, #1
					CMD_RF_ON;
 8005a34:	4602      	mov	r2, r0
 8005a36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a3a:	4630      	mov	r0, r6
					controllerState.soundIndicationState = SEARCH_INDICATION;
 8005a3c:	f888 5003 	strb.w	r5, [r8, #3]
					CMD_RF_ON;
 8005a40:	f7fb ff2c 	bl	800189c <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8005a44:	2032      	movs	r0, #50	; 0x32
 8005a46:	f7fe fa21 	bl	8003e8c <vTaskDelay>

					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	490b      	ldr	r1, [pc, #44]	; (8005a7c <xScanInputTask+0x80>)
 8005a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a52:	480b      	ldr	r0, [pc, #44]	; (8005a80 <xScanInputTask+0x84>)
 8005a54:	f7fc ff56 	bl	8002904 <HAL_UART_Transmit>

					vTaskDelay(50 / portTICK_RATE_MS);
 8005a58:	2032      	movs	r0, #50	; 0x32
 8005a5a:	f7fe fa17 	bl	8003e8c <vTaskDelay>
					CMD_RF_OFF;
 8005a5e:	462a      	mov	r2, r5
 8005a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7fb ff19 	bl	800189c <HAL_GPIO_WritePin>
				}
			}
		}
		vTaskDelay(5 / portTICK_RATE_MS);
 8005a6a:	2005      	movs	r0, #5
 8005a6c:	f7fe fa0e 	bl	8003e8c <vTaskDelay>
		curInputWireState = HAL_GPIO_ReadPin(WIRE_SENS_PORT, WIRE_SENS_PIN);
 8005a70:	4625      	mov	r5, r4
 8005a72:	e7ca      	b.n	8005a0a <xScanInputTask+0xe>
 8005a74:	40010c00 	.word	0x40010c00
 8005a78:	40010800 	.word	0x40010800
 8005a7c:	080071aa 	.word	0x080071aa
 8005a80:	200055fc 	.word	0x200055fc
 8005a84:	200054bc 	.word	0x200054bc

08005a88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a88:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_MspInit+0x48>)
{
 8005a8a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a8c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a8e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a98:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a9c:	f002 0201 	and.w	r2, r2, #1
 8005aa0:	9200      	str	r2, [sp, #0]
 8005aa2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aaa:	61da      	str	r2, [r3, #28]
 8005aac:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005aae:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ab8:	f7fb fbec 	bl	8001294 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005abc:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <HAL_MspInit+0x4c>)
 8005abe:	6853      	ldr	r3, [r2, #4]
 8005ac0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aca:	b003      	add	sp, #12
 8005acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40010000 	.word	0x40010000

08005ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	4604      	mov	r4, r0
 8005adc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ade:	2210      	movs	r2, #16
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	a802      	add	r0, sp, #8
 8005ae4:	f000 f971 	bl	8005dca <memset>
  if(hadc->Instance==ADC1)
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <HAL_ADC_MspInit+0x64>)
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d123      	bne.n	8005b38 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005af0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005af4:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005af6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	619a      	str	r2, [r3, #24]
 8005afe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b00:	480f      	ldr	r0, [pc, #60]	; (8005b40 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b02:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005b06:	9200      	str	r2, [sp, #0]
 8005b08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	f042 0204 	orr.w	r2, r2, #4
 8005b10:	619a      	str	r2, [r3, #24]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b20:	2303      	movs	r3, #3
 8005b22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b24:	f7fb fdd4 	bl	80016d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8005b28:	2012      	movs	r0, #18
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2105      	movs	r1, #5
 8005b2e:	f7fb fbb1 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005b32:	2012      	movs	r0, #18
 8005b34:	f7fb fbe2 	bl	80012fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b38:	b006      	add	sp, #24
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	40012400 	.word	0x40012400
 8005b40:	40010800 	.word	0x40010800

08005b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	a802      	add	r0, sp, #8
 8005b50:	f000 f93b 	bl	8005dca <memset>
  if(hspi->Instance==SPI1)
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <HAL_SPI_MspInit+0x7c>)
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d12e      	bne.n	8005bba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b5c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8005b60:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b62:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6c:	4815      	ldr	r0, [pc, #84]	; (8005bc4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b72:	9200      	str	r2, [sp, #0]
 8005b74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b76:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b78:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7a:	f042 0204 	orr.w	r2, r2, #4
 8005b7e:	619a      	str	r2, [r3, #24]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b8a:	23a0      	movs	r3, #160	; 0xa0
 8005b8c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b92:	2303      	movs	r3, #3
 8005b94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b96:	f7fb fd9b 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b9a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9c:	a902      	add	r1, sp, #8
 8005b9e:	4809      	ldr	r0, [pc, #36]	; (8005bc4 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ba0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ba2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba6:	f7fb fd93 	bl	80016d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005baa:	2023      	movs	r0, #35	; 0x23
 8005bac:	4622      	mov	r2, r4
 8005bae:	2105      	movs	r1, #5
 8005bb0:	f7fb fb70 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005bb4:	2023      	movs	r0, #35	; 0x23
 8005bb6:	f7fb fba1 	bl	80012fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005bba:	b006      	add	sp, #24
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40013000 	.word	0x40013000
 8005bc4:	40010800 	.word	0x40010800

08005bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bca:	2710      	movs	r7, #16
{
 8005bcc:	4606      	mov	r6, r0
 8005bce:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	463a      	mov	r2, r7
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	a802      	add	r0, sp, #8
 8005bd6:	f000 f8f8 	bl	8005dca <memset>
  if(huart->Instance==USART1)
 8005bda:	6832      	ldr	r2, [r6, #0]
 8005bdc:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_UART_MspInit+0xa8>)
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d143      	bne.n	8005c6a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005be2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005be6:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bee:	619a      	str	r2, [r3, #24]
 8005bf0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf2:	4820      	ldr	r0, [pc, #128]	; (8005c74 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bf4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005bf8:	9200      	str	r2, [sp, #0]
 8005bfa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bfc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bfe:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c00:	f042 0204 	orr.w	r2, r2, #4
 8005c04:	619a      	str	r2, [r3, #24]
 8005c06:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005c08:	4c1b      	ldr	r4, [pc, #108]	; (8005c78 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c20:	f7fb fd56 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c28:	4812      	ldr	r0, [pc, #72]	; (8005c74 <HAL_UART_MspInit+0xac>)
 8005c2a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c2c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c2e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c30:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c32:	f7fb fd4d 	bl	80016d0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005c38:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c3a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c3e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c40:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c42:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c44:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c46:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005c48:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c4a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005c4c:	f7fb fb78 	bl	8001340 <HAL_DMA_Init>
 8005c50:	b108      	cbz	r0, 8005c56 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8005c52:	f7ff fbed 	bl	8005430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c56:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005c58:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005c5e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005c60:	f7fb fb18 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c64:	2025      	movs	r0, #37	; 0x25
 8005c66:	f7fb fb49 	bl	80012fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c6a:	b007      	add	sp, #28
 8005c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40013800 	.word	0x40013800
 8005c74:	40010800 	.word	0x40010800
 8005c78:	20005588 	.word	0x20005588
 8005c7c:	40020044 	.word	0x40020044

08005c80 <NMI_Handler>:
 8005c80:	4770      	bx	lr

08005c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c82:	e7fe      	b.n	8005c82 <HardFault_Handler>

08005c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c84:	e7fe      	b.n	8005c84 <MemManage_Handler>

08005c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c86:	e7fe      	b.n	8005c86 <BusFault_Handler>

08005c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c88:	e7fe      	b.n	8005c88 <UsageFault_Handler>

08005c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c8a:	4770      	bx	lr

08005c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c8e:	f7fa ff8f 	bl	8000bb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005c92:	f7fe fa3d 	bl	8004110 <xTaskGetSchedulerState>
 8005c96:	2801      	cmp	r0, #1
 8005c98:	d003      	beq.n	8005ca2 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8005c9e:	f7fd b969 	b.w	8002f74 <xPortSysTickHandler>
 8005ca2:	bd08      	pop	{r3, pc}

08005ca4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <DMA1_Channel4_IRQHandler+0x8>)
 8005ca6:	f7fb bc37 	b.w	8001518 <HAL_DMA_IRQHandler>
 8005caa:	bf00      	nop
 8005cac:	20005588 	.word	0x20005588

08005cb0 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <ADC1_2_IRQHandler+0x8>)
 8005cb2:	f7fa bfb3 	b.w	8000c1c <HAL_ADC_IRQHandler>
 8005cb6:	bf00      	nop
 8005cb8:	200055cc 	.word	0x200055cc

08005cbc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <SPI1_IRQHandler+0x8>)
 8005cbe:	f7fc bcaf 	b.w	8002620 <HAL_SPI_IRQHandler>
 8005cc2:	bf00      	nop
 8005cc4:	20005648 	.word	0x20005648

08005cc8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <USART1_IRQHandler+0x8>)
 8005cca:	f7fc bfbb 	b.w	8002c44 <HAL_UART_IRQHandler>
 8005cce:	bf00      	nop
 8005cd0:	200055fc 	.word	0x200055fc

08005cd4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005cd4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <_sbrk+0x2c>)
{
 8005cd8:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	b909      	cbnz	r1, 8005ce2 <_sbrk+0xe>
		heap_end = &end;
 8005cde:	4909      	ldr	r1, [pc, #36]	; (8005d04 <_sbrk+0x30>)
 8005ce0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005ce2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005ce4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005ce6:	4402      	add	r2, r0
 8005ce8:	428a      	cmp	r2, r1
 8005cea:	d906      	bls.n	8005cfa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005cec:	f000 f85c 	bl	8005da8 <__errno>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005cfa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005cfc:	bd08      	pop	{r3, pc}
 8005cfe:	bf00      	nop
 8005d00:	200054e4 	.word	0x200054e4
 8005d04:	200056ac 	.word	0x200056ac

08005d08 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <SystemInit+0x4c>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <SystemInit+0x50>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005d20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d24:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005d34:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005d3e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005d42:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005d44:	2200      	movs	r2, #0
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <SystemInit+0x54>)
 8005d4e:	609a      	str	r2, [r3, #8]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000
 8005d58:	f0ff0000 	.word	0xf0ff0000
 8005d5c:	e000ed00 	.word	0xe000ed00

08005d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005d60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005d62:	e003      	b.n	8005d6c <LoopCopyDataInit>

08005d64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8005d66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005d68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005d6a:	3104      	adds	r1, #4

08005d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005d6c:	4809      	ldr	r0, [pc, #36]	; (8005d94 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8005d70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005d72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005d74:	d3f6      	bcc.n	8005d64 <CopyDataInit>
  ldr r2, =_sbss
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8005d78:	e002      	b.n	8005d80 <LoopFillZerobss>

08005d7a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005d7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005d7c:	f842 3b04 	str.w	r3, [r2], #4

08005d80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8005d82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005d84:	d3f9      	bcc.n	8005d7a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d86:	f7ff ffbf 	bl	8005d08 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8005d8a:	f7ff f9c1 	bl	8005110 <main>
  bx lr
 8005d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8005d90:	08007398 	.word	0x08007398
  ldr r0, =_sdata
 8005d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d98:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8005d9c:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8005da0:	200056ac 	.word	0x200056ac

08005da4 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005da4:	e7fe      	b.n	8005da4 <CAN1_RX0_IRQHandler>
	...

08005da8 <__errno>:
 8005da8:	4b01      	ldr	r3, [pc, #4]	; (8005db0 <__errno+0x8>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	20000050 	.word	0x20000050

08005db4 <memcpy>:
 8005db4:	b510      	push	{r4, lr}
 8005db6:	1e43      	subs	r3, r0, #1
 8005db8:	440a      	add	r2, r1
 8005dba:	4291      	cmp	r1, r2
 8005dbc:	d100      	bne.n	8005dc0 <memcpy+0xc>
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc8:	e7f7      	b.n	8005dba <memcpy+0x6>

08005dca <memset>:
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4402      	add	r2, r0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d100      	bne.n	8005dd4 <memset+0xa>
 8005dd2:	4770      	bx	lr
 8005dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd8:	e7f9      	b.n	8005dce <memset+0x4>
	...

08005ddc <siprintf>:
 8005ddc:	b40e      	push	{r1, r2, r3}
 8005dde:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005de2:	b500      	push	{lr}
 8005de4:	b09c      	sub	sp, #112	; 0x70
 8005de6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005dea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dee:	9104      	str	r1, [sp, #16]
 8005df0:	9107      	str	r1, [sp, #28]
 8005df2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005df6:	ab1d      	add	r3, sp, #116	; 0x74
 8005df8:	9002      	str	r0, [sp, #8]
 8005dfa:	9006      	str	r0, [sp, #24]
 8005dfc:	4808      	ldr	r0, [pc, #32]	; (8005e20 <siprintf+0x44>)
 8005dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e02:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	a902      	add	r1, sp, #8
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	f000 f892 	bl	8005f34 <_svfiprintf_r>
 8005e10:	2200      	movs	r2, #0
 8005e12:	9b02      	ldr	r3, [sp, #8]
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	b01c      	add	sp, #112	; 0x70
 8005e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e1c:	b003      	add	sp, #12
 8005e1e:	4770      	bx	lr
 8005e20:	20000050 	.word	0x20000050

08005e24 <siscanf>:
 8005e24:	b40e      	push	{r1, r2, r3}
 8005e26:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005e2a:	b530      	push	{r4, r5, lr}
 8005e2c:	b09c      	sub	sp, #112	; 0x70
 8005e2e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005e30:	f854 5b04 	ldr.w	r5, [r4], #4
 8005e34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9006      	str	r0, [sp, #24]
 8005e3c:	f7fa f9f8 	bl	8000230 <strlen>
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <siscanf+0x4c>)
 8005e42:	9003      	str	r0, [sp, #12]
 8005e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e46:	2300      	movs	r3, #0
 8005e48:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e4a:	9314      	str	r3, [sp, #80]	; 0x50
 8005e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e50:	9007      	str	r0, [sp, #28]
 8005e52:	4808      	ldr	r0, [pc, #32]	; (8005e74 <siscanf+0x50>)
 8005e54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	a902      	add	r1, sp, #8
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	9401      	str	r4, [sp, #4]
 8005e62:	f000 f9b5 	bl	80061d0 <__ssvfiscanf_r>
 8005e66:	b01c      	add	sp, #112	; 0x70
 8005e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6c:	b003      	add	sp, #12
 8005e6e:	4770      	bx	lr
 8005e70:	08005e79 	.word	0x08005e79
 8005e74:	20000050 	.word	0x20000050

08005e78 <__seofread>:
 8005e78:	2000      	movs	r0, #0
 8005e7a:	4770      	bx	lr

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	4682      	mov	sl, r0
 8005e84:	429e      	cmp	r6, r3
 8005e86:	460c      	mov	r4, r1
 8005e88:	4691      	mov	r9, r2
 8005e8a:	4698      	mov	r8, r3
 8005e8c:	d835      	bhi.n	8005efa <__ssputs_r+0x7e>
 8005e8e:	898a      	ldrh	r2, [r1, #12]
 8005e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e94:	d031      	beq.n	8005efa <__ssputs_r+0x7e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	6909      	ldr	r1, [r1, #16]
 8005e9c:	1a6f      	subs	r7, r5, r1
 8005e9e:	6965      	ldr	r5, [r4, #20]
 8005ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ea8:	f108 0301 	add.w	r3, r8, #1
 8005eac:	443b      	add	r3, r7
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	bf38      	it	cc
 8005eb2:	461d      	movcc	r5, r3
 8005eb4:	0553      	lsls	r3, r2, #21
 8005eb6:	d531      	bpl.n	8005f1c <__ssputs_r+0xa0>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f000 fff1 	bl	8006ea0 <_malloc_r>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	b950      	cbnz	r0, 8005ed8 <__ssputs_r+0x5c>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	f8ca 3000 	str.w	r3, [sl]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	463a      	mov	r2, r7
 8005eda:	6921      	ldr	r1, [r4, #16]
 8005edc:	f7ff ff6a 	bl	8005db4 <memcpy>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	6126      	str	r6, [r4, #16]
 8005eee:	443e      	add	r6, r7
 8005ef0:	6026      	str	r6, [r4, #0]
 8005ef2:	4646      	mov	r6, r8
 8005ef4:	6165      	str	r5, [r4, #20]
 8005ef6:	1bed      	subs	r5, r5, r7
 8005ef8:	60a5      	str	r5, [r4, #8]
 8005efa:	4546      	cmp	r6, r8
 8005efc:	bf28      	it	cs
 8005efe:	4646      	movcs	r6, r8
 8005f00:	4649      	mov	r1, r9
 8005f02:	4632      	mov	r2, r6
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	f000 ff65 	bl	8006dd4 <memmove>
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	1b9b      	subs	r3, r3, r6
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	441e      	add	r6, r3
 8005f16:	6026      	str	r6, [r4, #0]
 8005f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f001 f81d 	bl	8006f5c <_realloc_r>
 8005f22:	4606      	mov	r6, r0
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1e1      	bne.n	8005eec <__ssputs_r+0x70>
 8005f28:	6921      	ldr	r1, [r4, #16]
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	f000 ff6c 	bl	8006e08 <_free_r>
 8005f30:	e7c7      	b.n	8005ec2 <__ssputs_r+0x46>
	...

08005f34 <_svfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	b09d      	sub	sp, #116	; 0x74
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	898b      	ldrh	r3, [r1, #12]
 8005f3e:	4680      	mov	r8, r0
 8005f40:	061c      	lsls	r4, r3, #24
 8005f42:	460d      	mov	r5, r1
 8005f44:	4616      	mov	r6, r2
 8005f46:	d50f      	bpl.n	8005f68 <_svfiprintf_r+0x34>
 8005f48:	690b      	ldr	r3, [r1, #16]
 8005f4a:	b96b      	cbnz	r3, 8005f68 <_svfiprintf_r+0x34>
 8005f4c:	2140      	movs	r1, #64	; 0x40
 8005f4e:	f000 ffa7 	bl	8006ea0 <_malloc_r>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	6128      	str	r0, [r5, #16]
 8005f56:	b928      	cbnz	r0, 8005f64 <_svfiprintf_r+0x30>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	f8c8 3000 	str.w	r3, [r8]
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	e0c4      	b.n	80060ee <_svfiprintf_r+0x1ba>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	616b      	str	r3, [r5, #20]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f72:	2330      	movs	r3, #48	; 0x30
 8005f74:	f04f 0b01 	mov.w	fp, #1
 8005f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f7c:	4637      	mov	r7, r6
 8005f7e:	463c      	mov	r4, r7
 8005f80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d13c      	bne.n	8006002 <_svfiprintf_r+0xce>
 8005f88:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f8c:	d00b      	beq.n	8005fa6 <_svfiprintf_r+0x72>
 8005f8e:	4653      	mov	r3, sl
 8005f90:	4632      	mov	r2, r6
 8005f92:	4629      	mov	r1, r5
 8005f94:	4640      	mov	r0, r8
 8005f96:	f7ff ff71 	bl	8005e7c <__ssputs_r>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f000 80a2 	beq.w	80060e4 <_svfiprintf_r+0x1b0>
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	4453      	add	r3, sl
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	783b      	ldrb	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 809b 	beq.w	80060e4 <_svfiprintf_r+0x1b0>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	9205      	str	r2, [sp, #20]
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8005fc2:	2205      	movs	r2, #5
 8005fc4:	7821      	ldrb	r1, [r4, #0]
 8005fc6:	4850      	ldr	r0, [pc, #320]	; (8006108 <_svfiprintf_r+0x1d4>)
 8005fc8:	f000 fef6 	bl	8006db8 <memchr>
 8005fcc:	1c67      	adds	r7, r4, #1
 8005fce:	9b04      	ldr	r3, [sp, #16]
 8005fd0:	b9d8      	cbnz	r0, 800600a <_svfiprintf_r+0xd6>
 8005fd2:	06d9      	lsls	r1, r3, #27
 8005fd4:	bf44      	itt	mi
 8005fd6:	2220      	movmi	r2, #32
 8005fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fdc:	071a      	lsls	r2, r3, #28
 8005fde:	bf44      	itt	mi
 8005fe0:	222b      	movmi	r2, #43	; 0x2b
 8005fe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fe6:	7822      	ldrb	r2, [r4, #0]
 8005fe8:	2a2a      	cmp	r2, #42	; 0x2a
 8005fea:	d016      	beq.n	800601a <_svfiprintf_r+0xe6>
 8005fec:	2100      	movs	r1, #0
 8005fee:	200a      	movs	r0, #10
 8005ff0:	9a07      	ldr	r2, [sp, #28]
 8005ff2:	4627      	mov	r7, r4
 8005ff4:	783b      	ldrb	r3, [r7, #0]
 8005ff6:	3401      	adds	r4, #1
 8005ff8:	3b30      	subs	r3, #48	; 0x30
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	d950      	bls.n	80060a0 <_svfiprintf_r+0x16c>
 8005ffe:	b1c9      	cbz	r1, 8006034 <_svfiprintf_r+0x100>
 8006000:	e011      	b.n	8006026 <_svfiprintf_r+0xf2>
 8006002:	2b25      	cmp	r3, #37	; 0x25
 8006004:	d0c0      	beq.n	8005f88 <_svfiprintf_r+0x54>
 8006006:	4627      	mov	r7, r4
 8006008:	e7b9      	b.n	8005f7e <_svfiprintf_r+0x4a>
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <_svfiprintf_r+0x1d4>)
 800600c:	463c      	mov	r4, r7
 800600e:	1a80      	subs	r0, r0, r2
 8006010:	fa0b f000 	lsl.w	r0, fp, r0
 8006014:	4318      	orrs	r0, r3
 8006016:	9004      	str	r0, [sp, #16]
 8006018:	e7d3      	b.n	8005fc2 <_svfiprintf_r+0x8e>
 800601a:	9a03      	ldr	r2, [sp, #12]
 800601c:	1d11      	adds	r1, r2, #4
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	9103      	str	r1, [sp, #12]
 8006022:	2a00      	cmp	r2, #0
 8006024:	db01      	blt.n	800602a <_svfiprintf_r+0xf6>
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	e004      	b.n	8006034 <_svfiprintf_r+0x100>
 800602a:	4252      	negs	r2, r2
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	783b      	ldrb	r3, [r7, #0]
 8006036:	2b2e      	cmp	r3, #46	; 0x2e
 8006038:	d10d      	bne.n	8006056 <_svfiprintf_r+0x122>
 800603a:	787b      	ldrb	r3, [r7, #1]
 800603c:	1c79      	adds	r1, r7, #1
 800603e:	2b2a      	cmp	r3, #42	; 0x2a
 8006040:	d132      	bne.n	80060a8 <_svfiprintf_r+0x174>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	3702      	adds	r7, #2
 8006046:	1d1a      	adds	r2, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9203      	str	r2, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfb8      	it	lt
 8006050:	f04f 33ff 	movlt.w	r3, #4294967295
 8006054:	9305      	str	r3, [sp, #20]
 8006056:	4c2d      	ldr	r4, [pc, #180]	; (800610c <_svfiprintf_r+0x1d8>)
 8006058:	2203      	movs	r2, #3
 800605a:	7839      	ldrb	r1, [r7, #0]
 800605c:	4620      	mov	r0, r4
 800605e:	f000 feab 	bl	8006db8 <memchr>
 8006062:	b138      	cbz	r0, 8006074 <_svfiprintf_r+0x140>
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	1b00      	subs	r0, r0, r4
 8006068:	fa03 f000 	lsl.w	r0, r3, r0
 800606c:	9b04      	ldr	r3, [sp, #16]
 800606e:	3701      	adds	r7, #1
 8006070:	4303      	orrs	r3, r0
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	7839      	ldrb	r1, [r7, #0]
 8006076:	2206      	movs	r2, #6
 8006078:	4825      	ldr	r0, [pc, #148]	; (8006110 <_svfiprintf_r+0x1dc>)
 800607a:	1c7e      	adds	r6, r7, #1
 800607c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006080:	f000 fe9a 	bl	8006db8 <memchr>
 8006084:	2800      	cmp	r0, #0
 8006086:	d035      	beq.n	80060f4 <_svfiprintf_r+0x1c0>
 8006088:	4b22      	ldr	r3, [pc, #136]	; (8006114 <_svfiprintf_r+0x1e0>)
 800608a:	b9fb      	cbnz	r3, 80060cc <_svfiprintf_r+0x198>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	3307      	adds	r3, #7
 8006090:	f023 0307 	bic.w	r3, r3, #7
 8006094:	3308      	adds	r3, #8
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609a:	444b      	add	r3, r9
 800609c:	9309      	str	r3, [sp, #36]	; 0x24
 800609e:	e76d      	b.n	8005f7c <_svfiprintf_r+0x48>
 80060a0:	fb00 3202 	mla	r2, r0, r2, r3
 80060a4:	2101      	movs	r1, #1
 80060a6:	e7a4      	b.n	8005ff2 <_svfiprintf_r+0xbe>
 80060a8:	2300      	movs	r3, #0
 80060aa:	240a      	movs	r4, #10
 80060ac:	4618      	mov	r0, r3
 80060ae:	9305      	str	r3, [sp, #20]
 80060b0:	460f      	mov	r7, r1
 80060b2:	783a      	ldrb	r2, [r7, #0]
 80060b4:	3101      	adds	r1, #1
 80060b6:	3a30      	subs	r2, #48	; 0x30
 80060b8:	2a09      	cmp	r2, #9
 80060ba:	d903      	bls.n	80060c4 <_svfiprintf_r+0x190>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ca      	beq.n	8006056 <_svfiprintf_r+0x122>
 80060c0:	9005      	str	r0, [sp, #20]
 80060c2:	e7c8      	b.n	8006056 <_svfiprintf_r+0x122>
 80060c4:	fb04 2000 	mla	r0, r4, r0, r2
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7f1      	b.n	80060b0 <_svfiprintf_r+0x17c>
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <_svfiprintf_r+0x1e4>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	4640      	mov	r0, r8
 80060d8:	f3af 8000 	nop.w
 80060dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060e0:	4681      	mov	r9, r0
 80060e2:	d1d9      	bne.n	8006098 <_svfiprintf_r+0x164>
 80060e4:	89ab      	ldrh	r3, [r5, #12]
 80060e6:	065b      	lsls	r3, r3, #25
 80060e8:	f53f af39 	bmi.w	8005f5e <_svfiprintf_r+0x2a>
 80060ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ee:	b01d      	add	sp, #116	; 0x74
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <_svfiprintf_r+0x1e4>)
 80060fc:	a904      	add	r1, sp, #16
 80060fe:	4640      	mov	r0, r8
 8006100:	f000 fa32 	bl	8006568 <_printf_i>
 8006104:	e7ea      	b.n	80060dc <_svfiprintf_r+0x1a8>
 8006106:	bf00      	nop
 8006108:	080071cb 	.word	0x080071cb
 800610c:	080071d1 	.word	0x080071d1
 8006110:	080071d5 	.word	0x080071d5
 8006114:	00000000 	.word	0x00000000
 8006118:	08005e7d 	.word	0x08005e7d

0800611c <_sungetc_r>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	1c4b      	adds	r3, r1, #1
 8006120:	4614      	mov	r4, r2
 8006122:	d103      	bne.n	800612c <_sungetc_r+0x10>
 8006124:	f04f 35ff 	mov.w	r5, #4294967295
 8006128:	4628      	mov	r0, r5
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	8993      	ldrh	r3, [r2, #12]
 800612e:	b2cd      	uxtb	r5, r1
 8006130:	f023 0320 	bic.w	r3, r3, #32
 8006134:	8193      	strh	r3, [r2, #12]
 8006136:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006138:	6852      	ldr	r2, [r2, #4]
 800613a:	b18b      	cbz	r3, 8006160 <_sungetc_r+0x44>
 800613c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800613e:	429a      	cmp	r2, r3
 8006140:	da08      	bge.n	8006154 <_sungetc_r+0x38>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	f803 5c01 	strb.w	r5, [r3, #-1]
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	3301      	adds	r3, #1
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	e7e9      	b.n	8006128 <_sungetc_r+0xc>
 8006154:	4621      	mov	r1, r4
 8006156:	f000 fdd3 	bl	8006d00 <__submore>
 800615a:	2800      	cmp	r0, #0
 800615c:	d0f1      	beq.n	8006142 <_sungetc_r+0x26>
 800615e:	e7e1      	b.n	8006124 <_sungetc_r+0x8>
 8006160:	6921      	ldr	r1, [r4, #16]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	b151      	cbz	r1, 800617c <_sungetc_r+0x60>
 8006166:	4299      	cmp	r1, r3
 8006168:	d208      	bcs.n	800617c <_sungetc_r+0x60>
 800616a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800616e:	428d      	cmp	r5, r1
 8006170:	d104      	bne.n	800617c <_sungetc_r+0x60>
 8006172:	3b01      	subs	r3, #1
 8006174:	3201      	adds	r2, #1
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	6062      	str	r2, [r4, #4]
 800617a:	e7d5      	b.n	8006128 <_sungetc_r+0xc>
 800617c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800617e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006182:	6363      	str	r3, [r4, #52]	; 0x34
 8006184:	2303      	movs	r3, #3
 8006186:	63a3      	str	r3, [r4, #56]	; 0x38
 8006188:	4623      	mov	r3, r4
 800618a:	6422      	str	r2, [r4, #64]	; 0x40
 800618c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	2301      	movs	r3, #1
 8006194:	e7dc      	b.n	8006150 <_sungetc_r+0x34>

08006196 <__ssrefill_r>:
 8006196:	b510      	push	{r4, lr}
 8006198:	460c      	mov	r4, r1
 800619a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800619c:	b169      	cbz	r1, 80061ba <__ssrefill_r+0x24>
 800619e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d001      	beq.n	80061aa <__ssrefill_r+0x14>
 80061a6:	f000 fe2f 	bl	8006e08 <_free_r>
 80061aa:	2000      	movs	r0, #0
 80061ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ae:	6360      	str	r0, [r4, #52]	; 0x34
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	b113      	cbz	r3, 80061ba <__ssrefill_r+0x24>
 80061b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	2300      	movs	r3, #0
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f043 0320 	orr.w	r3, r3, #32
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	bd10      	pop	{r4, pc}

080061d0 <__ssvfiscanf_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	2300      	movs	r3, #0
 80061dc:	4606      	mov	r6, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	4692      	mov	sl, r2
 80061e2:	270a      	movs	r7, #10
 80061e4:	9346      	str	r3, [sp, #280]	; 0x118
 80061e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80061e8:	4b9f      	ldr	r3, [pc, #636]	; (8006468 <__ssvfiscanf_r+0x298>)
 80061ea:	f10d 080c 	add.w	r8, sp, #12
 80061ee:	93a2      	str	r3, [sp, #648]	; 0x288
 80061f0:	4b9e      	ldr	r3, [pc, #632]	; (800646c <__ssvfiscanf_r+0x29c>)
 80061f2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006470 <__ssvfiscanf_r+0x2a0>
 80061f6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80061fa:	93a3      	str	r3, [sp, #652]	; 0x28c
 80061fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 812f 	beq.w	8006464 <__ssvfiscanf_r+0x294>
 8006206:	f000 fdb7 	bl	8006d78 <__locale_ctype_ptr>
 800620a:	f89a b000 	ldrb.w	fp, [sl]
 800620e:	4458      	add	r0, fp
 8006210:	7843      	ldrb	r3, [r0, #1]
 8006212:	f013 0308 	ands.w	r3, r3, #8
 8006216:	d143      	bne.n	80062a0 <__ssvfiscanf_r+0xd0>
 8006218:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800621c:	f10a 0501 	add.w	r5, sl, #1
 8006220:	f040 8099 	bne.w	8006356 <__ssvfiscanf_r+0x186>
 8006224:	9345      	str	r3, [sp, #276]	; 0x114
 8006226:	9343      	str	r3, [sp, #268]	; 0x10c
 8006228:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d103      	bne.n	8006238 <__ssvfiscanf_r+0x68>
 8006230:	2310      	movs	r3, #16
 8006232:	f10a 0502 	add.w	r5, sl, #2
 8006236:	9343      	str	r3, [sp, #268]	; 0x10c
 8006238:	7829      	ldrb	r1, [r5, #0]
 800623a:	46aa      	mov	sl, r5
 800623c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006240:	2a09      	cmp	r2, #9
 8006242:	f105 0501 	add.w	r5, r5, #1
 8006246:	d941      	bls.n	80062cc <__ssvfiscanf_r+0xfc>
 8006248:	2203      	movs	r2, #3
 800624a:	4889      	ldr	r0, [pc, #548]	; (8006470 <__ssvfiscanf_r+0x2a0>)
 800624c:	f000 fdb4 	bl	8006db8 <memchr>
 8006250:	b138      	cbz	r0, 8006262 <__ssvfiscanf_r+0x92>
 8006252:	eba0 0309 	sub.w	r3, r0, r9
 8006256:	2001      	movs	r0, #1
 8006258:	46aa      	mov	sl, r5
 800625a:	4098      	lsls	r0, r3
 800625c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800625e:	4318      	orrs	r0, r3
 8006260:	9043      	str	r0, [sp, #268]	; 0x10c
 8006262:	f89a 3000 	ldrb.w	r3, [sl]
 8006266:	f10a 0501 	add.w	r5, sl, #1
 800626a:	2b67      	cmp	r3, #103	; 0x67
 800626c:	d84a      	bhi.n	8006304 <__ssvfiscanf_r+0x134>
 800626e:	2b65      	cmp	r3, #101	; 0x65
 8006270:	f080 80b7 	bcs.w	80063e2 <__ssvfiscanf_r+0x212>
 8006274:	2b47      	cmp	r3, #71	; 0x47
 8006276:	d82f      	bhi.n	80062d8 <__ssvfiscanf_r+0x108>
 8006278:	2b45      	cmp	r3, #69	; 0x45
 800627a:	f080 80b2 	bcs.w	80063e2 <__ssvfiscanf_r+0x212>
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8082 	beq.w	8006388 <__ssvfiscanf_r+0x1b8>
 8006284:	2b25      	cmp	r3, #37	; 0x25
 8006286:	d066      	beq.n	8006356 <__ssvfiscanf_r+0x186>
 8006288:	2303      	movs	r3, #3
 800628a:	9744      	str	r7, [sp, #272]	; 0x110
 800628c:	9349      	str	r3, [sp, #292]	; 0x124
 800628e:	e045      	b.n	800631c <__ssvfiscanf_r+0x14c>
 8006290:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8006292:	3301      	adds	r3, #1
 8006294:	3101      	adds	r1, #1
 8006296:	9147      	str	r1, [sp, #284]	; 0x11c
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	3901      	subs	r1, #1
 800629e:	6061      	str	r1, [r4, #4]
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd0b      	ble.n	80062be <__ssvfiscanf_r+0xee>
 80062a6:	f000 fd67 	bl	8006d78 <__locale_ctype_ptr>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	7819      	ldrb	r1, [r3, #0]
 80062ae:	4408      	add	r0, r1
 80062b0:	7841      	ldrb	r1, [r0, #1]
 80062b2:	070d      	lsls	r5, r1, #28
 80062b4:	d4ec      	bmi.n	8006290 <__ssvfiscanf_r+0xc0>
 80062b6:	f10a 0501 	add.w	r5, sl, #1
 80062ba:	46aa      	mov	sl, r5
 80062bc:	e79e      	b.n	80061fc <__ssvfiscanf_r+0x2c>
 80062be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80062c0:	4621      	mov	r1, r4
 80062c2:	4630      	mov	r0, r6
 80062c4:	4798      	blx	r3
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d0ed      	beq.n	80062a6 <__ssvfiscanf_r+0xd6>
 80062ca:	e7f4      	b.n	80062b6 <__ssvfiscanf_r+0xe6>
 80062cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80062ce:	fb07 1303 	mla	r3, r7, r3, r1
 80062d2:	3b30      	subs	r3, #48	; 0x30
 80062d4:	9345      	str	r3, [sp, #276]	; 0x114
 80062d6:	e7af      	b.n	8006238 <__ssvfiscanf_r+0x68>
 80062d8:	2b5b      	cmp	r3, #91	; 0x5b
 80062da:	d061      	beq.n	80063a0 <__ssvfiscanf_r+0x1d0>
 80062dc:	d80c      	bhi.n	80062f8 <__ssvfiscanf_r+0x128>
 80062de:	2b58      	cmp	r3, #88	; 0x58
 80062e0:	d1d2      	bne.n	8006288 <__ssvfiscanf_r+0xb8>
 80062e2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80062e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e8:	9243      	str	r2, [sp, #268]	; 0x10c
 80062ea:	2210      	movs	r2, #16
 80062ec:	9244      	str	r2, [sp, #272]	; 0x110
 80062ee:	2b6f      	cmp	r3, #111	; 0x6f
 80062f0:	bfb4      	ite	lt
 80062f2:	2303      	movlt	r3, #3
 80062f4:	2304      	movge	r3, #4
 80062f6:	e010      	b.n	800631a <__ssvfiscanf_r+0x14a>
 80062f8:	2b63      	cmp	r3, #99	; 0x63
 80062fa:	d05c      	beq.n	80063b6 <__ssvfiscanf_r+0x1e6>
 80062fc:	2b64      	cmp	r3, #100	; 0x64
 80062fe:	d1c3      	bne.n	8006288 <__ssvfiscanf_r+0xb8>
 8006300:	9744      	str	r7, [sp, #272]	; 0x110
 8006302:	e7f4      	b.n	80062ee <__ssvfiscanf_r+0x11e>
 8006304:	2b70      	cmp	r3, #112	; 0x70
 8006306:	d042      	beq.n	800638e <__ssvfiscanf_r+0x1be>
 8006308:	d81d      	bhi.n	8006346 <__ssvfiscanf_r+0x176>
 800630a:	2b6e      	cmp	r3, #110	; 0x6e
 800630c:	d059      	beq.n	80063c2 <__ssvfiscanf_r+0x1f2>
 800630e:	d843      	bhi.n	8006398 <__ssvfiscanf_r+0x1c8>
 8006310:	2b69      	cmp	r3, #105	; 0x69
 8006312:	d1b9      	bne.n	8006288 <__ssvfiscanf_r+0xb8>
 8006314:	2300      	movs	r3, #0
 8006316:	9344      	str	r3, [sp, #272]	; 0x110
 8006318:	2303      	movs	r3, #3
 800631a:	9349      	str	r3, [sp, #292]	; 0x124
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	dd61      	ble.n	80063e6 <__ssvfiscanf_r+0x216>
 8006322:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006324:	0659      	lsls	r1, r3, #25
 8006326:	d56f      	bpl.n	8006408 <__ssvfiscanf_r+0x238>
 8006328:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800632a:	2b02      	cmp	r3, #2
 800632c:	dc7c      	bgt.n	8006428 <__ssvfiscanf_r+0x258>
 800632e:	ab01      	add	r3, sp, #4
 8006330:	4622      	mov	r2, r4
 8006332:	a943      	add	r1, sp, #268	; 0x10c
 8006334:	4630      	mov	r0, r6
 8006336:	f000 fa37 	bl	80067a8 <_scanf_chars>
 800633a:	2801      	cmp	r0, #1
 800633c:	f000 8092 	beq.w	8006464 <__ssvfiscanf_r+0x294>
 8006340:	2802      	cmp	r0, #2
 8006342:	d1ba      	bne.n	80062ba <__ssvfiscanf_r+0xea>
 8006344:	e01d      	b.n	8006382 <__ssvfiscanf_r+0x1b2>
 8006346:	2b75      	cmp	r3, #117	; 0x75
 8006348:	d0da      	beq.n	8006300 <__ssvfiscanf_r+0x130>
 800634a:	2b78      	cmp	r3, #120	; 0x78
 800634c:	d0c9      	beq.n	80062e2 <__ssvfiscanf_r+0x112>
 800634e:	2b73      	cmp	r3, #115	; 0x73
 8006350:	d19a      	bne.n	8006288 <__ssvfiscanf_r+0xb8>
 8006352:	2302      	movs	r3, #2
 8006354:	e7e1      	b.n	800631a <__ssvfiscanf_r+0x14a>
 8006356:	6863      	ldr	r3, [r4, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dd0c      	ble.n	8006376 <__ssvfiscanf_r+0x1a6>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	4593      	cmp	fp, r2
 8006362:	d17f      	bne.n	8006464 <__ssvfiscanf_r+0x294>
 8006364:	3301      	adds	r3, #1
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800636c:	3a01      	subs	r2, #1
 800636e:	3301      	adds	r3, #1
 8006370:	6062      	str	r2, [r4, #4]
 8006372:	9347      	str	r3, [sp, #284]	; 0x11c
 8006374:	e7a1      	b.n	80062ba <__ssvfiscanf_r+0xea>
 8006376:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006378:	4621      	mov	r1, r4
 800637a:	4630      	mov	r0, r6
 800637c:	4798      	blx	r3
 800637e:	2800      	cmp	r0, #0
 8006380:	d0ec      	beq.n	800635c <__ssvfiscanf_r+0x18c>
 8006382:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006384:	2800      	cmp	r0, #0
 8006386:	d163      	bne.n	8006450 <__ssvfiscanf_r+0x280>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e066      	b.n	800645c <__ssvfiscanf_r+0x28c>
 800638e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006390:	f042 0220 	orr.w	r2, r2, #32
 8006394:	9243      	str	r2, [sp, #268]	; 0x10c
 8006396:	e7a4      	b.n	80062e2 <__ssvfiscanf_r+0x112>
 8006398:	2308      	movs	r3, #8
 800639a:	9344      	str	r3, [sp, #272]	; 0x110
 800639c:	2304      	movs	r3, #4
 800639e:	e7bc      	b.n	800631a <__ssvfiscanf_r+0x14a>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4640      	mov	r0, r8
 80063a4:	f000 fb5a 	bl	8006a5c <__sccl>
 80063a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80063aa:	4605      	mov	r5, r0
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80063b2:	2301      	movs	r3, #1
 80063b4:	e7b1      	b.n	800631a <__ssvfiscanf_r+0x14a>
 80063b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80063b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80063be:	2300      	movs	r3, #0
 80063c0:	e7ab      	b.n	800631a <__ssvfiscanf_r+0x14a>
 80063c2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80063c4:	06d0      	lsls	r0, r2, #27
 80063c6:	f53f af78 	bmi.w	80062ba <__ssvfiscanf_r+0xea>
 80063ca:	f012 0f01 	tst.w	r2, #1
 80063ce:	9a01      	ldr	r2, [sp, #4]
 80063d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80063d2:	f102 0104 	add.w	r1, r2, #4
 80063d6:	9101      	str	r1, [sp, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	bf14      	ite	ne
 80063dc:	8013      	strhne	r3, [r2, #0]
 80063de:	6013      	streq	r3, [r2, #0]
 80063e0:	e76b      	b.n	80062ba <__ssvfiscanf_r+0xea>
 80063e2:	2305      	movs	r3, #5
 80063e4:	e799      	b.n	800631a <__ssvfiscanf_r+0x14a>
 80063e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063e8:	4621      	mov	r1, r4
 80063ea:	4630      	mov	r0, r6
 80063ec:	4798      	blx	r3
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d097      	beq.n	8006322 <__ssvfiscanf_r+0x152>
 80063f2:	e7c6      	b.n	8006382 <__ssvfiscanf_r+0x1b2>
 80063f4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80063f6:	3201      	adds	r2, #1
 80063f8:	9247      	str	r2, [sp, #284]	; 0x11c
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	3a01      	subs	r2, #1
 80063fe:	2a00      	cmp	r2, #0
 8006400:	6062      	str	r2, [r4, #4]
 8006402:	dd0a      	ble.n	800641a <__ssvfiscanf_r+0x24a>
 8006404:	3301      	adds	r3, #1
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f000 fcb6 	bl	8006d78 <__locale_ctype_ptr>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	4410      	add	r0, r2
 8006412:	7842      	ldrb	r2, [r0, #1]
 8006414:	0712      	lsls	r2, r2, #28
 8006416:	d4ed      	bmi.n	80063f4 <__ssvfiscanf_r+0x224>
 8006418:	e786      	b.n	8006328 <__ssvfiscanf_r+0x158>
 800641a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800641c:	4621      	mov	r1, r4
 800641e:	4630      	mov	r0, r6
 8006420:	4798      	blx	r3
 8006422:	2800      	cmp	r0, #0
 8006424:	d0f0      	beq.n	8006408 <__ssvfiscanf_r+0x238>
 8006426:	e7ac      	b.n	8006382 <__ssvfiscanf_r+0x1b2>
 8006428:	2b04      	cmp	r3, #4
 800642a:	dc06      	bgt.n	800643a <__ssvfiscanf_r+0x26a>
 800642c:	ab01      	add	r3, sp, #4
 800642e:	4622      	mov	r2, r4
 8006430:	a943      	add	r1, sp, #268	; 0x10c
 8006432:	4630      	mov	r0, r6
 8006434:	f000 fa1c 	bl	8006870 <_scanf_i>
 8006438:	e77f      	b.n	800633a <__ssvfiscanf_r+0x16a>
 800643a:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <__ssvfiscanf_r+0x2a4>)
 800643c:	2b00      	cmp	r3, #0
 800643e:	f43f af3c 	beq.w	80062ba <__ssvfiscanf_r+0xea>
 8006442:	ab01      	add	r3, sp, #4
 8006444:	4622      	mov	r2, r4
 8006446:	a943      	add	r1, sp, #268	; 0x10c
 8006448:	4630      	mov	r0, r6
 800644a:	f3af 8000 	nop.w
 800644e:	e774      	b.n	800633a <__ssvfiscanf_r+0x16a>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006456:	bf18      	it	ne
 8006458:	f04f 30ff 	movne.w	r0, #4294967295
 800645c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8006460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006464:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006466:	e7f9      	b.n	800645c <__ssvfiscanf_r+0x28c>
 8006468:	0800611d 	.word	0x0800611d
 800646c:	08006197 	.word	0x08006197
 8006470:	080071d1 	.word	0x080071d1
 8006474:	00000000 	.word	0x00000000

08006478 <_printf_common>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	4691      	mov	r9, r2
 800647e:	461f      	mov	r7, r3
 8006480:	688a      	ldr	r2, [r1, #8]
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4606      	mov	r6, r0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfb8      	it	lt
 800648a:	4613      	movlt	r3, r2
 800648c:	f8c9 3000 	str.w	r3, [r9]
 8006490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006494:	460c      	mov	r4, r1
 8006496:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800649a:	b112      	cbz	r2, 80064a2 <_printf_common+0x2a>
 800649c:	3301      	adds	r3, #1
 800649e:	f8c9 3000 	str.w	r3, [r9]
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	0699      	lsls	r1, r3, #26
 80064a6:	bf42      	ittt	mi
 80064a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064ac:	3302      	addmi	r3, #2
 80064ae:	f8c9 3000 	strmi.w	r3, [r9]
 80064b2:	6825      	ldr	r5, [r4, #0]
 80064b4:	f015 0506 	ands.w	r5, r5, #6
 80064b8:	d107      	bne.n	80064ca <_printf_common+0x52>
 80064ba:	f104 0a19 	add.w	sl, r4, #25
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	f8d9 2000 	ldr.w	r2, [r9]
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	429d      	cmp	r5, r3
 80064c8:	db2a      	blt.n	8006520 <_printf_common+0xa8>
 80064ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	3300      	adds	r3, #0
 80064d2:	bf18      	it	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	0692      	lsls	r2, r2, #26
 80064d8:	d42f      	bmi.n	800653a <_printf_common+0xc2>
 80064da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064de:	4639      	mov	r1, r7
 80064e0:	4630      	mov	r0, r6
 80064e2:	47c0      	blx	r8
 80064e4:	3001      	adds	r0, #1
 80064e6:	d022      	beq.n	800652e <_printf_common+0xb6>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	68e5      	ldr	r5, [r4, #12]
 80064ec:	f003 0306 	and.w	r3, r3, #6
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	bf18      	it	ne
 80064f4:	2500      	movne	r5, #0
 80064f6:	f8d9 2000 	ldr.w	r2, [r9]
 80064fa:	f04f 0900 	mov.w	r9, #0
 80064fe:	bf08      	it	eq
 8006500:	1aad      	subeq	r5, r5, r2
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	6922      	ldr	r2, [r4, #16]
 8006506:	bf08      	it	eq
 8006508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800650c:	4293      	cmp	r3, r2
 800650e:	bfc4      	itt	gt
 8006510:	1a9b      	subgt	r3, r3, r2
 8006512:	18ed      	addgt	r5, r5, r3
 8006514:	341a      	adds	r4, #26
 8006516:	454d      	cmp	r5, r9
 8006518:	d11b      	bne.n	8006552 <_printf_common+0xda>
 800651a:	2000      	movs	r0, #0
 800651c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006520:	2301      	movs	r3, #1
 8006522:	4652      	mov	r2, sl
 8006524:	4639      	mov	r1, r7
 8006526:	4630      	mov	r0, r6
 8006528:	47c0      	blx	r8
 800652a:	3001      	adds	r0, #1
 800652c:	d103      	bne.n	8006536 <_printf_common+0xbe>
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006536:	3501      	adds	r5, #1
 8006538:	e7c1      	b.n	80064be <_printf_common+0x46>
 800653a:	2030      	movs	r0, #48	; 0x30
 800653c:	18e1      	adds	r1, r4, r3
 800653e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006548:	4422      	add	r2, r4
 800654a:	3302      	adds	r3, #2
 800654c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006550:	e7c3      	b.n	80064da <_printf_common+0x62>
 8006552:	2301      	movs	r3, #1
 8006554:	4622      	mov	r2, r4
 8006556:	4639      	mov	r1, r7
 8006558:	4630      	mov	r0, r6
 800655a:	47c0      	blx	r8
 800655c:	3001      	adds	r0, #1
 800655e:	d0e6      	beq.n	800652e <_printf_common+0xb6>
 8006560:	f109 0901 	add.w	r9, r9, #1
 8006564:	e7d7      	b.n	8006516 <_printf_common+0x9e>
	...

08006568 <_printf_i>:
 8006568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800656c:	4617      	mov	r7, r2
 800656e:	7e0a      	ldrb	r2, [r1, #24]
 8006570:	b085      	sub	sp, #20
 8006572:	2a6e      	cmp	r2, #110	; 0x6e
 8006574:	4698      	mov	r8, r3
 8006576:	4606      	mov	r6, r0
 8006578:	460c      	mov	r4, r1
 800657a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800657c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006580:	f000 80bc 	beq.w	80066fc <_printf_i+0x194>
 8006584:	d81a      	bhi.n	80065bc <_printf_i+0x54>
 8006586:	2a63      	cmp	r2, #99	; 0x63
 8006588:	d02e      	beq.n	80065e8 <_printf_i+0x80>
 800658a:	d80a      	bhi.n	80065a2 <_printf_i+0x3a>
 800658c:	2a00      	cmp	r2, #0
 800658e:	f000 80c8 	beq.w	8006722 <_printf_i+0x1ba>
 8006592:	2a58      	cmp	r2, #88	; 0x58
 8006594:	f000 808a 	beq.w	80066ac <_printf_i+0x144>
 8006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800659c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80065a0:	e02a      	b.n	80065f8 <_printf_i+0x90>
 80065a2:	2a64      	cmp	r2, #100	; 0x64
 80065a4:	d001      	beq.n	80065aa <_printf_i+0x42>
 80065a6:	2a69      	cmp	r2, #105	; 0x69
 80065a8:	d1f6      	bne.n	8006598 <_printf_i+0x30>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80065b2:	d023      	beq.n	80065fc <_printf_i+0x94>
 80065b4:	1d11      	adds	r1, r2, #4
 80065b6:	6019      	str	r1, [r3, #0]
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	e027      	b.n	800660c <_printf_i+0xa4>
 80065bc:	2a73      	cmp	r2, #115	; 0x73
 80065be:	f000 80b4 	beq.w	800672a <_printf_i+0x1c2>
 80065c2:	d808      	bhi.n	80065d6 <_printf_i+0x6e>
 80065c4:	2a6f      	cmp	r2, #111	; 0x6f
 80065c6:	d02a      	beq.n	800661e <_printf_i+0xb6>
 80065c8:	2a70      	cmp	r2, #112	; 0x70
 80065ca:	d1e5      	bne.n	8006598 <_printf_i+0x30>
 80065cc:	680a      	ldr	r2, [r1, #0]
 80065ce:	f042 0220 	orr.w	r2, r2, #32
 80065d2:	600a      	str	r2, [r1, #0]
 80065d4:	e003      	b.n	80065de <_printf_i+0x76>
 80065d6:	2a75      	cmp	r2, #117	; 0x75
 80065d8:	d021      	beq.n	800661e <_printf_i+0xb6>
 80065da:	2a78      	cmp	r2, #120	; 0x78
 80065dc:	d1dc      	bne.n	8006598 <_printf_i+0x30>
 80065de:	2278      	movs	r2, #120	; 0x78
 80065e0:	496f      	ldr	r1, [pc, #444]	; (80067a0 <_printf_i+0x238>)
 80065e2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80065e6:	e064      	b.n	80066b2 <_printf_i+0x14a>
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80065ee:	1d11      	adds	r1, r2, #4
 80065f0:	6019      	str	r1, [r3, #0]
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0a3      	b.n	8006744 <_printf_i+0x1dc>
 80065fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006600:	f102 0104 	add.w	r1, r2, #4
 8006604:	6019      	str	r1, [r3, #0]
 8006606:	d0d7      	beq.n	80065b8 <_printf_i+0x50>
 8006608:	f9b2 3000 	ldrsh.w	r3, [r2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	da03      	bge.n	8006618 <_printf_i+0xb0>
 8006610:	222d      	movs	r2, #45	; 0x2d
 8006612:	425b      	negs	r3, r3
 8006614:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006618:	4962      	ldr	r1, [pc, #392]	; (80067a4 <_printf_i+0x23c>)
 800661a:	220a      	movs	r2, #10
 800661c:	e017      	b.n	800664e <_printf_i+0xe6>
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	6819      	ldr	r1, [r3, #0]
 8006622:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006626:	d003      	beq.n	8006630 <_printf_i+0xc8>
 8006628:	1d08      	adds	r0, r1, #4
 800662a:	6018      	str	r0, [r3, #0]
 800662c:	680b      	ldr	r3, [r1, #0]
 800662e:	e006      	b.n	800663e <_printf_i+0xd6>
 8006630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006634:	f101 0004 	add.w	r0, r1, #4
 8006638:	6018      	str	r0, [r3, #0]
 800663a:	d0f7      	beq.n	800662c <_printf_i+0xc4>
 800663c:	880b      	ldrh	r3, [r1, #0]
 800663e:	2a6f      	cmp	r2, #111	; 0x6f
 8006640:	bf14      	ite	ne
 8006642:	220a      	movne	r2, #10
 8006644:	2208      	moveq	r2, #8
 8006646:	4957      	ldr	r1, [pc, #348]	; (80067a4 <_printf_i+0x23c>)
 8006648:	2000      	movs	r0, #0
 800664a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800664e:	6865      	ldr	r5, [r4, #4]
 8006650:	2d00      	cmp	r5, #0
 8006652:	60a5      	str	r5, [r4, #8]
 8006654:	f2c0 809c 	blt.w	8006790 <_printf_i+0x228>
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	f020 0004 	bic.w	r0, r0, #4
 800665e:	6020      	str	r0, [r4, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d13f      	bne.n	80066e4 <_printf_i+0x17c>
 8006664:	2d00      	cmp	r5, #0
 8006666:	f040 8095 	bne.w	8006794 <_printf_i+0x22c>
 800666a:	4675      	mov	r5, lr
 800666c:	2a08      	cmp	r2, #8
 800666e:	d10b      	bne.n	8006688 <_printf_i+0x120>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07da      	lsls	r2, r3, #31
 8006674:	d508      	bpl.n	8006688 <_printf_i+0x120>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	bfde      	ittt	le
 800667e:	2330      	movle	r3, #48	; 0x30
 8006680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006684:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006688:	ebae 0305 	sub.w	r3, lr, r5
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	f8cd 8000 	str.w	r8, [sp]
 8006692:	463b      	mov	r3, r7
 8006694:	aa03      	add	r2, sp, #12
 8006696:	4621      	mov	r1, r4
 8006698:	4630      	mov	r0, r6
 800669a:	f7ff feed 	bl	8006478 <_printf_common>
 800669e:	3001      	adds	r0, #1
 80066a0:	d155      	bne.n	800674e <_printf_i+0x1e6>
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295
 80066a6:	b005      	add	sp, #20
 80066a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80066b0:	493c      	ldr	r1, [pc, #240]	; (80067a4 <_printf_i+0x23c>)
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80066ba:	f100 0504 	add.w	r5, r0, #4
 80066be:	601d      	str	r5, [r3, #0]
 80066c0:	d001      	beq.n	80066c6 <_printf_i+0x15e>
 80066c2:	6803      	ldr	r3, [r0, #0]
 80066c4:	e002      	b.n	80066cc <_printf_i+0x164>
 80066c6:	0655      	lsls	r5, r2, #25
 80066c8:	d5fb      	bpl.n	80066c2 <_printf_i+0x15a>
 80066ca:	8803      	ldrh	r3, [r0, #0]
 80066cc:	07d0      	lsls	r0, r2, #31
 80066ce:	bf44      	itt	mi
 80066d0:	f042 0220 	orrmi.w	r2, r2, #32
 80066d4:	6022      	strmi	r2, [r4, #0]
 80066d6:	b91b      	cbnz	r3, 80066e0 <_printf_i+0x178>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	f022 0220 	bic.w	r2, r2, #32
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	2210      	movs	r2, #16
 80066e2:	e7b1      	b.n	8006648 <_printf_i+0xe0>
 80066e4:	4675      	mov	r5, lr
 80066e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80066ea:	fb02 3310 	mls	r3, r2, r0, r3
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066f4:	4603      	mov	r3, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d1f5      	bne.n	80066e6 <_printf_i+0x17e>
 80066fa:	e7b7      	b.n	800666c <_printf_i+0x104>
 80066fc:	6808      	ldr	r0, [r1, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006704:	6949      	ldr	r1, [r1, #20]
 8006706:	d004      	beq.n	8006712 <_printf_i+0x1aa>
 8006708:	1d10      	adds	r0, r2, #4
 800670a:	6018      	str	r0, [r3, #0]
 800670c:	6813      	ldr	r3, [r2, #0]
 800670e:	6019      	str	r1, [r3, #0]
 8006710:	e007      	b.n	8006722 <_printf_i+0x1ba>
 8006712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006716:	f102 0004 	add.w	r0, r2, #4
 800671a:	6018      	str	r0, [r3, #0]
 800671c:	6813      	ldr	r3, [r2, #0]
 800671e:	d0f6      	beq.n	800670e <_printf_i+0x1a6>
 8006720:	8019      	strh	r1, [r3, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	4675      	mov	r5, lr
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	e7b1      	b.n	800668e <_printf_i+0x126>
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	1d11      	adds	r1, r2, #4
 800672e:	6019      	str	r1, [r3, #0]
 8006730:	6815      	ldr	r5, [r2, #0]
 8006732:	2100      	movs	r1, #0
 8006734:	6862      	ldr	r2, [r4, #4]
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fb3e 	bl	8006db8 <memchr>
 800673c:	b108      	cbz	r0, 8006742 <_printf_i+0x1da>
 800673e:	1b40      	subs	r0, r0, r5
 8006740:	6060      	str	r0, [r4, #4]
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	2300      	movs	r3, #0
 8006748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674c:	e79f      	b.n	800668e <_printf_i+0x126>
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	462a      	mov	r2, r5
 8006752:	4639      	mov	r1, r7
 8006754:	4630      	mov	r0, r6
 8006756:	47c0      	blx	r8
 8006758:	3001      	adds	r0, #1
 800675a:	d0a2      	beq.n	80066a2 <_printf_i+0x13a>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	d507      	bpl.n	8006772 <_printf_i+0x20a>
 8006762:	2500      	movs	r5, #0
 8006764:	f104 0919 	add.w	r9, r4, #25
 8006768:	68e3      	ldr	r3, [r4, #12]
 800676a:	9a03      	ldr	r2, [sp, #12]
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	429d      	cmp	r5, r3
 8006770:	db05      	blt.n	800677e <_printf_i+0x216>
 8006772:	68e0      	ldr	r0, [r4, #12]
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	4298      	cmp	r0, r3
 8006778:	bfb8      	it	lt
 800677a:	4618      	movlt	r0, r3
 800677c:	e793      	b.n	80066a6 <_printf_i+0x13e>
 800677e:	2301      	movs	r3, #1
 8006780:	464a      	mov	r2, r9
 8006782:	4639      	mov	r1, r7
 8006784:	4630      	mov	r0, r6
 8006786:	47c0      	blx	r8
 8006788:	3001      	adds	r0, #1
 800678a:	d08a      	beq.n	80066a2 <_printf_i+0x13a>
 800678c:	3501      	adds	r5, #1
 800678e:	e7eb      	b.n	8006768 <_printf_i+0x200>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1a7      	bne.n	80066e4 <_printf_i+0x17c>
 8006794:	780b      	ldrb	r3, [r1, #0]
 8006796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800679e:	e765      	b.n	800666c <_printf_i+0x104>
 80067a0:	080071ed 	.word	0x080071ed
 80067a4:	080071dc 	.word	0x080071dc

080067a8 <_scanf_chars>:
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ac:	4615      	mov	r5, r2
 80067ae:	688a      	ldr	r2, [r1, #8]
 80067b0:	4680      	mov	r8, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	b932      	cbnz	r2, 80067c4 <_scanf_chars+0x1c>
 80067b6:	698a      	ldr	r2, [r1, #24]
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2201      	moveq	r2, #1
 80067be:	f04f 32ff 	movne.w	r2, #4294967295
 80067c2:	608a      	str	r2, [r1, #8]
 80067c4:	2600      	movs	r6, #0
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	06d1      	lsls	r1, r2, #27
 80067ca:	bf5f      	itttt	pl
 80067cc:	681a      	ldrpl	r2, [r3, #0]
 80067ce:	1d11      	addpl	r1, r2, #4
 80067d0:	6019      	strpl	r1, [r3, #0]
 80067d2:	6817      	ldrpl	r7, [r2, #0]
 80067d4:	69a3      	ldr	r3, [r4, #24]
 80067d6:	b1db      	cbz	r3, 8006810 <_scanf_chars+0x68>
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <_scanf_chars+0x44>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	6962      	ldr	r2, [r4, #20]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	5cd3      	ldrb	r3, [r2, r3]
 80067e4:	b9a3      	cbnz	r3, 8006810 <_scanf_chars+0x68>
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	d131      	bne.n	800684e <_scanf_chars+0xa6>
 80067ea:	e006      	b.n	80067fa <_scanf_chars+0x52>
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d007      	beq.n	8006800 <_scanf_chars+0x58>
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	d12c      	bne.n	800684e <_scanf_chars+0xa6>
 80067f4:	69a3      	ldr	r3, [r4, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d129      	bne.n	800684e <_scanf_chars+0xa6>
 80067fa:	2001      	movs	r0, #1
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	f000 faba 	bl	8006d78 <__locale_ctype_ptr>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	4418      	add	r0, r3
 800680a:	7843      	ldrb	r3, [r0, #1]
 800680c:	071b      	lsls	r3, r3, #28
 800680e:	d4ef      	bmi.n	80067f0 <_scanf_chars+0x48>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	3601      	adds	r6, #1
 8006814:	06da      	lsls	r2, r3, #27
 8006816:	bf5e      	ittt	pl
 8006818:	682b      	ldrpl	r3, [r5, #0]
 800681a:	781b      	ldrbpl	r3, [r3, #0]
 800681c:	703b      	strbpl	r3, [r7, #0]
 800681e:	682a      	ldr	r2, [r5, #0]
 8006820:	686b      	ldr	r3, [r5, #4]
 8006822:	f102 0201 	add.w	r2, r2, #1
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	68a2      	ldr	r2, [r4, #8]
 800682a:	f103 33ff 	add.w	r3, r3, #4294967295
 800682e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006832:	606b      	str	r3, [r5, #4]
 8006834:	bf58      	it	pl
 8006836:	3701      	addpl	r7, #1
 8006838:	60a2      	str	r2, [r4, #8]
 800683a:	b142      	cbz	r2, 800684e <_scanf_chars+0xa6>
 800683c:	2b00      	cmp	r3, #0
 800683e:	dcc9      	bgt.n	80067d4 <_scanf_chars+0x2c>
 8006840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006844:	4629      	mov	r1, r5
 8006846:	4640      	mov	r0, r8
 8006848:	4798      	blx	r3
 800684a:	2800      	cmp	r0, #0
 800684c:	d0c2      	beq.n	80067d4 <_scanf_chars+0x2c>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f013 0310 	ands.w	r3, r3, #16
 8006854:	d105      	bne.n	8006862 <_scanf_chars+0xba>
 8006856:	68e2      	ldr	r2, [r4, #12]
 8006858:	3201      	adds	r2, #1
 800685a:	60e2      	str	r2, [r4, #12]
 800685c:	69a2      	ldr	r2, [r4, #24]
 800685e:	b102      	cbz	r2, 8006862 <_scanf_chars+0xba>
 8006860:	703b      	strb	r3, [r7, #0]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	2000      	movs	r0, #0
 8006866:	441e      	add	r6, r3
 8006868:	6126      	str	r6, [r4, #16]
 800686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006870 <_scanf_i>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	460c      	mov	r4, r1
 8006876:	469a      	mov	sl, r3
 8006878:	4b74      	ldr	r3, [pc, #464]	; (8006a4c <_scanf_i+0x1dc>)
 800687a:	b087      	sub	sp, #28
 800687c:	4683      	mov	fp, r0
 800687e:	4616      	mov	r6, r2
 8006880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006884:	ab03      	add	r3, sp, #12
 8006886:	68a7      	ldr	r7, [r4, #8]
 8006888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800688c:	4b70      	ldr	r3, [pc, #448]	; (8006a50 <_scanf_i+0x1e0>)
 800688e:	69a1      	ldr	r1, [r4, #24]
 8006890:	4a70      	ldr	r2, [pc, #448]	; (8006a54 <_scanf_i+0x1e4>)
 8006892:	f104 091c 	add.w	r9, r4, #28
 8006896:	2903      	cmp	r1, #3
 8006898:	bf18      	it	ne
 800689a:	461a      	movne	r2, r3
 800689c:	1e7b      	subs	r3, r7, #1
 800689e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80068a2:	bf84      	itt	hi
 80068a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068a8:	60a3      	strhi	r3, [r4, #8]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	bf88      	it	hi
 80068ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068b2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	bf98      	it	ls
 80068ba:	2700      	movls	r7, #0
 80068bc:	464b      	mov	r3, r9
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	bf88      	it	hi
 80068c6:	197f      	addhi	r7, r7, r5
 80068c8:	6831      	ldr	r1, [r6, #0]
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	ab03      	add	r3, sp, #12
 80068ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80068d2:	2202      	movs	r2, #2
 80068d4:	7809      	ldrb	r1, [r1, #0]
 80068d6:	f000 fa6f 	bl	8006db8 <memchr>
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	b328      	cbz	r0, 800692a <_scanf_i+0xba>
 80068de:	f1b8 0f01 	cmp.w	r8, #1
 80068e2:	d156      	bne.n	8006992 <_scanf_i+0x122>
 80068e4:	6862      	ldr	r2, [r4, #4]
 80068e6:	b92a      	cbnz	r2, 80068f4 <_scanf_i+0x84>
 80068e8:	2208      	movs	r2, #8
 80068ea:	6062      	str	r2, [r4, #4]
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	68a2      	ldr	r2, [r4, #8]
 80068fe:	1e51      	subs	r1, r2, #1
 8006900:	60a1      	str	r1, [r4, #8]
 8006902:	b192      	cbz	r2, 800692a <_scanf_i+0xba>
 8006904:	6832      	ldr	r2, [r6, #0]
 8006906:	1c5d      	adds	r5, r3, #1
 8006908:	1c51      	adds	r1, r2, #1
 800690a:	6031      	str	r1, [r6, #0]
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6873      	ldr	r3, [r6, #4]
 8006912:	3b01      	subs	r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	6073      	str	r3, [r6, #4]
 8006918:	dc06      	bgt.n	8006928 <_scanf_i+0xb8>
 800691a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800691e:	4631      	mov	r1, r6
 8006920:	4658      	mov	r0, fp
 8006922:	4798      	blx	r3
 8006924:	2800      	cmp	r0, #0
 8006926:	d177      	bne.n	8006a18 <_scanf_i+0x1a8>
 8006928:	462b      	mov	r3, r5
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	f1b8 0f03 	cmp.w	r8, #3
 8006932:	d1c9      	bne.n	80068c8 <_scanf_i+0x58>
 8006934:	6862      	ldr	r2, [r4, #4]
 8006936:	b90a      	cbnz	r2, 800693c <_scanf_i+0xcc>
 8006938:	220a      	movs	r2, #10
 800693a:	6062      	str	r2, [r4, #4]
 800693c:	6862      	ldr	r2, [r4, #4]
 800693e:	4946      	ldr	r1, [pc, #280]	; (8006a58 <_scanf_i+0x1e8>)
 8006940:	6960      	ldr	r0, [r4, #20]
 8006942:	1a89      	subs	r1, r1, r2
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	f000 f889 	bl	8006a5c <__sccl>
 800694a:	9b01      	ldr	r3, [sp, #4]
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	461d      	mov	r5, r3
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d039      	beq.n	80069cc <_scanf_i+0x15c>
 8006958:	6831      	ldr	r1, [r6, #0]
 800695a:	6960      	ldr	r0, [r4, #20]
 800695c:	780a      	ldrb	r2, [r1, #0]
 800695e:	5c80      	ldrb	r0, [r0, r2]
 8006960:	2800      	cmp	r0, #0
 8006962:	d033      	beq.n	80069cc <_scanf_i+0x15c>
 8006964:	2a30      	cmp	r2, #48	; 0x30
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	d121      	bne.n	80069ae <_scanf_i+0x13e>
 800696a:	0510      	lsls	r0, r2, #20
 800696c:	d51f      	bpl.n	80069ae <_scanf_i+0x13e>
 800696e:	f108 0801 	add.w	r8, r8, #1
 8006972:	b117      	cbz	r7, 800697a <_scanf_i+0x10a>
 8006974:	3301      	adds	r3, #1
 8006976:	3f01      	subs	r7, #1
 8006978:	60a3      	str	r3, [r4, #8]
 800697a:	6873      	ldr	r3, [r6, #4]
 800697c:	3b01      	subs	r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	6073      	str	r3, [r6, #4]
 8006982:	dd1c      	ble.n	80069be <_scanf_i+0x14e>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	68a3      	ldr	r3, [r4, #8]
 800698c:	3b01      	subs	r3, #1
 800698e:	60a3      	str	r3, [r4, #8]
 8006990:	e7df      	b.n	8006952 <_scanf_i+0xe2>
 8006992:	f1b8 0f02 	cmp.w	r8, #2
 8006996:	d1b1      	bne.n	80068fc <_scanf_i+0x8c>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800699e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80069a2:	d1c2      	bne.n	800692a <_scanf_i+0xba>
 80069a4:	2110      	movs	r1, #16
 80069a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069aa:	6061      	str	r1, [r4, #4]
 80069ac:	e7a5      	b.n	80068fa <_scanf_i+0x8a>
 80069ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	780b      	ldrb	r3, [r1, #0]
 80069b6:	3501      	adds	r5, #1
 80069b8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80069bc:	e7dd      	b.n	800697a <_scanf_i+0x10a>
 80069be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069c2:	4631      	mov	r1, r6
 80069c4:	4658      	mov	r0, fp
 80069c6:	4798      	blx	r3
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d0de      	beq.n	800698a <_scanf_i+0x11a>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	05d9      	lsls	r1, r3, #23
 80069d0:	d50c      	bpl.n	80069ec <_scanf_i+0x17c>
 80069d2:	454d      	cmp	r5, r9
 80069d4:	d908      	bls.n	80069e8 <_scanf_i+0x178>
 80069d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80069da:	1e6f      	subs	r7, r5, #1
 80069dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069e0:	4632      	mov	r2, r6
 80069e2:	4658      	mov	r0, fp
 80069e4:	4798      	blx	r3
 80069e6:	463d      	mov	r5, r7
 80069e8:	454d      	cmp	r5, r9
 80069ea:	d02c      	beq.n	8006a46 <_scanf_i+0x1d6>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	f012 0210 	ands.w	r2, r2, #16
 80069f2:	d11e      	bne.n	8006a32 <_scanf_i+0x1c2>
 80069f4:	702a      	strb	r2, [r5, #0]
 80069f6:	6863      	ldr	r3, [r4, #4]
 80069f8:	4649      	mov	r1, r9
 80069fa:	4658      	mov	r0, fp
 80069fc:	9e00      	ldr	r6, [sp, #0]
 80069fe:	47b0      	blx	r6
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	f8da 3000 	ldr.w	r3, [sl]
 8006a06:	f012 0f20 	tst.w	r2, #32
 8006a0a:	d008      	beq.n	8006a1e <_scanf_i+0x1ae>
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	f8ca 2000 	str.w	r2, [sl]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	e009      	b.n	8006a2c <_scanf_i+0x1bc>
 8006a18:	f04f 0800 	mov.w	r8, #0
 8006a1c:	e7d6      	b.n	80069cc <_scanf_i+0x15c>
 8006a1e:	07d2      	lsls	r2, r2, #31
 8006a20:	d5f4      	bpl.n	8006a0c <_scanf_i+0x19c>
 8006a22:	1d1a      	adds	r2, r3, #4
 8006a24:	f8ca 2000 	str.w	r2, [sl]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	8018      	strh	r0, [r3, #0]
 8006a2c:	68e3      	ldr	r3, [r4, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60e3      	str	r3, [r4, #12]
 8006a32:	2000      	movs	r0, #0
 8006a34:	eba5 0509 	sub.w	r5, r5, r9
 8006a38:	44a8      	add	r8, r5
 8006a3a:	6925      	ldr	r5, [r4, #16]
 8006a3c:	4445      	add	r5, r8
 8006a3e:	6125      	str	r5, [r4, #16]
 8006a40:	b007      	add	sp, #28
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	2001      	movs	r0, #1
 8006a48:	e7fa      	b.n	8006a40 <_scanf_i+0x1d0>
 8006a4a:	bf00      	nop
 8006a4c:	08007068 	.word	0x08007068
 8006a50:	08006cdd 	.word	0x08006cdd
 8006a54:	08006bbd 	.word	0x08006bbd
 8006a58:	0800720e 	.word	0x0800720e

08006a5c <__sccl>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	780b      	ldrb	r3, [r1, #0]
 8006a60:	1e44      	subs	r4, r0, #1
 8006a62:	2b5e      	cmp	r3, #94	; 0x5e
 8006a64:	bf13      	iteet	ne
 8006a66:	1c4a      	addne	r2, r1, #1
 8006a68:	1c8a      	addeq	r2, r1, #2
 8006a6a:	784b      	ldrbeq	r3, [r1, #1]
 8006a6c:	2100      	movne	r1, #0
 8006a6e:	bf08      	it	eq
 8006a70:	2101      	moveq	r1, #1
 8006a72:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006a76:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006a7a:	42a5      	cmp	r5, r4
 8006a7c:	d1fb      	bne.n	8006a76 <__sccl+0x1a>
 8006a7e:	b913      	cbnz	r3, 8006a86 <__sccl+0x2a>
 8006a80:	3a01      	subs	r2, #1
 8006a82:	4610      	mov	r0, r2
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	f081 0401 	eor.w	r4, r1, #1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	54c4      	strb	r4, [r0, r3]
 8006a8e:	780d      	ldrb	r5, [r1, #0]
 8006a90:	1c4a      	adds	r2, r1, #1
 8006a92:	2d2d      	cmp	r5, #45	; 0x2d
 8006a94:	d006      	beq.n	8006aa4 <__sccl+0x48>
 8006a96:	2d5d      	cmp	r5, #93	; 0x5d
 8006a98:	d0f3      	beq.n	8006a82 <__sccl+0x26>
 8006a9a:	b90d      	cbnz	r5, 8006aa0 <__sccl+0x44>
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	e7f0      	b.n	8006a82 <__sccl+0x26>
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	e7f2      	b.n	8006a8a <__sccl+0x2e>
 8006aa4:	784e      	ldrb	r6, [r1, #1]
 8006aa6:	2e5d      	cmp	r6, #93	; 0x5d
 8006aa8:	d0fa      	beq.n	8006aa0 <__sccl+0x44>
 8006aaa:	42b3      	cmp	r3, r6
 8006aac:	dcf8      	bgt.n	8006aa0 <__sccl+0x44>
 8006aae:	3102      	adds	r1, #2
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	429e      	cmp	r6, r3
 8006ab4:	54c4      	strb	r4, [r0, r3]
 8006ab6:	dcfb      	bgt.n	8006ab0 <__sccl+0x54>
 8006ab8:	e7e9      	b.n	8006a8e <__sccl+0x32>

08006aba <_strtol_l.isra.0>:
 8006aba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abe:	4680      	mov	r8, r0
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	4692      	mov	sl, r2
 8006ac4:	461f      	mov	r7, r3
 8006ac6:	468b      	mov	fp, r1
 8006ac8:	465d      	mov	r5, fp
 8006aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ad0:	f000 f94f 	bl	8006d72 <__locale_ctype_ptr_l>
 8006ad4:	4420      	add	r0, r4
 8006ad6:	7846      	ldrb	r6, [r0, #1]
 8006ad8:	f016 0608 	ands.w	r6, r6, #8
 8006adc:	d10b      	bne.n	8006af6 <_strtol_l.isra.0+0x3c>
 8006ade:	2c2d      	cmp	r4, #45	; 0x2d
 8006ae0:	d10b      	bne.n	8006afa <_strtol_l.isra.0+0x40>
 8006ae2:	2601      	movs	r6, #1
 8006ae4:	782c      	ldrb	r4, [r5, #0]
 8006ae6:	f10b 0502 	add.w	r5, fp, #2
 8006aea:	b167      	cbz	r7, 8006b06 <_strtol_l.isra.0+0x4c>
 8006aec:	2f10      	cmp	r7, #16
 8006aee:	d114      	bne.n	8006b1a <_strtol_l.isra.0+0x60>
 8006af0:	2c30      	cmp	r4, #48	; 0x30
 8006af2:	d00a      	beq.n	8006b0a <_strtol_l.isra.0+0x50>
 8006af4:	e011      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006af6:	46ab      	mov	fp, r5
 8006af8:	e7e6      	b.n	8006ac8 <_strtol_l.isra.0+0xe>
 8006afa:	2c2b      	cmp	r4, #43	; 0x2b
 8006afc:	bf04      	itt	eq
 8006afe:	782c      	ldrbeq	r4, [r5, #0]
 8006b00:	f10b 0502 	addeq.w	r5, fp, #2
 8006b04:	e7f1      	b.n	8006aea <_strtol_l.isra.0+0x30>
 8006b06:	2c30      	cmp	r4, #48	; 0x30
 8006b08:	d127      	bne.n	8006b5a <_strtol_l.isra.0+0xa0>
 8006b0a:	782b      	ldrb	r3, [r5, #0]
 8006b0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b10:	2b58      	cmp	r3, #88	; 0x58
 8006b12:	d14b      	bne.n	8006bac <_strtol_l.isra.0+0xf2>
 8006b14:	2710      	movs	r7, #16
 8006b16:	786c      	ldrb	r4, [r5, #1]
 8006b18:	3502      	adds	r5, #2
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006b22:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006b26:	2200      	movs	r2, #0
 8006b28:	fbb1 fef7 	udiv	lr, r1, r7
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006b32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d811      	bhi.n	8006b5e <_strtol_l.isra.0+0xa4>
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	42a7      	cmp	r7, r4
 8006b3e:	dd1d      	ble.n	8006b7c <_strtol_l.isra.0+0xc2>
 8006b40:	1c53      	adds	r3, r2, #1
 8006b42:	d007      	beq.n	8006b54 <_strtol_l.isra.0+0x9a>
 8006b44:	4586      	cmp	lr, r0
 8006b46:	d316      	bcc.n	8006b76 <_strtol_l.isra.0+0xbc>
 8006b48:	d101      	bne.n	8006b4e <_strtol_l.isra.0+0x94>
 8006b4a:	45a4      	cmp	ip, r4
 8006b4c:	db13      	blt.n	8006b76 <_strtol_l.isra.0+0xbc>
 8006b4e:	2201      	movs	r2, #1
 8006b50:	fb00 4007 	mla	r0, r0, r7, r4
 8006b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b58:	e7eb      	b.n	8006b32 <_strtol_l.isra.0+0x78>
 8006b5a:	270a      	movs	r7, #10
 8006b5c:	e7dd      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006b5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006b62:	2b19      	cmp	r3, #25
 8006b64:	d801      	bhi.n	8006b6a <_strtol_l.isra.0+0xb0>
 8006b66:	3c37      	subs	r4, #55	; 0x37
 8006b68:	e7e8      	b.n	8006b3c <_strtol_l.isra.0+0x82>
 8006b6a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006b6e:	2b19      	cmp	r3, #25
 8006b70:	d804      	bhi.n	8006b7c <_strtol_l.isra.0+0xc2>
 8006b72:	3c57      	subs	r4, #87	; 0x57
 8006b74:	e7e2      	b.n	8006b3c <_strtol_l.isra.0+0x82>
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	e7eb      	b.n	8006b54 <_strtol_l.isra.0+0x9a>
 8006b7c:	1c53      	adds	r3, r2, #1
 8006b7e:	d108      	bne.n	8006b92 <_strtol_l.isra.0+0xd8>
 8006b80:	2322      	movs	r3, #34	; 0x22
 8006b82:	4608      	mov	r0, r1
 8006b84:	f8c8 3000 	str.w	r3, [r8]
 8006b88:	f1ba 0f00 	cmp.w	sl, #0
 8006b8c:	d107      	bne.n	8006b9e <_strtol_l.isra.0+0xe4>
 8006b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	b106      	cbz	r6, 8006b96 <_strtol_l.isra.0+0xdc>
 8006b94:	4240      	negs	r0, r0
 8006b96:	f1ba 0f00 	cmp.w	sl, #0
 8006b9a:	d00c      	beq.n	8006bb6 <_strtol_l.isra.0+0xfc>
 8006b9c:	b122      	cbz	r2, 8006ba8 <_strtol_l.isra.0+0xee>
 8006b9e:	3d01      	subs	r5, #1
 8006ba0:	f8ca 5000 	str.w	r5, [sl]
 8006ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	464d      	mov	r5, r9
 8006baa:	e7f9      	b.n	8006ba0 <_strtol_l.isra.0+0xe6>
 8006bac:	2430      	movs	r4, #48	; 0x30
 8006bae:	2f00      	cmp	r7, #0
 8006bb0:	d1b3      	bne.n	8006b1a <_strtol_l.isra.0+0x60>
 8006bb2:	2708      	movs	r7, #8
 8006bb4:	e7b1      	b.n	8006b1a <_strtol_l.isra.0+0x60>
 8006bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006bbc <_strtol_r>:
 8006bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bbe:	4c06      	ldr	r4, [pc, #24]	; (8006bd8 <_strtol_r+0x1c>)
 8006bc0:	4d06      	ldr	r5, [pc, #24]	; (8006bdc <_strtol_r+0x20>)
 8006bc2:	6824      	ldr	r4, [r4, #0]
 8006bc4:	6a24      	ldr	r4, [r4, #32]
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	bf08      	it	eq
 8006bca:	462c      	moveq	r4, r5
 8006bcc:	9400      	str	r4, [sp, #0]
 8006bce:	f7ff ff74 	bl	8006aba <_strtol_l.isra.0>
 8006bd2:	b003      	add	sp, #12
 8006bd4:	bd30      	pop	{r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000050 	.word	0x20000050
 8006bdc:	200000b4 	.word	0x200000b4

08006be0 <_strtoul_l.isra.0>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	4680      	mov	r8, r0
 8006be6:	4689      	mov	r9, r1
 8006be8:	4692      	mov	sl, r2
 8006bea:	461e      	mov	r6, r3
 8006bec:	460f      	mov	r7, r1
 8006bee:	463d      	mov	r5, r7
 8006bf0:	9808      	ldr	r0, [sp, #32]
 8006bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf6:	f000 f8bc 	bl	8006d72 <__locale_ctype_ptr_l>
 8006bfa:	4420      	add	r0, r4
 8006bfc:	7843      	ldrb	r3, [r0, #1]
 8006bfe:	f013 0308 	ands.w	r3, r3, #8
 8006c02:	d10a      	bne.n	8006c1a <_strtoul_l.isra.0+0x3a>
 8006c04:	2c2d      	cmp	r4, #45	; 0x2d
 8006c06:	d10a      	bne.n	8006c1e <_strtoul_l.isra.0+0x3e>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	782c      	ldrb	r4, [r5, #0]
 8006c0c:	1cbd      	adds	r5, r7, #2
 8006c0e:	b15e      	cbz	r6, 8006c28 <_strtoul_l.isra.0+0x48>
 8006c10:	2e10      	cmp	r6, #16
 8006c12:	d113      	bne.n	8006c3c <_strtoul_l.isra.0+0x5c>
 8006c14:	2c30      	cmp	r4, #48	; 0x30
 8006c16:	d009      	beq.n	8006c2c <_strtoul_l.isra.0+0x4c>
 8006c18:	e010      	b.n	8006c3c <_strtoul_l.isra.0+0x5c>
 8006c1a:	462f      	mov	r7, r5
 8006c1c:	e7e7      	b.n	8006bee <_strtoul_l.isra.0+0xe>
 8006c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8006c20:	bf04      	itt	eq
 8006c22:	782c      	ldrbeq	r4, [r5, #0]
 8006c24:	1cbd      	addeq	r5, r7, #2
 8006c26:	e7f2      	b.n	8006c0e <_strtoul_l.isra.0+0x2e>
 8006c28:	2c30      	cmp	r4, #48	; 0x30
 8006c2a:	d125      	bne.n	8006c78 <_strtoul_l.isra.0+0x98>
 8006c2c:	782a      	ldrb	r2, [r5, #0]
 8006c2e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006c32:	2a58      	cmp	r2, #88	; 0x58
 8006c34:	d14a      	bne.n	8006ccc <_strtoul_l.isra.0+0xec>
 8006c36:	2610      	movs	r6, #16
 8006c38:	786c      	ldrb	r4, [r5, #1]
 8006c3a:	3502      	adds	r5, #2
 8006c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c40:	fbb1 f1f6 	udiv	r1, r1, r6
 8006c44:	2700      	movs	r7, #0
 8006c46:	fb06 fe01 	mul.w	lr, r6, r1
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	ea6f 0e0e 	mvn.w	lr, lr
 8006c50:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8006c54:	2a09      	cmp	r2, #9
 8006c56:	d811      	bhi.n	8006c7c <_strtoul_l.isra.0+0x9c>
 8006c58:	4614      	mov	r4, r2
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	dd1d      	ble.n	8006c9a <_strtoul_l.isra.0+0xba>
 8006c5e:	2f00      	cmp	r7, #0
 8006c60:	db18      	blt.n	8006c94 <_strtoul_l.isra.0+0xb4>
 8006c62:	4281      	cmp	r1, r0
 8006c64:	d316      	bcc.n	8006c94 <_strtoul_l.isra.0+0xb4>
 8006c66:	d101      	bne.n	8006c6c <_strtoul_l.isra.0+0x8c>
 8006c68:	45a6      	cmp	lr, r4
 8006c6a:	db13      	blt.n	8006c94 <_strtoul_l.isra.0+0xb4>
 8006c6c:	2701      	movs	r7, #1
 8006c6e:	fb00 4006 	mla	r0, r0, r6, r4
 8006c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c76:	e7eb      	b.n	8006c50 <_strtoul_l.isra.0+0x70>
 8006c78:	260a      	movs	r6, #10
 8006c7a:	e7df      	b.n	8006c3c <_strtoul_l.isra.0+0x5c>
 8006c7c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8006c80:	2a19      	cmp	r2, #25
 8006c82:	d801      	bhi.n	8006c88 <_strtoul_l.isra.0+0xa8>
 8006c84:	3c37      	subs	r4, #55	; 0x37
 8006c86:	e7e8      	b.n	8006c5a <_strtoul_l.isra.0+0x7a>
 8006c88:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8006c8c:	2a19      	cmp	r2, #25
 8006c8e:	d804      	bhi.n	8006c9a <_strtoul_l.isra.0+0xba>
 8006c90:	3c57      	subs	r4, #87	; 0x57
 8006c92:	e7e2      	b.n	8006c5a <_strtoul_l.isra.0+0x7a>
 8006c94:	f04f 37ff 	mov.w	r7, #4294967295
 8006c98:	e7eb      	b.n	8006c72 <_strtoul_l.isra.0+0x92>
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	da09      	bge.n	8006cb2 <_strtoul_l.isra.0+0xd2>
 8006c9e:	2322      	movs	r3, #34	; 0x22
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	f8c8 3000 	str.w	r3, [r8]
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d107      	bne.n	8006cbe <_strtoul_l.isra.0+0xde>
 8006cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb2:	b103      	cbz	r3, 8006cb6 <_strtoul_l.isra.0+0xd6>
 8006cb4:	4240      	negs	r0, r0
 8006cb6:	f1ba 0f00 	cmp.w	sl, #0
 8006cba:	d00c      	beq.n	8006cd6 <_strtoul_l.isra.0+0xf6>
 8006cbc:	b127      	cbz	r7, 8006cc8 <_strtoul_l.isra.0+0xe8>
 8006cbe:	3d01      	subs	r5, #1
 8006cc0:	f8ca 5000 	str.w	r5, [sl]
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	464d      	mov	r5, r9
 8006cca:	e7f9      	b.n	8006cc0 <_strtoul_l.isra.0+0xe0>
 8006ccc:	2430      	movs	r4, #48	; 0x30
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d1b4      	bne.n	8006c3c <_strtoul_l.isra.0+0x5c>
 8006cd2:	2608      	movs	r6, #8
 8006cd4:	e7b2      	b.n	8006c3c <_strtoul_l.isra.0+0x5c>
 8006cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006cdc <_strtoul_r>:
 8006cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cde:	4c06      	ldr	r4, [pc, #24]	; (8006cf8 <_strtoul_r+0x1c>)
 8006ce0:	4d06      	ldr	r5, [pc, #24]	; (8006cfc <_strtoul_r+0x20>)
 8006ce2:	6824      	ldr	r4, [r4, #0]
 8006ce4:	6a24      	ldr	r4, [r4, #32]
 8006ce6:	2c00      	cmp	r4, #0
 8006ce8:	bf08      	it	eq
 8006cea:	462c      	moveq	r4, r5
 8006cec:	9400      	str	r4, [sp, #0]
 8006cee:	f7ff ff77 	bl	8006be0 <_strtoul_l.isra.0>
 8006cf2:	b003      	add	sp, #12
 8006cf4:	bd30      	pop	{r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000050 	.word	0x20000050
 8006cfc:	200000b4 	.word	0x200000b4

08006d00 <__submore>:
 8006d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	d11c      	bne.n	8006d4a <__submore+0x4a>
 8006d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d14:	f000 f8c4 	bl	8006ea0 <_malloc_r>
 8006d18:	b918      	cbnz	r0, 8006d22 <__submore+0x22>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d26:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006d3a:	7043      	strb	r3, [r0, #1]
 8006d3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d40:	7003      	strb	r3, [r0, #0]
 8006d42:	6020      	str	r0, [r4, #0]
 8006d44:	2000      	movs	r0, #0
 8006d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d4c:	0077      	lsls	r7, r6, #1
 8006d4e:	463a      	mov	r2, r7
 8006d50:	f000 f904 	bl	8006f5c <_realloc_r>
 8006d54:	4605      	mov	r5, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d0df      	beq.n	8006d1a <__submore+0x1a>
 8006d5a:	eb00 0806 	add.w	r8, r0, r6
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4632      	mov	r2, r6
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7ff f826 	bl	8005db4 <memcpy>
 8006d68:	f8c4 8000 	str.w	r8, [r4]
 8006d6c:	6365      	str	r5, [r4, #52]	; 0x34
 8006d6e:	63a7      	str	r7, [r4, #56]	; 0x38
 8006d70:	e7e8      	b.n	8006d44 <__submore+0x44>

08006d72 <__locale_ctype_ptr_l>:
 8006d72:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006d76:	4770      	bx	lr

08006d78 <__locale_ctype_ptr>:
 8006d78:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <__locale_ctype_ptr+0x14>)
 8006d7a:	4a05      	ldr	r2, [pc, #20]	; (8006d90 <__locale_ctype_ptr+0x18>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf08      	it	eq
 8006d84:	4613      	moveq	r3, r2
 8006d86:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006d8a:	4770      	bx	lr
 8006d8c:	20000050 	.word	0x20000050
 8006d90:	200000b4 	.word	0x200000b4

08006d94 <__ascii_mbtowc>:
 8006d94:	b082      	sub	sp, #8
 8006d96:	b901      	cbnz	r1, 8006d9a <__ascii_mbtowc+0x6>
 8006d98:	a901      	add	r1, sp, #4
 8006d9a:	b142      	cbz	r2, 8006dae <__ascii_mbtowc+0x1a>
 8006d9c:	b14b      	cbz	r3, 8006db2 <__ascii_mbtowc+0x1e>
 8006d9e:	7813      	ldrb	r3, [r2, #0]
 8006da0:	600b      	str	r3, [r1, #0]
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	1c10      	adds	r0, r2, #0
 8006da6:	bf18      	it	ne
 8006da8:	2001      	movne	r0, #1
 8006daa:	b002      	add	sp, #8
 8006dac:	4770      	bx	lr
 8006dae:	4610      	mov	r0, r2
 8006db0:	e7fb      	b.n	8006daa <__ascii_mbtowc+0x16>
 8006db2:	f06f 0001 	mvn.w	r0, #1
 8006db6:	e7f8      	b.n	8006daa <__ascii_mbtowc+0x16>

08006db8 <memchr>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	b2c9      	uxtb	r1, r1
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4290      	cmp	r0, r2
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	d101      	bne.n	8006dc8 <memchr+0x10>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	781c      	ldrb	r4, [r3, #0]
 8006dca:	3001      	adds	r0, #1
 8006dcc:	428c      	cmp	r4, r1
 8006dce:	d1f6      	bne.n	8006dbe <memchr+0x6>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <memmove>:
 8006dd4:	4288      	cmp	r0, r1
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	eb01 0302 	add.w	r3, r1, r2
 8006ddc:	d803      	bhi.n	8006de6 <memmove+0x12>
 8006dde:	1e42      	subs	r2, r0, #1
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d10c      	bne.n	8006dfe <memmove+0x2a>
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	4298      	cmp	r0, r3
 8006de8:	d2f9      	bcs.n	8006dde <memmove+0xa>
 8006dea:	1881      	adds	r1, r0, r2
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	42d3      	cmn	r3, r2
 8006df0:	d100      	bne.n	8006df4 <memmove+0x20>
 8006df2:	bd10      	pop	{r4, pc}
 8006df4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006df8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006dfc:	e7f7      	b.n	8006dee <memmove+0x1a>
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e06:	e7eb      	b.n	8006de0 <memmove+0xc>

08006e08 <_free_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d043      	beq.n	8006e98 <_free_r+0x90>
 8006e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e14:	1f0c      	subs	r4, r1, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfb8      	it	lt
 8006e1a:	18e4      	addlt	r4, r4, r3
 8006e1c:	f000 f8e1 	bl	8006fe2 <__malloc_lock>
 8006e20:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <_free_r+0x94>)
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	4610      	mov	r0, r2
 8006e26:	b933      	cbnz	r3, 8006e36 <_free_r+0x2e>
 8006e28:	6063      	str	r3, [r4, #4]
 8006e2a:	6014      	str	r4, [r2, #0]
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e32:	f000 b8d7 	b.w	8006fe4 <__malloc_unlock>
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	d90b      	bls.n	8006e52 <_free_r+0x4a>
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	1862      	adds	r2, r4, r1
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	bf01      	itttt	eq
 8006e42:	681a      	ldreq	r2, [r3, #0]
 8006e44:	685b      	ldreq	r3, [r3, #4]
 8006e46:	1852      	addeq	r2, r2, r1
 8006e48:	6022      	streq	r2, [r4, #0]
 8006e4a:	6063      	str	r3, [r4, #4]
 8006e4c:	6004      	str	r4, [r0, #0]
 8006e4e:	e7ed      	b.n	8006e2c <_free_r+0x24>
 8006e50:	4613      	mov	r3, r2
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	b10a      	cbz	r2, 8006e5a <_free_r+0x52>
 8006e56:	42a2      	cmp	r2, r4
 8006e58:	d9fa      	bls.n	8006e50 <_free_r+0x48>
 8006e5a:	6819      	ldr	r1, [r3, #0]
 8006e5c:	1858      	adds	r0, r3, r1
 8006e5e:	42a0      	cmp	r0, r4
 8006e60:	d10b      	bne.n	8006e7a <_free_r+0x72>
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	4401      	add	r1, r0
 8006e66:	1858      	adds	r0, r3, r1
 8006e68:	4282      	cmp	r2, r0
 8006e6a:	6019      	str	r1, [r3, #0]
 8006e6c:	d1de      	bne.n	8006e2c <_free_r+0x24>
 8006e6e:	6810      	ldr	r0, [r2, #0]
 8006e70:	6852      	ldr	r2, [r2, #4]
 8006e72:	4401      	add	r1, r0
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	605a      	str	r2, [r3, #4]
 8006e78:	e7d8      	b.n	8006e2c <_free_r+0x24>
 8006e7a:	d902      	bls.n	8006e82 <_free_r+0x7a>
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	e7d4      	b.n	8006e2c <_free_r+0x24>
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	1821      	adds	r1, r4, r0
 8006e86:	428a      	cmp	r2, r1
 8006e88:	bf01      	itttt	eq
 8006e8a:	6811      	ldreq	r1, [r2, #0]
 8006e8c:	6852      	ldreq	r2, [r2, #4]
 8006e8e:	1809      	addeq	r1, r1, r0
 8006e90:	6021      	streq	r1, [r4, #0]
 8006e92:	6062      	str	r2, [r4, #4]
 8006e94:	605c      	str	r4, [r3, #4]
 8006e96:	e7c9      	b.n	8006e2c <_free_r+0x24>
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200054e8 	.word	0x200054e8

08006ea0 <_malloc_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	1ccd      	adds	r5, r1, #3
 8006ea4:	f025 0503 	bic.w	r5, r5, #3
 8006ea8:	3508      	adds	r5, #8
 8006eaa:	2d0c      	cmp	r5, #12
 8006eac:	bf38      	it	cc
 8006eae:	250c      	movcc	r5, #12
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	db01      	blt.n	8006eba <_malloc_r+0x1a>
 8006eb6:	42a9      	cmp	r1, r5
 8006eb8:	d903      	bls.n	8006ec2 <_malloc_r+0x22>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	6033      	str	r3, [r6, #0]
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	f000 f88e 	bl	8006fe2 <__malloc_lock>
 8006ec6:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <_malloc_r+0xb4>)
 8006ec8:	6814      	ldr	r4, [r2, #0]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	b991      	cbnz	r1, 8006ef4 <_malloc_r+0x54>
 8006ece:	4c22      	ldr	r4, [pc, #136]	; (8006f58 <_malloc_r+0xb8>)
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	b91b      	cbnz	r3, 8006edc <_malloc_r+0x3c>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f867 	bl	8006fa8 <_sbrk_r>
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f862 	bl	8006fa8 <_sbrk_r>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d126      	bne.n	8006f36 <_malloc_r+0x96>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	4630      	mov	r0, r6
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	f000 f879 	bl	8006fe4 <__malloc_unlock>
 8006ef2:	e7e4      	b.n	8006ebe <_malloc_r+0x1e>
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1b5b      	subs	r3, r3, r5
 8006ef8:	d41a      	bmi.n	8006f30 <_malloc_r+0x90>
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	d90f      	bls.n	8006f1e <_malloc_r+0x7e>
 8006efe:	600b      	str	r3, [r1, #0]
 8006f00:	18cc      	adds	r4, r1, r3
 8006f02:	50cd      	str	r5, [r1, r3]
 8006f04:	4630      	mov	r0, r6
 8006f06:	f000 f86d 	bl	8006fe4 <__malloc_unlock>
 8006f0a:	f104 000b 	add.w	r0, r4, #11
 8006f0e:	1d23      	adds	r3, r4, #4
 8006f10:	f020 0007 	bic.w	r0, r0, #7
 8006f14:	1ac3      	subs	r3, r0, r3
 8006f16:	d01b      	beq.n	8006f50 <_malloc_r+0xb0>
 8006f18:	425a      	negs	r2, r3
 8006f1a:	50e2      	str	r2, [r4, r3]
 8006f1c:	bd70      	pop	{r4, r5, r6, pc}
 8006f1e:	428c      	cmp	r4, r1
 8006f20:	bf0b      	itete	eq
 8006f22:	6863      	ldreq	r3, [r4, #4]
 8006f24:	684b      	ldrne	r3, [r1, #4]
 8006f26:	6013      	streq	r3, [r2, #0]
 8006f28:	6063      	strne	r3, [r4, #4]
 8006f2a:	bf18      	it	ne
 8006f2c:	460c      	movne	r4, r1
 8006f2e:	e7e9      	b.n	8006f04 <_malloc_r+0x64>
 8006f30:	460c      	mov	r4, r1
 8006f32:	6849      	ldr	r1, [r1, #4]
 8006f34:	e7ca      	b.n	8006ecc <_malloc_r+0x2c>
 8006f36:	1cc4      	adds	r4, r0, #3
 8006f38:	f024 0403 	bic.w	r4, r4, #3
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d005      	beq.n	8006f4c <_malloc_r+0xac>
 8006f40:	1a21      	subs	r1, r4, r0
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 f830 	bl	8006fa8 <_sbrk_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d0cd      	beq.n	8006ee8 <_malloc_r+0x48>
 8006f4c:	6025      	str	r5, [r4, #0]
 8006f4e:	e7d9      	b.n	8006f04 <_malloc_r+0x64>
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	bf00      	nop
 8006f54:	200054e8 	.word	0x200054e8
 8006f58:	200054ec 	.word	0x200054ec

08006f5c <_realloc_r>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	4607      	mov	r7, r0
 8006f60:	4614      	mov	r4, r2
 8006f62:	460e      	mov	r6, r1
 8006f64:	b921      	cbnz	r1, 8006f70 <_realloc_r+0x14>
 8006f66:	4611      	mov	r1, r2
 8006f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f6c:	f7ff bf98 	b.w	8006ea0 <_malloc_r>
 8006f70:	b922      	cbnz	r2, 8006f7c <_realloc_r+0x20>
 8006f72:	f7ff ff49 	bl	8006e08 <_free_r>
 8006f76:	4625      	mov	r5, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	f000 f833 	bl	8006fe6 <_malloc_usable_size_r>
 8006f80:	4284      	cmp	r4, r0
 8006f82:	d90f      	bls.n	8006fa4 <_realloc_r+0x48>
 8006f84:	4621      	mov	r1, r4
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7ff ff8a 	bl	8006ea0 <_malloc_r>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0f2      	beq.n	8006f78 <_realloc_r+0x1c>
 8006f92:	4631      	mov	r1, r6
 8006f94:	4622      	mov	r2, r4
 8006f96:	f7fe ff0d 	bl	8005db4 <memcpy>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f7ff ff33 	bl	8006e08 <_free_r>
 8006fa2:	e7e9      	b.n	8006f78 <_realloc_r+0x1c>
 8006fa4:	4635      	mov	r5, r6
 8006fa6:	e7e7      	b.n	8006f78 <_realloc_r+0x1c>

08006fa8 <_sbrk_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	2300      	movs	r3, #0
 8006fac:	4c05      	ldr	r4, [pc, #20]	; (8006fc4 <_sbrk_r+0x1c>)
 8006fae:	4605      	mov	r5, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	f7fe fe8e 	bl	8005cd4 <_sbrk>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_sbrk_r+0x1a>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_sbrk_r+0x1a>
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	200056a8 	.word	0x200056a8

08006fc8 <__ascii_wctomb>:
 8006fc8:	b149      	cbz	r1, 8006fde <__ascii_wctomb+0x16>
 8006fca:	2aff      	cmp	r2, #255	; 0xff
 8006fcc:	bf8b      	itete	hi
 8006fce:	238a      	movhi	r3, #138	; 0x8a
 8006fd0:	700a      	strbls	r2, [r1, #0]
 8006fd2:	6003      	strhi	r3, [r0, #0]
 8006fd4:	2001      	movls	r0, #1
 8006fd6:	bf88      	it	hi
 8006fd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fdc:	4770      	bx	lr
 8006fde:	4608      	mov	r0, r1
 8006fe0:	4770      	bx	lr

08006fe2 <__malloc_lock>:
 8006fe2:	4770      	bx	lr

08006fe4 <__malloc_unlock>:
 8006fe4:	4770      	bx	lr

08006fe6 <_malloc_usable_size_r>:
 8006fe6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f1a0 0004 	sub.w	r0, r0, #4
 8006ff0:	bfbc      	itt	lt
 8006ff2:	580b      	ldrlt	r3, [r1, r0]
 8006ff4:	18c0      	addlt	r0, r0, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
